
build/bin/firmware.elf:     file format elf32-littlearm
build/bin/firmware.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0800c2f9

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x000211f8 memsz 0x000211f8 flags rwx
    LOAD off    0x00040000 vaddr 0x20000000 paddr 0x080211f8 align 2**16
         filesz 0x00001960 memsz 0x0000c048 flags rw-
    LOAD off    0x0004c048 vaddr 0x2000c048 paddr 0x08022b58 align 2**16
         filesz 0x00000000 memsz 0x00002000 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .isr_vector       00000298  08000000  08000000  00010000  2**0  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text             0000dfdc  080002a0  080002a0  000102a0  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00012f74  0800e27c  0800e27c  0001e27c  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000004  080211f0  080211f0  000311f0  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array       00000004  080211f4  080211f4  000311f4  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .data             000000a0  20000000  080211f8  00040000  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .RxArraySection   00001800  200000a0  08021298  000400a0  2**0  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection  00000060  200018a0  08022a98  000418a0  2**2  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection  00000060  20001900  08022af8  00041900  2**2  CONTENTS, ALLOC, LOAD, DATA
  9 .bss              0000a6e8  20001960  08022b58  00041960  2**2  ALLOC
 10 ._user_heap_stack 00002000  2000c048  08022b58  0004c048  2**0  ALLOC
 11 .ARM.attributes   0000002e  00000000  00000000  00041960  2**0  CONTENTS, READONLY
 12 .debug_info       00061ed1  00000000  00000000  0004198e  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev     0000c4bf  00000000  00000000  000a385f  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc        0001fa41  00000000  00000000  000afd1e  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges    00001ee8  00000000  00000000  000cf760  2**3  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges     000030e0  00000000  00000000  000d1648  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_line       0002c353  00000000  00000000  000d4728  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_str        0000d5b7  00000000  00000000  00100a7b  2**0  CONTENTS, READONLY, DEBUGGING
 19 .comment          00000076  00000000  00000000  0010e032  2**0  CONTENTS, READONLY
 20 .debug_frame      0000655c  00000000  00000000  0010e0a8  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080002a0 l    d  .text	00000000 .text
0800e27c l    d  .rodata	00000000 .rodata
080211f0 l    d  .init_array	00000000 .init_array
080211f4 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
200000a0 l    d  .RxArraySection	00000000 .RxArraySection
200018a0 l    d  .RxDecripSection	00000000 .RxDecripSection
20001900 l    d  .TxDecripSection	00000000 .TxDecripSection
20001960 l    d  .bss	00000000 .bss
2000c048 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 build/obj//Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.o
0800c308 l       .text	00000000 LoopCopyDataInit
0800c300 l       .text	00000000 CopyDataInit
0800c31c l       .text	00000000 LoopFillZerobss
0800c316 l       .text	00000000 FillZerobss
0800c348 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
0800e264 l     O .text	00000000 __EH_FRAME_BEGIN__
080002a0 l     F .text	00000000 __do_global_dtors_aux
20001960 l       .bss	00000001 completed.10192
080211f4 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080002c4 l     F .text	00000000 frame_dummy
20001964 l       .bss	00000018 object.10197
080211f0 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 heap_4.c
080003b0 l     F .text	00000048 prvInsertBlockIntoFreeList
20001980 l     O .bss	00006400 ucHeap
2000197c l     O .bss	00000004 pxEnd
20007d80 l     O .bss	00000004 xBlockAllocatedBit
20007d84 l     O .bss	00000004 xFreeBytesRemaining
20007d88 l     O .bss	00000004 xMinimumEverFreeBytesRemaining
20007d8c l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 cmsis_os.c
00000000 l    df *ABS*	00000000 port.c
08000808 l     F .text	00000022 prvPortStartFirstTask
08000830 l     F .text	0000000e vPortEnableVFP
08000844 l     F .text	00000040 prvTaskExitError
080008d0 l       .text	00000000 pxCurrentTCBConst2
080009a0 l       .text	00000000 pxCurrentTCBConst
20007d94 l     O .bss	00000001 ucMaxSysCallPriority
20007d98 l     O .bss	00000004 ulMaxPRIGROUPValue
20000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 ethernet.c
00000000 l    df *ABS*	00000000 sys_arch.c
00000000 l    df *ABS*	00000000 lan8742.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal_tim_ex.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal_tim.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal_rcc_ex.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal_eth.c
08001e68 l     F .text	000001ba ETH_SetMACConfig
08002024 l     F .text	00000090 ETH_SetDMAConfig
080020b4 l     F .text	000002e8 ETH_Prepare_Tx_Descriptors
08002b34 l     F .text	00000078 ETH_MAC_MDIO_ClkConfig
00000000 l    df *ABS*	00000000 stm32h7xx_hal.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal_pwr_ex.c
00000000 l    df *ABS*	00000000 fs.c
0800e39c l     O .rodata	00000529 data__404_html
0800e8c5 l     O .rodata	00001377 data__STM32H7xx_files_ST_gif
0800fc3c l     O .rodata	00000a82 data__STM32H7xx_files_logo_jpg
080106be l     O .rodata	00009f33 data__STM32H7xx_files_stm32_jpg
0801a5f1 l     O .rodata	00003d7b data__STM32H7xx_html
00000000 l    df *ABS*	00000000 ip4.c
20007d9c l     O .bss	00000002 ip_id
00000000 l    df *ABS*	00000000 ip4_frag.c
080031fc l     F .text	00000044 ip_reass_dequeue_datagram
08003240 l     F .text	000000e8 ip_reass_free_complete_datagram
08003328 l     F .text	00000078 ip_reass_remove_oldest_datagram
080033a0 l     F .text	0000002c ip_frag_free_pbuf_custom_ref
080033cc l     F .text	00000034 ipfrag_free_pbuf_custom
20007d9e l     O .bss	00000002 ip_reass_pbufcount
20007da0 l     O .bss	00000004 reassdatagrams
00000000 l    df *ABS*	00000000 etharp.c
08003938 l     F .text	00000028 etharp_free_entry
08003960 l     F .text	000000d8 etharp_raw
08003a38 l     F .text	00000110 etharp_find_entry.isra.0
08003d38 l     F .text	000000b0 etharp_output_to_arp_index
20007da4 l     O .bss	000000f0 arp_table
20007e94 l     O .bss	00000001 etharp_cached_entry
00000000 l    df *ABS*	00000000 icmp.c
08004038 l     F .text	000000a0 icmp_send_response.isra.0
00000000 l    df *ABS*	00000000 ip4_addr.c
00000000 l    df *ABS*	00000000 dhcp.c
08004260 l     F .text	00000010 dhcp_set_state
08004270 l     F .text	00000044 dhcp_option_short
080042b4 l     F .text	00000048 dhcp_option
080042fc l     F .text	00000038 dhcp_option_byte
08004334 l     F .text	0000005c dhcp_option_long
08004390 l     F .text	000001bc dhcp_create_msg
0800454c l     F .text	0000002a dhcp_check
08004578 l     F .text	0000010c dhcp_bind
08004684 l     F .text	00000074 dhcp_inc_pcb_refcount
08004afc l     F .text	000003c4 dhcp_recv
080046f8 l     F .text	00000078 dhcp_option_trailer
08004770 l     F .text	0000006c dhcp_handle_ack.isra.1
080047dc l     F .text	00000060 dhcp_delete_msg
0800483c l     F .text	000000c0 dhcp_discover
080048fc l     F .text	000000ec dhcp_select
080049e8 l     F .text	000000d4 dhcp_reboot
08004abc l     F .text	00000040 dhcp_dec_pcb_refcount
20007e98 l     O .bss	00000004 dhcp_pcb
20007e9c l     O .bss	00000001 dhcp_pcb_refcount
20007ea0 l     O .bss	00000004 xid.8356
00000000 l    df *ABS*	00000000 tcpip.c
080053f0 l     F .text	00000098 tcpip_thread
20007ea4 l     O .bss	00000004 mbox
20007ea8 l     O .bss	00000004 tcpip_init_done
20007eac l     O .bss	00000004 tcpip_init_done_arg
00000000 l    df *ABS*	00000000 netbuf.c
00000000 l    df *ABS*	00000000 api_lib.c
08005618 l     F .text	00000014 netconn_apimsg
0800562c l     F .text	00000044 netconn_close_shutdown
08005670 l     F .text	00000124 netconn_recv_data
00000000 l    df *ABS*	00000000 api_msg.c
08005ad4 l     F .text	000000b0 recv_udp
08005b84 l     F .text	00000044 setup_tcp
08006148 l     F .text	000000c4 recv_tcp
0800620c l     F .text	00000070 sent_tcp
080060cc l     F .text	0000007c poll_tcp
08005bc8 l     F .text	00000128 err_tcp
08005cf0 l     F .text	000001e0 lwip_netconn_do_writemore
08005ed0 l     F .text	000001fc lwip_netconn_do_close_internal
080063f4 l     F .text	000000a0 netconn_drain
08006494 l     F .text	000000dc accept_function
00000000 l    df *ABS*	00000000 stm32h7xx_nucleo_144.c
00000000 l    df *ABS*	00000000 queue.c
08006aa4 l     F .text	00000016 prvIsQueueEmpty
08006aba l     F .text	0000006a prvCopyDataToQueue
08006b24 l     F .text	0000002a prvCopyDataFromQueue
08006b4e l     F .text	00000070 prvUnlockQueue
00000000 l    df *ABS*	00000000 tasks.c
080073c0 l     F .text	00000024 prvResetNextTaskUnblockTime
080073e4 l     F .text	00000070 prvAddCurrentTaskToDelayedList.isra.2
08007454 l     F .text	0000006c prvIdleTask
08007cf0 l     F .text	00000058 prvListTasksWithinSingleList
20007eb4 l     O .bss	00000004 pxDelayedTaskList
20007eb8 l     O .bss	00000004 pxOverflowDelayedTaskList
20007ebc l     O .bss	0000008c pxReadyTasksLists
20007f48 l     O .bss	00000004 uxCurrentNumberOfTasks
20007f4c l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
20007f50 l     O .bss	00000004 uxPendedTicks
20007f54 l     O .bss	00000004 uxSchedulerSuspended
20007f58 l     O .bss	00000004 uxTaskNumber
20007f5c l     O .bss	00000004 uxTopReadyPriority
20007f60 l     O .bss	00000014 xDelayedTaskList1
20007f74 l     O .bss	00000014 xDelayedTaskList2
20007f88 l     O .bss	00000004 xIdleTaskHandle
20007f8c l     O .bss	00000004 xNextTaskUnblockTime
20007f90 l     O .bss	00000004 xNumOfOverflows
20007f94 l     O .bss	00000014 xPendingReadyList
20007fa8 l     O .bss	00000004 xSchedulerRunning
20007fac l     O .bss	00000014 xTasksWaitingTermination
20007fc0 l     O .bss	00000004 xTickCount
20007fc4 l     O .bss	00000004 xYieldPending
0801f4f2 l     O .rodata	00000005 CSWTCH.149
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 tcp_out.c
08008158 l     F .text	00000074 tcp_pbuf_prealloc
080081cc l     F .text	000000b8 tcp_create_segment
08008284 l     F .text	00000078 tcp_output_alloc_header.constprop.0
00000000 l    df *ABS*	00000000 inet_chksum.c
00000000 l    df *ABS*	00000000 tcp.c
08008fe0 l     F .text	00000054 tcp_new_port
08009034 l     F .text	00000060 tcp_close_shutdown_fin
08009bc6 l     F .text	0000000e tcp_accept_null
08009804 l     F .text	0000014c tcp_close_shutdown
08009bd4 l     F .text	0000001c tcp_netif_ip_addr_changed_pcblist.isra.4
08009bf0 l     F .text	0000003c tcp_kill_state
20007fc8 l     O .bss	00000001 tcp_timer
20007fc9 l     O .bss	00000001 tcp_timer_ctr
20000018 l     O .data	00000004 iss.8430
2000001c l     O .data	00000002 tcp_port
0801f95f l     O .rodata	0000000d tcp_backoff
0801faa5 l     O .rodata	00000007 tcp_persist_backoff
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 udp.c
2000001e l     O .data	00000002 udp_port
00000000 l    df *ABS*	00000000 netif.c
0800a194 l     F .text	00000012 netif_issue_reports.part.0
20007fca l     O .bss	00000001 netif_num
00000000 l    df *ABS*	00000000 mem.c
20007fcc l     O .bss	00000004 lfree
20007fd0 l     O .bss	00000004 mem_mutex
20007fd4 l     O .bss	00000004 ram
20007fd8 l     O .bss	00000004 ram_end
00000000 l    df *ABS*	00000000 def.c
00000000 l    df *ABS*	00000000 pbuf.c
0800a77c l     F .text	0000009c pbuf_header_impl
0801fff8 l     O .rodata	00000005 CSWTCH.15
0801fff8 l     O .rodata	00000005 CSWTCH.14
00000000 l    df *ABS*	00000000 timeouts.c
0800af18 l     F .text	00000038 tcpip_tcp_timer
0800afa4 l     F .text	0000001c cyclic_timer
20007fdc l     O .bss	00000004 next_timeout
20007fe0 l     O .bss	00000004 tcpip_tcp_timer_active
20007fe4 l     O .bss	00000004 timeouts_last_time
00000000 l    df *ABS*	00000000 tcp_in.c
0800b06c l     F .text	000005e2 tcp_receive
0800b650 l     F .text	00000040 tcp_getoptbyte
0800b690 l     F .text	0000007c tcp_parseopt.isra.1.part.2
0800b70c l     F .text	00000040 tcp_input_delayed_close
20007fe8 l     O .bss	00000004 ackno
20007fec l     O .bss	00000001 flags
20007ff0 l     O .bss	00000010 inseg
20008000 l     O .bss	00000002 recv_acked
20008004 l     O .bss	00000004 recv_data
20008008 l     O .bss	00000001 recv_flags
2000800c l     O .bss	00000004 seqno
20008010 l     O .bss	00000002 tcp_optidx
20008014 l     O .bss	00000004 tcphdr
20008018 l     O .bss	00000002 tcphdr_opt1len
2000801c l     O .bss	00000004 tcphdr_opt2
20008020 l     O .bss	00000002 tcphdr_optlen
20008022 l     O .bss	00000002 tcplen
00000000 l    df *ABS*	00000000 memp.c
0800c17c l     F .text	0000003c do_memp_malloc_pool.isra.0
0800c1b8 l     F .text	00000038 do_memp_free_pool.isra.1
20008024 l     O .bss	00000004 memp_tab_FRAG_PBUF
20008028 l     O .bss	00000004 memp_tab_NETBUF
2000802c l     O .bss	00000004 memp_tab_NETCONN
20008030 l     O .bss	00000004 memp_tab_PBUF
20008034 l     O .bss	00000004 memp_tab_PBUF_POOL
20008038 l     O .bss	00000004 memp_tab_REASSDATA
2000803c l     O .bss	00000004 memp_tab_SYS_TIMEOUT
20008040 l     O .bss	00000004 memp_tab_TCPIP_MSG_API
20008044 l     O .bss	00000004 memp_tab_TCPIP_MSG_INPKT
20008048 l     O .bss	00000004 memp_tab_TCP_PCB
2000804c l     O .bss	00000004 memp_tab_TCP_PCB_LISTEN
20008050 l     O .bss	00000004 memp_tab_TCP_SEG
20008054 l     O .bss	00000004 memp_tab_UDP_PCB
00000000 l    df *ABS*	00000000 syscalls.c
20008058 l     O .bss	00000004 heap_end.7975
00000000 l    df *ABS*	00000000 httpserver_netconn.c
0800c4ac l     F .text	00000154 http_server_netconn_thread
080209fa l     O .rodata	0000064a PAGE_START
00000000 l    df *ABS*	00000000 stm32h7xx_hal_timebase_tim.c
00000000 l    df *ABS*	00000000 app_ethernet.c
00000000 l    df *ABS*	00000000 system_stm32h7xx.c
00000000 l    df *ABS*	00000000 ethernetif.c
0800c7e0 l     F .text	0000005c low_level_output
0800c8b8 l     F .text	000000bc ethernetif_input
20008068 l     O .bss	00000004 memp_tab_RX_POOL
080210f6 l     O .rodata	00000006 CSWTCH.13
080210fc l     O .rodata	00000006 CSWTCH.14
08021102 l     O .rodata	00000008 CSWTCH.15
0802110a l     O .rodata	00000008 CSWTCH.16
00000000 l    df *ABS*	00000000 main.c
0800ccb4 l     F .text	00000088 StartThread
00000000 l    df *ABS*	00000000 stm32h7xx_it.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 findfp.c
0800d0c8 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
0800d6c0 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 /Users/jared3701/Documents/git_repo/STM32/tools/gcc-arm-none-eabi-8-2019-q3-update/bin/../lib/gcc/arm-none-eabi/8.3.1/thumb/v7e-m+dp/hard/crti.o
00000000 l    df *ABS*	00000000 /Users/jared3701/Documents/git_repo/STM32/tools/gcc-arm-none-eabi-8-2019-q3-update/bin/../lib/gcc/arm-none-eabi/8.3.1/thumb/v7e-m+dp/hard/crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000040 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 ip.c
00000000 l    df *ABS*	00000000 
080211f4 l       .init_array	00000000 __init_array_end
080211f0 l       .init_array	00000000 __preinit_array_end
080211f0 l       .init_array	00000000 __init_array_start
080211f0 l       .init_array	00000000 __preinit_array_start
0800c348  w    F .text	00000002 RTC_Alarm_IRQHandler
0800e254 g     F .text	00000010 _malloc_usable_size_r
0800c348  w    F .text	00000002 EXTI2_IRQHandler
08008fd4 g     F .text	0000000c inet_chksum
080026f0 g     F .text	00000038 HAL_ETH_GetRxDataLength
080007ec g     F .text	0000000a osThreadList
0800c348  w    F .text	00000002 TIM8_CC_IRQHandler
0800aaf8 g     F .text	000000e0 pbuf_realloc
0800e234 g     F .text	00000020 _isatty_r
0800d094 g     F .text	00000010 strcpy
08009d40 g     F .text	00000018 tcp_next_iss
080007f6 g     F .text	0000000e osMessageWaiting
080006b8 g     F .text	0000004c osSemaphoreWait
080091dc g     F .text	00000058 tcp_update_rcv_ann_wnd
0800c348  w    F .text	00000002 HRTIM1_Master_IRQHandler
0802080c g     O .rodata	0000000c memp_NETBUF
0800e068 g     F .text	00000024 _lseek_r
0800cefa g     F .text	00000002 DebugMon_Handler
2000810c g     O .bss	00000004 netif_list
0800c348  w    F .text	00000002 UART8_IRQHandler
080027aa  w    F .text	00000002 HAL_ETH_PMTCallback
20008064 g     O .bss	00000004 RxPktSemaphore
0800c348  w    F .text	00000002 SPI4_IRQHandler
08008ce4 g     F .text	000000b4 tcp_rst
08000918 g     F .text	00000028 vPortExitCritical
08009d78 g     F .text	0000004c tcp_netif_ip_addr_changed
080066a0 g     F .text	00000060 lwip_netconn_do_bind
08003cb8 g     F .text	0000002c etharp_request
0800637c g     F .text	00000078 netconn_free
0800cf9c g     F .text	00000030 printf
080050a4 g     F .text	000000bc dhcp_start
0800c1f0 g     F .text	00000026 memp_init_pool
080027a6  w    F .text	00000002 HAL_ETH_DMAErrorCallback
2000c03c g     O .bss	00000001 __lock___atexit_recursive_mutex
0800180c g     F .text	00000024 HAL_RCC_GetPCLK1Freq
08009340 g     F .text	00000030 tcp_err
0801e8dc g     O .rodata	00000004 ip_addr_any
0800c348  w    F .text	00000002 TIM1_CC_IRQHandler
08001a90 g     F .text	00000064 HAL_NVIC_SetPriority
08004ec0 g     F .text	0000002c dhcp_network_changed
0800c348  w    F .text	00000002 BDMA_Channel6_IRQHandler
0800dcf2 g     F .text	00000024 __sseek
0800d178 g     F .text	00000070 __sinit
0800a118 g     F .text	00000030 udp_remove
0800c348  w    F .text	00000002 DMA2_Stream5_IRQHandler
08007c8c g     F .text	00000064 vTaskGetInfo
08000704 g     F .text	00000004 osSemaphoreRelease
0800dd20 g     F .text	000000a4 __swbuf_r
0800cef2 g     F .text	00000002 HardFault_Handler
08009fbc g     F .text	000000cc udp_sendto_if_src
0801e36c g     O .rodata	00000014 file__404_html
0800c348  w    F .text	00000002 HRTIM1_FLT_IRQHandler
0800c348  w    F .text	00000002 JPEG_IRQHandler
0800d11c g     F .text	0000002c __sfmoreglue
08000804 g     F .text	00000004 osMessageDelete
0800c348  w    F .text	00000002 DMA1_Stream5_IRQHandler
0800c2c4 g     F .text	00000034 memp_free
0800e194 g     F .text	0000000c __malloc_unlock
08002b34 g     F .text	00000078 HAL_ETH_SetMDIOClockRange
00001000 g       *ABS*	00000000 _Min_Stack_Size
08000e5c g     F .text	000000c8 LAN8742_Init
0800a884 g     F .text	000000d0 pbuf_free
080092e8 g     F .text	0000002c tcp_recv
0800cefc g     F .text	00000004 SysTick_Handler
08020890 g     O .rodata	0000000c memp_UDP_PCB
0800ac20 g     F .text	00000074 pbuf_cat
08001a60 g     F .text	0000000a HAL_GPIO_WritePin
2000c03d g     O .bss	00000001 __lock___arc4random_mutex
0800c348  w    F .text	00000002 BDMA_Channel1_IRQHandler
0800c348  w    F .text	00000002 HRTIM1_TIMD_IRQHandler
0800e154 g     F .text	00000034 memmove
0800c348  w    F .text	00000002 TAMP_STAMP_IRQHandler
08001bdc g     F .text	00000160 HAL_TIM_IRQHandler
08003b48 g     F .text	00000028 etharp_cleanup_netif
080054fc g     F .text	00000020 tcpip_send_msg_wait_sem
080211f8 g       *ABS*	00000000 _sidata
200080a8 g     O .bss	00000004 lock_tcpip_core
080017e0 g     F .text	0000002c HAL_RCC_GetHCLKFreq
08000940 g     F .text	00000064 PendSV_Handler
08001884  w    F .text	00000002 HAL_TIMEx_CommutCallback
08006e5e g     F .text	000000c2 xQueueGenericSendFromISR
0800cef0 g     F .text	00000002 NMI_Handler
08001af4 g     F .text	0000001c HAL_NVIC_EnableIRQ
2000be1c g     O .bss	00000018 ip_data
080211f0 g       .init_array	00000000 __exidx_end
08008e68 g     F .text	00000054 tcp_keepalive
0800c348  w    F .text	00000002 EXTI3_IRQHandler
08001470 g     F .text	0000013c HAL_RCC_GetSysClockFreq
08006a88 g     F .text	0000001c BSP_LED_Off
08003ce4 g     F .text	00000054 etharp_tmr
0800559c g     F .text	00000022 netbuf_delete
0800c348  w    F .text	00000002 LPTIM4_IRQHandler
08009c2c g     F .text	0000010c tcp_alloc
0800a088 g     F .text	00000038 udp_sendto_if
20008118 g     O .bss	00000023 memp_memory_NETBUF_base
080092e0 g     F .text	00000006 tcp_arg
20007eb0 g     O .bss	00000004 pxCurrentTCB
0800af50 g     F .text	00000054 sys_timeouts_init
0800c348  w    F .text	00000002 TIM8_TRG_COM_TIM14_IRQHandler
0800c348  w    F .text	00000002 LPTIM2_IRQHandler
200080f0 g     O .bss	00000001 tcp_active_pcbs_changed
08002dc0  w    F .text	00000002 HAL_MspInit
0800c348  w    F .text	00000002 DFSDM1_FLT1_IRQHandler
200080f4 g     O .bss	00000004 tcp_active_pcbs
0800a33c g     F .text	00000006 netif_set_link_callback
08002e50 g     F .text	00000014 HAL_SYSCFG_ETHInterfaceSelect
0800e210 g     F .text	00000024 _fstat_r
20008108 g     O .bss	00000004 udp_pcbs
0800246a g     F .text	00000072 HAL_ETH_Stop_IT
20008074 g     O .bss	00000004 errno
08009a90 g     F .text	0000004a tcp_shutdown
08000b64 g     F .text	00000098 ethernet_input
0800e27c g       .text	00000000 _etext
0800c348  w    F .text	00000002 DMAMUX2_OVR_IRQHandler
20001960 g       .bss	00000000 _sbss
0800abe8 g     F .text	00000038 pbuf_ref
08000ca0 g     F .text	00000014 sys_mbox_trypost
08009964 g     F .text	00000024 tcp_recv_null
08003b70 g     F .text	00000148 etharp_input
08005acc g     F .text	00000006 netconn_close
08002e44 g     F .text	0000000c HAL_GetREVID
0800c348  w    F .text	00000002 TIM8_UP_TIM13_IRQHandler
0800c348  w    F .text	00000002 I2C3_ER_IRQHandler
08008824 g     F .text	00000120 tcp_enqueue_flags
080027ac  w    F .text	00000002 HAL_ETH_EEECallback
0800c348  w    F .text	00000002 DFSDM1_FLT2_IRQHandler
08007bf4 g     F .text	00000018 vTaskInternalSetTimeOutState
08006700 g     F .text	000000e0 lwip_netconn_do_listen
08009950 g     F .text	00000014 tcp_close
08009234 g     F .text	00000080 tcp_recved
080093ac g     F .text	00000038 tcp_pcb_purge
0800188c g     F .text	000001d4 HAL_GPIO_Init
0800c348  w    F .text	00000002 MDMA_IRQHandler
2000813b g     O .bss	00000083 memp_memory_TCPIP_MSG_INPKT_base
0800c348  w    F .text	00000002 LPTIM3_IRQHandler
0802037c g     O .rodata	00000028 lwip_cyclic_timers
08000a04 g     F .text	00000104 xPortStartScheduler
0800cf70 g     F .text	0000001c memcpy
08002bac g     F .text	00000214 HAL_ETH_Init
0800a3ac g     F .text	00000174 mem_free
08007b40 g     F .text	00000030 vTaskPlaceOnEventList
200080f8 g     O .bss	00000004 tcp_ticks
200080fc g     O .bss	00000004 tcp_listen_pcbs
08002b1c g     F .text	00000016 HAL_ETH_SetMACConfig
08008d98 g     F .text	00000038 tcp_rexmit_rto
20000028 g     O .data	00000014 LAN8742_IOCtx
0800d110 g     F .text	0000000c _cleanup_r
0800d4d0 g     F .text	000001f0 _svfprintf_r
0800c348  w    F .text	00000002 HSEM1_IRQHandler
080009d0  w    F .text	00000034 vPortSetupTimerInterrupt
08020884 g     O .rodata	0000000c memp_TCP_SEG
0800adb4 g     F .text	0000008c pbuf_copy_partial
08000dac g     F .text	00000018 sys_init
08000d8e g     F .text	00000006 sys_sem_signal
080009a4 g     F .text	0000002c xPortSysTickHandler
0800c348  w    F .text	00000002 EXTI0_IRQHandler
0802086c g     O .rodata	0000000c memp_TCP_PCB
0800c348  w    F .text	00000002 I2C2_EV_IRQHandler
200081be g     O .bss	00000083 memp_memory_TCP_SEG_base
0800ae40 g     F .text	000000a4 sys_timeout
0800627c g     F .text	00000078 lwip_netconn_do_newconn
0800c348  w    F .text	00000002 DMA1_Stream2_IRQHandler
0800050c g     F .text	00000070 vPortFree
0800422c g     F .text	00000034 ip4_addr_isbroadcast_u32
0800c348  w    F .text	00000002 FPU_IRQHandler
20000020 g     O .data	00000004 SystemCoreClock
08005180 g     F .text	000000a0 dhcp_release
08020818 g     O .rodata	0000000c memp_NETCONN
0800c348  w    F .text	00000002 OTG_HS_WKUP_IRQHandler
08007108 g     F .text	00000188 xQueueSemaphoreTake
0800c348  w    F .text	00000002 FDCAN1_IT1_IRQHandler
0800cc0c g     F .text	0000000c HAL_ETH_RxCpltCallback
0800d2b8 g     F .text	00000010 malloc
08000b08 g     F .text	0000005c vPortValidateInterruptPriority
20000004 g     O .data	00000001 uwTickFreq
0800c870 g     F .text	00000010 ETH_PHY_IO_Init
0800c3ac g     F .text	0000000a _fstat
080040d8 g     F .text	00000140 icmp_input
0800cef8 g     F .text	00000002 UsageFault_Handler
0800a228 g     F .text	00000080 netif_add
0800c348  w    F .text	00000002 LTDC_ER_IRQHandler
08000dc4 g     F .text	0000001c sys_mutex_new
080092d0 g     F .text	00000010 tcp_segs_free
080080f0 g     F .text	00000018 vListInsertEnd
0800c348  w    F .text	00000002 DMA2_Stream2_IRQHandler
2000c004 g     O .bss	00000038 gnetif
20001960 g       .bss	00000000 __bss_start__
08002eb0 g     F .text	00000040 fs_open
0800c348  w    F .text	00000002 HRTIM1_TIME_IRQHandler
0801e3bc g     O .rodata	00000014 file__STM32H7xx_html
0800a1a8 g     F .text	00000048 netif_set_ipaddr
0800257a g     F .text	000000e8 HAL_ETH_IsRxDataAvailable
0801f4ec g     O .rodata	00000006 GPIO_PIN
20000000 g       .data	00000000 _sdata
08020878 g     O .rodata	0000000c memp_TCP_PCB_LISTEN
0800c348  w    F .text	00000002 SPI1_IRQHandler
0800dc78 g     F .text	00000020 _sbrk_r
080027a8  w    F .text	00000002 HAL_ETH_MACErrorCallback
080082fc g     F .text	00000528 tcp_write
08001bd4  w    F .text	00000002 HAL_TIM_OC_DelayElapsedCallback
08000cb4 g     F .text	00000044 sys_arch_mbox_fetch
0800c68c g     F .text	0000000c TIM6_DAC_IRQHandler
0800e1ec g     F .text	00000024 _read_r
080080ea g     F .text	00000006 vListInitialiseItem
0800c348  w    F .text	00000002 DCMI_IRQHandler
2000807c g     O .bss	00000004 uwTick
08006fc8 g     F .text	00000140 xQueueReceive
200080b0 g     O .bss	00000040 xQueueRegistry
08009098 g     F .text	00000094 tcp_bind
0800912c g     F .text	000000b0 tcp_listen_with_backlog_and_err
08004222 g     F .text	0000000a icmp_time_exceeded
08009bc0 g     F .text	00000006 tcp_abort
0800c348  w    F .text	00000002 HRTIM1_TIMC_IRQHandler
080058f8 g     F .text	000000a0 netconn_accept
20000024 g     O .data	00000004 SystemD2Clock
08002662 g     F .text	0000008e HAL_ETH_GetRxDataBuffer
20008241 g     O .bss	00003043 memp_memory_PBUF_POOL_base
08001b10 g     F .text	00000020 HAL_MPU_Disable
080211f0 g       .init_array	00000000 __exidx_start
2000c03e g     O .bss	00000001 __lock___env_recursive_mutex
0800c348  w    F .text	00000002 DMA2_Stream3_IRQHandler
0800c3b6 g     F .text	00000004 _isatty
08006838 g     F .text	000000e8 lwip_netconn_do_write
080005ce g     F .text	00000010 osDelay
2000c03f g     O .bss	00000001 __lock___sinit_recursive_mutex
08021158 g     O .rodata	00000004 _global_impure_ptr
080210e6 g     O .rodata	00000010 D1CorePrescTable
2000be74 g     O .bss	00000070 EthHandle
08006570 g     F .text	00000130 lwip_netconn_do_delconn
0800c7dc g     F .text	00000004 ETH_PHY_IO_DeInit
0800e1a0 g     F .text	0000004c _realloc_r
0800cf0c g     F .text	00000048 __libc_init_array
0800c348  w    F .text	00000002 SAI2_IRQHandler
08005050 g     F .text	00000054 dhcp_stop
08000bfc g     F .text	00000070 ethernet_output
0800c34c g     F .text	00000040 _sbrk
0800aca8 g     F .text	0000010c pbuf_copy
08008dd0 g     F .text	00000052 tcp_rexmit
080003f8 g     F .text	00000114 pvPortMalloc
0800068c g     F .text	0000002a osSemaphoreCreate
080055c0 g     F .text	00000058 netbuf_data
0800c348  w    F .text	00000002 DFSDM1_FLT3_IRQHandler
0800c348  w    F .text	00000002 USART6_IRQHandler
0800e264 g     F .text	00000000 _init
0800739c g     F .text	00000022 vQueueDelete
2000b284 g     O .bss	0000016b memp_memory_FRAG_PBUF_base
0800a2b4 g     F .text	0000001e netif_set_up
080080d4 g     F .text	00000016 vListInitialise
2000b3ef g     O .bss	00000083 memp_memory_TCPIP_MSG_API_base
0801fa64 g     O .rodata	00000010 tcp_pcb_lists
0800551c g     F .text	00000080 tcpip_init
08020854 g     O .rodata	0000000c memp_TCPIP_MSG_API
0800c348  w    F .text	00000002 TIM17_IRQHandler
0802083c g     O .rodata	0000000c memp_REASSDATA
0800c348  w    F .text	00000002 USART3_IRQHandler
08007858 g     F .text	0000000c xTaskGetTickCount
08006cc4 g     F .text	00000164 xQueueGenericSend
0800c348  w    F .text	00000002 BDMA_Channel7_IRQHandler
08020848 g     O .rodata	0000000c memp_SYS_TIMEOUT
08000f24 g     F .text	00000094 LAN8742_GetLinkState
2000c048 g       .bss	00000000 _ebss
0800239c g     F .text	0000003a HAL_ETH_DescAssignMemory
08021130 g     O .rodata	0000000c memp_RX_POOL
0800c2f8  w    F .text	00000038 Reset_Handler
08001d3c g     F .text	000000cc TIM_Base_SetConfig
0800c348  w    F .text	00000002 LPTIM5_IRQHandler
0801e394 g     O .rodata	00000014 file__STM32H7xx_files_logo_jpg
08000586 g     F .text	0000000e osKernelSysTick
08003780 g     F .text	000001b8 ip4_frag
08007d48 g     F .text	00000094 uxTaskGetSystemState
08000d1a g     F .text	0000000a sys_mbox_valid
08007ea0 g     F .text	000000a0 xTaskPriorityDisinherit
0800a344 g     F .text	00000068 mem_init
0800c348  w    F .text	00000002 UART5_IRQHandler
08001ba8 g     F .text	0000002c HAL_TIM_Base_Start_IT
2000c040 g     O .bss	00000001 __lock___malloc_recursive_mutex
08008944 g     F .text	00000046 tcp_send_fin
0800c348  w    F .text	00000002 ADC3_IRQHandler
080089f4 g     F .text	000002ee tcp_output
0800c348  w    F .text	00000002 DMA2_Stream0_IRQHandler
20000008 g     O .data	00000004 uwTickPrio
08002dc4 g     F .text	0000005c HAL_Init
0800a520 g     F .text	0000011c mem_trim
0800c6b0 g     F .text	000000b4 DHCP_Thread
08007b70 g     F .text	00000084 xTaskRemoveFromEventList
0800c348  w    F .text	00000002 TIM4_IRQHandler
080058c0 g     F .text	00000038 netconn_listen_with_backlog
20008114 g     O .bss	00000004 tcp_input_pcb
0800898a g     F .text	0000006a tcp_send_empty_ack
0800d074 g     F .text	00000020 strcat
08008e22 g     F .text	00000046 tcp_rexmit_fast
0800c89c g     F .text	0000001c ETH_PHY_IO_WriteReg
0800c348  w    F .text	00000002 BDMA_Channel2_IRQHandler
08000d2a g     F .text	0000002e sys_sem_new
08002990 g     F .text	0000018c HAL_ETH_GetMACConfig
0802115c g     O .rodata	00000020 __sf_fake_stderr
0800c348  w    F .text	00000002 QUADSPI_IRQHandler
08000768 g     F .text	00000070 osMessageGet
0800a2a8 g     F .text	0000000c netif_set_default
0800a110 g     F .text	00000006 udp_recv
2000c048 g       ._user_heap_stack	00000000 end
0800c348  w    F .text	00000002 I2C1_EV_IRQHandler
0800caf4 g     F .text	00000118 HAL_ETH_MspInit
08007690 g     F .text	000000d8 vTaskDelete
0800d2b4 g     F .text	00000002 __retarget_lock_release_recursive
0800c348  w    F .text	00000002 DMA1_Stream6_IRQHandler
0800afc0 g     F .text	000000ac sys_timeouts_mbox_fetch
08001e3c g     F .text	0000002c HAL_RCCEx_GetD1SysClockFreq
0800a2d2 g     F .text	0000001a netif_set_down
0800070c g     F .text	0000000a osMessageCreate
0800a954 g     F .text	000001a4 pbuf_alloc
0800a2ec g     F .text	00000038 netif_set_link_up
08000c8c g     F .text	00000014 sys_mbox_free
0800736c g     F .text	00000030 vQueueUnregisterQueue
0800d418 g     F .text	000000b6 __ssputs_r
080027b0 g     F .text	00000124 HAL_ETH_IRQHandler
0800057c g     F .text	0000000a osKernelStart
080080bc g     F .text	00000018 pvTaskIncrementMutexHeldCount
0800c698 g     F .text	00000018 ethernet_link_status_updated
0800c348  w    F .text	00000002 DMAMUX1_OVR_IRQHandler
08005848 g     F .text	00000030 netconn_delete
08006a6c g     F .text	0000001c BSP_LED_On
0800c348  w    F .text	00000002 DMA1_Stream1_IRQHandler
08020824 g     O .rodata	0000000c memp_PBUF
0800c348  w    F .text	00000002 TIM16_IRQHandler
0800d6ee g     F .text	00000024 __sfputs_r
0800c348  w    F .text	00000002 UART4_IRQHandler
0800d148 g     F .text	0000000c __sfp_lock_acquire
08000310 g     F .text	00000000 memchr
0801e8e0 g     O .rodata	00000004 ip_addr_broadcast
08003400 g     F .text	0000002c ip_reass_tmr
08007c0c g     F .text	00000074 xTaskCheckForTimeOut
2000c048 g       .bss	00000000 __bss_end__
08000e10 g     F .text	00000018 sys_arch_protect
0800c348  w    F .text	00000002 BDMA_Channel5_IRQHandler
0800d2c8 g     F .text	0000009c _free_r
2000000c g     O .data	0000000c GPIO_PORT
0800c348  w    F .text	00000002 TIM3_IRQHandler
08007dfc g     F .text	000000a4 xTaskPriorityInherit
0800c348  w    F .text	00000002 RCC_IRQHandler
20001900 g     O .TxDecripSection	00000060 DMATxDscrTab
0800a0c0 g     F .text	00000050 udp_connect
0800c348  w    F .text	00000002 TIM8_BRK_TIM12_IRQHandler
0800c348  w    F .text	00000002 TIM1_TRG_COM_IRQHandler
080062f4 g     F .text	00000088 netconn_alloc
00001000 g       *ABS*	00000000 _Min_Heap_Size
080005de g     F .text	00000006 osMutexCreate
0800c348 g       .text	00000002 Default_Handler
0800a1f0 g     F .text	00000038 netif_set_addr
08004eec g     F .text	000000b0 dhcp_arp_reply
0800c348  w    F .text	00000002 ECC_IRQHandler
08007848 g     F .text	00000010 vTaskSuspendAll
08007768 g     F .text	00000068 eTaskGetState
08000718 g     F .text	00000050 osMessagePut
08007864 g     F .text	00000010 xTaskGetTickCountFromISR
0800cfcc g     F .text	00000068 rand
0800c3ba g     F .text	00000004 _lseek
0800c264 g     F .text	00000038 memp_malloc
08008ebc g     F .text	000000be tcp_zero_window_probe
200000a0 g     O .RxArraySection	00001800 Rx_Buff
08005374 g     F .text	0000007c dhcp_fine_tmr
20008080 g     O .bss	00000008 dhcp_rx_options_given
08008136 g     F .text	00000020 uxListRemove
0800c348  w    F .text	00000002 CEC_IRQHandler
0800c348  w    F .text	00000002 EXTI15_10_IRQHandler
2000b472 g     O .bss	000000a3 memp_memory_PBUF_base
0800c348  w    F .text	00000002 BDMA_Channel0_IRQHandler
0800a770 g     F .text	00000006 lwip_htons
0800d0a4 g     F .text	00000024 strncmp
0800c348  w    F .text	00000002 ADC_IRQHandler
2000bee4 g     O .bss	000000cb memp_memory_RX_POOL_base
08002ef0 g     F .text	00000002 fs_close
080015ac g     F .text	00000234 HAL_RCC_ClockConfig
08000d24 g     F .text	00000006 sys_mbox_set_invalid
080031d8 g     F .text	00000022 ip4_output_if
08001a6c g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
20008100 g     O .bss	00000004 tcp_bound_pcbs
08000d94 g     F .text	00000006 sys_sem_free
080092b4 g     F .text	0000001c tcp_seg_free
08007acc g     F .text	00000074 vTaskSwitchContext
0800c348  w    F .text	00000002 DMA1_Stream7_IRQHandler
08020800 g     O .rodata	0000000c memp_FRAG_PBUF
0800c348  w    F .text	00000002 HRTIM1_TIMA_IRQHandler
0800c348  w    F .text	00000002 SPI5_IRQHandler
2000b515 g     O .bss	0000008f memp_memory_TCP_PCB_LISTEN_base
0800c348  w    F .text	00000002 TIM7_IRQHandler
08009094 g     F .text	00000002 tcp_init
0800c348  w    F .text	00000002 SDMMC1_IRQHandler
0800dec4 g     F .text	00000020 _close_r
0800a63c g     F .text	00000134 mem_malloc
2000b5a4 g     O .bss	000000a3 memp_memory_REASSDATA_base
0800c348  w    F .text	00000002 TIM5_IRQHandler
0800cf54 g     F .text	0000001c memcmp
0800c348  w    F .text	00000002 DMA2_Stream7_IRQHandler
08001e08 g     F .text	00000034 HAL_TIM_Base_Init
0800c688 g     F .text	00000004 HAL_TIM_PeriodElapsedCallback
0800c348  w    F .text	00000002 TIM15_IRQHandler
0800c348  w    F .text	00000002 PVD_AVD_IRQHandler
0800c348  w    F .text	00000002 I2C3_EV_IRQHandler
0800a324 g     F .text	00000018 netif_set_link_down
08004f9c g     F .text	000000b4 dhcp_renew
0800dde8 g     F .text	000000dc __swsetup_r
0800c348  w    F .text	00000002 EXTI9_5_IRQHandler
0800d1e8 g     F .text	0000008c __sfp
08000708 g     F .text	00000004 osSemaphoreDelete
0800c348  w    F .text	00000002 RTC_WKUP_IRQHandler
0800d16c g     F .text	0000000c __sinit_lock_release
0800c348  w    F .text	00000002 LTDC_IRQHandler
08002ef4 g     F .text	00000058 ip4_route
0800dc98 g     F .text	00000022 __sread
0800c348  w    F .text	00000002 SAI3_IRQHandler
0800cc18 g     F .text	0000009c ethernet_link_thread
0800c348  w    F .text	00000002 ETH_WKUP_IRQHandler
08002e38  w    F .text	0000000c HAL_GetTick
0800c348  w    F .text	00000002 SPDIF_RX_IRQHandler
0800e188 g     F .text	0000000c __malloc_lock
0800dff0 g     F .text	00000078 _fflush_r
0801e3a8 g     O .rodata	00000014 file__STM32H7xx_files_stm32_jpg
0800c348  w    F .text	00000002 SPI2_IRQHandler
0802117c g     O .rodata	00000020 __sf_fake_stdin
08000c6c g     F .text	00000020 sys_mbox_new
0800d2b2 g     F .text	00000002 __retarget_lock_acquire_recursive
0801e380 g     O .rodata	00000014 file__STM32H7xx_files_ST_gif
08007ff0 g     F .text	000000cc vTaskList
0800c348  w    F .text	00000002 OTG_HS_EP1_IN_IRQHandler
0800cf8c g     F .text	00000010 memset
0800cef4 g     F .text	00000002 MemManage_Handler
08020830 g     O .rodata	0000000c memp_PBUF_POOL
0800cd3c g     F .text	000001b4 main
2000805c g     O .bss	00000004 nPageHits
0800c348  w    F .text	00000002 DMA1_Stream0_IRQHandler
0800d2b0 g     F .text	00000002 __retarget_lock_init_recursive
080030e8 g     F .text	000000f0 ip4_output_if_src
0800a87e g     F .text	00000006 pbuf_header_force
08008108 g     F .text	0000002e vListInsert
08004218 g     F .text	0000000a icmp_dest_unreach
080027ae  w    F .text	00000002 HAL_ETH_WakeUpCallback
08009314 g     F .text	0000002c tcp_sent
080008b0 g     F .text	00000024 SVC_Handler
0800dd16 g     F .text	00000008 __sclose
0800a776 g     F .text	00000004 lwip_htonl
0800c348  w    F .text	00000002 CRS_IRQHandler
0800a164 g     F .text	00000004 udp_new_ip_type
0800d364 g     F .text	000000b4 _malloc_r
08001830 g     F .text	00000054 HAL_RCC_GetClockConfig
08001bd6  w    F .text	00000002 HAL_TIM_IC_CaptureCallback
0800c234 g     F .text	00000030 memp_malloc_pool
0800c3fc g     F .text	000000b0 DynWebPage
08008f7a g     F .text	0000005a lwip_standard_chksum
08007290 g     F .text	0000009e xQueueReceiveFromISR
08005794 g     F .text	000000b4 netconn_new_with_proto_and_callback
08005a38 g     F .text	00000094 netconn_write_partly
2000b647 g     O .bss	000000c3 memp_memory_UDP_PCB_base
0800c348  w    F .text	00000002 EXTI4_IRQHandler
08000630 g     F .text	00000048 osMutexRelease
08006c40 g     F .text	00000048 xQueueGenericCreate
08009f14 g     F .text	000000a8 udp_bind
08009a6c g     F .text	00000024 tcp_tmr
08003de8 g     F .text	0000012c etharp_query
080002e0 g     F .text	00000014 strcmp
08009dc4 g     F .text	00000022 lwip_init
08006c88 g     F .text	0000003c xQueueCreateCountingSemaphore
08000df0 g     F .text	00000020 sys_thread_new
20008078 g     O .bss	00000004 lwip_sys_mutex
08005488 g     F .text	00000058 tcpip_inpkt
08003f14 g     F .text	00000124 etharp_output
0800c764 g     F .text	00000078 SystemInit
080005c4 g     F .text	0000000a osThreadTerminate
0800c348  w    F .text	00000002 RNG_IRQHandler
0800c348  w    F .text	00000002 HRTIM1_TIMB_IRQHandler
200018a0 g     O .RxDecripSection	00000060 DMARxDscrTab
0800a168 g     F .text	0000002c udp_netif_ip_addr_changed
2000bfb0 g     O .bss	00000020 LAN8742
0800c16c g     F .text	00000010 tcp_trigger_input_pcb_close
0800e270 g     F .text	00000000 _fini
0800cf9c g     F .text	00000030 iprintf
08007998 g     F .text	000000ec xTaskResumeAll
0800c348  w    F .text	00000002 FDCAN2_IT1_IRQHandler
08001bd8  w    F .text	00000002 HAL_TIM_PWM_PulseFinishedCallback
0800a818 g     F .text	00000060 pbuf_alloced_custom
0800d034 g     F .text	00000040 sprintf
080077d0 g     F .text	00000078 vTaskStartScheduler
0800abd8 g     F .text	00000010 pbuf_clen
080028d4 g     F .text	0000005a HAL_ETH_ReadPHYRegister
08000da4 g     F .text	00000006 sys_sem_set_invalid
0800ddc4 g     F .text	00000024 _write_r
08009d58 g     F .text	0000001e tcp_eff_send_mss_impl
200080ac g     O .bss	00000001 netconn_aborted
08000dea g     F .text	00000006 sys_mutex_unlock
0800c600 g     F .text	00000088 HAL_InitTick
0800cf00 g     F .text	0000000c ETH_IRQHandler
0800d964 g     F .text	000000ea _printf_common
08000de0 g     F .text	0000000a sys_mutex_lock
2000003c g     O .data	00000004 _impure_ptr
08000d58 g     F .text	00000036 sys_arch_sem_wait
0800c348  w    F .text	00000002 TIM1_UP_IRQHandler
080093e4 g     F .text	00000394 tcp_slowtmr
0800dee4 g     F .text	0000010c __sflush_r
08002e20  w    F .text	00000018 HAL_IncTick
0800c348  w    F .text	00000002 BDMA_Channel4_IRQHandler
0800c348  w    F .text	00000002 OTG_HS_EP1_OUT_IRQHandler
0800c86c g     F .text	00000004 ETH_PHY_IO_GetTick
08001888  w    F .text	00000002 HAL_TIMEx_Break2Callback
0800d4d0 g     F .text	000001f0 _svfiprintf_r
0800c348  w    F .text	00000002 WWDG_IRQHandler
0800c348  w    F .text	00000002 SPI6_IRQHandler
0800c880 g     F .text	0000001c ETH_PHY_IO_ReadReg
08006920 g     F .text	000000d4 lwip_netconn_do_close
0800c348  w    F .text	00000002 MDIOS_IRQHandler
0800c348  w    F .text	00000002 I2C4_EV_IRQHandler
08009370 g     F .text	0000000c tcp_accept
0800c348  w    F .text	00000002 FDCAN2_IT0_IRQHandler
08007c80 g     F .text	0000000c vTaskMissedYield
08001bda  w    F .text	00000002 HAL_TIM_TriggerCallback
0800c348  w    F .text	00000002 LPUART1_IRQHandler
0800c974 g     F .text	0000017c ethernetif_init
20008060 g     O .bss	00000001 DHCP_state
0800c348  w    F .text	00000002 FDCAN1_IT0_IRQHandler
0800c348  w    F .text	00000002 TIM2_IRQHandler
0800732e g     F .text	00000026 uxQueueMessagesWaiting
080005e4 g     F .text	0000004c osMutexWait
0800c348  w    F .text	00000002 OTG_FS_WKUP_IRQHandler
08007874 g     F .text	00000124 xTaskIncrementTick
0800c348  w    F .text	00000002 OTG_HS_IRQHandler
080054e0 g     F .text	0000001c tcpip_input
0800c348  w    F .text	00000002 DMA2D_IRQHandler
0800c348  w    F .text	00000002 TIM1_BRK_IRQHandler
0800e08c g     F .text	00000048 __swhatbuf_r
24080000 g       *ABS*	00000000 _estack
20008104 g     O .bss	00000004 tcp_tw_pcbs
0800c348  w    F .text	00000002 EXTI1_IRQHandler
0800caf0 g     F .text	00000004 sys_now
0800c348  w    F .text	00000002 SDMMC2_IRQHandler
2000b70a g     O .bss	000000a3 memp_memory_NETCONN_base
08009de8 g     F .text	0000012c udp_input
08006bc0 g     F .text	00000080 xQueueGenericReset
0800c38c g     F .text	0000001a _write
200000a0 g       .data	00000000 _edata
08000594 g     F .text	00000030 osThreadCreate
0800c348  w    F .text	00000002 OTG_FS_EP1_OUT_IRQHandler
0800a1a6 g     F .text	00000002 netif_init
0800c348  w    F .text	00000002 BDMA_Channel3_IRQHandler
2000c041 g     O .bss	00000001 __lock___at_quick_exit_mutex
08001ba4  w    F .text	00000002 HAL_TIM_Base_MspInit
080023d6 g     F .text	00000094 HAL_ETH_Start_IT
080074c0 g     F .text	000001d0 xTaskCreate
0800c348  w    F .text	00000002 UART7_IRQHandler
0800a878 g     F .text	00000006 pbuf_header
20008110 g     O .bss	00000004 netif_default
08009778 g     F .text	0000008c tcp_pcb_remove
08001b30 g     F .text	00000024 HAL_MPU_Enable
0800c348  w    F .text	00000002 MDIOS_WKUP_IRQHandler
0800c348  w    F .text	00000002 USART2_IRQHandler
0800dcba g     F .text	00000038 __swrite
08000fb8  w    F .text	000004b8 HAL_RCC_OscConfig
0800c348  w    F .text	00000002 DFSDM1_FLT0_IRQHandler
0800ac94 g     F .text	00000012 pbuf_chain
0800c348  w    F .text	00000002 SAI4_IRQHandler
08009adc g     F .text	000000e4 tcp_abandon
0800d714 g     F .text	00000250 _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
0800aee4 g     F .text	00000034 tcp_timer_needed
0800d274 g     F .text	0000003c _fwalk_reent
0800c218 g     F .text	0000001c memp_init
080099ec g     F .text	00000080 tcp_fasttmr
08009988 g     F .text	00000064 tcp_process_refused_data
0800c348  w    F .text	00000002 I2C2_ER_IRQHandler
08007a84 g     F .text	00000048 vTaskDelay
0800d154 g     F .text	0000000c __sfp_lock_release
08000e28 g     F .text	0000000c sys_arch_unprotect
08005878 g     F .text	00000048 netconn_bind
080069f4 g     F .text	00000078 BSP_LED_Init
20008088 g     O .bss	00000020 dhcp_rx_options_val
0802119c g     O .rodata	00000020 __sf_fake_stdout
0800d034 g     F .text	00000040 siprintf
08001b54 g     F .text	00000050 HAL_MPU_ConfigRegion
0800c348  w    F .text	00000002 DMA2_Stream1_IRQHandler
080027a4  w    F .text	00000002 HAL_ETH_TxCpltCallback
08007ddc g     F .text	00000020 xTaskGetSchedulerState
2000b7ad g     O .bss	000005cb memp_memory_TCP_PCB_base
08007f40 g     F .text	000000b0 vTaskPriorityDisinheritAfterTimeout
0800c3be g     F .text	0000001a _read
2000bd78 g     O .bss	000000a3 memp_memory_SYS_TIMEOUT_base
0800c348  w    F .text	00000002 FLASH_IRQHandler
08009d38 g     F .text	00000006 tcp_new_ip_type
08005220 g     F .text	00000154 dhcp_coarse_tmr
2000bfd0 g     O .bss	00000034 TxConfig
0800c348  w    F .text	00000002 DMA2_Stream4_IRQHandler
0800cef6 g     F .text	00000002 BusFault_Handler
0800c348  w    F .text	00000002 USART1_IRQHandler
2000c042 g     O .bss	00000001 __lock___dd_hash_mutex
0800e0d4 g     F .text	00000080 __smakebuf_r
2000c043 g     O .bss	00000001 __lock___tz_mutex
0800937c g     F .text	00000030 tcp_poll
080002f4 g     F .text	00000010 strlen
0800c348  w    F .text	00000002 OTG_FS_IRQHandler
08000884 g     F .text	00000024 pxPortInitialiseStack
0800da50 g     F .text	00000228 _printf_i
0800c348  w    F .text	00000002 SPI3_IRQHandler
0800c348  w    F .text	00000002 WAKEUP_PIN_IRQHandler
08009de6 g     F .text	00000002 udp_init
080007d8 g     F .text	00000014 osSystickHandler
2000be34 g     O .bss	00000040 TimHandle
0800a148 g     F .text	0000001c udp_new
0800c348  w    F .text	00000002 DMA1_Stream4_IRQHandler
20008070 g     O .bss	00000004 __malloc_sbrk_start
0800c348  w    F .text	00000002 OTG_FS_EP1_IN_IRQHandler
08000d9a g     F .text	0000000a sys_sem_valid
0800c348  w    F .text	00000002 I2C1_ER_IRQHandler
0800c348  w    F .text	00000002 FMC_IRQHandler
0800e2cc g     O .rodata	00000006 ethbroadcast
080008d4 g     F .text	00000044 vPortEnterCritical
0800c348  w    F .text	00000002 FDCAN_CAL_IRQHandler
0800c83c g     F .text	00000030 pbuf_free_custom
08000cf8 g     F .text	00000022 sys_arch_mbox_tryfetch
2000806c g     O .bss	00000004 __malloc_free_list
0800c348  w    F .text	00000002 SWPMI1_IRQHandler
08001886  w    F .text	00000002 HAL_TIMEx_BreakCallback
0800c3d8 g     F .text	00000024 http_server_netconn_init
0800c348  w    F .text	00000002 COMP1_IRQHandler
080067e0 g     F .text	00000058 lwip_netconn_do_recv
0800c348  w    F .text	00000002 LPTIM1_IRQHandler
08007354 g     F .text	00000018 uxQueueMessagesWaitingFromISR
08005998 g     F .text	000000a0 netconn_recv
080024dc g     F .text	0000009e HAL_ETH_Transmit
08000e34 g     F .text	00000028 LAN8742_RegisterBusIO
08000678 g     F .text	00000014 osMutexDelete
0800d714 g     F .text	00000250 _vfprintf_r
0800c348  w    F .text	00000002 I2C4_ER_IRQHandler
0800c29c g     F .text	00000028 memp_free_pool
0800342c g     F .text	00000352 ip4_reass
08002e64 g     F .text	0000004c HAL_PWREx_ConfigSupply
0800e398 g     O .rodata	00000004 os_mutex_def_lwip_sys_mutex
0800c348  w    F .text	00000002 DMA2_Stream6_IRQHandler
080208e8 g     O .rodata	00000034 memp_pools
0800b74c g     F .text	00000a20 tcp_input
08002f4c g     F .text	0000019c ip4_input
08006e28 g     F .text	00000036 xQueueCreateMutex
08002930 g     F .text	00000060 HAL_ETH_WritePHYRegister
08020860 g     O .rodata	0000000c memp_TCPIP_MSG_INPKT
08005160 g     F .text	0000001e dhcp_supplied_address
0800e392 g     O .rodata	00000006 ethzero
0800c348  w    F .text	00000002 SAI1_IRQHandler
0800c348  w    F .text	00000002 DMA1_Stream3_IRQHandler
2000c044 g     O .bss	00000001 __lock___sfp_recursive_mutex
08006f20 g     F .text	000000a8 xQueueGiveFromISR
0800c3a6 g     F .text	00000006 _close
0800d160 g     F .text	0000000c __sinit_lock_acquire
08002728 g     F .text	0000007c HAL_ETH_BuildRxDescriptors



Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
__do_global_dtors_aux():
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20001960 	.word	0x20001960
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e264 	.word	0x0800e264

080002c4 <frame_dummy>:
frame_dummy():
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20001964 	.word	0x20001964
 80002dc:	0800e264 	.word	0x0800e264

080002e0 <strcmp>:
strcmp():
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
strlen():
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
memchr():
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <prvInsertBlockIntoFreeList>:
prvInsertBlockIntoFreeList():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:384
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80003b0:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <prvInsertBlockIntoFreeList+0x40>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:378
{
 80003b2:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:384 (discriminator 1)
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	4282      	cmp	r2, r0
 80003b8:	d318      	bcc.n	80003ec <prvInsertBlockIntoFreeList+0x3c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:392
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80003ba:	685c      	ldr	r4, [r3, #4]
 80003bc:	1919      	adds	r1, r3, r4
 80003be:	4288      	cmp	r0, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:394
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80003c0:	bf01      	itttt	eq
 80003c2:	6841      	ldreq	r1, [r0, #4]
 80003c4:	4618      	moveq	r0, r3
 80003c6:	1909      	addeq	r1, r1, r4
 80003c8:	6059      	streq	r1, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:405
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80003ca:	6844      	ldr	r4, [r0, #4]
 80003cc:	1901      	adds	r1, r0, r4
 80003ce:	428a      	cmp	r2, r1
 80003d0:	d107      	bne.n	80003e2 <prvInsertBlockIntoFreeList+0x32>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:407
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80003d2:	4908      	ldr	r1, [pc, #32]	; (80003f4 <prvInsertBlockIntoFreeList+0x44>)
 80003d4:	6809      	ldr	r1, [r1, #0]
 80003d6:	428a      	cmp	r2, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:410
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80003d8:	bf1f      	itttt	ne
 80003da:	6851      	ldrne	r1, [r2, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:411
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80003dc:	6812      	ldrne	r2, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:410
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80003de:	1909      	addne	r1, r1, r4
 80003e0:	6041      	strne	r1, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:427

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80003e2:	4298      	cmp	r0, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:420
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80003e4:	6002      	str	r2, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:429
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80003e6:	bf18      	it	ne
 80003e8:	6018      	strne	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:435
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80003ea:	bd10      	pop	{r4, pc}
 80003ec:	4613      	mov	r3, r2
 80003ee:	e7e1      	b.n	80003b4 <prvInsertBlockIntoFreeList+0x4>
 80003f0:	20007d8c 	.word	0x20007d8c
 80003f4:	2000197c 	.word	0x2000197c

080003f8 <pvPortMalloc>:
pvPortMalloc():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:114
{
 80003f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003fc:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:118
	vTaskSuspendAll();
 80003fe:	f007 fa23 	bl	8007848 <vTaskSuspendAll>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:122
		if( pxEnd == NULL )
 8000402:	4b3b      	ldr	r3, [pc, #236]	; (80004f0 <pvPortMalloc+0xf8>)
 8000404:	483b      	ldr	r0, [pc, #236]	; (80004f4 <pvPortMalloc+0xfc>)
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	469c      	mov	ip, r3
 800040a:	b9d2      	cbnz	r2, 8000442 <pvPortMalloc+0x4a>
prvHeapInit():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:337
	uxAddress = ( size_t ) ucHeap;
 800040c:	4b3a      	ldr	r3, [pc, #232]	; (80004f8 <pvPortMalloc+0x100>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:351
	xStart.xBlockSize = ( size_t ) 0;
 800040e:	2100      	movs	r1, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:350
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000410:	4a3a      	ldr	r2, [pc, #232]	; (80004fc <pvPortMalloc+0x104>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:339
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000412:	075d      	lsls	r5, r3, #29
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:351
	xStart.xBlockSize = ( size_t ) 0;
 8000414:	6051      	str	r1, [r2, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:341
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000416:	bf1c      	itt	ne
 8000418:	3307      	addne	r3, #7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:342
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800041a:	f023 0307 	bicne.w	r3, r3, #7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:350
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800041e:	6013      	str	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:356
	uxAddress -= xHeapStructSize;
 8000420:	4a37      	ldr	r2, [pc, #220]	; (8000500 <pvPortMalloc+0x108>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:357
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000422:	f022 0207 	bic.w	r2, r2, #7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:360
	pxEnd->pxNextFreeBlock = NULL;
 8000426:	e9c2 1100 	strd	r1, r1, [r2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:365
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800042a:	1ad1      	subs	r1, r2, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:358
	pxEnd = ( void * ) uxAddress;
 800042c:	f8cc 2000 	str.w	r2, [ip]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:366
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000430:	e9c3 2100 	strd	r2, r1, [r3]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:369
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000434:	4b33      	ldr	r3, [pc, #204]	; (8000504 <pvPortMalloc+0x10c>)
 8000436:	6019      	str	r1, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:370
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000438:	4b33      	ldr	r3, [pc, #204]	; (8000508 <pvPortMalloc+0x110>)
 800043a:	6019      	str	r1, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:373
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800043c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000440:	6003      	str	r3, [r0, #0]
pvPortMalloc():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:135
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000442:	6807      	ldr	r7, [r0, #0]
 8000444:	4227      	tst	r7, r4
 8000446:	d14e      	bne.n	80004e6 <pvPortMalloc+0xee>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:139
			if( xWantedSize > 0 )
 8000448:	2c00      	cmp	r4, #0
 800044a:	d03f      	beq.n	80004cc <pvPortMalloc+0xd4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:141
				xWantedSize += xHeapStructSize;
 800044c:	f104 0308 	add.w	r3, r4, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:145
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000450:	0759      	lsls	r1, r3, #29
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:148
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000452:	bf1c      	itt	ne
 8000454:	f023 0307 	bicne.w	r3, r3, #7
 8000458:	3308      	addne	r3, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:161
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800045a:	2b00      	cmp	r3, #0
 800045c:	d043      	beq.n	80004e6 <pvPortMalloc+0xee>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:161 (discriminator 1)
 800045e:	4a2a      	ldr	r2, [pc, #168]	; (8000508 <pvPortMalloc+0x110>)
 8000460:	6816      	ldr	r6, [r2, #0]
 8000462:	4690      	mov	r8, r2
 8000464:	429e      	cmp	r6, r3
 8000466:	d33e      	bcc.n	80004e6 <pvPortMalloc+0xee>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:166
				pxBlock = xStart.pxNextFreeBlock;
 8000468:	4a24      	ldr	r2, [pc, #144]	; (80004fc <pvPortMalloc+0x104>)
 800046a:	6815      	ldr	r5, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:167
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800046c:	6869      	ldr	r1, [r5, #4]
 800046e:	4299      	cmp	r1, r3
 8000470:	d201      	bcs.n	8000476 <pvPortMalloc+0x7e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:167 (discriminator 1)
 8000472:	6828      	ldr	r0, [r5, #0]
 8000474:	b9a8      	cbnz	r0, 80004a2 <pvPortMalloc+0xaa>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:175
				if( pxBlock != pxEnd )
 8000476:	f8dc 0000 	ldr.w	r0, [ip]
 800047a:	42a8      	cmp	r0, r5
 800047c:	d033      	beq.n	80004e6 <pvPortMalloc+0xee>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:187
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800047e:	1ac9      	subs	r1, r1, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:183
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000480:	6828      	ldr	r0, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:179
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000482:	6814      	ldr	r4, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:187
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000484:	2910      	cmp	r1, #16
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:183
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000486:	6010      	str	r0, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:187
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000488:	d912      	bls.n	80004b0 <pvPortMalloc+0xb8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:193
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800048a:	18e8      	adds	r0, r5, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:194
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800048c:	0742      	lsls	r2, r0, #29
 800048e:	d00b      	beq.n	80004a8 <pvPortMalloc+0xb0>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000494:	f383 8811 	msr	BASEPRI, r3
 8000498:	f3bf 8f6f 	isb	sy
 800049c:	f3bf 8f4f 	dsb	sy
pvPortMalloc():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:194 (discriminator 3)
 80004a0:	e7fe      	b.n	80004a0 <pvPortMalloc+0xa8>
 80004a2:	462a      	mov	r2, r5
 80004a4:	4605      	mov	r5, r0
 80004a6:	e7e1      	b.n	800046c <pvPortMalloc+0x74>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:198 (discriminator 2)
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80004a8:	6041      	str	r1, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:199 (discriminator 2)
						pxBlock->xBlockSize = xWantedSize;
 80004aa:	606b      	str	r3, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:202 (discriminator 2)
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80004ac:	f7ff ff80 	bl	80003b0 <prvInsertBlockIntoFreeList>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:209
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80004b0:	686b      	ldr	r3, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:179
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80004b2:	3408      	adds	r4, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:211
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80004b4:	4913      	ldr	r1, [pc, #76]	; (8000504 <pvPortMalloc+0x10c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:209
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80004b6:	1af6      	subs	r6, r6, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:222
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80004b8:	431f      	orrs	r7, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:211
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80004ba:	6808      	ldr	r0, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:223
					pxBlock->pxNextFreeBlock = NULL;
 80004bc:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:209
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80004be:	f8c8 6000 	str.w	r6, [r8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:211
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80004c2:	4286      	cmp	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:222
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80004c4:	606f      	str	r7, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:223
					pxBlock->pxNextFreeBlock = NULL;
 80004c6:	602b      	str	r3, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:213
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80004c8:	bf38      	it	cc
 80004ca:	600e      	strcc	r6, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:242
	( void ) xTaskResumeAll();
 80004cc:	f007 fa64 	bl	8007998 <xTaskResumeAll>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:258
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80004d0:	0763      	lsls	r3, r4, #29
 80004d2:	d00a      	beq.n	80004ea <pvPortMalloc+0xf2>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 80004d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004d8:	f383 8811 	msr	BASEPRI, r3
 80004dc:	f3bf 8f6f 	isb	sy
 80004e0:	f3bf 8f4f 	dsb	sy
pvPortMalloc():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:258 (discriminator 5)
 80004e4:	e7fe      	b.n	80004e4 <pvPortMalloc+0xec>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:116
void *pvReturn = NULL;
 80004e6:	2400      	movs	r4, #0
 80004e8:	e7f0      	b.n	80004cc <pvPortMalloc+0xd4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:260
}
 80004ea:	4620      	mov	r0, r4
 80004ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80004f0:	2000197c 	.word	0x2000197c
 80004f4:	20007d80 	.word	0x20007d80
 80004f8:	20001980 	.word	0x20001980
 80004fc:	20007d8c 	.word	0x20007d8c
 8000500:	20007d78 	.word	0x20007d78
 8000504:	20007d88 	.word	0x20007d88
 8000508:	20007d84 	.word	0x20007d84

0800050c <vPortFree>:
vPortFree():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:264
{
 800050c:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:268
	if( pv != NULL )
 800050e:	4604      	mov	r4, r0
 8000510:	b370      	cbz	r0, 8000570 <vPortFree+0x64>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:278
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000512:	4a18      	ldr	r2, [pc, #96]	; (8000574 <vPortFree+0x68>)
 8000514:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8000518:	6812      	ldr	r2, [r2, #0]
 800051a:	4213      	tst	r3, r2
 800051c:	d108      	bne.n	8000530 <vPortFree+0x24>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 800051e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000522:	f383 8811 	msr	BASEPRI, r3
 8000526:	f3bf 8f6f 	isb	sy
 800052a:	f3bf 8f4f 	dsb	sy
vPortFree():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:278 (discriminator 1)
 800052e:	e7fe      	b.n	800052e <vPortFree+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:279 (discriminator 2)
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000530:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8000534:	b141      	cbz	r1, 8000548 <vPortFree+0x3c>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8000536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800053a:	f383 8811 	msr	BASEPRI, r3
 800053e:	f3bf 8f6f 	isb	sy
 8000542:	f3bf 8f4f 	dsb	sy
vPortFree():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:279 (discriminator 2)
 8000546:	e7fe      	b.n	8000546 <vPortFree+0x3a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:287
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000548:	ea23 0302 	bic.w	r3, r3, r2
 800054c:	f840 3c04 	str.w	r3, [r0, #-4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:289
				vTaskSuspendAll();
 8000550:	f007 f97a 	bl	8007848 <vTaskSuspendAll>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:292
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000554:	4a08      	ldr	r2, [pc, #32]	; (8000578 <vPortFree+0x6c>)
 8000556:	f854 3c04 	ldr.w	r3, [r4, #-4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:294
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800055a:	f1a4 0008 	sub.w	r0, r4, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:292
					xFreeBytesRemaining += pxLink->xBlockSize;
 800055e:	6811      	ldr	r1, [r2, #0]
 8000560:	440b      	add	r3, r1
 8000562:	6013      	str	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:294
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000564:	f7ff ff24 	bl	80003b0 <prvInsertBlockIntoFreeList>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:308
}
 8000568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:296
				( void ) xTaskResumeAll();
 800056c:	f007 ba14 	b.w	8007998 <xTaskResumeAll>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/MemMang/heap_4.c:308
}
 8000570:	bd10      	pop	{r4, pc}
 8000572:	bf00      	nop
 8000574:	20007d80 	.word	0x20007d80
 8000578:	20007d84 	.word	0x20007d84

0800057c <osKernelStart>:
osKernelStart():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:151
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800057c:	b508      	push	{r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:152
  vTaskStartScheduler();
 800057e:	f007 f927 	bl	80077d0 <vTaskStartScheduler>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:155
  
  return osOK;
}
 8000582:	2000      	movs	r0, #0
 8000584:	bd08      	pop	{r3, pc}

08000586 <osKernelSysTick>:
__get_IPSR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:209
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000586:	f3ef 8305 	mrs	r3, IPSR
osKernelSysTick():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:186
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 800058a:	b10b      	cbz	r3, 8000590 <osKernelSysTick+0xa>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:187
    return xTaskGetTickCountFromISR();
 800058c:	f007 b96a 	b.w	8007864 <xTaskGetTickCountFromISR>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:190
  }
  else {
    return xTaskGetTickCount();
 8000590:	f007 b962 	b.w	8007858 <xTaskGetTickCount>

08000594 <osThreadCreate>:
osThreadCreate():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:203
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000594:	b530      	push	{r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:225

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000596:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:203
{
 800059a:	b085      	sub	sp, #20
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:225
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800059c:	8a02      	ldrh	r2, [r0, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:203
{
 800059e:	460b      	mov	r3, r1
makeFreeRtosPriority():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:107
  if (priority != osPriorityError) {
 80005a0:	2c84      	cmp	r4, #132	; 0x84
osThreadCreate():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:225
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80005a2:	e9d0 1500 	ldrd	r1, r5, [r0]
makeFreeRtosPriority():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:108
    fpriority += (priority - osPriorityIdle);
 80005a6:	bf14      	ite	ne
 80005a8:	3403      	addne	r4, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:105
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80005aa:	2400      	moveq	r4, #0
osThreadCreate():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:225
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80005ac:	a803      	add	r0, sp, #12
 80005ae:	e9cd 4000 	strd	r4, r0, [sp]
 80005b2:	4628      	mov	r0, r5
 80005b4:	f006 ff84 	bl	80074c0 <xTaskCreate>
 80005b8:	2801      	cmp	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:232
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80005ba:	bf0c      	ite	eq
 80005bc:	9803      	ldreq	r0, [sp, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:228
    return NULL;
 80005be:	2000      	movne	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:233
}
 80005c0:	b005      	add	sp, #20
 80005c2:	bd30      	pop	{r4, r5, pc}

080005c4 <osThreadTerminate>:
osThreadTerminate():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:256
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 80005c4:	b508      	push	{r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:258
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 80005c6:	f007 f863 	bl	8007690 <vTaskDelete>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:263
  return osOK;
#else
  return osErrorOS;
#endif
}
 80005ca:	2000      	movs	r0, #0
 80005cc:	bd08      	pop	{r3, pc}

080005ce <osDelay>:
osDelay():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:327
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80005ce:	2800      	cmp	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:323
{
 80005d0:	b508      	push	{r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:327
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80005d2:	bf08      	it	eq
 80005d4:	2001      	moveq	r0, #1
 80005d6:	f007 fa55 	bl	8007a84 <vTaskDelay>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:335
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80005da:	2000      	movs	r0, #0
 80005dc:	bd08      	pop	{r3, pc}

080005de <osMutexCreate>:
osMutexCreate():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:612
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80005de:	2001      	movs	r0, #1
 80005e0:	f006 bc22 	b.w	8006e28 <xQueueCreateMutex>

080005e4 <osMutexWait>:
osMutexWait():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:627
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80005e4:	b513      	push	{r0, r1, r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:629
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80005e6:	2400      	movs	r4, #0
 80005e8:	9401      	str	r4, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:632
  
  
  if (mutex_id == NULL) {
 80005ea:	b1e0      	cbz	r0, 8000626 <osMutexWait+0x42>
__get_IPSR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:209
 80005ec:	f3ef 8305 	mrs	r3, IPSR
osMutexWait():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:647
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80005f0:	b19b      	cbz	r3, 800061a <osMutexWait+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:648
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80005f2:	aa01      	add	r2, sp, #4
 80005f4:	4621      	mov	r1, r4
 80005f6:	f006 fe4b 	bl	8007290 <xQueueReceiveFromISR>
 80005fa:	2801      	cmp	r0, #1
 80005fc:	d111      	bne.n	8000622 <osMutexWait+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:651
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 80005fe:	9b01      	ldr	r3, [sp, #4]
 8000600:	b913      	cbnz	r3, 8000608 <osMutexWait+0x24>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:657
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8000602:	2000      	movs	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:658
}
 8000604:	b002      	add	sp, #8
 8000606:	bd10      	pop	{r4, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:651 (discriminator 1)
	portEND_SWITCHING_ISR(taskWoken);
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <osMutexWait+0x48>)
 800060a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	f3bf 8f4f 	dsb	sy
 8000614:	f3bf 8f6f 	isb	sy
 8000618:	e7f3      	b.n	8000602 <osMutexWait+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:653
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800061a:	f006 fd75 	bl	8007108 <xQueueSemaphoreTake>
 800061e:	2801      	cmp	r0, #1
 8000620:	d0ef      	beq.n	8000602 <osMutexWait+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:654
    return osErrorOS;
 8000622:	20ff      	movs	r0, #255	; 0xff
 8000624:	e7ee      	b.n	8000604 <osMutexWait+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:633
    return osErrorParameter;
 8000626:	2080      	movs	r0, #128	; 0x80
 8000628:	e7ec      	b.n	8000604 <osMutexWait+0x20>
 800062a:	bf00      	nop
 800062c:	e000ed04 	.word	0xe000ed04

08000630 <osMutexRelease>:
osMutexRelease():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:667
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8000630:	b513      	push	{r0, r1, r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:669
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8000632:	2400      	movs	r4, #0
 8000634:	9401      	str	r4, [sp, #4]
__get_IPSR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:209
 8000636:	f3ef 8305 	mrs	r3, IPSR
osMutexRelease():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:671
  
  if (inHandlerMode()) {
 800063a:	b193      	cbz	r3, 8000662 <osMutexRelease+0x32>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:672
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800063c:	a901      	add	r1, sp, #4
 800063e:	f006 fc6f 	bl	8006f20 <xQueueGiveFromISR>
 8000642:	2801      	cmp	r0, #1
 8000644:	d113      	bne.n	800066e <osMutexRelease+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:675
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8000646:	9b01      	ldr	r3, [sp, #4]
 8000648:	b913      	cbnz	r3, 8000650 <osMutexRelease+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:668
  osStatus result = osOK;
 800064a:	2000      	movs	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:682
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800064c:	b002      	add	sp, #8
 800064e:	bd10      	pop	{r4, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:675 (discriminator 1)
    portEND_SWITCHING_ISR(taskWoken);
 8000650:	4b08      	ldr	r3, [pc, #32]	; (8000674 <osMutexRelease+0x44>)
 8000652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	f3bf 8f4f 	dsb	sy
 800065c:	f3bf 8f6f 	isb	sy
 8000660:	e7f3      	b.n	800064a <osMutexRelease+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:677
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8000662:	461a      	mov	r2, r3
 8000664:	4619      	mov	r1, r3
 8000666:	f006 fb2d 	bl	8006cc4 <xQueueGenericSend>
 800066a:	2801      	cmp	r0, #1
 800066c:	d0ed      	beq.n	800064a <osMutexRelease+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:679
    result = osErrorOS;
 800066e:	20ff      	movs	r0, #255	; 0xff
 8000670:	e7ec      	b.n	800064c <osMutexRelease+0x1c>
 8000672:	bf00      	nop
 8000674:	e000ed04 	.word	0xe000ed04

08000678 <osMutexDelete>:
osMutexDelete():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:691
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 8000678:	b510      	push	{r4, lr}
__get_IPSR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:209
 800067a:	f3ef 8405 	mrs	r4, IPSR
osMutexDelete():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:692
  if (inHandlerMode()) {
 800067e:	b91c      	cbnz	r4, 8000688 <osMutexDelete+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:696
    return osErrorISR;
  }

  vQueueDelete(mutex_id);
 8000680:	f006 fe8c 	bl	800739c <vQueueDelete>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:699

  return osOK;
}
 8000684:	4620      	mov	r0, r4
 8000686:	bd10      	pop	{r4, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:693
    return osErrorISR;
 8000688:	2482      	movs	r4, #130	; 0x82
 800068a:	e7fb      	b.n	8000684 <osMutexDelete+0xc>

0800068c <osSemaphoreCreate>:
osSemaphoreCreate():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:758
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800068c:	2901      	cmp	r1, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:713
{ 
 800068e:	4608      	mov	r0, r1
 8000690:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:758
  if (count == 1) {
 8000692:	d10c      	bne.n	80006ae <osSemaphoreCreate+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:759
    vSemaphoreCreateBinary(sema);
 8000694:	2203      	movs	r2, #3
 8000696:	2100      	movs	r1, #0
 8000698:	f006 fad2 	bl	8006c40 <xQueueGenericCreate>
 800069c:	4604      	mov	r4, r0
 800069e:	b120      	cbz	r0, 80006aa <osSemaphoreCreate+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:759 (discriminator 1)
 80006a0:	2300      	movs	r3, #0
 80006a2:	461a      	mov	r2, r3
 80006a4:	4619      	mov	r1, r3
 80006a6:	f006 fb0d 	bl	8006cc4 <xQueueGenericSend>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:770
#else
    return NULL;
#endif
  }
#endif
}
 80006aa:	4620      	mov	r0, r4
 80006ac:	bd10      	pop	{r4, pc}
 80006ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:764
    return xSemaphoreCreateCounting(count, count);
 80006b2:	f006 bae9 	b.w	8006c88 <xQueueCreateCountingSemaphore>
	...

080006b8 <osSemaphoreWait>:
osSemaphoreWait():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:780
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80006b8:	b513      	push	{r0, r1, r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:782
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80006ba:	2400      	movs	r4, #0
 80006bc:	9401      	str	r4, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:785
  
  
  if (semaphore_id == NULL) {
 80006be:	b1e0      	cbz	r0, 80006fa <osSemaphoreWait+0x42>
__get_IPSR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:209
 80006c0:	f3ef 8305 	mrs	r3, IPSR
osSemaphoreWait():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:800
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80006c4:	b19b      	cbz	r3, 80006ee <osSemaphoreWait+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:801
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80006c6:	aa01      	add	r2, sp, #4
 80006c8:	4621      	mov	r1, r4
 80006ca:	f006 fde1 	bl	8007290 <xQueueReceiveFromISR>
 80006ce:	2801      	cmp	r0, #1
 80006d0:	d111      	bne.n	80006f6 <osSemaphoreWait+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:804
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 80006d2:	9b01      	ldr	r3, [sp, #4]
 80006d4:	b913      	cbnz	r3, 80006dc <osSemaphoreWait+0x24>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:810
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 80006d6:	2000      	movs	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:811
}
 80006d8:	b002      	add	sp, #8
 80006da:	bd10      	pop	{r4, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:804 (discriminator 1)
	portEND_SWITCHING_ISR(taskWoken);
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <osSemaphoreWait+0x48>)
 80006de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	f3bf 8f4f 	dsb	sy
 80006e8:	f3bf 8f6f 	isb	sy
 80006ec:	e7f3      	b.n	80006d6 <osSemaphoreWait+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:806
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80006ee:	f006 fd0b 	bl	8007108 <xQueueSemaphoreTake>
 80006f2:	2801      	cmp	r0, #1
 80006f4:	d0ef      	beq.n	80006d6 <osSemaphoreWait+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:807
    return osErrorOS;
 80006f6:	20ff      	movs	r0, #255	; 0xff
 80006f8:	e7ee      	b.n	80006d8 <osSemaphoreWait+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:786
    return osErrorParameter;
 80006fa:	2080      	movs	r0, #128	; 0x80
 80006fc:	e7ec      	b.n	80006d8 <osSemaphoreWait+0x20>
 80006fe:	bf00      	nop
 8000700:	e000ed04 	.word	0xe000ed04

08000704 <osSemaphoreRelease>:
osSemaphoreRelease():
 8000704:	f7ff bf94 	b.w	8000630 <osMutexRelease>

08000708 <osSemaphoreDelete>:
osSemaphoreDelete():
 8000708:	f7ff bfb6 	b.w	8000678 <osMutexDelete>

0800070c <osMessageCreate>:
osMessageCreate():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1055
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800070c:	2200      	movs	r2, #0
 800070e:	e9d0 0100 	ldrd	r0, r1, [r0]
 8000712:	f006 ba95 	b.w	8006c40 <xQueueGenericCreate>
	...

08000718 <osMessagePut>:
osMessagePut():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1068
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8000718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1069
  portBASE_TYPE taskWoken = pdFALSE;
 800071a:	2400      	movs	r4, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1074
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 800071c:	2a00      	cmp	r2, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1068
{
 800071e:	9101      	str	r1, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1069
  portBASE_TYPE taskWoken = pdFALSE;
 8000720:	9403      	str	r4, [sp, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1074
    ticks = 1;
 8000722:	bf08      	it	eq
 8000724:	2201      	moveq	r2, #1
__get_IPSR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:209
 8000726:	f3ef 8305 	mrs	r3, IPSR
osMessagePut():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1077
  }
  
  if (inHandlerMode()) {
 800072a:	b1a3      	cbz	r3, 8000756 <osMessagePut+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1078
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800072c:	4623      	mov	r3, r4
 800072e:	aa03      	add	r2, sp, #12
 8000730:	a901      	add	r1, sp, #4
 8000732:	f006 fb94 	bl	8006e5e <xQueueGenericSendFromISR>
 8000736:	2801      	cmp	r0, #1
 8000738:	d112      	bne.n	8000760 <osMessagePut+0x48>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1081
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800073a:	9b03      	ldr	r3, [sp, #12]
 800073c:	b913      	cbnz	r3, 8000744 <osMessagePut+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1089
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 800073e:	2000      	movs	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1090
}
 8000740:	b004      	add	sp, #16
 8000742:	bd10      	pop	{r4, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1081 (discriminator 1)
    portEND_SWITCHING_ISR(taskWoken);
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <osMessagePut+0x4c>)
 8000746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	f3bf 8f4f 	dsb	sy
 8000750:	f3bf 8f6f 	isb	sy
 8000754:	e7f3      	b.n	800073e <osMessagePut+0x26>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1084
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8000756:	a901      	add	r1, sp, #4
 8000758:	f006 fab4 	bl	8006cc4 <xQueueGenericSend>
 800075c:	2801      	cmp	r0, #1
 800075e:	d0ee      	beq.n	800073e <osMessagePut+0x26>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1085
      return osErrorOS;
 8000760:	20ff      	movs	r0, #255	; 0xff
 8000762:	e7ed      	b.n	8000740 <osMessagePut+0x28>
 8000764:	e000ed04 	.word	0xe000ed04

08000768 <osMessageGet>:
osMessageGet():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1100
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8000768:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1106
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 800076a:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1100
{
 800076c:	4604      	mov	r4, r0
 800076e:	4616      	mov	r6, r2
 8000770:	4608      	mov	r0, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1105
  event.def.message_id = queue_id;
 8000772:	9103      	str	r1, [sp, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1106
  event.value.v = 0;
 8000774:	ad01      	add	r5, sp, #4
 8000776:	9302      	str	r3, [sp, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1108
  
  if (queue_id == NULL) {
 8000778:	b911      	cbnz	r1, 8000780 <osMessageGet+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1109
    event.status = osErrorParameter;
 800077a:	2380      	movs	r3, #128	; 0x80
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1139
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	e016      	b.n	80007ae <osMessageGet+0x46>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1113
  taskWoken = pdFALSE;
 8000780:	9300      	str	r3, [sp, #0]
__get_IPSR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:209
 8000782:	f3ef 8305 	mrs	r3, IPSR
osMessageGet():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1126
  if (inHandlerMode()) {
 8000786:	b1cb      	cbz	r3, 80007bc <osMessageGet+0x54>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1127
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8000788:	466a      	mov	r2, sp
 800078a:	a902      	add	r1, sp, #8
 800078c:	f006 fd80 	bl	8007290 <xQueueReceiveFromISR>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1132
      event.status = osOK;
 8000790:	2801      	cmp	r0, #1
 8000792:	bf0c      	ite	eq
 8000794:	2310      	moveq	r3, #16
 8000796:	2300      	movne	r3, #0
 8000798:	9301      	str	r3, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1134
    portEND_SWITCHING_ISR(taskWoken);
 800079a:	9b00      	ldr	r3, [sp, #0]
 800079c:	b13b      	cbz	r3, 80007ae <osMessageGet+0x46>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1134 (discriminator 1)
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <osMessageGet+0x6c>)
 80007a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	f3bf 8f4f 	dsb	sy
 80007aa:	f3bf 8f6f 	isb	sy
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1146
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
 80007ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1147
}
 80007b6:	4620      	mov	r0, r4
 80007b8:	b004      	add	sp, #16
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1137
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80007bc:	a902      	add	r1, sp, #8
 80007be:	f006 fc03 	bl	8006fc8 <xQueueReceive>
 80007c2:	2801      	cmp	r0, #1
 80007c4:	d101      	bne.n	80007ca <osMessageGet+0x62>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1139
      event.status = osEventMessage;
 80007c6:	2310      	movs	r3, #16
 80007c8:	e7d8      	b.n	800077c <osMessageGet+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1142
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80007ca:	2e00      	cmp	r6, #0
 80007cc:	bf18      	it	ne
 80007ce:	2640      	movne	r6, #64	; 0x40
 80007d0:	9601      	str	r6, [sp, #4]
 80007d2:	e7ec      	b.n	80007ae <osMessageGet+0x46>
 80007d4:	e000ed04 	.word	0xe000ed04

080007d8 <osSystickHandler>:
osSystickHandler():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1363
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80007d8:	b508      	push	{r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1366

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80007da:	f007 faff 	bl	8007ddc <xTaskGetSchedulerState>
 80007de:	2801      	cmp	r0, #1
 80007e0:	d003      	beq.n	80007ea <osSystickHandler+0x12>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1373
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80007e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1369
    xPortSysTickHandler();
 80007e6:	f000 b8dd 	b.w	80009a4 <xPortSysTickHandler>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1373
}
 80007ea:	bd08      	pop	{r3, pc}

080007ec <osThreadList>:
osThreadList():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1542
* @param   buffer   A buffer into which the above mentioned details
*          will be written
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadList (uint8_t *buffer)
{
 80007ec:	b508      	push	{r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1544
#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )
  vTaskList((char *)buffer);
 80007ee:	f007 fbff 	bl	8007ff0 <vTaskList>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1547
#endif
  return osOK;
}
 80007f2:	2000      	movs	r0, #0
 80007f4:	bd08      	pop	{r3, pc}

080007f6 <osMessageWaiting>:
__get_IPSR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:209
 80007f6:	f3ef 8305 	mrs	r3, IPSR
osMessageWaiting():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1598
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
  if (inHandlerMode()) {
 80007fa:	b10b      	cbz	r3, 8000800 <osMessageWaiting+0xa>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1599
    return uxQueueMessagesWaitingFromISR(queue_id);
 80007fc:	f006 bdaa 	b.w	8007354 <uxQueueMessagesWaitingFromISR>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c:1603
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8000800:	f006 bd95 	b.w	800732e <uxQueueMessagesWaiting>

08000804 <osMessageDelete>:
osMessageDelete():
 8000804:	f7ff bf38 	b.w	8000678 <osMutexDelete>

08000808 <prvPortStartFirstTask>:
prvPortStartFirstTask():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:267
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8000808:	4808      	ldr	r0, [pc, #32]	; (800082c <prvPortStartFirstTask+0x24>)
 800080a:	6800      	ldr	r0, [r0, #0]
 800080c:	6800      	ldr	r0, [r0, #0]
 800080e:	f380 8808 	msr	MSP, r0
 8000812:	f04f 0000 	mov.w	r0, #0
 8000816:	f380 8814 	msr	CONTROL, r0
 800081a:	b662      	cpsie	i
 800081c:	b661      	cpsie	f
 800081e:	f3bf 8f4f 	dsb	sy
 8000822:	f3bf 8f6f 	isb	sy
 8000826:	df00      	svc	0
 8000828:	bf00      	nop
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:281
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800082a:	0000      	.short	0x0000
 800082c:	e000ed08 	.word	0xe000ed08

08000830 <vPortEnableVFP>:
vPortEnableVFP():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:703
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8000830:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000840 <vPortEnableVFP+0x10>
 8000834:	6801      	ldr	r1, [r0, #0]
 8000836:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083a:	6001      	str	r1, [r0, #0]
 800083c:	4770      	bx	lr
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:712
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800083e:	0000      	.short	0x0000
 8000840:	e000ed88 	.word	0xe000ed88

08000844 <prvTaskExitError>:
prvTaskExitError():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:219
volatile uint32_t ulDummy = 0;
 8000844:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:218
{
 8000846:	b082      	sub	sp, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:219
volatile uint32_t ulDummy = 0;
 8000848:	9301      	str	r3, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:227
	configASSERT( uxCriticalNesting == ~0UL );
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <prvTaskExitError+0x3c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	3301      	adds	r3, #1
 8000850:	d008      	beq.n	8000864 <prvTaskExitError+0x20>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8000852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000856:	f383 8811 	msr	BASEPRI, r3
 800085a:	f3bf 8f6f 	isb	sy
 800085e:	f3bf 8f4f 	dsb	sy
prvTaskExitError():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:227
 8000862:	e7fe      	b.n	8000862 <prvTaskExitError+0x1e>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8000864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000868:	f383 8811 	msr	BASEPRI, r3
 800086c:	f3bf 8f6f 	isb	sy
 8000870:	f3bf 8f4f 	dsb	sy
prvTaskExitError():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:229 (discriminator 1)
	while( ulDummy == 0 )
 8000874:	9b01      	ldr	r3, [sp, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d0fc      	beq.n	8000874 <prvTaskExitError+0x30>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:239
}
 800087a:	b002      	add	sp, #8
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	20000000 	.word	0x20000000

08000884 <pxPortInitialiseStack>:
pxPortInitialiseStack():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:196
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000884:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:198
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000888:	f021 0101 	bic.w	r1, r1, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:204
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800088c:	f840 2c20 	str.w	r2, [r0, #-32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:214
}
 8000890:	3844      	subs	r0, #68	; 0x44
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:196
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000892:	6403      	str	r3, [r0, #64]	; 0x40
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:200
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <pxPortInitialiseStack+0x20>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:198
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000896:	63c1      	str	r1, [r0, #60]	; 0x3c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:200
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000898:	6383      	str	r3, [r0, #56]	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:209
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800089a:	f06f 0302 	mvn.w	r3, #2
 800089e:	6203      	str	r3, [r0, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:214
}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	08000845 	.word	0x08000845
	...

080008b0 <SVC_Handler>:
SVC_Handler():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:244
	__asm volatile (
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <pxCurrentTCBConst2>)
 80008b2:	6819      	ldr	r1, [r3, #0]
 80008b4:	6808      	ldr	r0, [r1, #0]
 80008b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008ba:	f380 8809 	msr	PSP, r0
 80008be:	f3bf 8f6f 	isb	sy
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f380 8811 	msr	BASEPRI, r0
 80008ca:	4770      	bx	lr
 80008cc:	f3af 8000 	nop.w

080008d0 <pxCurrentTCBConst2>:
 80008d0:	20007eb0 	.word	0x20007eb0

080008d4 <vPortEnterCritical>:
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 80008d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008d8:	f383 8811 	msr	BASEPRI, r3
 80008dc:	f3bf 8f6f 	isb	sy
 80008e0:	f3bf 8f4f 	dsb	sy
vPortEnterCritical():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:406
	uxCriticalNesting++;
 80008e4:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <vPortEnterCritical+0x3c>)
 80008e6:	6813      	ldr	r3, [r2, #0]
 80008e8:	3301      	adds	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:413
	if( uxCriticalNesting == 1 )
 80008ea:	2b01      	cmp	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:406
	uxCriticalNesting++;
 80008ec:	6013      	str	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:413
	if( uxCriticalNesting == 1 )
 80008ee:	d10d      	bne.n	800090c <vPortEnterCritical+0x38>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:415
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <vPortEnterCritical+0x40>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80008f8:	d008      	beq.n	800090c <vPortEnterCritical+0x38>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 80008fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008fe:	f383 8811 	msr	BASEPRI, r3
 8000902:	f3bf 8f6f 	isb	sy
 8000906:	f3bf 8f4f 	dsb	sy
vPortEnterCritical():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:415 (discriminator 1)
 800090a:	e7fe      	b.n	800090a <vPortEnterCritical+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:417
}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	20000000 	.word	0x20000000
 8000914:	e000ed04 	.word	0xe000ed04

08000918 <vPortExitCritical>:
vPortExitCritical():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:422
	configASSERT( uxCriticalNesting );
 8000918:	4a08      	ldr	r2, [pc, #32]	; (800093c <vPortExitCritical+0x24>)
 800091a:	6813      	ldr	r3, [r2, #0]
 800091c:	b943      	cbnz	r3, 8000930 <vPortExitCritical+0x18>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 800091e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000922:	f383 8811 	msr	BASEPRI, r3
 8000926:	f3bf 8f6f 	isb	sy
 800092a:	f3bf 8f4f 	dsb	sy
vPortExitCritical():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:422 (discriminator 1)
 800092e:	e7fe      	b.n	800092e <vPortExitCritical+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:423 (discriminator 2)
	uxCriticalNesting--;
 8000930:	3b01      	subs	r3, #1
 8000932:	6013      	str	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:424 (discriminator 2)
	if( uxCriticalNesting == 0 )
 8000934:	b90b      	cbnz	r3, 800093a <vPortExitCritical+0x22>
vPortSetBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:229
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000936:	f383 8811 	msr	BASEPRI, r3
vPortExitCritical():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:428
}
 800093a:	4770      	bx	lr
 800093c:	20000000 	.word	0x20000000

08000940 <PendSV_Handler>:
PendSV_Handler():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:435
	__asm volatile
 8000940:	f3ef 8009 	mrs	r0, PSP
 8000944:	f3bf 8f6f 	isb	sy
 8000948:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <pxCurrentTCBConst>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	f01e 0f10 	tst.w	lr, #16
 8000950:	bf08      	it	eq
 8000952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800095a:	6010      	str	r0, [r2, #0]
 800095c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000960:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000964:	f380 8811 	msr	BASEPRI, r0
 8000968:	f3bf 8f4f 	dsb	sy
 800096c:	f3bf 8f6f 	isb	sy
 8000970:	f007 f8ac 	bl	8007acc <vTaskSwitchContext>
 8000974:	f04f 0000 	mov.w	r0, #0
 8000978:	f380 8811 	msr	BASEPRI, r0
 800097c:	bc09      	pop	{r0, r3}
 800097e:	6819      	ldr	r1, [r3, #0]
 8000980:	6808      	ldr	r0, [r1, #0]
 8000982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000986:	f01e 0f10 	tst.w	lr, #16
 800098a:	bf08      	it	eq
 800098c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000990:	f380 8809 	msr	PSP, r0
 8000994:	f3bf 8f6f 	isb	sy
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	f3af 8000 	nop.w

080009a0 <pxCurrentTCBConst>:
 80009a0:	20007eb0 	.word	0x20007eb0

080009a4 <xPortSysTickHandler>:
xPortSysTickHandler():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:489
{
 80009a4:	b508      	push	{r3, lr}
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
	__asm volatile
 80009a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009aa:	f383 8811 	msr	BASEPRI, r3
 80009ae:	f3bf 8f6f 	isb	sy
 80009b2:	f3bf 8f4f 	dsb	sy
xPortSysTickHandler():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:497
		if( xTaskIncrementTick() != pdFALSE )
 80009b6:	f006 ff5d 	bl	8007874 <xTaskIncrementTick>
 80009ba:	b118      	cbz	r0, 80009c4 <xPortSysTickHandler+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:501
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80009bc:	4b03      	ldr	r3, [pc, #12]	; (80009cc <xPortSysTickHandler+0x28>)
 80009be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009c2:	601a      	str	r2, [r3, #0]
vPortSetBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:229
	__asm volatile
 80009c4:	2300      	movs	r3, #0
 80009c6:	f383 8811 	msr	BASEPRI, r3
xPortSysTickHandler():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:505
}
 80009ca:	bd08      	pop	{r3, pc}
 80009cc:	e000ed04 	.word	0xe000ed04

080009d0 <vPortSetupTimerInterrupt>:
vPortSetupTimerInterrupt():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:691
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	4a08      	ldr	r2, [pc, #32]	; (80009f4 <vPortSetupTimerInterrupt+0x24>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:692
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80009d4:	4908      	ldr	r1, [pc, #32]	; (80009f8 <vPortSetupTimerInterrupt+0x28>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:691
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80009d6:	6013      	str	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:692
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80009d8:	600b      	str	r3, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:695
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80009da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <vPortSetupTimerInterrupt+0x2c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e6:	4906      	ldr	r1, [pc, #24]	; (8000a00 <vPortSetupTimerInterrupt+0x30>)
 80009e8:	3b01      	subs	r3, #1
 80009ea:	600b      	str	r3, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:696
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80009ec:	2307      	movs	r3, #7
 80009ee:	6013      	str	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:697
}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000e010 	.word	0xe000e010
 80009f8:	e000e018 	.word	0xe000e018
 80009fc:	20000020 	.word	0x20000020
 8000a00:	e000e014 	.word	0xe000e014

08000a04 <xPortStartScheduler>:
xPortStartScheduler():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:296
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000a04:	4b37      	ldr	r3, [pc, #220]	; (8000ae4 <xPortStartScheduler+0xe0>)
 8000a06:	4a38      	ldr	r2, [pc, #224]	; (8000ae8 <xPortStartScheduler+0xe4>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:288
{
 8000a08:	b513      	push	{r0, r1, r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:296
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000a0a:	6819      	ldr	r1, [r3, #0]
 8000a0c:	4291      	cmp	r1, r2
 8000a0e:	d108      	bne.n	8000a22 <xPortStartScheduler+0x1e>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
	__asm volatile
 8000a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a14:	f383 8811 	msr	BASEPRI, r3
 8000a18:	f3bf 8f6f 	isb	sy
 8000a1c:	f3bf 8f4f 	dsb	sy
xPortStartScheduler():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:296 (discriminator 2)
 8000a20:	e7fe      	b.n	8000a20 <xPortStartScheduler+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:297 (discriminator 2)
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	4b31      	ldr	r3, [pc, #196]	; (8000aec <xPortStartScheduler+0xe8>)
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d108      	bne.n	8000a3c <xPortStartScheduler+0x38>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8000a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a2e:	f383 8811 	msr	BASEPRI, r3
 8000a32:	f3bf 8f6f 	isb	sy
 8000a36:	f3bf 8f4f 	dsb	sy
xPortStartScheduler():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:297 (discriminator 3)
 8000a3a:	e7fe      	b.n	8000a3a <xPortStartScheduler+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:311 (discriminator 2)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000a3c:	4b2c      	ldr	r3, [pc, #176]	; (8000af0 <xPortStartScheduler+0xec>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:326 (discriminator 2)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000a3e:	2100      	movs	r1, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:311 (discriminator 2)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000a40:	781a      	ldrb	r2, [r3, #0]
 8000a42:	b2d2      	uxtb	r2, r2
 8000a44:	9201      	str	r2, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:315 (discriminator 2)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000a46:	22ff      	movs	r2, #255	; 0xff
 8000a48:	701a      	strb	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:318 (discriminator 2)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000a4a:	781b      	ldrb	r3, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:321 (discriminator 2)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000a4c:	4a29      	ldr	r2, [pc, #164]	; (8000af4 <xPortStartScheduler+0xf0>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:318 (discriminator 2)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	f88d 3003 	strb.w	r3, [sp, #3]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:321 (discriminator 2)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000a54:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000a58:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000a5c:	7013      	strb	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:325 (discriminator 2)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000a5e:	2307      	movs	r3, #7
 8000a60:	4a25      	ldr	r2, [pc, #148]	; (8000af8 <xPortStartScheduler+0xf4>)
 8000a62:	6013      	str	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:326
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000a64:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8000a68:	1e5c      	subs	r4, r3, #1
 8000a6a:	0600      	lsls	r0, r0, #24
 8000a6c:	d40c      	bmi.n	8000a88 <xPortStartScheduler+0x84>
 8000a6e:	b111      	cbz	r1, 8000a76 <xPortStartScheduler+0x72>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:346
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000a70:	2b03      	cmp	r3, #3
 8000a72:	6013      	str	r3, [r2, #0]
 8000a74:	d011      	beq.n	8000a9a <xPortStartScheduler+0x96>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8000a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a7a:	f383 8811 	msr	BASEPRI, r3
 8000a7e:	f3bf 8f6f 	isb	sy
 8000a82:	f3bf 8f4f 	dsb	sy
xPortStartScheduler():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:346 (discriminator 4)
 8000a86:	e7fe      	b.n	8000a86 <xPortStartScheduler+0x82>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:329
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000a88:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	f88d 3003 	strb.w	r3, [sp, #3]
 8000a96:	4623      	mov	r3, r4
 8000a98:	e7e4      	b.n	8000a64 <xPortStartScheduler+0x60>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:353 (discriminator 2)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000a9a:	f44f 7340 	mov.w	r3, #768	; 0x300
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:370 (discriminator 2)
	uxCriticalNesting = 0;
 8000a9e:	2400      	movs	r4, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:353 (discriminator 2)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000aa0:	6013      	str	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:357 (discriminator 2)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000aa2:	9b01      	ldr	r3, [sp, #4]
 8000aa4:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <xPortStartScheduler+0xec>)
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	7013      	strb	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:362 (discriminator 2)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <xPortStartScheduler+0xf8>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000ab2:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:363 (discriminator 2)
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8000aba:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:367 (discriminator 2)
	vPortSetupTimerInterrupt();
 8000abc:	f7ff ff88 	bl	80009d0 <vPortSetupTimerInterrupt>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:370 (discriminator 2)
	uxCriticalNesting = 0;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <xPortStartScheduler+0xfc>)
 8000ac2:	601c      	str	r4, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:373 (discriminator 2)
	vPortEnableVFP();
 8000ac4:	f7ff feb4 	bl	8000830 <vPortEnableVFP>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:376 (discriminator 2)
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8000ac8:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <xPortStartScheduler+0x100>)
 8000aca:	6813      	ldr	r3, [r2, #0]
 8000acc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000ad0:	6013      	str	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:379 (discriminator 2)
	prvPortStartFirstTask();
 8000ad2:	f7ff fe99 	bl	8000808 <prvPortStartFirstTask>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:387 (discriminator 2)
	vTaskSwitchContext();
 8000ad6:	f006 fff9 	bl	8007acc <vTaskSwitchContext>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:388 (discriminator 2)
	prvTaskExitError();
 8000ada:	f7ff feb3 	bl	8000844 <prvTaskExitError>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:392 (discriminator 2)
}
 8000ade:	4620      	mov	r0, r4
 8000ae0:	b002      	add	sp, #8
 8000ae2:	bd10      	pop	{r4, pc}
 8000ae4:	e000ed00 	.word	0xe000ed00
 8000ae8:	410fc271 	.word	0x410fc271
 8000aec:	410fc270 	.word	0x410fc270
 8000af0:	e000e400 	.word	0xe000e400
 8000af4:	20007d94 	.word	0x20007d94
 8000af8:	20007d98 	.word	0x20007d98
 8000afc:	e000ed20 	.word	0xe000ed20
 8000b00:	20000000 	.word	0x20000000
 8000b04:	e000ef34 	.word	0xe000ef34

08000b08 <vPortValidateInterruptPriority>:
vPortValidateInterruptPriority():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:723
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8000b08:	f3ef 8305 	mrs	r3, IPSR
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:726

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d90e      	bls.n	8000b2e <vPortValidateInterruptPriority+0x26>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:729
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000b10:	4a10      	ldr	r2, [pc, #64]	; (8000b54 <vPortValidateInterruptPriority+0x4c>)
 8000b12:	5c9b      	ldrb	r3, [r3, r2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:754
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000b14:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <vPortValidateInterruptPriority+0x50>)
 8000b16:	7812      	ldrb	r2, [r2, #0]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d908      	bls.n	8000b2e <vPortValidateInterruptPriority+0x26>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8000b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b20:	f383 8811 	msr	BASEPRI, r3
 8000b24:	f3bf 8f6f 	isb	sy
 8000b28:	f3bf 8f4f 	dsb	sy
vPortValidateInterruptPriority():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:754 (discriminator 1)
 8000b2c:	e7fe      	b.n	8000b2c <vPortValidateInterruptPriority+0x24>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:770 (discriminator 2)
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <vPortValidateInterruptPriority+0x54>)
 8000b30:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <vPortValidateInterruptPriority+0x58>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	6812      	ldr	r2, [r2, #0]
 8000b36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d908      	bls.n	8000b50 <vPortValidateInterruptPriority+0x48>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8000b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b42:	f383 8811 	msr	BASEPRI, r3
 8000b46:	f3bf 8f6f 	isb	sy
 8000b4a:	f3bf 8f4f 	dsb	sy
vPortValidateInterruptPriority():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:770 (discriminator 2)
 8000b4e:	e7fe      	b.n	8000b4e <vPortValidateInterruptPriority+0x46>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c:771
	}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000e3f0 	.word	0xe000e3f0
 8000b58:	20007d94 	.word	0x20007d94
 8000b5c:	e000ed0c 	.word	0xe000ed0c
 8000b60:	20007d98 	.word	0x20007d98

08000b64 <ethernet_input>:
ethernet_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:89
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8000b64:	8943      	ldrh	r3, [r0, #10]
 8000b66:	2b0e      	cmp	r3, #14
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:82
{
 8000b68:	b570      	push	{r4, r5, r6, lr}
 8000b6a:	4604      	mov	r4, r0
 8000b6c:	460d      	mov	r5, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:89
  if (p->len <= SIZEOF_ETH_HDR) {
 8000b6e:	d914      	bls.n	8000b9a <ethernet_input+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:98
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8000b70:	6840      	ldr	r0, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:140

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8000b72:	7803      	ldrb	r3, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:107
  type = ethhdr->type;
 8000b74:	8986      	ldrh	r6, [r0, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:140
  if (ethhdr->dest.addr[0] & 1) {
 8000b76:	07d9      	lsls	r1, r3, #31
 8000b78:	d50a      	bpl.n	8000b90 <ethernet_input+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:142
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d111      	bne.n	8000ba2 <ethernet_input+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:144
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8000b7e:	7843      	ldrb	r3, [r0, #1]
 8000b80:	b933      	cbnz	r3, 8000b90 <ethernet_input+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:144 (discriminator 1)
 8000b82:	7883      	ldrb	r3, [r0, #2]
 8000b84:	2b5e      	cmp	r3, #94	; 0x5e
 8000b86:	d103      	bne.n	8000b90 <ethernet_input+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:147
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8000b88:	7b63      	ldrb	r3, [r4, #13]
 8000b8a:	f043 0310 	orr.w	r3, r3, #16
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:160
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8000b8e:	7363      	strb	r3, [r4, #13]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:164
    }
  }

  switch (type) {
 8000b90:	2e08      	cmp	r6, #8
 8000b92:	d010      	beq.n	8000bb6 <ethernet_input+0x52>
 8000b94:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 8000b98:	d01e      	beq.n	8000bd8 <ethernet_input+0x74>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:245
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8000b9a:	4620      	mov	r0, r4
 8000b9c:	f009 fe72 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:246
  return ERR_OK;
 8000ba0:	e018      	b.n	8000bd4 <ethernet_input+0x70>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:158
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8000ba2:	2206      	movs	r2, #6
 8000ba4:	4914      	ldr	r1, [pc, #80]	; (8000bf8 <ethernet_input+0x94>)
 8000ba6:	f00c f9d5 	bl	800cf54 <memcmp>
 8000baa:	2800      	cmp	r0, #0
 8000bac:	d1f0      	bne.n	8000b90 <ethernet_input+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:160
      p->flags |= PBUF_FLAG_LLBCAST;
 8000bae:	7b63      	ldrb	r3, [r4, #13]
 8000bb0:	f043 0308 	orr.w	r3, r3, #8
 8000bb4:	e7eb      	b.n	8000b8e <ethernet_input+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:168
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8000bb6:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
 8000bba:	071a      	lsls	r2, r3, #28
 8000bbc:	d5ed      	bpl.n	8000b9a <ethernet_input+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:172
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8000bbe:	f06f 010d 	mvn.w	r1, #13
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	f009 fe58 	bl	800a878 <pbuf_header>
 8000bc8:	2800      	cmp	r0, #0
 8000bca:	d1e6      	bne.n	8000b9a <ethernet_input+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:180
        ip4_input(p, netif);
 8000bcc:	4629      	mov	r1, r5
 8000bce:	4620      	mov	r0, r4
 8000bd0:	f002 f9bc 	bl	8002f4c <ip4_input>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:247
}
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	bd70      	pop	{r4, r5, r6, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:185
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8000bd8:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
 8000bdc:	071b      	lsls	r3, r3, #28
 8000bde:	d5dc      	bpl.n	8000b9a <ethernet_input+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:189
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8000be0:	f06f 010d 	mvn.w	r1, #13
 8000be4:	4620      	mov	r0, r4
 8000be6:	f009 fe47 	bl	800a878 <pbuf_header>
 8000bea:	2800      	cmp	r0, #0
 8000bec:	d1d5      	bne.n	8000b9a <ethernet_input+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:199
        etharp_input(p, netif);
 8000bee:	4629      	mov	r1, r5
 8000bf0:	4620      	mov	r0, r4
 8000bf2:	f002 ffbd 	bl	8003b70 <etharp_input>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:201
      break;
 8000bf6:	e7ed      	b.n	8000bd4 <ethernet_input+0x70>
 8000bf8:	0800e2cc 	.word	0x0800e2cc

08000bfc <ethernet_output>:
ethernet_output():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:267
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8000bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c00:	460d      	mov	r5, r1
 8000c02:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:269
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8000c04:	f8bd 0018 	ldrh.w	r0, [sp, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:267
{
 8000c08:	4616      	mov	r6, r2
 8000c0a:	461f      	mov	r7, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:269
  u16_t eth_type_be = lwip_htons(eth_type);
 8000c0c:	f009 fdb0 	bl	800a770 <lwip_htons>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:289

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8000c10:	210e      	movs	r1, #14
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:269
  u16_t eth_type_be = lwip_htons(eth_type);
 8000c12:	4680      	mov	r8, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:289
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8000c14:	4628      	mov	r0, r5
 8000c16:	f009 fe2f 	bl	800a878 <pbuf_header>
 8000c1a:	b9e0      	cbnz	r0, 8000c56 <ethernet_output+0x5a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:294
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8000c1c:	6869      	ldr	r1, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:295
  ethhdr->type = eth_type_be;
 8000c1e:	f8a1 800c 	strh.w	r8, [r1, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:296
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	600b      	str	r3, [r1, #0]
 8000c26:	88bb      	ldrh	r3, [r7, #4]
 8000c28:	808b      	strh	r3, [r1, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:297
  ETHADDR16_COPY(&ethhdr->src,  src);
 8000c2a:	6833      	ldr	r3, [r6, #0]
 8000c2c:	f8c1 3006 	str.w	r3, [r1, #6]
 8000c30:	88b3      	ldrh	r3, [r6, #4]
 8000c32:	814b      	strh	r3, [r1, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:299

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8000c34:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8000c38:	2b06      	cmp	r3, #6
 8000c3a:	d006      	beq.n	8000c4a <ethernet_output+0x4e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:299 (discriminator 1)
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <ethernet_output+0x64>)
 8000c3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c42:	4908      	ldr	r1, [pc, #32]	; (8000c64 <ethernet_output+0x68>)
 8000c44:	4808      	ldr	r0, [pc, #32]	; (8000c68 <ethernet_output+0x6c>)
 8000c46:	f00c f9a9 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:305
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8000c4a:	69a3      	ldr	r3, [r4, #24]
 8000c4c:	4629      	mov	r1, r5
 8000c4e:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:312
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8000c50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:305
  return netif->linkoutput(netif, p);
 8000c54:	4718      	bx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/netif/ethernet.c:312
}
 8000c56:	f06f 0001 	mvn.w	r0, #1
 8000c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c5e:	bf00      	nop
 8000c60:	0800e2d2 	.word	0x0800e2d2
 8000c64:	0800e339 	.word	0x0800e339
 8000c68:	0800e36a 	.word	0x0800e36a

08000c6c <sys_mbox_new>:
sys_mbox_new():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:51
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8000c6c:	b513      	push	{r0, r1, r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:53
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8000c6e:	2304      	movs	r3, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:51
{
 8000c70:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:53
  osMessageQDef(QUEUE, size, void *);
 8000c72:	9100      	str	r1, [sp, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:54
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8000c74:	4668      	mov	r0, sp
 8000c76:	2100      	movs	r1, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:53
  osMessageQDef(QUEUE, size, void *);
 8000c78:	9301      	str	r3, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:54
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8000c7a:	f7ff fd47 	bl	800070c <osMessageCreate>
 8000c7e:	6020      	str	r0, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:65
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8000c80:	fab0 f080 	clz	r0, r0
 8000c84:	0940      	lsrs	r0, r0, #5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:69
    return ERR_MEM;

  return ERR_OK;
}
 8000c86:	4240      	negs	r0, r0
 8000c88:	b002      	add	sp, #8
 8000c8a:	bd10      	pop	{r4, pc}

08000c8c <sys_mbox_free>:
sys_mbox_free():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:78
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8000c8c:	b510      	push	{r4, lr}
 8000c8e:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:80
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8000c90:	6800      	ldr	r0, [r0, #0]
 8000c92:	f7ff fdb0 	bl	80007f6 <osMessageWaiting>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:93
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8000c96:	6820      	ldr	r0, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:100
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8000c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:93
  osMessageDelete(*mbox);
 8000c9c:	f7ff bdb2 	b.w	8000804 <osMessageDelete>

08000ca0 <sys_mbox_trypost>:
sys_mbox_trypost():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:117


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8000ca0:	b508      	push	{r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:120
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	6800      	ldr	r0, [r0, #0]
 8000ca6:	f7ff fd37 	bl	8000718 <osMessagePut>
 8000caa:	3000      	adds	r0, #0
 8000cac:	bf18      	it	ne
 8000cae:	2001      	movne	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:138
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 8000cb0:	4240      	negs	r0, r0
 8000cb2:	bd08      	pop	{r3, pc}

08000cb4 <sys_arch_mbox_fetch>:
sys_arch_mbox_fetch():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:157

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8000cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cb6:	4617      	mov	r7, r2
 8000cb8:	b085      	sub	sp, #20
 8000cba:	4606      	mov	r6, r0
 8000cbc:	460d      	mov	r5, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:160
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8000cbe:	f7ff fc62 	bl	8000586 <osKernelSysTick>
 8000cc2:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:165
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8000cc4:	b177      	cbz	r7, 8000ce4 <sys_arch_mbox_fetch+0x30>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:168
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8000cc6:	463a      	mov	r2, r7
 8000cc8:	6831      	ldr	r1, [r6, #0]
 8000cca:	a801      	add	r0, sp, #4
 8000ccc:	f7ff fd4c 	bl	8000768 <osMessageGet>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:170

    if(event.status == osEventMessage)
 8000cd0:	9b01      	ldr	r3, [sp, #4]
 8000cd2:	2b10      	cmp	r3, #16
 8000cd4:	d10d      	bne.n	8000cf2 <sys_arch_mbox_fetch+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:191
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 8000cd6:	9b02      	ldr	r3, [sp, #8]
 8000cd8:	602b      	str	r3, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:192
    return (osKernelSysTick() - starttime);
 8000cda:	f7ff fc54 	bl	8000586 <osKernelSysTick>
 8000cde:	1b00      	subs	r0, r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:198
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8000ce0:	b005      	add	sp, #20
 8000ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:190
    event = osMessageGet (*mbox, osWaitForever);
 8000ce4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ce8:	6831      	ldr	r1, [r6, #0]
 8000cea:	a801      	add	r0, sp, #4
 8000cec:	f7ff fd3c 	bl	8000768 <osMessageGet>
 8000cf0:	e7f1      	b.n	8000cd6 <sys_arch_mbox_fetch+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:184
      return SYS_ARCH_TIMEOUT;
 8000cf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cf6:	e7f3      	b.n	8000ce0 <sys_arch_mbox_fetch+0x2c>

08000cf8 <sys_arch_mbox_tryfetch>:
sys_arch_mbox_tryfetch():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:206
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8000cf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000cfa:	460c      	mov	r4, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:210
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	6801      	ldr	r1, [r0, #0]
 8000d00:	a801      	add	r0, sp, #4
 8000d02:	f7ff fd31 	bl	8000768 <osMessageGet>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:212

  if(event.status == osEventMessage)
 8000d06:	9b01      	ldr	r3, [sp, #4]
 8000d08:	2b10      	cmp	r3, #16
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:214
  {
    *msg = (void *)event.value.v;
 8000d0a:	bf05      	ittet	eq
 8000d0c:	9b02      	ldreq	r3, [sp, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:219
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8000d0e:	2000      	moveq	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:223
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8000d10:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:214
    *msg = (void *)event.value.v;
 8000d14:	6023      	streq	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:225
  }
}
 8000d16:	b004      	add	sp, #16
 8000d18:	bd10      	pop	{r4, pc}

08000d1a <sys_mbox_valid>:
sys_mbox_valid():
 8000d1a:	6800      	ldr	r0, [r0, #0]
 8000d1c:	3000      	adds	r0, #0
 8000d1e:	bf18      	it	ne
 8000d20:	2001      	movne	r0, #1
 8000d22:	4770      	bx	lr

08000d24 <sys_mbox_set_invalid>:
sys_mbox_set_invalid():
 8000d24:	2300      	movs	r3, #0
 8000d26:	6003      	str	r3, [r0, #0]
 8000d28:	4770      	bx	lr

08000d2a <sys_sem_new>:
sys_sem_new():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:244

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8000d2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d2c:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:246
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8000d2e:	2400      	movs	r4, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:244
{
 8000d30:	460d      	mov	r5, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:247
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8000d32:	a801      	add	r0, sp, #4
 8000d34:	2101      	movs	r1, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:246
  osSemaphoreDef(SEM);
 8000d36:	9401      	str	r4, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:247
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8000d38:	f7ff fca8 	bl	800068c <osSemaphoreCreate>
 8000d3c:	6030      	str	r0, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:252
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8000d3e:	b130      	cbz	r0, 8000d4e <sys_sem_new+0x24>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:260
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 8000d40:	b945      	cbnz	r5, 8000d54 <sys_sem_new+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:263
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8000d42:	4629      	mov	r1, r5
 8000d44:	f7ff fcb8 	bl	80006b8 <osSemaphoreWait>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:276
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8000d48:	4628      	mov	r0, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:277
}
 8000d4a:	b002      	add	sp, #8
 8000d4c:	bd70      	pop	{r4, r5, r6, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:257
    return ERR_MEM;
 8000d4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d52:	e7fa      	b.n	8000d4a <sys_sem_new+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:276
  return ERR_OK;
 8000d54:	4620      	mov	r0, r4
 8000d56:	e7f8      	b.n	8000d4a <sys_sem_new+0x20>

08000d58 <sys_arch_sem_wait>:
sys_arch_sem_wait():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:296

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8000d58:	b570      	push	{r4, r5, r6, lr}
 8000d5a:	460e      	mov	r6, r1
 8000d5c:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:298
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8000d5e:	f7ff fc12 	bl	8000586 <osKernelSysTick>
 8000d62:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:302
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8000d64:	b146      	cbz	r6, 8000d78 <sys_arch_sem_wait+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:305
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8000d66:	4631      	mov	r1, r6
 8000d68:	6828      	ldr	r0, [r5, #0]
 8000d6a:	f7ff fca5 	bl	80006b8 <osSemaphoreWait>
 8000d6e:	b958      	cbnz	r0, 8000d88 <sys_arch_sem_wait+0x30>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:323
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
 8000d70:	f7ff fc09 	bl	8000586 <osKernelSysTick>
 8000d74:	1b00      	subs	r0, r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:329
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8000d76:	bd70      	pop	{r4, r5, r6, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:322 (discriminator 1)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8000d78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d7c:	6828      	ldr	r0, [r5, #0]
 8000d7e:	f7ff fc9b 	bl	80006b8 <osSemaphoreWait>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d1f8      	bne.n	8000d78 <sys_arch_sem_wait+0x20>
 8000d86:	e7f3      	b.n	8000d70 <sys_arch_sem_wait+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:316
      return SYS_ARCH_TIMEOUT;
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d8c:	e7f3      	b.n	8000d76 <sys_arch_sem_wait+0x1e>

08000d8e <sys_sem_signal>:
sys_sem_signal():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:335

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 8000d8e:	6800      	ldr	r0, [r0, #0]
 8000d90:	f7ff bcb8 	b.w	8000704 <osSemaphoreRelease>

08000d94 <sys_sem_free>:
sys_sem_free():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:346
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8000d94:	6800      	ldr	r0, [r0, #0]
 8000d96:	f7ff bcb7 	b.w	8000708 <osSemaphoreDelete>

08000d9a <sys_sem_valid>:
sys_sem_valid():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:351
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 8000d9a:	6800      	ldr	r0, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:355
    return 0;
  else
    return 1;
}
 8000d9c:	3000      	adds	r0, #0
 8000d9e:	bf18      	it	ne
 8000da0:	2001      	movne	r0, #1
 8000da2:	4770      	bx	lr

08000da4 <sys_sem_set_invalid>:
sys_sem_set_invalid():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:360

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	6003      	str	r3, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:361
}
 8000da8:	4770      	bx	lr
	...

08000dac <sys_init>:
sys_init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:372
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8000dac:	b508      	push	{r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:374
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8000dae:	4803      	ldr	r0, [pc, #12]	; (8000dbc <sys_init+0x10>)
 8000db0:	f7ff fc15 	bl	80005de <osMutexCreate>
 8000db4:	4b02      	ldr	r3, [pc, #8]	; (8000dc0 <sys_init+0x14>)
 8000db6:	6018      	str	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:378
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8000db8:	bd08      	pop	{r3, pc}
 8000dba:	bf00      	nop
 8000dbc:	0800e398 	.word	0x0800e398
 8000dc0:	20008078 	.word	0x20008078

08000dc4 <sys_mutex_new>:
sys_mutex_new():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:385
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8000dc4:	b513      	push	{r0, r1, r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:388

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8000dc6:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:385
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8000dc8:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:389
  *mutex = osMutexCreate(osMutex(MUTEX));
 8000dca:	a801      	add	r0, sp, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:388
  osMutexDef(MUTEX);
 8000dcc:	9301      	str	r3, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:389
  *mutex = osMutexCreate(osMutex(MUTEX));
 8000dce:	f7ff fc06 	bl	80005de <osMutexCreate>
 8000dd2:	6020      	str	r0, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:394
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8000dd4:	fab0 f080 	clz	r0, r0
 8000dd8:	0940      	lsrs	r0, r0, #5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:409
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 8000dda:	4240      	negs	r0, r0
 8000ddc:	b002      	add	sp, #8
 8000dde:	bd10      	pop	{r4, pc}

08000de0 <sys_mutex_lock>:
sys_mutex_lock():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:425
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8000de0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000de4:	6800      	ldr	r0, [r0, #0]
 8000de6:	f7ff bbfd 	b.w	80005e4 <osMutexWait>

08000dea <sys_mutex_unlock>:
sys_mutex_unlock():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:435

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 8000dea:	6800      	ldr	r0, [r0, #0]
 8000dec:	f7ff bc20 	b.w	8000630 <osMutexRelease>

08000df0 <sys_thread_new>:
sys_thread_new():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:448
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8000df0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:450
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8000df2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8000df6:	9908      	ldr	r1, [sp, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:451
  return osThreadCreate(&os_thread_def, arg);
 8000df8:	a801      	add	r0, sp, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:450
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8000dfa:	f8ad 100c 	strh.w	r1, [sp, #12]
 8000dfe:	2100      	movs	r1, #0
 8000e00:	e9cd 1304 	strd	r1, r3, [sp, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:451
  return osThreadCreate(&os_thread_def, arg);
 8000e04:	4611      	mov	r1, r2
 8000e06:	f7ff fbc5 	bl	8000594 <osThreadCreate>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:460
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8000e0a:	b007      	add	sp, #28
 8000e0c:	f85d fb04 	ldr.w	pc, [sp], #4

08000e10 <sys_arch_protect>:
sys_arch_protect():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:479

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8000e10:	b508      	push	{r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:481
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <sys_arch_protect+0x14>)
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e18:	6818      	ldr	r0, [r3, #0]
 8000e1a:	f7ff fbe3 	bl	80005e4 <osMutexWait>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:486
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 8000e1e:	2001      	movs	r0, #1
 8000e20:	bd08      	pop	{r3, pc}
 8000e22:	bf00      	nop
 8000e24:	20008078 	.word	0x20008078

08000e28 <sys_arch_unprotect>:
sys_arch_unprotect():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/system/OS/sys_arch.c:501
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8000e28:	4b01      	ldr	r3, [pc, #4]	; (8000e30 <sys_arch_unprotect+0x8>)
 8000e2a:	6818      	ldr	r0, [r3, #0]
 8000e2c:	f7ff bc00 	b.w	8000630 <osMutexRelease>
 8000e30:	20008078 	.word	0x20008078

08000e34 <LAN8742_RegisterBusIO>:
LAN8742_RegisterBusIO():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:82
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000e34:	b530      	push	{r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:83
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000e36:	b170      	cbz	r0, 8000e56 <LAN8742_RegisterBusIO+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:83 (discriminator 1)
 8000e38:	68cc      	ldr	r4, [r1, #12]
 8000e3a:	b164      	cbz	r4, 8000e56 <LAN8742_RegisterBusIO+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:83 (discriminator 2)
 8000e3c:	688a      	ldr	r2, [r1, #8]
 8000e3e:	b152      	cbz	r2, 8000e56 <LAN8742_RegisterBusIO+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:83 (discriminator 3)
 8000e40:	690b      	ldr	r3, [r1, #16]
 8000e42:	b143      	cbz	r3, 8000e56 <LAN8742_RegisterBusIO+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:88
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 8000e44:	680d      	ldr	r5, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:89
  pObj->IO.DeInit = ioctx->DeInit;
 8000e46:	6849      	ldr	r1, [r1, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:88
  pObj->IO.Init = ioctx->Init;
 8000e48:	6085      	str	r5, [r0, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:89
  pObj->IO.DeInit = ioctx->DeInit;
 8000e4a:	60c1      	str	r1, [r0, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:92
  pObj->IO.ReadReg = ioctx->ReadReg;
  pObj->IO.WriteReg = ioctx->WriteReg;
  pObj->IO.GetTick = ioctx->GetTick;
 8000e4c:	6183      	str	r3, [r0, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:91
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000e4e:	e9c0 2404 	strd	r2, r4, [r0, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:94
  
  return LAN8742_STATUS_OK;
 8000e52:	2000      	movs	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:95
}
 8000e54:	bd30      	pop	{r4, r5, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:85
    return LAN8742_STATUS_ERROR;
 8000e56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e5a:	e7fb      	b.n	8000e54 <LAN8742_RegisterBusIO+0x20>

08000e5c <LAN8742_Init>:
LAN8742_Init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:107
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000e5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:108
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000e5e:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:111
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 8000e60:	6846      	ldr	r6, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:107
 {
 8000e62:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:108
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000e64:	9301      	str	r3, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:111
   if(pObj->Is_Initialized == 0)
 8000e66:	b166      	cbz	r6, 8000e82 <LAN8742_Init+0x26>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:188
     }
   }
      
   if(status == LAN8742_STATUS_OK)
   {
     tickstart =  pObj->IO.GetTick();
 8000e68:	69a3      	ldr	r3, [r4, #24]
 8000e6a:	4798      	blx	r3
 8000e6c:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:191 (discriminator 1)
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000e6e:	69a3      	ldr	r3, [r4, #24]
 8000e70:	4798      	blx	r3
 8000e72:	1b40      	subs	r0, r0, r5
 8000e74:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8000e78:	d9f9      	bls.n	8000e6e <LAN8742_Init+0x12>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:194
     {
     }
     pObj->Is_Initialized = 1;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	2500      	movs	r5, #0
 8000e7e:	6063      	str	r3, [r4, #4]
 8000e80:	e027      	b.n	8000ed2 <LAN8742_Init+0x76>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:113
     if(pObj->IO.Init != 0)
 8000e82:	6883      	ldr	r3, [r0, #8]
 8000e84:	b103      	cbz	r3, 8000e88 <LAN8742_Init+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:116
       pObj->IO.Init();
 8000e86:	4798      	blx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:120
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000e88:	2320      	movs	r3, #32
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:109
   int32_t status = LAN8742_STATUS_OK;
 8000e8a:	2500      	movs	r5, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:120
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000e8c:	6023      	str	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:125
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000e8e:	6963      	ldr	r3, [r4, #20]
 8000e90:	aa01      	add	r2, sp, #4
 8000e92:	2112      	movs	r1, #18
 8000e94:	4630      	mov	r0, r6
 8000e96:	4798      	blx	r3
 8000e98:	2800      	cmp	r0, #0
 8000e9a:	db1d      	blt.n	8000ed8 <LAN8742_Init+0x7c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:133
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000e9c:	9b01      	ldr	r3, [sp, #4]
 8000e9e:	f003 031f 	and.w	r3, r3, #31
 8000ea2:	42b3      	cmp	r3, r6
 8000ea4:	d11a      	bne.n	8000edc <LAN8742_Init+0x80>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:136
         status = LAN8742_STATUS_OK;
 8000ea6:	2500      	movs	r5, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:135
         pObj->DevAddr = addr;
 8000ea8:	6026      	str	r6, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:141
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000eaa:	6820      	ldr	r0, [r4, #0]
 8000eac:	281f      	cmp	r0, #31
 8000eae:	d833      	bhi.n	8000f18 <LAN8742_Init+0xbc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:147
     if(status == LAN8742_STATUS_OK)
 8000eb0:	b97d      	cbnz	r5, 8000ed2 <LAN8742_Init+0x76>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:150
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000eb2:	6923      	ldr	r3, [r4, #16]
 8000eb4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000eb8:	4629      	mov	r1, r5
 8000eba:	4798      	blx	r3
 8000ebc:	2800      	cmp	r0, #0
 8000ebe:	db2e      	blt.n	8000f1e <LAN8742_Init+0xc2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:153
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000ec0:	6963      	ldr	r3, [r4, #20]
 8000ec2:	aa01      	add	r2, sp, #4
 8000ec4:	4629      	mov	r1, r5
 8000ec6:	6820      	ldr	r0, [r4, #0]
 8000ec8:	4798      	blx	r3
 8000eca:	2800      	cmp	r0, #0
 8000ecc:	da0a      	bge.n	8000ee4 <LAN8742_Init+0x88>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:176
           status = LAN8742_STATUS_READ_ERROR;
 8000ece:	f06f 0504 	mvn.w	r5, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:198
   }
   
   return status;
 }
 8000ed2:	4628      	mov	r0, r5
 8000ed4:	b002      	add	sp, #8
 8000ed6:	bd70      	pop	{r4, r5, r6, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:127
         status = LAN8742_STATUS_READ_ERROR;
 8000ed8:	f06f 0504 	mvn.w	r5, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:123 (discriminator 2)
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000edc:	3601      	adds	r6, #1
 8000ede:	2e20      	cmp	r6, #32
 8000ee0:	d1d5      	bne.n	8000e8e <LAN8742_Init+0x32>
 8000ee2:	e7e2      	b.n	8000eaa <LAN8742_Init+0x4e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:155
           tickstart = pObj->IO.GetTick();
 8000ee4:	69a3      	ldr	r3, [r4, #24]
 8000ee6:	4798      	blx	r3
 8000ee8:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:158
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000eea:	9b01      	ldr	r3, [sp, #4]
 8000eec:	041b      	lsls	r3, r3, #16
 8000eee:	d402      	bmi.n	8000ef6 <LAN8742_Init+0x9a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:186
   if(status == LAN8742_STATUS_OK)
 8000ef0:	2d00      	cmp	r5, #0
 8000ef2:	d0b9      	beq.n	8000e68 <LAN8742_Init+0xc>
 8000ef4:	e7ed      	b.n	8000ed2 <LAN8742_Init+0x76>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:160
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000ef6:	69a3      	ldr	r3, [r4, #24]
 8000ef8:	4798      	blx	r3
 8000efa:	1b80      	subs	r0, r0, r6
 8000efc:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000f00:	d807      	bhi.n	8000f12 <LAN8742_Init+0xb6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:162
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000f02:	6963      	ldr	r3, [r4, #20]
 8000f04:	aa01      	add	r2, sp, #4
 8000f06:	2100      	movs	r1, #0
 8000f08:	6820      	ldr	r0, [r4, #0]
 8000f0a:	4798      	blx	r3
 8000f0c:	2800      	cmp	r0, #0
 8000f0e:	daec      	bge.n	8000eea <LAN8742_Init+0x8e>
 8000f10:	e7dd      	b.n	8000ece <LAN8742_Init+0x72>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:170
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000f12:	f06f 0501 	mvn.w	r5, #1
 8000f16:	e7e8      	b.n	8000eea <LAN8742_Init+0x8e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:143
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000f18:	f06f 0502 	mvn.w	r5, #2
 8000f1c:	e7d9      	b.n	8000ed2 <LAN8742_Init+0x76>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:181
         status = LAN8742_STATUS_WRITE_ERROR;
 8000f1e:	f06f 0503 	mvn.w	r5, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:197
   return status;
 8000f22:	e7d6      	b.n	8000ed2 <LAN8742_Init+0x76>

08000f24 <LAN8742_GetLinkState>:
LAN8742_GetLinkState():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:327
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:328
  uint32_t readval = 0;
 8000f26:	2500      	movs	r5, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:331
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f28:	6943      	ldr	r3, [r0, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:327
{
 8000f2a:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:331
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f2c:	aa01      	add	r2, sp, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:328
  uint32_t readval = 0;
 8000f2e:	9501      	str	r5, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:331
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f30:	2101      	movs	r1, #1
 8000f32:	6800      	ldr	r0, [r0, #0]
 8000f34:	4798      	blx	r3
 8000f36:	42a8      	cmp	r0, r5
 8000f38:	da03      	bge.n	8000f42 <LAN8742_GetLinkState+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:333
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f3a:	f06f 0004 	mvn.w	r0, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:403
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }				
  }
}
 8000f3e:	b003      	add	sp, #12
 8000f40:	bd30      	pop	{r4, r5, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:337
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f42:	6963      	ldr	r3, [r4, #20]
 8000f44:	aa01      	add	r2, sp, #4
 8000f46:	2101      	movs	r1, #1
 8000f48:	6820      	ldr	r0, [r4, #0]
 8000f4a:	4798      	blx	r3
 8000f4c:	2800      	cmp	r0, #0
 8000f4e:	dbf4      	blt.n	8000f3a <LAN8742_GetLinkState+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:342
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000f50:	9b01      	ldr	r3, [sp, #4]
 8000f52:	075b      	lsls	r3, r3, #29
 8000f54:	d52c      	bpl.n	8000fb0 <LAN8742_GetLinkState+0x8c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:349
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000f56:	6963      	ldr	r3, [r4, #20]
 8000f58:	aa01      	add	r2, sp, #4
 8000f5a:	4629      	mov	r1, r5
 8000f5c:	6820      	ldr	r0, [r4, #0]
 8000f5e:	4798      	blx	r3
 8000f60:	2800      	cmp	r0, #0
 8000f62:	dbea      	blt.n	8000f3a <LAN8742_GetLinkState+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:354
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000f64:	9b01      	ldr	r3, [sp, #4]
 8000f66:	04dd      	lsls	r5, r3, #19
 8000f68:	d40e      	bmi.n	8000f88 <LAN8742_GetLinkState+0x64>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:356
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000f6a:	f403 5204 	and.w	r2, r3, #8448	; 0x2100
 8000f6e:	f5b2 5f04 	cmp.w	r2, #8448	; 0x2100
 8000f72:	d101      	bne.n	8000f78 <LAN8742_GetLinkState+0x54>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:358
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f74:	2002      	movs	r0, #2
 8000f76:	e7e2      	b.n	8000f3e <LAN8742_GetLinkState+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:360
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000f78:	0498      	lsls	r0, r3, #18
 8000f7a:	d501      	bpl.n	8000f80 <LAN8742_GetLinkState+0x5c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:362
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	e7de      	b.n	8000f3e <LAN8742_GetLinkState+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:364
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000f80:	05d9      	lsls	r1, r3, #23
 8000f82:	d513      	bpl.n	8000fac <LAN8742_GetLinkState+0x88>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:366
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f84:	2004      	movs	r0, #4
 8000f86:	e7da      	b.n	8000f3e <LAN8742_GetLinkState+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:375
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000f88:	6963      	ldr	r3, [r4, #20]
 8000f8a:	aa01      	add	r2, sp, #4
 8000f8c:	211f      	movs	r1, #31
 8000f8e:	6820      	ldr	r0, [r4, #0]
 8000f90:	4798      	blx	r3
 8000f92:	2800      	cmp	r0, #0
 8000f94:	dbd1      	blt.n	8000f3a <LAN8742_GetLinkState+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:381
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000f96:	9b01      	ldr	r3, [sp, #4]
 8000f98:	04da      	lsls	r2, r3, #19
 8000f9a:	d50b      	bpl.n	8000fb4 <LAN8742_GetLinkState+0x90>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:386
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000f9c:	f003 031c 	and.w	r3, r3, #28
 8000fa0:	2b18      	cmp	r3, #24
 8000fa2:	d0e7      	beq.n	8000f74 <LAN8742_GetLinkState+0x50>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:390
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000fa4:	2b08      	cmp	r3, #8
 8000fa6:	d0e9      	beq.n	8000f7c <LAN8742_GetLinkState+0x58>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:394
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000fa8:	2b14      	cmp	r3, #20
 8000faa:	d0eb      	beq.n	8000f84 <LAN8742_GetLinkState+0x60>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:370
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000fac:	2005      	movs	r0, #5
 8000fae:	e7c6      	b.n	8000f3e <LAN8742_GetLinkState+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:345
    return LAN8742_STATUS_LINK_DOWN;    
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	e7c4      	b.n	8000f3e <LAN8742_GetLinkState+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/Components/lan8742/lan8742.c:383
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000fb4:	2006      	movs	r0, #6
 8000fb6:	e7c2      	b.n	8000f3e <LAN8742_GetLinkState+0x1a>

08000fb8 <HAL_RCC_OscConfig>:
HAL_RCC_OscConfig():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:358
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:362
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fba:	4605      	mov	r5, r0
 8000fbc:	b908      	cbnz	r0, 8000fc2 <HAL_RCC_OscConfig+0xa>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:806
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	e089      	b.n	80010d6 <HAL_RCC_OscConfig+0x11e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:370
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fc2:	6803      	ldr	r3, [r0, #0]
 8000fc4:	07df      	lsls	r7, r3, #31
 8000fc6:	d45a      	bmi.n	800107e <HAL_RCC_OscConfig+0xc6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:422
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc8:	682b      	ldr	r3, [r5, #0]
 8000fca:	079e      	lsls	r6, r3, #30
 8000fcc:	f100 80af 	bmi.w	800112e <HAL_RCC_OscConfig+0x176>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:503
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000fd0:	682b      	ldr	r3, [r5, #0]
 8000fd2:	06da      	lsls	r2, r3, #27
 8000fd4:	d523      	bpl.n	800101e <HAL_RCC_OscConfig+0x66>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:510
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fd6:	4bad      	ldr	r3, [pc, #692]	; (800128c <HAL_RCC_OscConfig+0x2d4>)
 8000fd8:	691a      	ldr	r2, [r3, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:511
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000fda:	6a99      	ldr	r1, [r3, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:510
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fdc:	f002 0238 	and.w	r2, r2, #56	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:512
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000fe0:	2a08      	cmp	r2, #8
 8000fe2:	d007      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x3c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:512 (discriminator 1)
 8000fe4:	2a18      	cmp	r2, #24
 8000fe6:	f040 8103 	bne.w	80011f0 <HAL_RCC_OscConfig+0x238>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:512 (discriminator 2)
 8000fea:	f001 0203 	and.w	r2, r1, #3
 8000fee:	2a01      	cmp	r2, #1
 8000ff0:	f040 80fe 	bne.w	80011f0 <HAL_RCC_OscConfig+0x238>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:515
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	05db      	lsls	r3, r3, #23
 8000ff8:	d502      	bpl.n	8001000 <HAL_RCC_OscConfig+0x48>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:515 (discriminator 1)
 8000ffa:	69eb      	ldr	r3, [r5, #28]
 8000ffc:	2b80      	cmp	r3, #128	; 0x80
 8000ffe:	d1de      	bne.n	8000fbe <HAL_RCC_OscConfig+0x6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:523
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001000:	f001 ff20 	bl	8002e44 <HAL_GetREVID>
 8001004:	f241 0303 	movw	r3, #4099	; 0x1003
 8001008:	4aa0      	ldr	r2, [pc, #640]	; (800128c <HAL_RCC_OscConfig+0x2d4>)
 800100a:	4298      	cmp	r0, r3
 800100c:	6a29      	ldr	r1, [r5, #32]
 800100e:	f200 80e8 	bhi.w	80011e2 <HAL_RCC_OscConfig+0x22a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:523 (discriminator 1)
 8001012:	6853      	ldr	r3, [r2, #4]
 8001014:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001018:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 800101c:	6053      	str	r3, [r2, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:569
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800101e:	682b      	ldr	r3, [r5, #0]
 8001020:	0719      	lsls	r1, r3, #28
 8001022:	f100 811f 	bmi.w	8001264 <HAL_RCC_OscConfig+0x2ac>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:612
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001026:	682b      	ldr	r3, [r5, #0]
 8001028:	069a      	lsls	r2, r3, #26
 800102a:	f100 8144 	bmi.w	80012b6 <HAL_RCC_OscConfig+0x2fe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:654
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800102e:	682b      	ldr	r3, [r5, #0]
 8001030:	075c      	lsls	r4, r3, #29
 8001032:	d51e      	bpl.n	8001072 <HAL_RCC_OscConfig+0xba>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:660
    PWR->CR1 |= PWR_CR1_DBP;
 8001034:	4c96      	ldr	r4, [pc, #600]	; (8001290 <HAL_RCC_OscConfig+0x2d8>)
 8001036:	6823      	ldr	r3, [r4, #0]
 8001038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103c:	6023      	str	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:663
    tickstart = HAL_GetTick();
 800103e:	f001 fefb 	bl	8002e38 <HAL_GetTick>
 8001042:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:665
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001044:	6823      	ldr	r3, [r4, #0]
 8001046:	05da      	lsls	r2, r3, #23
 8001048:	f140 815a 	bpl.w	8001300 <HAL_RCC_OscConfig+0x348>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:674
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800104c:	68ab      	ldr	r3, [r5, #8]
 800104e:	4c8f      	ldr	r4, [pc, #572]	; (800128c <HAL_RCC_OscConfig+0x2d4>)
 8001050:	2b01      	cmp	r3, #1
 8001052:	f040 815c 	bne.w	800130e <HAL_RCC_OscConfig+0x356>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:674 (discriminator 5)
 8001056:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001058:	f043 0301 	orr.w	r3, r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:674 (discriminator 6)
 800105c:	6723      	str	r3, [r4, #112]	; 0x70
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:684 (discriminator 6)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800105e:	f241 3488 	movw	r4, #5000	; 0x1388
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:679 (discriminator 6)
      tickstart = HAL_GetTick();
 8001062:	f001 fee9 	bl	8002e38 <HAL_GetTick>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:682 (discriminator 6)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001066:	4e89      	ldr	r6, [pc, #548]	; (800128c <HAL_RCC_OscConfig+0x2d4>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:679 (discriminator 6)
      tickstart = HAL_GetTick();
 8001068:	4607      	mov	r7, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:682
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800106a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800106c:	079b      	lsls	r3, r3, #30
 800106e:	f140 8174 	bpl.w	800135a <HAL_RCC_OscConfig+0x3a2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:708
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001072:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001074:	2a00      	cmp	r2, #0
 8001076:	f040 8177 	bne.w	8001368 <HAL_RCC_OscConfig+0x3b0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:809
    }
  }
  return HAL_OK;
 800107a:	2000      	movs	r0, #0
 800107c:	e02b      	b.n	80010d6 <HAL_RCC_OscConfig+0x11e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:375
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800107e:	4b83      	ldr	r3, [pc, #524]	; (800128c <HAL_RCC_OscConfig+0x2d4>)
 8001080:	691a      	ldr	r2, [r3, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:376
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001082:	6a99      	ldr	r1, [r3, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:375
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001084:	f002 0238 	and.w	r2, r2, #56	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:378
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001088:	2a10      	cmp	r2, #16
 800108a:	d005      	beq.n	8001098 <HAL_RCC_OscConfig+0xe0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:378 (discriminator 1)
 800108c:	2a18      	cmp	r2, #24
 800108e:	d10a      	bne.n	80010a6 <HAL_RCC_OscConfig+0xee>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:378 (discriminator 2)
 8001090:	f001 0203 	and.w	r2, r1, #3
 8001094:	2a02      	cmp	r2, #2
 8001096:	d106      	bne.n	80010a6 <HAL_RCC_OscConfig+0xee>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:380
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	039c      	lsls	r4, r3, #14
 800109c:	d594      	bpl.n	8000fc8 <HAL_RCC_OscConfig+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:380 (discriminator 1)
 800109e:	686b      	ldr	r3, [r5, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d191      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x10>
 80010a4:	e78b      	b.n	8000fbe <HAL_RCC_OscConfig+0x6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:388
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a6:	686a      	ldr	r2, [r5, #4]
 80010a8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80010ac:	d114      	bne.n	80010d8 <HAL_RCC_OscConfig+0x120>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:388 (discriminator 1)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80010b4:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:394
        tickstart = HAL_GetTick();
 80010b6:	f001 febf 	bl	8002e38 <HAL_GetTick>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:397
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010ba:	4c74      	ldr	r4, [pc, #464]	; (800128c <HAL_RCC_OscConfig+0x2d4>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:394
        tickstart = HAL_GetTick();
 80010bc:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:399
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010be:	f241 3788 	movw	r7, #5000	; 0x1388
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:397
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010c2:	6823      	ldr	r3, [r4, #0]
 80010c4:	0398      	lsls	r0, r3, #14
 80010c6:	f53f af7f 	bmi.w	8000fc8 <HAL_RCC_OscConfig+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:399
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ca:	f001 feb5 	bl	8002e38 <HAL_GetTick>
 80010ce:	1b80      	subs	r0, r0, r6
 80010d0:	42b8      	cmp	r0, r7
 80010d2:	d9f6      	bls.n	80010c2 <HAL_RCC_OscConfig+0x10a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:401
            return HAL_TIMEOUT;
 80010d4:	2003      	movs	r0, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:810
}
 80010d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:388 (discriminator 2)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d8:	4c6c      	ldr	r4, [pc, #432]	; (800128c <HAL_RCC_OscConfig+0x2d4>)
 80010da:	6823      	ldr	r3, [r4, #0]
 80010dc:	b9aa      	cbnz	r2, 800110a <HAL_RCC_OscConfig+0x152>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:388 (discriminator 3)
 80010de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:413 (discriminator 3)
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010e2:	f241 3788 	movw	r7, #5000	; 0x1388
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:388 (discriminator 3)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e6:	6023      	str	r3, [r4, #0]
 80010e8:	6823      	ldr	r3, [r4, #0]
 80010ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ee:	6023      	str	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:408 (discriminator 3)
        tickstart = HAL_GetTick();
 80010f0:	f001 fea2 	bl	8002e38 <HAL_GetTick>
 80010f4:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:411
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010f6:	6823      	ldr	r3, [r4, #0]
 80010f8:	0399      	lsls	r1, r3, #14
 80010fa:	f57f af65 	bpl.w	8000fc8 <HAL_RCC_OscConfig+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:413
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010fe:	f001 fe9b 	bl	8002e38 <HAL_GetTick>
 8001102:	1b80      	subs	r0, r0, r6
 8001104:	42b8      	cmp	r0, r7
 8001106:	d9f6      	bls.n	80010f6 <HAL_RCC_OscConfig+0x13e>
 8001108:	e7e4      	b.n	80010d4 <HAL_RCC_OscConfig+0x11c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:388 (discriminator 4)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800110a:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800110e:	d107      	bne.n	8001120 <HAL_RCC_OscConfig+0x168>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:388 (discriminator 5)
 8001110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001114:	6023      	str	r3, [r4, #0]
 8001116:	6823      	ldr	r3, [r4, #0]
 8001118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:388 (discriminator 6)
 800111c:	6023      	str	r3, [r4, #0]
 800111e:	e7ca      	b.n	80010b6 <HAL_RCC_OscConfig+0xfe>
 8001120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001124:	6023      	str	r3, [r4, #0]
 8001126:	6823      	ldr	r3, [r4, #0]
 8001128:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112c:	e7f6      	b.n	800111c <HAL_RCC_OscConfig+0x164>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:429
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800112e:	4b57      	ldr	r3, [pc, #348]	; (800128c <HAL_RCC_OscConfig+0x2d4>)
 8001130:	68e9      	ldr	r1, [r5, #12]
 8001132:	691a      	ldr	r2, [r3, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:430
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001134:	6a98      	ldr	r0, [r3, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:431
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001136:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 800113a:	d003      	beq.n	8001144 <HAL_RCC_OscConfig+0x18c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:431 (discriminator 1)
 800113c:	2a18      	cmp	r2, #24
 800113e:	d127      	bne.n	8001190 <HAL_RCC_OscConfig+0x1d8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:431 (discriminator 2)
 8001140:	0782      	lsls	r2, r0, #30
 8001142:	d125      	bne.n	8001190 <HAL_RCC_OscConfig+0x1d8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:434
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	075b      	lsls	r3, r3, #29
 8001148:	d502      	bpl.n	8001150 <HAL_RCC_OscConfig+0x198>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:434 (discriminator 1)
 800114a:	2900      	cmp	r1, #0
 800114c:	f43f af37 	beq.w	8000fbe <HAL_RCC_OscConfig+0x6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:442
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001150:	4c4e      	ldr	r4, [pc, #312]	; (800128c <HAL_RCC_OscConfig+0x2d4>)
 8001152:	6822      	ldr	r2, [r4, #0]
 8001154:	f022 0219 	bic.w	r2, r2, #25
 8001158:	430a      	orrs	r2, r1
 800115a:	6022      	str	r2, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:445
        tickstart = HAL_GetTick();
 800115c:	f001 fe6c 	bl	8002e38 <HAL_GetTick>
 8001160:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:448
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001162:	6823      	ldr	r3, [r4, #0]
 8001164:	075f      	lsls	r7, r3, #29
 8001166:	d50d      	bpl.n	8001184 <HAL_RCC_OscConfig+0x1cc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:481
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001168:	f001 fe6c 	bl	8002e44 <HAL_GetREVID>
 800116c:	f241 0303 	movw	r3, #4099	; 0x1003
 8001170:	692a      	ldr	r2, [r5, #16]
 8001172:	4298      	cmp	r0, r3
 8001174:	6863      	ldr	r3, [r4, #4]
 8001176:	d81e      	bhi.n	80011b6 <HAL_RCC_OscConfig+0x1fe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:481 (discriminator 1)
 8001178:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800117c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001180:	6063      	str	r3, [r4, #4]
 8001182:	e725      	b.n	8000fd0 <HAL_RCC_OscConfig+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:450
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001184:	f001 fe58 	bl	8002e38 <HAL_GetTick>
 8001188:	1b80      	subs	r0, r0, r6
 800118a:	2802      	cmp	r0, #2
 800118c:	d9e9      	bls.n	8001162 <HAL_RCC_OscConfig+0x1aa>
 800118e:	e7a1      	b.n	80010d4 <HAL_RCC_OscConfig+0x11c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:466
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001190:	681a      	ldr	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:463
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001192:	b1a9      	cbz	r1, 80011c0 <HAL_RCC_OscConfig+0x208>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:466
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001194:	f022 0219 	bic.w	r2, r2, #25
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:472
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001198:	4c3c      	ldr	r4, [pc, #240]	; (800128c <HAL_RCC_OscConfig+0x2d4>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:466
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800119a:	430a      	orrs	r2, r1
 800119c:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:469
        tickstart = HAL_GetTick();
 800119e:	f001 fe4b 	bl	8002e38 <HAL_GetTick>
 80011a2:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:472
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011a4:	6823      	ldr	r3, [r4, #0]
 80011a6:	0758      	lsls	r0, r3, #29
 80011a8:	d4de      	bmi.n	8001168 <HAL_RCC_OscConfig+0x1b0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:474
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011aa:	f001 fe45 	bl	8002e38 <HAL_GetTick>
 80011ae:	1b80      	subs	r0, r0, r6
 80011b0:	2802      	cmp	r0, #2
 80011b2:	d9f7      	bls.n	80011a4 <HAL_RCC_OscConfig+0x1ec>
 80011b4:	e78e      	b.n	80010d4 <HAL_RCC_OscConfig+0x11c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:481 (discriminator 2)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80011ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80011be:	e7df      	b.n	8001180 <HAL_RCC_OscConfig+0x1c8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:486
        __HAL_RCC_HSI_DISABLE();
 80011c0:	f022 0201 	bic.w	r2, r2, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:492
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011c4:	4c31      	ldr	r4, [pc, #196]	; (800128c <HAL_RCC_OscConfig+0x2d4>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:486
        __HAL_RCC_HSI_DISABLE();
 80011c6:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:489
        tickstart = HAL_GetTick();
 80011c8:	f001 fe36 	bl	8002e38 <HAL_GetTick>
 80011cc:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:492
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011ce:	6823      	ldr	r3, [r4, #0]
 80011d0:	0759      	lsls	r1, r3, #29
 80011d2:	f57f aefd 	bpl.w	8000fd0 <HAL_RCC_OscConfig+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:494
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d6:	f001 fe2f 	bl	8002e38 <HAL_GetTick>
 80011da:	1b80      	subs	r0, r0, r6
 80011dc:	2802      	cmp	r0, #2
 80011de:	d9f6      	bls.n	80011ce <HAL_RCC_OscConfig+0x216>
 80011e0:	e778      	b.n	80010d4 <HAL_RCC_OscConfig+0x11c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:523 (discriminator 2)
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80011e2:	68d3      	ldr	r3, [r2, #12]
 80011e4:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80011e8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80011ec:	60d3      	str	r3, [r2, #12]
 80011ee:	e716      	b.n	800101e <HAL_RCC_OscConfig+0x66>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:529
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80011f0:	69ea      	ldr	r2, [r5, #28]
 80011f2:	b32a      	cbz	r2, 8001240 <HAL_RCC_OscConfig+0x288>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:532
        __HAL_RCC_CSI_ENABLE();
 80011f4:	681a      	ldr	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:538
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80011f6:	4c25      	ldr	r4, [pc, #148]	; (800128c <HAL_RCC_OscConfig+0x2d4>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:532
        __HAL_RCC_CSI_ENABLE();
 80011f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011fc:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:535
        tickstart = HAL_GetTick();
 80011fe:	f001 fe1b 	bl	8002e38 <HAL_GetTick>
 8001202:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:538
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001204:	6823      	ldr	r3, [r4, #0]
 8001206:	05df      	lsls	r7, r3, #23
 8001208:	d50d      	bpl.n	8001226 <HAL_RCC_OscConfig+0x26e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:547
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800120a:	f001 fe1b 	bl	8002e44 <HAL_GetREVID>
 800120e:	f241 0303 	movw	r3, #4099	; 0x1003
 8001212:	6a2a      	ldr	r2, [r5, #32]
 8001214:	4298      	cmp	r0, r3
 8001216:	d80c      	bhi.n	8001232 <HAL_RCC_OscConfig+0x27a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:547 (discriminator 1)
 8001218:	6863      	ldr	r3, [r4, #4]
 800121a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800121e:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8001222:	6063      	str	r3, [r4, #4]
 8001224:	e6fb      	b.n	800101e <HAL_RCC_OscConfig+0x66>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:540
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001226:	f001 fe07 	bl	8002e38 <HAL_GetTick>
 800122a:	1b80      	subs	r0, r0, r6
 800122c:	2802      	cmp	r0, #2
 800122e:	d9e9      	bls.n	8001204 <HAL_RCC_OscConfig+0x24c>
 8001230:	e750      	b.n	80010d4 <HAL_RCC_OscConfig+0x11c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:547 (discriminator 2)
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001232:	68e3      	ldr	r3, [r4, #12]
 8001234:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8001238:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800123c:	60e3      	str	r3, [r4, #12]
 800123e:	e6ee      	b.n	800101e <HAL_RCC_OscConfig+0x66>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:552
        __HAL_RCC_CSI_DISABLE();
 8001240:	681a      	ldr	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:558
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001242:	4c12      	ldr	r4, [pc, #72]	; (800128c <HAL_RCC_OscConfig+0x2d4>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:552
        __HAL_RCC_CSI_DISABLE();
 8001244:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001248:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:555
        tickstart = HAL_GetTick();
 800124a:	f001 fdf5 	bl	8002e38 <HAL_GetTick>
 800124e:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:558
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001250:	6823      	ldr	r3, [r4, #0]
 8001252:	05d8      	lsls	r0, r3, #23
 8001254:	f57f aee3 	bpl.w	800101e <HAL_RCC_OscConfig+0x66>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:560
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001258:	f001 fdee 	bl	8002e38 <HAL_GetTick>
 800125c:	1b80      	subs	r0, r0, r6
 800125e:	2802      	cmp	r0, #2
 8001260:	d9f6      	bls.n	8001250 <HAL_RCC_OscConfig+0x298>
 8001262:	e737      	b.n	80010d4 <HAL_RCC_OscConfig+0x11c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:575
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001264:	696b      	ldr	r3, [r5, #20]
 8001266:	4c09      	ldr	r4, [pc, #36]	; (800128c <HAL_RCC_OscConfig+0x2d4>)
 8001268:	b1a3      	cbz	r3, 8001294 <HAL_RCC_OscConfig+0x2dc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:578
      __HAL_RCC_LSI_ENABLE();
 800126a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6763      	str	r3, [r4, #116]	; 0x74
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:581
      tickstart = HAL_GetTick();
 8001272:	f001 fde1 	bl	8002e38 <HAL_GetTick>
 8001276:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:584
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001278:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800127a:	079b      	lsls	r3, r3, #30
 800127c:	f53f aed3 	bmi.w	8001026 <HAL_RCC_OscConfig+0x6e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:586
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001280:	f001 fdda 	bl	8002e38 <HAL_GetTick>
 8001284:	1b80      	subs	r0, r0, r6
 8001286:	2802      	cmp	r0, #2
 8001288:	d9f6      	bls.n	8001278 <HAL_RCC_OscConfig+0x2c0>
 800128a:	e723      	b.n	80010d4 <HAL_RCC_OscConfig+0x11c>
 800128c:	58024400 	.word	0x58024400
 8001290:	58024800 	.word	0x58024800
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:595
      __HAL_RCC_LSI_DISABLE();
 8001294:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001296:	f023 0301 	bic.w	r3, r3, #1
 800129a:	6763      	str	r3, [r4, #116]	; 0x74
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:598
      tickstart = HAL_GetTick();
 800129c:	f001 fdcc 	bl	8002e38 <HAL_GetTick>
 80012a0:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:601
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012a2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80012a4:	079f      	lsls	r7, r3, #30
 80012a6:	f57f aebe 	bpl.w	8001026 <HAL_RCC_OscConfig+0x6e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:603
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012aa:	f001 fdc5 	bl	8002e38 <HAL_GetTick>
 80012ae:	1b80      	subs	r0, r0, r6
 80012b0:	2802      	cmp	r0, #2
 80012b2:	d9f6      	bls.n	80012a2 <HAL_RCC_OscConfig+0x2ea>
 80012b4:	e70e      	b.n	80010d4 <HAL_RCC_OscConfig+0x11c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:618
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80012b6:	69ab      	ldr	r3, [r5, #24]
 80012b8:	4c6c      	ldr	r4, [pc, #432]	; (800146c <HAL_RCC_OscConfig+0x4b4>)
 80012ba:	b183      	cbz	r3, 80012de <HAL_RCC_OscConfig+0x326>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:621
      __HAL_RCC_HSI48_ENABLE();
 80012bc:	6823      	ldr	r3, [r4, #0]
 80012be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012c2:	6023      	str	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:624
      tickstart = HAL_GetTick();
 80012c4:	f001 fdb8 	bl	8002e38 <HAL_GetTick>
 80012c8:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:627
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80012ca:	6823      	ldr	r3, [r4, #0]
 80012cc:	0498      	lsls	r0, r3, #18
 80012ce:	f53f aeae 	bmi.w	800102e <HAL_RCC_OscConfig+0x76>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:629
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80012d2:	f001 fdb1 	bl	8002e38 <HAL_GetTick>
 80012d6:	1b80      	subs	r0, r0, r6
 80012d8:	2802      	cmp	r0, #2
 80012da:	d9f6      	bls.n	80012ca <HAL_RCC_OscConfig+0x312>
 80012dc:	e6fa      	b.n	80010d4 <HAL_RCC_OscConfig+0x11c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:638
      __HAL_RCC_HSI48_DISABLE();
 80012de:	6823      	ldr	r3, [r4, #0]
 80012e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012e4:	6023      	str	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:641
      tickstart = HAL_GetTick();
 80012e6:	f001 fda7 	bl	8002e38 <HAL_GetTick>
 80012ea:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:644
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80012ec:	6823      	ldr	r3, [r4, #0]
 80012ee:	0499      	lsls	r1, r3, #18
 80012f0:	f57f ae9d 	bpl.w	800102e <HAL_RCC_OscConfig+0x76>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:646
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80012f4:	f001 fda0 	bl	8002e38 <HAL_GetTick>
 80012f8:	1b80      	subs	r0, r0, r6
 80012fa:	2802      	cmp	r0, #2
 80012fc:	d9f6      	bls.n	80012ec <HAL_RCC_OscConfig+0x334>
 80012fe:	e6e9      	b.n	80010d4 <HAL_RCC_OscConfig+0x11c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:667
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001300:	f001 fd9a 	bl	8002e38 <HAL_GetTick>
 8001304:	1b80      	subs	r0, r0, r6
 8001306:	2864      	cmp	r0, #100	; 0x64
 8001308:	f67f ae9c 	bls.w	8001044 <HAL_RCC_OscConfig+0x8c>
 800130c:	e6e2      	b.n	80010d4 <HAL_RCC_OscConfig+0x11c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:674 (discriminator 2)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130e:	b9b3      	cbnz	r3, 800133e <HAL_RCC_OscConfig+0x386>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:674 (discriminator 3)
 8001310:	6f23      	ldr	r3, [r4, #112]	; 0x70
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:698 (discriminator 3)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001312:	f241 3788 	movw	r7, #5000	; 0x1388
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:674 (discriminator 3)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001316:	f023 0301 	bic.w	r3, r3, #1
 800131a:	6723      	str	r3, [r4, #112]	; 0x70
 800131c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800131e:	f023 0304 	bic.w	r3, r3, #4
 8001322:	6723      	str	r3, [r4, #112]	; 0x70
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:693 (discriminator 3)
      tickstart = HAL_GetTick();
 8001324:	f001 fd88 	bl	8002e38 <HAL_GetTick>
 8001328:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:696
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800132a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800132c:	0798      	lsls	r0, r3, #30
 800132e:	f57f aea0 	bpl.w	8001072 <HAL_RCC_OscConfig+0xba>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:698
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001332:	f001 fd81 	bl	8002e38 <HAL_GetTick>
 8001336:	1b80      	subs	r0, r0, r6
 8001338:	42b8      	cmp	r0, r7
 800133a:	d9f6      	bls.n	800132a <HAL_RCC_OscConfig+0x372>
 800133c:	e6ca      	b.n	80010d4 <HAL_RCC_OscConfig+0x11c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:674 (discriminator 4)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800133e:	2b05      	cmp	r3, #5
 8001340:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001342:	d103      	bne.n	800134c <HAL_RCC_OscConfig+0x394>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:674 (discriminator 5)
 8001344:	f043 0304 	orr.w	r3, r3, #4
 8001348:	6723      	str	r3, [r4, #112]	; 0x70
 800134a:	e684      	b.n	8001056 <HAL_RCC_OscConfig+0x9e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:674 (discriminator 6)
 800134c:	f023 0301 	bic.w	r3, r3, #1
 8001350:	6723      	str	r3, [r4, #112]	; 0x70
 8001352:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001354:	f023 0304 	bic.w	r3, r3, #4
 8001358:	e680      	b.n	800105c <HAL_RCC_OscConfig+0xa4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:684
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800135a:	f001 fd6d 	bl	8002e38 <HAL_GetTick>
 800135e:	1bc0      	subs	r0, r0, r7
 8001360:	42a0      	cmp	r0, r4
 8001362:	f67f ae82 	bls.w	800106a <HAL_RCC_OscConfig+0xb2>
 8001366:	e6b5      	b.n	80010d4 <HAL_RCC_OscConfig+0x11c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:711
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001368:	4c40      	ldr	r4, [pc, #256]	; (800146c <HAL_RCC_OscConfig+0x4b4>)
 800136a:	6923      	ldr	r3, [r4, #16]
 800136c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001370:	2b18      	cmp	r3, #24
 8001372:	f43f ae24 	beq.w	8000fbe <HAL_RCC_OscConfig+0x6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:725
        __HAL_RCC_PLL_DISABLE();
 8001376:	6823      	ldr	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:713
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001378:	2a02      	cmp	r2, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:725
        __HAL_RCC_PLL_DISABLE();
 800137a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800137e:	6023      	str	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:713
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001380:	d167      	bne.n	8001452 <HAL_RCC_OscConfig+0x49a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:728
        tickstart = HAL_GetTick();
 8001382:	f001 fd59 	bl	8002e38 <HAL_GetTick>
 8001386:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:731
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001388:	6823      	ldr	r3, [r4, #0]
 800138a:	0199      	lsls	r1, r3, #6
 800138c:	d45b      	bmi.n	8001446 <HAL_RCC_OscConfig+0x48e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:740
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800138e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001390:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001392:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8001396:	f023 0303 	bic.w	r3, r3, #3
 800139a:	4313      	orrs	r3, r2
 800139c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800139e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80013a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80013a4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80013a6:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80013a8:	3b01      	subs	r3, #1
 80013aa:	3a01      	subs	r2, #1
 80013ac:	025b      	lsls	r3, r3, #9
 80013ae:	0412      	lsls	r2, r2, #16
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80013b6:	4313      	orrs	r3, r2
 80013b8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80013ba:	3a01      	subs	r2, #1
 80013bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80013c0:	4313      	orrs	r3, r2
 80013c2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80013c4:	3a01      	subs	r2, #1
 80013c6:	0612      	lsls	r2, r2, #24
 80013c8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80013cc:	4313      	orrs	r3, r2
 80013ce:	6323      	str	r3, [r4, #48]	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:748
         __HAL_RCC_PLLFRACN_DISABLE();
 80013d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80013d2:	f023 0301 	bic.w	r3, r3, #1
 80013d6:	62e3      	str	r3, [r4, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:751
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80013d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80013da:	6caa      	ldr	r2, [r5, #72]	; 0x48
 80013dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80013e0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013e4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80013e8:	6363      	str	r3, [r4, #52]	; 0x34
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:754
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80013ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80013ec:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80013ee:	f023 030c 	bic.w	r3, r3, #12
 80013f2:	4313      	orrs	r3, r2
 80013f4:	62e3      	str	r3, [r4, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:757
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80013f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80013f8:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80013fa:	f023 0302 	bic.w	r3, r3, #2
 80013fe:	4313      	orrs	r3, r2
 8001400:	62e3      	str	r3, [r4, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:760
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001402:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001408:	62e3      	str	r3, [r4, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:763
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800140a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800140c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001410:	62e3      	str	r3, [r4, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:766
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001412:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001418:	62e3      	str	r3, [r4, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:769
         __HAL_RCC_PLLFRACN_ENABLE();
 800141a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	62e3      	str	r3, [r4, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:772
        __HAL_RCC_PLL_ENABLE();
 8001422:	6823      	ldr	r3, [r4, #0]
 8001424:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001428:	6023      	str	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:775
        tickstart = HAL_GetTick();
 800142a:	f001 fd05 	bl	8002e38 <HAL_GetTick>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:778
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800142e:	4c0f      	ldr	r4, [pc, #60]	; (800146c <HAL_RCC_OscConfig+0x4b4>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:775
        tickstart = HAL_GetTick();
 8001430:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:778
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001432:	6823      	ldr	r3, [r4, #0]
 8001434:	019a      	lsls	r2, r3, #6
 8001436:	f53f ae20 	bmi.w	800107a <HAL_RCC_OscConfig+0xc2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:780
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800143a:	f001 fcfd 	bl	8002e38 <HAL_GetTick>
 800143e:	1b40      	subs	r0, r0, r5
 8001440:	2802      	cmp	r0, #2
 8001442:	d9f6      	bls.n	8001432 <HAL_RCC_OscConfig+0x47a>
 8001444:	e646      	b.n	80010d4 <HAL_RCC_OscConfig+0x11c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:733
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001446:	f001 fcf7 	bl	8002e38 <HAL_GetTick>
 800144a:	1b80      	subs	r0, r0, r6
 800144c:	2802      	cmp	r0, #2
 800144e:	d99b      	bls.n	8001388 <HAL_RCC_OscConfig+0x3d0>
 8001450:	e640      	b.n	80010d4 <HAL_RCC_OscConfig+0x11c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:792
        tickstart = HAL_GetTick();
 8001452:	f001 fcf1 	bl	8002e38 <HAL_GetTick>
 8001456:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:795
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001458:	6823      	ldr	r3, [r4, #0]
 800145a:	019b      	lsls	r3, r3, #6
 800145c:	f57f ae0d 	bpl.w	800107a <HAL_RCC_OscConfig+0xc2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:797
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001460:	f001 fcea 	bl	8002e38 <HAL_GetTick>
 8001464:	1b40      	subs	r0, r0, r5
 8001466:	2802      	cmp	r0, #2
 8001468:	d9f6      	bls.n	8001458 <HAL_RCC_OscConfig+0x4a0>
 800146a:	e633      	b.n	80010d4 <HAL_RCC_OscConfig+0x11c>
 800146c:	58024400 	.word	0x58024400

08001470 <HAL_RCC_GetSysClockFreq>:
HAL_RCC_GetSysClockFreq():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1210
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001470:	4b47      	ldr	r3, [pc, #284]	; (8001590 <HAL_RCC_GetSysClockFreq+0x120>)
 8001472:	691a      	ldr	r2, [r3, #16]
 8001474:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001478:	2a10      	cmp	r2, #16
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1203
{
 800147a:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1210
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800147c:	f000 8084 	beq.w	8001588 <HAL_RCC_GetSysClockFreq+0x118>
 8001480:	2a18      	cmp	r2, #24
 8001482:	d00c      	beq.n	800149e <HAL_RCC_GetSysClockFreq+0x2e>
 8001484:	2a00      	cmp	r2, #0
 8001486:	f040 8081 	bne.w	800158c <HAL_RCC_GetSysClockFreq+0x11c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1214
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4841      	ldr	r0, [pc, #260]	; (8001594 <HAL_RCC_GetSysClockFreq+0x124>)
 800148e:	f012 0f20 	tst.w	r2, #32
 8001492:	d003      	beq.n	800149c <HAL_RCC_GetSysClockFreq+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1216
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800149a:	40d8      	lsrs	r0, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1287
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800149c:	bd10      	pop	{r4, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1238
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800149e:	6a99      	ldr	r1, [r3, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1239
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80014a0:	6a98      	ldr	r0, [r3, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1240
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80014a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1239
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80014a4:	f3c0 1005 	ubfx	r0, r0, #4, #6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1241
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80014a8:	6b5c      	ldr	r4, [r3, #52]	; 0x34
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1243
    if (pllm != 0U)
 80014aa:	2800      	cmp	r0, #0
 80014ac:	d0f6      	beq.n	800149c <HAL_RCC_GetSysClockFreq+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1241
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80014ae:	f3c4 04cc 	ubfx	r4, r4, #3, #13
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1240
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80014b2:	f002 0201 	and.w	r2, r2, #1
 80014b6:	ee07 0a90 	vmov	s15, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1238
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80014ba:	f001 0103 	and.w	r1, r1, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1241
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80014be:	4362      	muls	r2, r4
 80014c0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80014c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014c8:	2901      	cmp	r1, #1
 80014ca:	ee07 2a90 	vmov	s15, r2
 80014ce:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 80014d2:	d002      	beq.n	80014da <HAL_RCC_GetSysClockFreq+0x6a>
 80014d4:	b179      	cbz	r1, 80014f6 <HAL_RCC_GetSysClockFreq+0x86>
 80014d6:	2902      	cmp	r1, #2
 80014d8:	d048      	beq.n	800156c <HAL_RCC_GetSysClockFreq+0xfc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1269
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014e0:	ee07 3a10 	vmov	s14, r3
 80014e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80014e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ec:	ee77 7a86 	vadd.f32	s15, s15, s12
 80014f0:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8001598 <HAL_RCC_GetSysClockFreq+0x128>
 80014f4:	e037      	b.n	8001566 <HAL_RCC_GetSysClockFreq+0xf6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1249
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	0692      	lsls	r2, r2, #26
 80014fa:	d527      	bpl.n	800154c <HAL_RCC_GetSysClockFreq+0xdc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1251
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80014fc:	6819      	ldr	r1, [r3, #0]
 80014fe:	4a25      	ldr	r2, [pc, #148]	; (8001594 <HAL_RCC_GetSysClockFreq+0x124>)
 8001500:	f3c1 01c1 	ubfx	r1, r1, #3, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1252
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1251
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001506:	40ca      	lsrs	r2, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1252
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800150c:	ee07 2a10 	vmov	s14, r2
 8001510:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8001514:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8001518:	ee06 3a90 	vmov	s13, r3
 800151c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001520:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001524:	ee77 7a86 	vadd.f32	s15, s15, s12
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1272
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <HAL_RCC_GetSysClockFreq+0x120>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1269
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800152a:	ee67 7a87 	vmul.f32	s15, s15, s14
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1272
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001534:	3301      	adds	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1273
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001536:	ee07 3a10 	vmov	s14, r3
 800153a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800153e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001542:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8001546:	ee17 0a90 	vmov	r0, s15
 800154a:	e7a7      	b.n	800149c <HAL_RCC_GetSysClockFreq+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1256
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001552:	ee07 3a10 	vmov	s14, r3
 8001556:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800155a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001562:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 800159c <HAL_RCC_GetSysClockFreq+0x12c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1269
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001566:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800156a:	e7dd      	b.n	8001528 <HAL_RCC_GetSysClockFreq+0xb8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1265
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001572:	ee07 3a10 	vmov	s14, r3
 8001576:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800157a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001582:	ed9f 6a07 	vldr	s12, [pc, #28]	; 80015a0 <HAL_RCC_GetSysClockFreq+0x130>
 8001586:	e7ee      	b.n	8001566 <HAL_RCC_GetSysClockFreq+0xf6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1230
    sysclockfreq = HSE_VALUE;
 8001588:	4806      	ldr	r0, [pc, #24]	; (80015a4 <HAL_RCC_GetSysClockFreq+0x134>)
 800158a:	e787      	b.n	800149c <HAL_RCC_GetSysClockFreq+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1226
    sysclockfreq = CSI_VALUE;
 800158c:	4806      	ldr	r0, [pc, #24]	; (80015a8 <HAL_RCC_GetSysClockFreq+0x138>)
 800158e:	e785      	b.n	800149c <HAL_RCC_GetSysClockFreq+0x2c>
 8001590:	58024400 	.word	0x58024400
 8001594:	03d09000 	.word	0x03d09000
 8001598:	4a742400 	.word	0x4a742400
 800159c:	4c742400 	.word	0x4c742400
 80015a0:	4bbebc20 	.word	0x4bbebc20
 80015a4:	017d7840 	.word	0x017d7840
 80015a8:	003d0900 	.word	0x003d0900

080015ac <HAL_RCC_ClockConfig>:
HAL_RCC_ClockConfig():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:839
{
 80015ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015b0:	460d      	mov	r5, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:844
  if(RCC_ClkInitStruct == NULL)
 80015b2:	4604      	mov	r4, r0
 80015b4:	b910      	cbnz	r0, 80015bc <HAL_RCC_ClockConfig+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:846
    return HAL_ERROR;
 80015b6:	2001      	movs	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1054
}
 80015b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:858
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015bc:	4a83      	ldr	r2, [pc, #524]	; (80017cc <HAL_RCC_ClockConfig+0x220>)
 80015be:	6813      	ldr	r3, [r2, #0]
 80015c0:	f003 030f 	and.w	r3, r3, #15
 80015c4:	428b      	cmp	r3, r1
 80015c6:	f0c0 8089 	bcc.w	80016dc <HAL_RCC_ClockConfig+0x130>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:874
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80015ca:	6823      	ldr	r3, [r4, #0]
 80015cc:	075f      	lsls	r7, r3, #29
 80015ce:	f100 8091 	bmi.w	80016f4 <HAL_RCC_ClockConfig+0x148>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:884
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d2:	071e      	lsls	r6, r3, #28
 80015d4:	d50b      	bpl.n	80015ee <HAL_RCC_ClockConfig+0x42>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:886
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80015d6:	497e      	ldr	r1, [pc, #504]	; (80017d0 <HAL_RCC_ClockConfig+0x224>)
 80015d8:	6966      	ldr	r6, [r4, #20]
 80015da:	69c8      	ldr	r0, [r1, #28]
 80015dc:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80015e0:	4286      	cmp	r6, r0
 80015e2:	d904      	bls.n	80015ee <HAL_RCC_ClockConfig+0x42>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:889
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80015e4:	69ca      	ldr	r2, [r1, #28]
 80015e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80015ea:	4332      	orrs	r2, r6
 80015ec:	61ca      	str	r2, [r1, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:894
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ee:	06d8      	lsls	r0, r3, #27
 80015f0:	d50b      	bpl.n	800160a <HAL_RCC_ClockConfig+0x5e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:896
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80015f2:	4977      	ldr	r1, [pc, #476]	; (80017d0 <HAL_RCC_ClockConfig+0x224>)
 80015f4:	69a6      	ldr	r6, [r4, #24]
 80015f6:	69c8      	ldr	r0, [r1, #28]
 80015f8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80015fc:	4286      	cmp	r6, r0
 80015fe:	d904      	bls.n	800160a <HAL_RCC_ClockConfig+0x5e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:899
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001600:	69ca      	ldr	r2, [r1, #28]
 8001602:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001606:	4332      	orrs	r2, r6
 8001608:	61ca      	str	r2, [r1, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:904
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800160a:	0699      	lsls	r1, r3, #26
 800160c:	d50b      	bpl.n	8001626 <HAL_RCC_ClockConfig+0x7a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:906
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800160e:	4970      	ldr	r1, [pc, #448]	; (80017d0 <HAL_RCC_ClockConfig+0x224>)
 8001610:	69e6      	ldr	r6, [r4, #28]
 8001612:	6a08      	ldr	r0, [r1, #32]
 8001614:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001618:	4286      	cmp	r6, r0
 800161a:	d904      	bls.n	8001626 <HAL_RCC_ClockConfig+0x7a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:909
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800161c:	6a0a      	ldr	r2, [r1, #32]
 800161e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001622:	4332      	orrs	r2, r6
 8001624:	620a      	str	r2, [r1, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:914
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001626:	079a      	lsls	r2, r3, #30
 8001628:	d50b      	bpl.n	8001642 <HAL_RCC_ClockConfig+0x96>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:916
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800162a:	4969      	ldr	r1, [pc, #420]	; (80017d0 <HAL_RCC_ClockConfig+0x224>)
 800162c:	68e6      	ldr	r6, [r4, #12]
 800162e:	6988      	ldr	r0, [r1, #24]
 8001630:	f000 000f 	and.w	r0, r0, #15
 8001634:	4286      	cmp	r6, r0
 8001636:	d904      	bls.n	8001642 <HAL_RCC_ClockConfig+0x96>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:920
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001638:	698a      	ldr	r2, [r1, #24]
 800163a:	f022 020f 	bic.w	r2, r2, #15
 800163e:	4332      	orrs	r2, r6
 8001640:	618a      	str	r2, [r1, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:925
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001642:	07df      	lsls	r7, r3, #31
 8001644:	d464      	bmi.n	8001710 <HAL_RCC_ClockConfig+0x164>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:983
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001646:	6823      	ldr	r3, [r4, #0]
 8001648:	079e      	lsls	r6, r3, #30
 800164a:	f100 8097 	bmi.w	800177c <HAL_RCC_ClockConfig+0x1d0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:994
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800164e:	495f      	ldr	r1, [pc, #380]	; (80017cc <HAL_RCC_ClockConfig+0x220>)
 8001650:	680a      	ldr	r2, [r1, #0]
 8001652:	f002 020f 	and.w	r2, r2, #15
 8001656:	42aa      	cmp	r2, r5
 8001658:	f200 809e 	bhi.w	8001798 <HAL_RCC_ClockConfig+0x1ec>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1008
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800165c:	0758      	lsls	r0, r3, #29
 800165e:	f100 80a7 	bmi.w	80017b0 <HAL_RCC_ClockConfig+0x204>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1018
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001662:	0719      	lsls	r1, r3, #28
 8001664:	d50b      	bpl.n	800167e <HAL_RCC_ClockConfig+0xd2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1020
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001666:	495a      	ldr	r1, [pc, #360]	; (80017d0 <HAL_RCC_ClockConfig+0x224>)
 8001668:	6965      	ldr	r5, [r4, #20]
 800166a:	69c8      	ldr	r0, [r1, #28]
 800166c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001670:	4285      	cmp	r5, r0
 8001672:	d204      	bcs.n	800167e <HAL_RCC_ClockConfig+0xd2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1023
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001674:	69ca      	ldr	r2, [r1, #28]
 8001676:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800167a:	432a      	orrs	r2, r5
 800167c:	61ca      	str	r2, [r1, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1028
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800167e:	06da      	lsls	r2, r3, #27
 8001680:	d50b      	bpl.n	800169a <HAL_RCC_ClockConfig+0xee>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1030
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001682:	4953      	ldr	r1, [pc, #332]	; (80017d0 <HAL_RCC_ClockConfig+0x224>)
 8001684:	69a5      	ldr	r5, [r4, #24]
 8001686:	69c8      	ldr	r0, [r1, #28]
 8001688:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800168c:	4285      	cmp	r5, r0
 800168e:	d204      	bcs.n	800169a <HAL_RCC_ClockConfig+0xee>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1033
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001690:	69ca      	ldr	r2, [r1, #28]
 8001692:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001696:	432a      	orrs	r2, r5
 8001698:	61ca      	str	r2, [r1, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1038
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800169a:	069b      	lsls	r3, r3, #26
 800169c:	d50b      	bpl.n	80016b6 <HAL_RCC_ClockConfig+0x10a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1040
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800169e:	4a4c      	ldr	r2, [pc, #304]	; (80017d0 <HAL_RCC_ClockConfig+0x224>)
 80016a0:	69e0      	ldr	r0, [r4, #28]
 80016a2:	6a11      	ldr	r1, [r2, #32]
 80016a4:	f001 0170 	and.w	r1, r1, #112	; 0x70
 80016a8:	4288      	cmp	r0, r1
 80016aa:	d204      	bcs.n	80016b6 <HAL_RCC_ClockConfig+0x10a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1043
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80016ac:	6a13      	ldr	r3, [r2, #32]
 80016ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016b2:	4303      	orrs	r3, r0
 80016b4:	6213      	str	r3, [r2, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1048
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016b6:	f7ff fedb 	bl	8001470 <HAL_RCC_GetSysClockFreq>
 80016ba:	4b45      	ldr	r3, [pc, #276]	; (80017d0 <HAL_RCC_ClockConfig+0x224>)
 80016bc:	4a45      	ldr	r2, [pc, #276]	; (80017d4 <HAL_RCC_ClockConfig+0x228>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80016c4:	5cd3      	ldrb	r3, [r2, r3]
 80016c6:	f003 031f 	and.w	r3, r3, #31
 80016ca:	40d8      	lsrs	r0, r3
 80016cc:	4b42      	ldr	r3, [pc, #264]	; (80017d8 <HAL_RCC_ClockConfig+0x22c>)
 80016ce:	6018      	str	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1051
  halstatus = HAL_InitTick (uwTickPrio);
 80016d0:	4b42      	ldr	r3, [pc, #264]	; (80017dc <HAL_RCC_ClockConfig+0x230>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1054
}
 80016d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1051
  halstatus = HAL_InitTick (uwTickPrio);
 80016d6:	6818      	ldr	r0, [r3, #0]
 80016d8:	f00a bf92 	b.w	800c600 <HAL_InitTick>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:861
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016dc:	6813      	ldr	r3, [r2, #0]
 80016de:	f023 030f 	bic.w	r3, r3, #15
 80016e2:	430b      	orrs	r3, r1
 80016e4:	6013      	str	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:865
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e6:	6813      	ldr	r3, [r2, #0]
 80016e8:	f003 030f 	and.w	r3, r3, #15
 80016ec:	428b      	cmp	r3, r1
 80016ee:	f47f af62 	bne.w	80015b6 <HAL_RCC_ClockConfig+0xa>
 80016f2:	e76a      	b.n	80015ca <HAL_RCC_ClockConfig+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:876
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80016f4:	4936      	ldr	r1, [pc, #216]	; (80017d0 <HAL_RCC_ClockConfig+0x224>)
 80016f6:	6926      	ldr	r6, [r4, #16]
 80016f8:	6988      	ldr	r0, [r1, #24]
 80016fa:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80016fe:	4286      	cmp	r6, r0
 8001700:	f67f af67 	bls.w	80015d2 <HAL_RCC_ClockConfig+0x26>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:879
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001704:	698a      	ldr	r2, [r1, #24]
 8001706:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800170a:	4332      	orrs	r2, r6
 800170c:	618a      	str	r2, [r1, #24]
 800170e:	e760      	b.n	80015d2 <HAL_RCC_ClockConfig+0x26>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:929
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001710:	4b2f      	ldr	r3, [pc, #188]	; (80017d0 <HAL_RCC_ClockConfig+0x224>)
 8001712:	68a1      	ldr	r1, [r4, #8]
 8001714:	699a      	ldr	r2, [r3, #24]
 8001716:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800171a:	430a      	orrs	r2, r1
 800171c:	619a      	str	r2, [r3, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:931
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800171e:	6862      	ldr	r2, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:934
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001720:	681b      	ldr	r3, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:931
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001722:	2a02      	cmp	r2, #2
 8001724:	d11d      	bne.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:934
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001726:	f413 3f00 	tst.w	r3, #131072	; 0x20000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:961
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800172a:	f43f af44 	beq.w	80015b6 <HAL_RCC_ClockConfig+0xa>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:966
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800172e:	4e28      	ldr	r6, [pc, #160]	; (80017d0 <HAL_RCC_ClockConfig+0x224>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:973
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001730:	f241 3888 	movw	r8, #5000	; 0x1388
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:966
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001734:	6933      	ldr	r3, [r6, #16]
 8001736:	f023 0307 	bic.w	r3, r3, #7
 800173a:	4313      	orrs	r3, r2
 800173c:	6133      	str	r3, [r6, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:969
      tickstart = HAL_GetTick();
 800173e:	f001 fb7b 	bl	8002e38 <HAL_GetTick>
 8001742:	4607      	mov	r7, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:971
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001744:	6933      	ldr	r3, [r6, #16]
 8001746:	6862      	ldr	r2, [r4, #4]
 8001748:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800174c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8001750:	f43f af79 	beq.w	8001646 <HAL_RCC_ClockConfig+0x9a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:973
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001754:	f001 fb70 	bl	8002e38 <HAL_GetTick>
 8001758:	1bc0      	subs	r0, r0, r7
 800175a:	4540      	cmp	r0, r8
 800175c:	d9f2      	bls.n	8001744 <HAL_RCC_ClockConfig+0x198>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:975
            return HAL_TIMEOUT;
 800175e:	2003      	movs	r0, #3
 8001760:	e72a      	b.n	80015b8 <HAL_RCC_ClockConfig+0xc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:940
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001762:	2a03      	cmp	r2, #3
 8001764:	d102      	bne.n	800176c <HAL_RCC_ClockConfig+0x1c0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:943
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001766:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800176a:	e7de      	b.n	800172a <HAL_RCC_ClockConfig+0x17e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:949
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800176c:	2a01      	cmp	r2, #1
 800176e:	d102      	bne.n	8001776 <HAL_RCC_ClockConfig+0x1ca>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:952
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001770:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001774:	e7d9      	b.n	800172a <HAL_RCC_ClockConfig+0x17e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:961
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001776:	f013 0f04 	tst.w	r3, #4
 800177a:	e7d6      	b.n	800172a <HAL_RCC_ClockConfig+0x17e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:985
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800177c:	4914      	ldr	r1, [pc, #80]	; (80017d0 <HAL_RCC_ClockConfig+0x224>)
 800177e:	68e6      	ldr	r6, [r4, #12]
 8001780:	6988      	ldr	r0, [r1, #24]
 8001782:	f000 000f 	and.w	r0, r0, #15
 8001786:	4286      	cmp	r6, r0
 8001788:	f4bf af61 	bcs.w	800164e <HAL_RCC_ClockConfig+0xa2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:989
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800178c:	698a      	ldr	r2, [r1, #24]
 800178e:	f022 020f 	bic.w	r2, r2, #15
 8001792:	4332      	orrs	r2, r6
 8001794:	618a      	str	r2, [r1, #24]
 8001796:	e75a      	b.n	800164e <HAL_RCC_ClockConfig+0xa2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:997
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001798:	680a      	ldr	r2, [r1, #0]
 800179a:	f022 020f 	bic.w	r2, r2, #15
 800179e:	432a      	orrs	r2, r5
 80017a0:	600a      	str	r2, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1001
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a2:	680a      	ldr	r2, [r1, #0]
 80017a4:	f002 020f 	and.w	r2, r2, #15
 80017a8:	42aa      	cmp	r2, r5
 80017aa:	f47f af04 	bne.w	80015b6 <HAL_RCC_ClockConfig+0xa>
 80017ae:	e755      	b.n	800165c <HAL_RCC_ClockConfig+0xb0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1010
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80017b0:	4907      	ldr	r1, [pc, #28]	; (80017d0 <HAL_RCC_ClockConfig+0x224>)
 80017b2:	6925      	ldr	r5, [r4, #16]
 80017b4:	6988      	ldr	r0, [r1, #24]
 80017b6:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80017ba:	4285      	cmp	r5, r0
 80017bc:	f4bf af51 	bcs.w	8001662 <HAL_RCC_ClockConfig+0xb6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1013
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80017c0:	698a      	ldr	r2, [r1, #24]
 80017c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017c6:	432a      	orrs	r2, r5
 80017c8:	618a      	str	r2, [r1, #24]
 80017ca:	e74a      	b.n	8001662 <HAL_RCC_ClockConfig+0xb6>
 80017cc:	52002000 	.word	0x52002000
 80017d0:	58024400 	.word	0x58024400
 80017d4:	080210e6 	.word	0x080210e6
 80017d8:	20000020 	.word	0x20000020
 80017dc:	20000008 	.word	0x20000008

080017e0 <HAL_RCC_GetHCLKFreq>:
HAL_RCC_GetHCLKFreq():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1300
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017e0:	b508      	push	{r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1301
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017e2:	f000 fb2b 	bl	8001e3c <HAL_RCCEx_GetD1SysClockFreq>
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_RCC_GetHCLKFreq+0x20>)
 80017e8:	4a06      	ldr	r2, [pc, #24]	; (8001804 <HAL_RCC_GetHCLKFreq+0x24>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 030f 	and.w	r3, r3, #15
 80017f0:	5cd3      	ldrb	r3, [r2, r3]
 80017f2:	f003 031f 	and.w	r3, r3, #31
 80017f6:	40d8      	lsrs	r0, r3
 80017f8:	4b03      	ldr	r3, [pc, #12]	; (8001808 <HAL_RCC_GetHCLKFreq+0x28>)
 80017fa:	6018      	str	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1303
  return SystemD2Clock;
}
 80017fc:	bd08      	pop	{r3, pc}
 80017fe:	bf00      	nop
 8001800:	58024400 	.word	0x58024400
 8001804:	080210e6 	.word	0x080210e6
 8001808:	20000024 	.word	0x20000024

0800180c <HAL_RCC_GetPCLK1Freq>:
HAL_RCC_GetPCLK1Freq():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1313
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800180c:	b508      	push	{r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1315
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800180e:	f7ff ffe7 	bl	80017e0 <HAL_RCC_GetHCLKFreq>
 8001812:	4b05      	ldr	r3, [pc, #20]	; (8001828 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001814:	4a05      	ldr	r2, [pc, #20]	; (800182c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800181c:	5cd3      	ldrb	r3, [r2, r3]
 800181e:	f003 031f 	and.w	r3, r3, #31
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1316
}
 8001822:	40d8      	lsrs	r0, r3
 8001824:	bd08      	pop	{r3, pc}
 8001826:	bf00      	nop
 8001828:	58024400 	.word	0x58024400
 800182c:	080210e6 	.word	0x080210e6

08001830 <HAL_RCC_GetClockConfig>:
HAL_RCC_GetClockConfig():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1461
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8001830:	233f      	movs	r3, #63	; 0x3f
 8001832:	6003      	str	r3, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1465
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <HAL_RCC_GetClockConfig+0x4c>)
 8001836:	691a      	ldr	r2, [r3, #16]
 8001838:	f002 0207 	and.w	r2, r2, #7
 800183c:	6042      	str	r2, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1468

  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800183e:	699a      	ldr	r2, [r3, #24]
 8001840:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8001844:	6082      	str	r2, [r0, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1471

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8001846:	699a      	ldr	r2, [r3, #24]
 8001848:	f002 020f 	and.w	r2, r2, #15
 800184c:	60c2      	str	r2, [r0, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1474

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800184e:	699a      	ldr	r2, [r3, #24]
 8001850:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001854:	6102      	str	r2, [r0, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1477

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8001856:	69da      	ldr	r2, [r3, #28]
 8001858:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800185c:	6142      	str	r2, [r0, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1480

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800185e:	69da      	ldr	r2, [r3, #28]
 8001860:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001864:	6182      	str	r2, [r0, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1483

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800186c:	61c3      	str	r3, [r0, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1487


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800186e:	4b04      	ldr	r3, [pc, #16]	; (8001880 <HAL_RCC_GetClockConfig+0x50>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	600b      	str	r3, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c:1488
}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	58024400 	.word	0x58024400
 8001880:	52002000 	.word	0x52002000

08001884 <HAL_TIMEx_CommutCallback>:
HAL_TIMEx_CommutCallback():
 8001884:	4770      	bx	lr

08001886 <HAL_TIMEx_BreakCallback>:
HAL_TIMEx_BreakCallback():
 8001886:	4770      	bx	lr

08001888 <HAL_TIMEx_Break2Callback>:
HAL_TIMEx_Break2Callback():
 8001888:	4770      	bx	lr
	...

0800188c <HAL_GPIO_Init>:
HAL_GPIO_Init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:174
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800188c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:193
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001890:	680b      	ldr	r3, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:174
{
 8001892:	b085      	sub	sp, #20
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:251
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001894:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001a58 <HAL_GPIO_Init+0x1cc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:276
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001898:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:193
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800189c:	9301      	str	r3, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:175
  uint32_t position = 0x00U;
 800189e:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:259
        temp = EXTI_CurrentCPU->IMR1;
 80018a0:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 8001a5c <HAL_GPIO_Init+0x1d0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:193
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018a4:	9a01      	ldr	r2, [sp, #4]
 80018a6:	40da      	lsrs	r2, r3
 80018a8:	d102      	bne.n	80018b0 <HAL_GPIO_Init+0x24>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:296
      }
    }

    position++;
  }
}
 80018aa:	b005      	add	sp, #20
 80018ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:196
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80018b0:	2701      	movs	r7, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:198
    if (iocurrent != 0x00U)
 80018b2:	9a01      	ldr	r2, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:196
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80018b4:	409f      	lsls	r7, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:198
    if (iocurrent != 0x00U)
 80018b6:	ea17 0502 	ands.w	r5, r7, r2
 80018ba:	f000 80b7 	beq.w	8001a2c <HAL_GPIO_Init+0x1a0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:202
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018be:	684a      	ldr	r2, [r1, #4]
 80018c0:	f022 0610 	bic.w	r6, r2, #16
 80018c4:	2e02      	cmp	r6, #2
 80018c6:	d116      	bne.n	80018f6 <HAL_GPIO_Init+0x6a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:209
        temp = GPIOx->AFR[position >> 3U];
 80018c8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:210
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018cc:	f003 0b07 	and.w	fp, r3, #7
 80018d0:	f04f 0c0f 	mov.w	ip, #15
 80018d4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80018d8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:209
        temp = GPIOx->AFR[position >> 3U];
 80018dc:	f8da 4020 	ldr.w	r4, [sl, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:210
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018e0:	fa0c fc0b 	lsl.w	ip, ip, fp
 80018e4:	ea24 0c0c 	bic.w	ip, r4, ip
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:211
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018e8:	690c      	ldr	r4, [r1, #16]
 80018ea:	fa04 f40b 	lsl.w	r4, r4, fp
 80018ee:	ea44 040c 	orr.w	r4, r4, ip
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:212
        GPIOx->AFR[position >> 3U] = temp;
 80018f2:	f8ca 4020 	str.w	r4, [sl, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:216
      temp = GPIOx->MODER;
 80018f6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:217
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018fa:	2403      	movs	r4, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:216
      temp = GPIOx->MODER;
 80018fc:	f8d0 b000 	ldr.w	fp, [r0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:218
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001900:	f002 0c03 	and.w	ip, r2, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:217
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001904:	fa04 f40a 	lsl.w	r4, r4, sl
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:222
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001908:	3e01      	subs	r6, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:218
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800190a:	fa0c fc0a 	lsl.w	ip, ip, sl
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:217
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800190e:	43e4      	mvns	r4, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:222
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001910:	2e01      	cmp	r6, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:217
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001912:	ea04 0b0b 	and.w	fp, r4, fp
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:218
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001916:	ea4c 0c0b 	orr.w	ip, ip, fp
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:219
      GPIOx->MODER = temp;
 800191a:	f8c0 c000 	str.w	ip, [r0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:222
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800191e:	d810      	bhi.n	8001942 <HAL_GPIO_Init+0xb6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:228
        temp = GPIOx->OSPEEDR;
 8001920:	6886      	ldr	r6, [r0, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:229
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001922:	ea06 0b04 	and.w	fp, r6, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:230
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001926:	68ce      	ldr	r6, [r1, #12]
 8001928:	fa06 fc0a 	lsl.w	ip, r6, sl
 800192c:	ea4c 060b 	orr.w	r6, ip, fp
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:231
        GPIOx->OSPEEDR = temp;
 8001930:	6086      	str	r6, [r0, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:234
        temp = GPIOx->OTYPER;
 8001932:	6846      	ldr	r6, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:235
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001934:	ea26 0707 	bic.w	r7, r6, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:236
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001938:	f3c2 1600 	ubfx	r6, r2, #4, #1
 800193c:	409e      	lsls	r6, r3
 800193e:	4337      	orrs	r7, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:237
        GPIOx->OTYPER = temp;
 8001940:	6047      	str	r7, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:241
      temp = GPIOx->PUPDR;
 8001942:	68c6      	ldr	r6, [r0, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:242
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001944:	4034      	ands	r4, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:243
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001946:	688e      	ldr	r6, [r1, #8]
 8001948:	fa06 f60a 	lsl.w	r6, r6, sl
 800194c:	4334      	orrs	r4, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:244
      GPIOx->PUPDR = temp;
 800194e:	60c4      	str	r4, [r0, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:248
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001950:	00d4      	lsls	r4, r2, #3
 8001952:	d56b      	bpl.n	8001a2c <HAL_GPIO_Init+0x1a0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:251
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001954:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8001958:	f023 0603 	bic.w	r6, r3, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:254
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800195c:	f003 0703 	and.w	r7, r3, #3
 8001960:	f04f 0c0f 	mov.w	ip, #15
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:251
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001964:	f044 0402 	orr.w	r4, r4, #2
 8001968:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:254
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800196c:	00bf      	lsls	r7, r7, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:251
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 8001972:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001976:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 800197a:	f004 0402 	and.w	r4, r4, #2
 800197e:	9403      	str	r4, [sp, #12]
 8001980:	9c03      	ldr	r4, [sp, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:254
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001982:	fa0c f407 	lsl.w	r4, ip, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:253
        temp = SYSCFG->EXTICR[position >> 2U];
 8001986:	f8d6 a008 	ldr.w	sl, [r6, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:254
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800198a:	ea2a 0c04 	bic.w	ip, sl, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:255
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800198e:	4c31      	ldr	r4, [pc, #196]	; (8001a54 <HAL_GPIO_Init+0x1c8>)
 8001990:	42a0      	cmp	r0, r4
 8001992:	d04d      	beq.n	8001a30 <HAL_GPIO_Init+0x1a4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:255 (discriminator 1)
 8001994:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001998:	42a0      	cmp	r0, r4
 800199a:	d04b      	beq.n	8001a34 <HAL_GPIO_Init+0x1a8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:255 (discriminator 3)
 800199c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019a0:	42a0      	cmp	r0, r4
 80019a2:	d049      	beq.n	8001a38 <HAL_GPIO_Init+0x1ac>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:255 (discriminator 5)
 80019a4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019a8:	42a0      	cmp	r0, r4
 80019aa:	d047      	beq.n	8001a3c <HAL_GPIO_Init+0x1b0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:255 (discriminator 7)
 80019ac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019b0:	42a0      	cmp	r0, r4
 80019b2:	d045      	beq.n	8001a40 <HAL_GPIO_Init+0x1b4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:255 (discriminator 9)
 80019b4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019b8:	42a0      	cmp	r0, r4
 80019ba:	d043      	beq.n	8001a44 <HAL_GPIO_Init+0x1b8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:255 (discriminator 11)
 80019bc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019c0:	42a0      	cmp	r0, r4
 80019c2:	d041      	beq.n	8001a48 <HAL_GPIO_Init+0x1bc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:255 (discriminator 13)
 80019c4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019c8:	42a0      	cmp	r0, r4
 80019ca:	d03f      	beq.n	8001a4c <HAL_GPIO_Init+0x1c0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:255 (discriminator 15)
 80019cc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019d0:	42a0      	cmp	r0, r4
 80019d2:	d03d      	beq.n	8001a50 <HAL_GPIO_Init+0x1c4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:255 (discriminator 17)
 80019d4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019d8:	42a0      	cmp	r0, r4
 80019da:	bf0c      	ite	eq
 80019dc:	2409      	moveq	r4, #9
 80019de:	240a      	movne	r4, #10
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:255 (discriminator 40)
 80019e0:	40bc      	lsls	r4, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:261 (discriminator 40)
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e2:	03d7      	lsls	r7, r2, #15
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:255 (discriminator 40)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019e4:	ea44 040c 	orr.w	r4, r4, ip
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:256 (discriminator 40)
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019e8:	60b4      	str	r4, [r6, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:260 (discriminator 40)
        temp &= ~(iocurrent);
 80019ea:	ea6f 0605 	mvn.w	r6, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:259 (discriminator 40)
        temp = EXTI_CurrentCPU->IMR1;
 80019ee:	f8de 4000 	ldr.w	r4, [lr]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:260 (discriminator 40)
        temp &= ~(iocurrent);
 80019f2:	bf54      	ite	pl
 80019f4:	4034      	andpl	r4, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:263 (discriminator 40)
          temp |= iocurrent;
 80019f6:	432c      	orrmi	r4, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:269 (discriminator 40)
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019f8:	0397      	lsls	r7, r2, #14
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:265 (discriminator 40)
        EXTI_CurrentCPU->IMR1 = temp;
 80019fa:	f8ce 4000 	str.w	r4, [lr]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:267 (discriminator 40)
        temp = EXTI_CurrentCPU->EMR1;
 80019fe:	f8de 4004 	ldr.w	r4, [lr, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:268 (discriminator 40)
        temp &= ~(iocurrent);
 8001a02:	bf54      	ite	pl
 8001a04:	4034      	andpl	r4, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:271 (discriminator 40)
          temp |= iocurrent;
 8001a06:	432c      	orrmi	r4, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:278 (discriminator 40)
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a08:	02d7      	lsls	r7, r2, #11
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:282 (discriminator 40)
        EXTI->RTSR1 = temp;
 8001a0a:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:273 (discriminator 40)
        EXTI_CurrentCPU->EMR1 = temp;
 8001a0e:	f8ce 4004 	str.w	r4, [lr, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:276 (discriminator 40)
        temp = EXTI->RTSR1;
 8001a12:	f8d9 4000 	ldr.w	r4, [r9]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:277 (discriminator 40)
        temp &= ~(iocurrent);
 8001a16:	bf54      	ite	pl
 8001a18:	4034      	andpl	r4, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:280 (discriminator 40)
          temp |= iocurrent;
 8001a1a:	432c      	orrmi	r4, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:286 (discriminator 40)
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a1c:	0292      	lsls	r2, r2, #10
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:282 (discriminator 40)
        EXTI->RTSR1 = temp;
 8001a1e:	603c      	str	r4, [r7, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:284 (discriminator 40)
        temp = EXTI->FTSR1;
 8001a20:	687c      	ldr	r4, [r7, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:285 (discriminator 40)
        temp &= ~(iocurrent);
 8001a22:	bf54      	ite	pl
 8001a24:	4034      	andpl	r4, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:288 (discriminator 40)
          temp |= iocurrent;
 8001a26:	432c      	orrmi	r4, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:290 (discriminator 40)
        EXTI->FTSR1 = temp;
 8001a28:	f8c9 4004 	str.w	r4, [r9, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:294
    position++;
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	e739      	b.n	80018a4 <HAL_GPIO_Init+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:255
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a30:	2400      	movs	r4, #0
 8001a32:	e7d5      	b.n	80019e0 <HAL_GPIO_Init+0x154>
 8001a34:	2401      	movs	r4, #1
 8001a36:	e7d3      	b.n	80019e0 <HAL_GPIO_Init+0x154>
 8001a38:	2402      	movs	r4, #2
 8001a3a:	e7d1      	b.n	80019e0 <HAL_GPIO_Init+0x154>
 8001a3c:	2403      	movs	r4, #3
 8001a3e:	e7cf      	b.n	80019e0 <HAL_GPIO_Init+0x154>
 8001a40:	2404      	movs	r4, #4
 8001a42:	e7cd      	b.n	80019e0 <HAL_GPIO_Init+0x154>
 8001a44:	2405      	movs	r4, #5
 8001a46:	e7cb      	b.n	80019e0 <HAL_GPIO_Init+0x154>
 8001a48:	2406      	movs	r4, #6
 8001a4a:	e7c9      	b.n	80019e0 <HAL_GPIO_Init+0x154>
 8001a4c:	2407      	movs	r4, #7
 8001a4e:	e7c7      	b.n	80019e0 <HAL_GPIO_Init+0x154>
 8001a50:	2408      	movs	r4, #8
 8001a52:	e7c5      	b.n	80019e0 <HAL_GPIO_Init+0x154>
 8001a54:	58020000 	.word	0x58020000
 8001a58:	58024400 	.word	0x58024400
 8001a5c:	58000080 	.word	0x58000080

08001a60 <HAL_GPIO_WritePin>:
HAL_GPIO_WritePin():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:432
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a60:	b10a      	cbz	r2, 8001a66 <HAL_GPIO_WritePin+0x6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:438
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a62:	6181      	str	r1, [r0, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:440
  }
}
 8001a64:	4770      	bx	lr
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c:438
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a66:	0409      	lsls	r1, r1, #16
 8001a68:	e7fb      	b.n	8001a62 <HAL_GPIO_WritePin+0x2>
	...

08001a6c <HAL_NVIC_SetPriorityGrouping>:
__NVIC_SetPriorityGrouping():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:1870
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a6c:	4a07      	ldr	r2, [pc, #28]	; (8001a8c <HAL_NVIC_SetPriorityGrouping+0x20>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:1874
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a6e:	0200      	lsls	r0, r0, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:1870
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a70:	68d3      	ldr	r3, [r2, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:1874
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a72:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:1871
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a76:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a7a:	041b      	lsls	r3, r3, #16
 8001a7c:	0c1b      	lsrs	r3, r3, #16
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:1873
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a7e:	4318      	orrs	r0, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:1872
  reg_value  =  (reg_value                                   |
 8001a80:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001a84:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:1875
  SCB->AIRCR =  reg_value;
 8001a88:	60d0      	str	r0, [r2, #12]
HAL_NVIC_SetPriorityGrouping():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:150
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001a8a:	4770      	bx	lr
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <HAL_NVIC_SetPriority>:
__NVIC_GetPriorityGrouping():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:1886
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a90:	4b16      	ldr	r3, [pc, #88]	; (8001aec <HAL_NVIC_SetPriority+0x5c>)
HAL_NVIC_SetPriority():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:166
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a92:	b570      	push	{r4, r5, r6, lr}
__NVIC_GetPriorityGrouping():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:1886
 8001a94:	68dc      	ldr	r4, [r3, #12]
NVIC_EncodePriority():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2081

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a96:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
__NVIC_GetPriorityGrouping():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:1886
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a9a:	f3c4 2402 	ubfx	r4, r4, #8, #3
NVIC_EncodePriority():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2077
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a9e:	f1c4 0507 	rsb	r5, r4, #7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2078
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa2:	1d23      	adds	r3, r4, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2077
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa4:	2d04      	cmp	r5, #4
 8001aa6:	bf28      	it	cs
 8001aa8:	2504      	movcs	r5, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2078
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aaa:	2b06      	cmp	r3, #6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2081
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	fa06 f505 	lsl.w	r5, r6, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2078
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab0:	bf8c      	ite	hi
 8001ab2:	3c03      	subhi	r4, #3
 8001ab4:	2400      	movls	r4, #0
__NVIC_SetPriority():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2026
  if ((int32_t)(IRQn) >= 0)
 8001ab6:	2800      	cmp	r0, #0
NVIC_EncodePriority():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2081
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	ea21 0105 	bic.w	r1, r1, r5
 8001abc:	fa01 f104 	lsl.w	r1, r1, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2082
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac0:	fa06 f404 	lsl.w	r4, r6, r4
 8001ac4:	ea22 0304 	bic.w	r3, r2, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2081
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	ea43 0301 	orr.w	r3, r3, r1
 8001acc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001ad0:	b2db      	uxtb	r3, r3
__NVIC_SetPriority():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2026
  if ((int32_t)(IRQn) >= 0)
 8001ad2:	db06      	blt.n	8001ae2 <HAL_NVIC_SetPriority+0x52>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2028
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001ad8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001adc:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
HAL_NVIC_SetPriority():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:176
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001ae0:	bd70      	pop	{r4, r5, r6, pc}
__NVIC_SetPriority():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2032
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae2:	f000 000f 	and.w	r0, r0, #15
 8001ae6:	4a02      	ldr	r2, [pc, #8]	; (8001af0 <HAL_NVIC_SetPriority+0x60>)
 8001ae8:	5413      	strb	r3, [r2, r0]
HAL_NVIC_SetPriority():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:176
 8001aea:	e7f9      	b.n	8001ae0 <HAL_NVIC_SetPriority+0x50>
 8001aec:	e000ed00 	.word	0xe000ed00
 8001af0:	e000ed14 	.word	0xe000ed14

08001af4 <HAL_NVIC_EnableIRQ>:
__NVIC_EnableIRQ():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:1898
  if ((int32_t)(IRQn) >= 0)
 8001af4:	2800      	cmp	r0, #0
 8001af6:	db08      	blt.n	8001b0a <HAL_NVIC_EnableIRQ+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:1900
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af8:	0942      	lsrs	r2, r0, #5
 8001afa:	2301      	movs	r3, #1
 8001afc:	f000 001f 	and.w	r0, r0, #31
 8001b00:	fa03 f000 	lsl.w	r0, r3, r0
 8001b04:	4b01      	ldr	r3, [pc, #4]	; (8001b0c <HAL_NVIC_EnableIRQ+0x18>)
 8001b06:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
HAL_NVIC_EnableIRQ():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:194
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001b0a:	4770      	bx	lr
 8001b0c:	e000e100 	.word	0xe000e100

08001b10 <HAL_MPU_Disable>:
__DMB():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:890
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b10:	f3bf 8f5f 	dmb	sy
HAL_MPU_Disable():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:263
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <HAL_MPU_Disable+0x18>)
 8001b16:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b1c:	6253      	str	r3, [r2, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:266

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001b1e:	2200      	movs	r2, #0
 8001b20:	4b02      	ldr	r3, [pc, #8]	; (8001b2c <HAL_MPU_Disable+0x1c>)
 8001b22:	605a      	str	r2, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:267
}
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000ed00 	.word	0xe000ed00
 8001b2c:	e000ed90 	.word	0xe000ed90

08001b30 <HAL_MPU_Enable>:
HAL_MPU_Enable():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:286
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001b30:	4a06      	ldr	r2, [pc, #24]	; (8001b4c <HAL_MPU_Enable+0x1c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:283
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001b32:	f040 0001 	orr.w	r0, r0, #1
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_MPU_Enable+0x20>)
 8001b38:	6058      	str	r0, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:286
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001b3a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b40:	6253      	str	r3, [r2, #36]	; 0x24
__DSB():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:879
  __ASM volatile ("dsb 0xF":::"memory");
 8001b42:	f3bf 8f4f 	dsb	sy
__ISB():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:868
  __ASM volatile ("isb 0xF":::"memory");
 8001b46:	f3bf 8f6f 	isb	sy
HAL_MPU_Enable():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:291

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00
 8001b50:	e000ed90 	.word	0xe000ed90

08001b54 <HAL_MPU_ConfigRegion>:
HAL_MPU_ConfigRegion():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:305
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001b54:	7843      	ldrb	r3, [r0, #1]
 8001b56:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <HAL_MPU_ConfigRegion+0x4c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:299
{
 8001b58:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:305
  MPU->RNR = MPU_Init->Number;
 8001b5a:	6093      	str	r3, [r2, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:307

  if ((MPU_Init->Enable) != 0UL)
 8001b5c:	7801      	ldrb	r1, [r0, #0]
 8001b5e:	b1d9      	cbz	r1, 8001b98 <HAL_MPU_ConfigRegion+0x44>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:319
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001b60:	6843      	ldr	r3, [r0, #4]
 8001b62:	60d3      	str	r3, [r2, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:321
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b64:	7ac3      	ldrb	r3, [r0, #11]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:320
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b66:	7b04      	ldrb	r4, [r0, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:321
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b68:	061b      	lsls	r3, r3, #24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:320
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b6a:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:327
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b6e:	430b      	orrs	r3, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:322
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b70:	7a81      	ldrb	r1, [r0, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:327
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b72:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:323
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b76:	7b41      	ldrb	r1, [r0, #13]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:327
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b78:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:324
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b7c:	7b81      	ldrb	r1, [r0, #14]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:327
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b7e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:325
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b82:	7bc1      	ldrb	r1, [r0, #15]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:327
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:326
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b88:	7a41      	ldrb	r1, [r0, #9]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:327
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b8a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001b8e:	7a01      	ldrb	r1, [r0, #8]
 8001b90:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:320
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b94:	6113      	str	r3, [r2, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:335
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001b96:	bd10      	pop	{r4, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:332
    MPU->RBAR = 0x00;
 8001b98:	60d1      	str	r1, [r2, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:333
    MPU->RASR = 0x00;
 8001b9a:	6111      	str	r1, [r2, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c:335
}
 8001b9c:	e7fb      	b.n	8001b96 <HAL_MPU_ConfigRegion+0x42>
 8001b9e:	bf00      	nop
 8001ba0:	e000ed90 	.word	0xe000ed90

08001ba4 <HAL_TIM_Base_MspInit>:
HAL_TIM_Base_MspInit():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:364
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ba4:	4770      	bx	lr
	...

08001ba8 <HAL_TIM_Base_Start_IT>:
HAL_TIM_Base_Start_IT():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:447

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ba8:	6803      	ldr	r3, [r0, #0]
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	f042 0201 	orr.w	r2, r2, #1
 8001bb0:	60da      	str	r2, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:450

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bb2:	4a07      	ldr	r2, [pc, #28]	; (8001bd0 <HAL_TIM_Base_Start_IT+0x28>)
 8001bb4:	6899      	ldr	r1, [r3, #8]
 8001bb6:	400a      	ands	r2, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:451
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bb8:	2a06      	cmp	r2, #6
 8001bba:	d006      	beq.n	8001bca <HAL_TIM_Base_Start_IT+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:451 (discriminator 1)
 8001bbc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001bc0:	d003      	beq.n	8001bca <HAL_TIM_Base_Start_IT+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:453
  {
    __HAL_TIM_ENABLE(htim);
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	f042 0201 	orr.w	r2, r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:458
  }

  /* Return function status */
  return HAL_OK;
}
 8001bca:	2000      	movs	r0, #0
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	00010007 	.word	0x00010007

08001bd4 <HAL_TIM_OC_DelayElapsedCallback>:
HAL_TIM_OC_DelayElapsedCallback():
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_TIM_IC_CaptureCallback>:
HAL_TIM_IC_CaptureCallback():
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_TIM_PWM_PulseFinishedCallback>:
HAL_TIM_PWM_PulseFinishedCallback():
 8001bd8:	4770      	bx	lr

08001bda <HAL_TIM_TriggerCallback>:
HAL_TIM_TriggerCallback():
 8001bda:	4770      	bx	lr

08001bdc <HAL_TIM_IRQHandler>:
HAL_TIM_IRQHandler():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3181
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bdc:	6803      	ldr	r3, [r0, #0]
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	0791      	lsls	r1, r2, #30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3179
{
 8001be2:	b510      	push	{r4, lr}
 8001be4:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3181
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001be6:	d50f      	bpl.n	8001c08 <HAL_TIM_IRQHandler+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3183
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	0792      	lsls	r2, r2, #30
 8001bec:	d50c      	bpl.n	8001c08 <HAL_TIM_IRQHandler+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3186
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bee:	f06f 0202 	mvn.w	r2, #2
 8001bf2:	611a      	str	r2, [r3, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3187
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bf4:	2201      	movs	r2, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3190

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bf6:	699b      	ldr	r3, [r3, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3187
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bf8:	7702      	strb	r2, [r0, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3190
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bfa:	0799      	lsls	r1, r3, #30
 8001bfc:	f000 8085 	beq.w	8001d0a <HAL_TIM_IRQHandler+0x12e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3195
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c00:	f7ff ffe9 	bl	8001bd6 <HAL_TIM_IC_CaptureCallback>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3209
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c04:	2300      	movs	r3, #0
 8001c06:	7723      	strb	r3, [r4, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3214
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	0752      	lsls	r2, r2, #29
 8001c0e:	d510      	bpl.n	8001c32 <HAL_TIM_IRQHandler+0x56>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3216
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	0750      	lsls	r0, r2, #29
 8001c14:	d50d      	bpl.n	8001c32 <HAL_TIM_IRQHandler+0x56>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3218
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c16:	f06f 0204 	mvn.w	r2, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3226
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c1a:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3218
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c1c:	611a      	str	r2, [r3, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3219
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c1e:	2202      	movs	r2, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3221
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c20:	699b      	ldr	r3, [r3, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3219
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c22:	7722      	strb	r2, [r4, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3221
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c24:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001c28:	d075      	beq.n	8001d16 <HAL_TIM_IRQHandler+0x13a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3226
        HAL_TIM_IC_CaptureCallback(htim);
 8001c2a:	f7ff ffd4 	bl	8001bd6 <HAL_TIM_IC_CaptureCallback>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3240
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	7723      	strb	r3, [r4, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3244
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c32:	6823      	ldr	r3, [r4, #0]
 8001c34:	691a      	ldr	r2, [r3, #16]
 8001c36:	0711      	lsls	r1, r2, #28
 8001c38:	d50f      	bpl.n	8001c5a <HAL_TIM_IRQHandler+0x7e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3246
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	0712      	lsls	r2, r2, #28
 8001c3e:	d50c      	bpl.n	8001c5a <HAL_TIM_IRQHandler+0x7e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3248
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c40:	f06f 0208 	mvn.w	r2, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3256
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c44:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3248
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c46:	611a      	str	r2, [r3, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3249
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c48:	2204      	movs	r2, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3251
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c4a:	69db      	ldr	r3, [r3, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3249
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c4c:	7722      	strb	r2, [r4, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3251
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c4e:	079b      	lsls	r3, r3, #30
 8001c50:	d067      	beq.n	8001d22 <HAL_TIM_IRQHandler+0x146>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3256
        HAL_TIM_IC_CaptureCallback(htim);
 8001c52:	f7ff ffc0 	bl	8001bd6 <HAL_TIM_IC_CaptureCallback>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3270
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c56:	2300      	movs	r3, #0
 8001c58:	7723      	strb	r3, [r4, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3274
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c5a:	6823      	ldr	r3, [r4, #0]
 8001c5c:	691a      	ldr	r2, [r3, #16]
 8001c5e:	06d0      	lsls	r0, r2, #27
 8001c60:	d510      	bpl.n	8001c84 <HAL_TIM_IRQHandler+0xa8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3276
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	06d1      	lsls	r1, r2, #27
 8001c66:	d50d      	bpl.n	8001c84 <HAL_TIM_IRQHandler+0xa8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3278
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c68:	f06f 0210 	mvn.w	r2, #16
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3286
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c6c:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3278
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c6e:	611a      	str	r2, [r3, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3279
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c70:	2208      	movs	r2, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3281
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c72:	69db      	ldr	r3, [r3, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3279
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c74:	7722      	strb	r2, [r4, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3281
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c76:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001c7a:	d058      	beq.n	8001d2e <HAL_TIM_IRQHandler+0x152>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3286
        HAL_TIM_IC_CaptureCallback(htim);
 8001c7c:	f7ff ffab 	bl	8001bd6 <HAL_TIM_IC_CaptureCallback>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3300
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c80:	2300      	movs	r3, #0
 8001c82:	7723      	strb	r3, [r4, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3304
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c84:	6823      	ldr	r3, [r4, #0]
 8001c86:	691a      	ldr	r2, [r3, #16]
 8001c88:	07d2      	lsls	r2, r2, #31
 8001c8a:	d508      	bpl.n	8001c9e <HAL_TIM_IRQHandler+0xc2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3306
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c8c:	68da      	ldr	r2, [r3, #12]
 8001c8e:	07d0      	lsls	r0, r2, #31
 8001c90:	d505      	bpl.n	8001c9e <HAL_TIM_IRQHandler+0xc2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3308
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c92:	f06f 0201 	mvn.w	r2, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3312
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c96:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3308
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c98:	611a      	str	r2, [r3, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3312
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c9a:	f00a fcf5 	bl	800c688 <HAL_TIM_PeriodElapsedCallback>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3317
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c9e:	6823      	ldr	r3, [r4, #0]
 8001ca0:	691a      	ldr	r2, [r3, #16]
 8001ca2:	0611      	lsls	r1, r2, #24
 8001ca4:	d508      	bpl.n	8001cb8 <HAL_TIM_IRQHandler+0xdc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3319
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	0612      	lsls	r2, r2, #24
 8001caa:	d505      	bpl.n	8001cb8 <HAL_TIM_IRQHandler+0xdc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3321
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cac:	f06f 0280 	mvn.w	r2, #128	; 0x80
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3325
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cb0:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3321
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cb2:	611a      	str	r2, [r3, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3325
      HAL_TIMEx_BreakCallback(htim);
 8001cb4:	f7ff fde7 	bl	8001886 <HAL_TIMEx_BreakCallback>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3330
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001cb8:	6823      	ldr	r3, [r4, #0]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	05d0      	lsls	r0, r2, #23
 8001cbe:	d508      	bpl.n	8001cd2 <HAL_TIM_IRQHandler+0xf6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3332
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	0611      	lsls	r1, r2, #24
 8001cc4:	d505      	bpl.n	8001cd2 <HAL_TIM_IRQHandler+0xf6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3334
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001cc6:	f46f 7280 	mvn.w	r2, #256	; 0x100
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3338
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001cca:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3334
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001ccc:	611a      	str	r2, [r3, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3338
      HAL_TIMEx_Break2Callback(htim);
 8001cce:	f7ff fddb 	bl	8001888 <HAL_TIMEx_Break2Callback>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3343
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cd2:	6823      	ldr	r3, [r4, #0]
 8001cd4:	691a      	ldr	r2, [r3, #16]
 8001cd6:	0652      	lsls	r2, r2, #25
 8001cd8:	d508      	bpl.n	8001cec <HAL_TIM_IRQHandler+0x110>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3345
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	0650      	lsls	r0, r2, #25
 8001cde:	d505      	bpl.n	8001cec <HAL_TIM_IRQHandler+0x110>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3347
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ce0:	f06f 0240 	mvn.w	r2, #64	; 0x40
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3351
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ce4:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3347
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ce6:	611a      	str	r2, [r3, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3351
      HAL_TIM_TriggerCallback(htim);
 8001ce8:	f7ff ff77 	bl	8001bda <HAL_TIM_TriggerCallback>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3356
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	691a      	ldr	r2, [r3, #16]
 8001cf0:	0691      	lsls	r1, r2, #26
 8001cf2:	d522      	bpl.n	8001d3a <HAL_TIM_IRQHandler+0x15e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3358
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	0692      	lsls	r2, r2, #26
 8001cf8:	d51f      	bpl.n	8001d3a <HAL_TIM_IRQHandler+0x15e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3360
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cfa:	f06f 0220 	mvn.w	r2, #32
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3364
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cfe:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3360
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d00:	611a      	str	r2, [r3, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3368
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3364
      HAL_TIMEx_CommutCallback(htim);
 8001d06:	f7ff bdbd 	b.w	8001884 <HAL_TIMEx_CommutCallback>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3205
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0a:	f7ff ff63 	bl	8001bd4 <HAL_TIM_OC_DelayElapsedCallback>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3206
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d0e:	4620      	mov	r0, r4
 8001d10:	f7ff ff62 	bl	8001bd8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d14:	e776      	b.n	8001c04 <HAL_TIM_IRQHandler+0x28>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3236
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d16:	f7ff ff5d 	bl	8001bd4 <HAL_TIM_OC_DelayElapsedCallback>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3237
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	f7ff ff5c 	bl	8001bd8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d20:	e785      	b.n	8001c2e <HAL_TIM_IRQHandler+0x52>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3266
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d22:	f7ff ff57 	bl	8001bd4 <HAL_TIM_OC_DelayElapsedCallback>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3267
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d26:	4620      	mov	r0, r4
 8001d28:	f7ff ff56 	bl	8001bd8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d2c:	e793      	b.n	8001c56 <HAL_TIM_IRQHandler+0x7a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3296
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2e:	f7ff ff51 	bl	8001bd4 <HAL_TIM_OC_DelayElapsedCallback>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3297
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d32:	4620      	mov	r0, r4
 8001d34:	f7ff ff50 	bl	8001bd8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d38:	e7a2      	b.n	8001c80 <HAL_TIM_IRQHandler+0xa4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:3368
}
 8001d3a:	bd10      	pop	{r4, pc}

08001d3c <TIM_Base_SetConfig>:
TIM_Base_SetConfig():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6077
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d3c:	4a30      	ldr	r2, [pc, #192]	; (8001e00 <TIM_Base_SetConfig+0xc4>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6074
  tmpcr1 = TIMx->CR1;
 8001d3e:	6803      	ldr	r3, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6077
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d40:	4290      	cmp	r0, r2
 8001d42:	d012      	beq.n	8001d6a <TIM_Base_SetConfig+0x2e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6077 (discriminator 1)
 8001d44:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d48:	d00f      	beq.n	8001d6a <TIM_Base_SetConfig+0x2e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6077 (discriminator 2)
 8001d4a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001d4e:	4290      	cmp	r0, r2
 8001d50:	d00b      	beq.n	8001d6a <TIM_Base_SetConfig+0x2e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6077 (discriminator 3)
 8001d52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d56:	4290      	cmp	r0, r2
 8001d58:	d007      	beq.n	8001d6a <TIM_Base_SetConfig+0x2e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6077 (discriminator 4)
 8001d5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d5e:	4290      	cmp	r0, r2
 8001d60:	d003      	beq.n	8001d6a <TIM_Base_SetConfig+0x2e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6077 (discriminator 5)
 8001d62:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001d66:	4290      	cmp	r0, r2
 8001d68:	d119      	bne.n	8001d9e <TIM_Base_SetConfig+0x62>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6081
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001d6a:	684a      	ldr	r2, [r1, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6080
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6081
    tmpcr1 |= Structure->CounterMode;
 8001d70:	4313      	orrs	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6084
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d72:	4a23      	ldr	r2, [pc, #140]	; (8001e00 <TIM_Base_SetConfig+0xc4>)
 8001d74:	4290      	cmp	r0, r2
 8001d76:	d01d      	beq.n	8001db4 <TIM_Base_SetConfig+0x78>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6084 (discriminator 1)
 8001d78:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d7c:	d01a      	beq.n	8001db4 <TIM_Base_SetConfig+0x78>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6084 (discriminator 2)
 8001d7e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001d82:	4290      	cmp	r0, r2
 8001d84:	d016      	beq.n	8001db4 <TIM_Base_SetConfig+0x78>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6084 (discriminator 3)
 8001d86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d8a:	4290      	cmp	r0, r2
 8001d8c:	d012      	beq.n	8001db4 <TIM_Base_SetConfig+0x78>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6084 (discriminator 4)
 8001d8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d92:	4290      	cmp	r0, r2
 8001d94:	d00e      	beq.n	8001db4 <TIM_Base_SetConfig+0x78>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6084 (discriminator 5)
 8001d96:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001d9a:	4290      	cmp	r0, r2
 8001d9c:	d00a      	beq.n	8001db4 <TIM_Base_SetConfig+0x78>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6084 (discriminator 6)
 8001d9e:	4a19      	ldr	r2, [pc, #100]	; (8001e04 <TIM_Base_SetConfig+0xc8>)
 8001da0:	4290      	cmp	r0, r2
 8001da2:	d007      	beq.n	8001db4 <TIM_Base_SetConfig+0x78>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6084 (discriminator 7)
 8001da4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001da8:	4290      	cmp	r0, r2
 8001daa:	d003      	beq.n	8001db4 <TIM_Base_SetConfig+0x78>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6084 (discriminator 8)
 8001dac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001db0:	4290      	cmp	r0, r2
 8001db2:	d103      	bne.n	8001dbc <TIM_Base_SetConfig+0x80>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6087
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6088
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001db8:	68ca      	ldr	r2, [r1, #12]
 8001dba:	4313      	orrs	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6092
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dbc:	694a      	ldr	r2, [r1, #20]
 8001dbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dc2:	4313      	orrs	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6094

  TIMx->CR1 = tmpcr1;
 8001dc4:	6003      	str	r3, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6097

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dc6:	688b      	ldr	r3, [r1, #8]
 8001dc8:	62c3      	str	r3, [r0, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6100

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dca:	680b      	ldr	r3, [r1, #0]
 8001dcc:	6283      	str	r3, [r0, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6102

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dce:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <TIM_Base_SetConfig+0xc4>)
 8001dd0:	4298      	cmp	r0, r3
 8001dd2:	d00f      	beq.n	8001df4 <TIM_Base_SetConfig+0xb8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6102 (discriminator 1)
 8001dd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dd8:	4298      	cmp	r0, r3
 8001dda:	d00b      	beq.n	8001df4 <TIM_Base_SetConfig+0xb8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6102 (discriminator 2)
 8001ddc:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8001de0:	4298      	cmp	r0, r3
 8001de2:	d007      	beq.n	8001df4 <TIM_Base_SetConfig+0xb8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6102 (discriminator 3)
 8001de4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001de8:	4298      	cmp	r0, r3
 8001dea:	d003      	beq.n	8001df4 <TIM_Base_SetConfig+0xb8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6102 (discriminator 4)
 8001dec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001df0:	4298      	cmp	r0, r3
 8001df2:	d101      	bne.n	8001df8 <TIM_Base_SetConfig+0xbc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6105
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001df4:	690b      	ldr	r3, [r1, #16]
 8001df6:	6303      	str	r3, [r0, #48]	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6110
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	6143      	str	r3, [r0, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:6111
}
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40010000 	.word	0x40010000
 8001e04:	40014000 	.word	0x40014000

08001e08 <HAL_TIM_Base_Init>:
HAL_TIM_Base_Init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:269
{
 8001e08:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:271
  if (htim == NULL)
 8001e0a:	4604      	mov	r4, r0
 8001e0c:	b1a0      	cbz	r0, 8001e38 <HAL_TIM_Base_Init+0x30>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:282
  if (htim->State == HAL_TIM_STATE_RESET)
 8001e0e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e16:	b91b      	cbnz	r3, 8001e20 <HAL_TIM_Base_Init+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:285
    htim->Lock = HAL_UNLOCKED;
 8001e18:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:299
    HAL_TIM_Base_MspInit(htim);
 8001e1c:	f7ff fec2 	bl	8001ba4 <HAL_TIM_Base_MspInit>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:304
  htim->State = HAL_TIM_STATE_BUSY;
 8001e20:	2302      	movs	r3, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:307
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e22:	6820      	ldr	r0, [r4, #0]
 8001e24:	1d21      	adds	r1, r4, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:304
  htim->State = HAL_TIM_STATE_BUSY;
 8001e26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:307
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e2a:	f7ff ff87 	bl	8001d3c <TIM_Base_SetConfig>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:310
  htim->State = HAL_TIM_STATE_READY;
 8001e2e:	2301      	movs	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:312
  return HAL_OK;
 8001e30:	2000      	movs	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:310
  htim->State = HAL_TIM_STATE_READY;
 8001e32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:313
}
 8001e36:	bd10      	pop	{r4, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c:273
    return HAL_ERROR;
 8001e38:	2001      	movs	r0, #1
 8001e3a:	e7fc      	b.n	8001e36 <HAL_TIM_Base_Init+0x2e>

08001e3c <HAL_RCCEx_GetD1SysClockFreq>:
HAL_RCCEx_GetD1SysClockFreq():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc_ex.c:2190
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8001e3c:	b508      	push	{r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc_ex.c:2191
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001e3e:	f7ff fb17 	bl	8001470 <HAL_RCC_GetSysClockFreq>
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_RCCEx_GetD1SysClockFreq+0x20>)
 8001e44:	4a06      	ldr	r2, [pc, #24]	; (8001e60 <HAL_RCCEx_GetD1SysClockFreq+0x24>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001e4c:	5cd3      	ldrb	r3, [r2, r3]
 8001e4e:	f003 031f 	and.w	r3, r3, #31
 8001e52:	40d8      	lsrs	r0, r3
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <HAL_RCCEx_GetD1SysClockFreq+0x28>)
 8001e56:	6018      	str	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc_ex.c:2193
  return SystemCoreClock;
}
 8001e58:	bd08      	pop	{r3, pc}
 8001e5a:	bf00      	nop
 8001e5c:	58024400 	.word	0x58024400
 8001e60:	080210e6 	.word	0x080210e6
 8001e64:	20000020 	.word	0x20000020

08001e68 <ETH_SetMACConfig>:
ETH_SetMACConfig():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2396
static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001e68:	688b      	ldr	r3, [r1, #8]
 8001e6a:	680a      	ldr	r2, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2399
              macconf->SourceAddrControl |
                ((uint32_t)macconf->ChecksumOffload<< 27) |
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001e6c:	f891 c00c 	ldrb.w	ip, [r1, #12]
 8001e70:	431a      	orrs	r2, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2403
                    ((uint32_t)macconf->Support2KPacket  << 22) |
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001e72:	7c0b      	ldrb	r3, [r1, #16]
 8001e74:	2b00      	cmp	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2392
{
 8001e76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2403
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001e7a:	bf08      	it	eq
 8001e7c:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2392
{
 8001e80:	b085      	sub	sp, #20
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2403
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001e82:	bf18      	it	ne
 8001e84:	2300      	movne	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2398
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001e86:	f891 e004 	ldrb.w	lr, [r1, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2400
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001e8a:	7b4f      	ldrb	r7, [r1, #13]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2403
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001e8c:	9300      	str	r3, [sp, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2404
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001e8e:	7c4b      	ldrb	r3, [r1, #17]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2401
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001e90:	7b8e      	ldrb	r6, [r1, #14]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2404
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001e92:	2b00      	cmp	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2402
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001e94:	7bcd      	ldrb	r5, [r1, #15]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2405
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001e96:	7c8c      	ldrb	r4, [r1, #18]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2404
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001e98:	bf0c      	ite	eq
 8001e9a:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 8001e9e:	2300      	movne	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2408
                                macconf->Speed |
                                  macconf->DuplexMode |
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001ea0:	f891 901c 	ldrb.w	r9, [r1, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2404
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001ea4:	9301      	str	r3, [sp, #4]
 8001ea6:	694b      	ldr	r3, [r1, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2409
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001ea8:	f891 b01d 	ldrb.w	fp, [r1, #29]
 8001eac:	431a      	orrs	r2, r3
 8001eae:	698b      	ldr	r3, [r1, #24]
 8001eb0:	4313      	orrs	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2410
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001eb2:	7f8a      	ldrb	r2, [r1, #30]
 8001eb4:	2a00      	cmp	r2, #0
 8001eb6:	bf0c      	ite	eq
 8001eb8:	f44f 6280 	moveq.w	r2, #1024	; 0x400
 8001ebc:	2200      	movne	r2, #0
 8001ebe:	9202      	str	r2, [sp, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2411
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001ec0:	7fca      	ldrb	r2, [r1, #31]
 8001ec2:	9203      	str	r2, [sp, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2412
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001ec4:	f891 2020 	ldrb.w	r2, [r1, #32]
 8001ec8:	2a00      	cmp	r2, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2418
                                              macconf->BackOffLimit |
                                                ((uint32_t)macconf->DeferralCheck << 4)|
                                                  macconf->PreambleLength);

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001eca:	6802      	ldr	r2, [r0, #0]
 8001ecc:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001ece:	f8d2 a000 	ldr.w	sl, [r2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2412
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001ed2:	bf08      	it	eq
 8001ed4:	f44f 7880 	moveq.w	r8, #256	; 0x100
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2418
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001ed8:	ea43 0300 	orr.w	r3, r3, r0
 8001edc:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8001ede:	f02a 4a7f 	bic.w	sl, sl, #4278190080	; 0xff000000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2412
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001ee2:	bf18      	it	ne
 8001ee4:	f04f 0800 	movne.w	r8, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2418
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001ee8:	4303      	orrs	r3, r0
 8001eea:	9803      	ldr	r0, [sp, #12]
 8001eec:	f42a 0a7b 	bic.w	sl, sl, #16449536	; 0xfb0000
 8001ef0:	f42a 4afe 	bic.w	sl, sl, #32512	; 0x7f00
 8001ef4:	f02a 0a7c 	bic.w	sl, sl, #124	; 0x7c
 8001ef8:	ea43 030a 	orr.w	r3, r3, sl
 8001efc:	ea43 63ce 	orr.w	r3, r3, lr, lsl #27
 8001f00:	ea43 53cc 	orr.w	r3, r3, ip, lsl #23
 8001f04:	ea43 5387 	orr.w	r3, r3, r7, lsl #22
 8001f08:	ea43 5346 	orr.w	r3, r3, r6, lsl #21
 8001f0c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8001f10:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001f14:	ea43 3309 	orr.w	r3, r3, r9, lsl #12
 8001f18:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2414
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001f1c:	f891 b028 	ldrb.w	fp, [r1, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2418
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001f20:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 8001f24:	9800      	ldr	r0, [sp, #0]
 8001f26:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
 8001f2a:	4303      	orrs	r3, r0
 8001f2c:	9801      	ldr	r0, [sp, #4]
 8001f2e:	4303      	orrs	r3, r0
 8001f30:	9802      	ldr	r0, [sp, #8]
 8001f32:	4303      	orrs	r3, r0
 8001f34:	ea43 0308 	orr.w	r3, r3, r8
 8001f38:	6013      	str	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2421

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001f3a:	6bce      	ldr	r6, [r1, #60]	; 0x3c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2425
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001f3c:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2422
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001f40:	f891 7038 	ldrb.w	r7, [r1, #56]	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2425
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001f44:	2b00      	cmp	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2429
                       macconf->GiantPacketSizeLimit);

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001f46:	6853      	ldr	r3, [r2, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2423
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001f48:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2429
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001f4c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2424
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001f50:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2425
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001f54:	bf0c      	ite	eq
 8001f56:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8001f5a:	2000      	movne	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2429
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001f5c:	f423 23ef 	bic.w	r3, r3, #489472	; 0x77800
 8001f60:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f64:	f023 0307 	bic.w	r3, r3, #7
 8001f68:	ea43 6346 	orr.w	r3, r3, r6, lsl #25
 8001f6c:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8001f6e:	4333      	orrs	r3, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2442

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
               macconf->PauseLowThreshold |
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
                   (macconf->PauseTime << 16));
 8001f70:	6c8e      	ldr	r6, [r1, #72]	; 0x48
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2429
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001f72:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8001f76:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2440
               macconf->PauseLowThreshold |
 8001f7a:	6d0d      	ldr	r5, [r1, #80]	; 0x50
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2429
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001f7c:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2439
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001f80:	f891 4054 	ldrb.w	r4, [r1, #84]	; 0x54
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2429
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001f84:	4303      	orrs	r3, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2436
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001f86:	6c48      	ldr	r0, [r1, #68]	; 0x44
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2429
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001f88:	6053      	str	r3, [r2, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2436
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001f8a:	68d3      	ldr	r3, [r2, #12]
 8001f8c:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8001f90:	f023 0301 	bic.w	r3, r3, #1
 8001f94:	4303      	orrs	r3, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2432
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001f96:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2436
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001f9a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001f9e:	60d3      	str	r3, [r2, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2441
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001fa0:	f891 304c 	ldrb.w	r3, [r1, #76]	; 0x4c
 8001fa4:	2b00      	cmp	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2445

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001fa6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001fa8:	f023 03f2 	bic.w	r3, r3, #242	; 0xf2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2441
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001fac:	bf0c      	ite	eq
 8001fae:	2080      	moveq	r0, #128	; 0x80
 8001fb0:	2000      	movne	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2445
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001fb2:	041b      	lsls	r3, r3, #16
 8001fb4:	0c1b      	lsrs	r3, r3, #16
 8001fb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001fba:	432b      	orrs	r3, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2459
  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001fbc:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2445
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001fbe:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2461
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001fc2:	f891 4061 	ldrb.w	r4, [r1, #97]	; 0x61
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2445
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001fc6:	4303      	orrs	r3, r0
 8001fc8:	6713      	str	r3, [r2, #112]	; 0x70
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2452
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001fca:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2448
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001fce:	f891 3056 	ldrb.w	r3, [r1, #86]	; 0x56
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2452
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001fd2:	f020 0003 	bic.w	r0, r0, #3
 8001fd6:	4303      	orrs	r3, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2449
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001fd8:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2452
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001fdc:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2456
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001fe0:	6d88      	ldr	r0, [r1, #88]	; 0x58
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2452
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001fe2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2456
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001fe6:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	; 0xd00
 8001fea:	f023 0372 	bic.w	r3, r3, #114	; 0x72
 8001fee:	4303      	orrs	r3, r0
 8001ff0:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2460
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001ff4:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2462
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001ff8:	f891 1062 	ldrb.w	r1, [r1, #98]	; 0x62
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2460
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001ffc:	2b00      	cmp	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2465

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001ffe:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	; 0xd30
 8002002:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2460
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002006:	bf0c      	ite	eq
 8002008:	2040      	moveq	r0, #64	; 0x40
 800200a:	2000      	movne	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2465
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800200c:	432b      	orrs	r3, r5
 800200e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8002012:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002016:	4303      	orrs	r3, r0
 8002018:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2466
}
 800201c:	b005      	add	sp, #20
 800201e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002024 <ETH_SetDMAConfig>:
ETH_SetDMAConfig():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2473
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002024:	6802      	ldr	r2, [r0, #0]
 8002026:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
 800202a:	6803      	ldr	r3, [r0, #0]
 800202c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2469
{
 8002030:	b530      	push	{r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2473
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002032:	f023 0302 	bic.w	r3, r3, #2
 8002036:	680c      	ldr	r4, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2476

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002038:	790d      	ldrb	r5, [r1, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2473
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800203a:	4323      	orrs	r3, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2480
               dmaconf->BurstMode |
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800203c:	f241 0404 	movw	r4, #4100	; 0x1004
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2473
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002040:	6003      	str	r3, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2478
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002042:	7b0b      	ldrb	r3, [r1, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2480
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002044:	5910      	ldr	r0, [r2, r4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2478
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002046:	03db      	lsls	r3, r3, #15
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2480
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002048:	f420 4050 	bic.w	r0, r0, #53248	; 0xd000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2476
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800204c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 8002050:	688d      	ldr	r5, [r1, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2480
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002052:	f020 0001 	bic.w	r0, r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2476
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002056:	432b      	orrs	r3, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2480
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002058:	4303      	orrs	r3, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2483

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800205a:	7b48      	ldrb	r0, [r1, #13]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2480
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800205c:	5113      	str	r3, [r2, r4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2486
               dmaconf->MaximumSegmentSize);

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800205e:	f502 5488 	add.w	r4, r2, #4352	; 0x1100
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2483
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002062:	6a0b      	ldr	r3, [r1, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2486
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002064:	6825      	ldr	r5, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2483
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002066:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2486
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800206a:	4810      	ldr	r0, [pc, #64]	; (80020ac <ETH_SetDMAConfig+0x88>)
 800206c:	4028      	ands	r0, r5
 800206e:	4303      	orrs	r3, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2490

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002070:	7d08      	ldrb	r0, [r1, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2486
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002072:	6023      	str	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2493
                 ((uint32_t)dmaconf->TCPSegmentation << 12));

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002074:	f241 1404 	movw	r4, #4356	; 0x1104
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2491
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002078:	7f4b      	ldrb	r3, [r1, #29]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2493
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800207a:	5915      	ldr	r5, [r2, r4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2491
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800207c:	031b      	lsls	r3, r3, #12
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2489
  dmaregval = (dmaconf->TxDMABurstLength |
 800207e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8002082:	6908      	ldr	r0, [r1, #16]
 8002084:	4303      	orrs	r3, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2493
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002086:	480a      	ldr	r0, [pc, #40]	; (80020b0 <ETH_SetDMAConfig+0x8c>)
 8002088:	4028      	ands	r0, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2496

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800208a:	7f0d      	ldrb	r5, [r1, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2493
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800208c:	4303      	orrs	r3, r0
 800208e:	5113      	str	r3, [r2, r4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2500
               dmaconf->RxDMABurstLength);

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002090:	f241 1408 	movw	r4, #4360	; 0x1108
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2496
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002094:	698b      	ldr	r3, [r1, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2500
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002096:	5910      	ldr	r0, [r2, r4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2496
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002098:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2500
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800209c:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 80020a0:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 80020a4:	430b      	orrs	r3, r1
 80020a6:	5113      	str	r3, [r2, r4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2501
}
 80020a8:	bd30      	pop	{r4, r5, pc}
 80020aa:	bf00      	nop
 80020ac:	fffec000 	.word	0xfffec000
 80020b0:	ffc0efef 	.word	0xffc0efef

080020b4 <ETH_Prepare_Tx_Descriptors>:
ETH_Prepare_Tx_Descriptors():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2717
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80020b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2719
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80020b8:	6a86      	ldr	r6, [r0, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2717
{
 80020ba:	9201      	str	r2, [sp, #4]
 80020bc:	eb00 0986 	add.w	r9, r0, r6, lsl #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2724
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t descnbr = 0, idx;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80020c0:	688f      	ldr	r7, [r1, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2722
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80020c2:	f8d9 3018 	ldr.w	r3, [r9, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2727

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	2a00      	cmp	r2, #0
 80020ca:	da03      	bge.n	80020d4 <ETH_Prepare_Tx_Descriptors+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2792
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);

      return HAL_ETH_ERROR_BUSY;
 80020cc:	2002      	movs	r0, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2967

  dmatxdesclist->CurTxDesc = descidx;

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
}
 80020ce:	b003      	add	sp, #12
 80020d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2736
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80020d4:	680c      	ldr	r4, [r1, #0]
 80020d6:	f014 0c04 	ands.w	ip, r4, #4
 80020da:	d02a      	beq.n	8002132 <ETH_Prepare_Tx_Descriptors+0x7e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2739
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80020dc:	68dd      	ldr	r5, [r3, #12]
 80020de:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80020e0:	0c2d      	lsrs	r5, r5, #16
 80020e2:	042d      	lsls	r5, r5, #16
 80020e4:	432a      	orrs	r2, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2743
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80020e6:	6805      	ldr	r5, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2739
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80020e8:	60da      	str	r2, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2741
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020f0:	60da      	str	r2, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2743
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80020f2:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80020f4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80020f8:	662a      	str	r2, [r5, #96]	; 0x60
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2746
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 80020fa:	0722      	lsls	r2, r4, #28
 80020fc:	d519      	bpl.n	8002132 <ETH_Prepare_Tx_Descriptors+0x7e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2749
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	fa1f fe82 	uxth.w	lr, r2
 8002104:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002106:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 800210a:	609a      	str	r2, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2751
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002112:	60da      	str	r2, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2754
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	f422 2e40 	bic.w	lr, r2, #786432	; 0xc0000
 800211a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800211c:	ea4e 0202 	orr.w	r2, lr, r2
 8002120:	60da      	str	r2, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2757
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002122:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8002124:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002128:	666a      	str	r2, [r5, #100]	; 0x64
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2759
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800212a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800212c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002130:	652a      	str	r2, [r5, #80]	; 0x50
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2764
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002132:	f014 0810 	ands.w	r8, r4, #16
 8002136:	d00b      	beq.n	8002150 <ETH_Prepare_Tx_Descriptors+0x9c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2767
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002138:	689d      	ldr	r5, [r3, #8]
 800213a:	698a      	ldr	r2, [r1, #24]
 800213c:	f425 557f 	bic.w	r5, r5, #16320	; 0x3fc0
 8002140:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002144:	432a      	orrs	r2, r5
 8002146:	609a      	str	r2, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2769
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800214e:	60da      	str	r2, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2772
  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8002150:	f014 0e14 	ands.w	lr, r4, #20
 8002154:	d018      	beq.n	8002188 <ETH_Prepare_Tx_Descriptors+0xd4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2775
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002156:	68da      	ldr	r2, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2779
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002158:	1c75      	adds	r5, r6, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2775
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 800215a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2779
    INCR_TX_DESC_INDEX(descidx, 1U);
 800215e:	2d03      	cmp	r5, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2775
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002160:	60da      	str	r2, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2779
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002162:	bf88      	it	hi
 8002164:	1ef5      	subhi	r5, r6, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2777
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800216c:	60da      	str	r2, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2781
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800216e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002172:	6992      	ldr	r2, [r2, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2786
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002174:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8002178:	f1be 0f00 	cmp.w	lr, #0
 800217c:	da6e      	bge.n	800225c <ETH_Prepare_Tx_Descriptors+0x1a8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2790
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	e7a1      	b.n	80020cc <ETH_Prepare_Tx_Descriptors+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2719
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002188:	4635      	mov	r5, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2803
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800218a:	683a      	ldr	r2, [r7, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2800
  descnbr += 1U;
 800218c:	f10e 0e01 	add.w	lr, lr, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2803
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002190:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2805
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	f422 5a7f 	bic.w	sl, r2, #16320	; 0x3fc0
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	f02a 0a3f 	bic.w	sl, sl, #63	; 0x3f
 800219e:	ea4a 0202 	orr.w	r2, sl, r2
 80021a2:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8002390 <ETH_Prepare_Tx_Descriptors+0x2dc>
 80021a6:	609a      	str	r2, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2807
  if(txbuffer->next != NULL)
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	2a00      	cmp	r2, #0
 80021ac:	d05a      	beq.n	8002264 <ETH_Prepare_Tx_Descriptors+0x1b0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2811
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80021ae:	6817      	ldr	r7, [r2, #0]
 80021b0:	605f      	str	r7, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2813
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80021b2:	689f      	ldr	r7, [r3, #8]
 80021b4:	ea07 0a0a 	and.w	sl, r7, sl
 80021b8:	6857      	ldr	r7, [r2, #4]
 80021ba:	ea4a 4707 	orr.w	r7, sl, r7, lsl #16
 80021be:	609f      	str	r7, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2825
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80021c0:	68df      	ldr	r7, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2822
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80021c2:	f1b8 0f00 	cmp.w	r8, #0
 80021c6:	d054      	beq.n	8002272 <ETH_Prepare_Tx_Descriptors+0x1be>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2825
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80021c8:	f427 08f0 	bic.w	r8, r7, #7864320	; 0x780000
 80021cc:	6a0f      	ldr	r7, [r1, #32]
 80021ce:	ea48 47c7 	orr.w	r7, r8, r7, lsl #19
 80021d2:	60df      	str	r7, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2827
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80021d4:	68df      	ldr	r7, [r3, #12]
 80021d6:	ea4f 4897 	mov.w	r8, r7, lsr #18
 80021da:	69cf      	ldr	r7, [r1, #28]
 80021dc:	ea4f 4888 	mov.w	r8, r8, lsl #18
 80021e0:	ea48 0707 	orr.w	r7, r8, r7
 80021e4:	60df      	str	r7, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2829
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80021e6:	68df      	ldr	r7, [r3, #12]
 80021e8:	f447 2780 	orr.w	r7, r7, #262144	; 0x40000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2842
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80021ec:	60df      	str	r7, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2846
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80021ee:	f1bc 0f00 	cmp.w	ip, #0
 80021f2:	d006      	beq.n	8002202 <ETH_Prepare_Tx_Descriptors+0x14e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2849
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80021f4:	689f      	ldr	r7, [r3, #8]
 80021f6:	f427 4c40 	bic.w	ip, r7, #49152	; 0xc000
 80021fa:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 80021fc:	ea4c 0707 	orr.w	r7, ip, r7
 8002200:	609f      	str	r7, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2853
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002202:	68df      	ldr	r7, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2860
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8002204:	07a4      	lsls	r4, r4, #30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2853
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002206:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 800220a:	60df      	str	r7, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2855
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800220c:	68df      	ldr	r7, [r3, #12]
 800220e:	f027 4780 	bic.w	r7, r7, #1073741824	; 0x40000000
 8002212:	60df      	str	r7, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2857
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002214:	68df      	ldr	r7, [r3, #12]
 8002216:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 800221a:	60df      	str	r7, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2860
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 800221c:	d505      	bpl.n	800222a <ETH_Prepare_Tx_Descriptors+0x176>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2862
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800221e:	68df      	ldr	r7, [r3, #12]
 8002220:	68cc      	ldr	r4, [r1, #12]
 8002222:	f027 7760 	bic.w	r7, r7, #58720256	; 0x3800000
 8002226:	433c      	orrs	r4, r7
 8002228:	60dc      	str	r4, [r3, #12]
 800222a:	4f59      	ldr	r7, [pc, #356]	; (8002390 <ETH_Prepare_Tx_Descriptors+0x2dc>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2934
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800222c:	f8df b164 	ldr.w	fp, [pc, #356]	; 8002394 <ETH_Prepare_Tx_Descriptors+0x2e0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2927
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002230:	f8df c164 	ldr.w	ip, [pc, #356]	; 8002398 <ETH_Prepare_Tx_Descriptors+0x2e4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2866
  while (txbuffer->next != NULL)
 8002234:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8002238:	f1b8 0f00 	cmp.w	r8, #0
 800223c:	d133      	bne.n	80022a6 <ETH_Prepare_Tx_Descriptors+0x1f2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2949
  if(ItMode != ((uint32_t)RESET))
 800223e:	9a01      	ldr	r2, [sp, #4]
 8002240:	2a00      	cmp	r2, #0
 8002242:	f000 80a0 	beq.w	8002386 <ETH_Prepare_Tx_Descriptors+0x2d2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2952
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2957
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800224c:	609a      	str	r2, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2961
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002254:	60da      	str	r2, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2963
  dmatxdesclist->CurTxDesc = descidx;
 8002256:	6285      	str	r5, [r0, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2966
  return HAL_ETH_ERROR_NONE;
 8002258:	2000      	movs	r0, #0
 800225a:	e738      	b.n	80020ce <ETH_Prepare_Tx_Descriptors+0x1a>
 800225c:	4613      	mov	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2783
    descnbr += 1U;
 800225e:	f04f 0e01 	mov.w	lr, #1
 8002262:	e792      	b.n	800218a <ETH_Prepare_Tx_Descriptors+0xd6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2817
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002264:	605a      	str	r2, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2819
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	ea02 020a 	and.w	r2, r2, sl
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	463a      	mov	r2, r7
 8002270:	e7a6      	b.n	80021c0 <ETH_Prepare_Tx_Descriptors+0x10c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2833
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002272:	f427 48ff 	bic.w	r8, r7, #32640	; 0x7f80
 8002276:	684f      	ldr	r7, [r1, #4]
 8002278:	f028 087f 	bic.w	r8, r8, #127	; 0x7f
 800227c:	ea48 0707 	orr.w	r7, r8, r7
 8002280:	60df      	str	r7, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2835
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002282:	07e7      	lsls	r7, r4, #31
 8002284:	d506      	bpl.n	8002294 <ETH_Prepare_Tx_Descriptors+0x1e0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2837
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002286:	68df      	ldr	r7, [r3, #12]
 8002288:	f427 3840 	bic.w	r8, r7, #196608	; 0x30000
 800228c:	694f      	ldr	r7, [r1, #20]
 800228e:	ea48 0707 	orr.w	r7, r8, r7
 8002292:	60df      	str	r7, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2840
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002294:	06a7      	lsls	r7, r4, #26
 8002296:	d5aa      	bpl.n	80021ee <ETH_Prepare_Tx_Descriptors+0x13a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2842
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002298:	68df      	ldr	r7, [r3, #12]
 800229a:	f027 6840 	bic.w	r8, r7, #201326592	; 0xc000000
 800229e:	690f      	ldr	r7, [r1, #16]
 80022a0:	ea48 0707 	orr.w	r7, r8, r7
 80022a4:	e7a2      	b.n	80021ec <ETH_Prepare_Tx_Descriptors+0x138>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2871
    INCR_TX_DESC_INDEX(descidx, 1U);
 80022a6:	1c6c      	adds	r4, r5, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2869
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80022a8:	68da      	ldr	r2, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2871
    INCR_TX_DESC_INDEX(descidx, 1U);
 80022aa:	2c03      	cmp	r4, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2869
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80022ac:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2871
    INCR_TX_DESC_INDEX(descidx, 1U);
 80022b0:	bf88      	it	hi
 80022b2:	1eec      	subhi	r4, r5, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2869
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80022b4:	60da      	str	r2, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2873
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022b6:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 80022ba:	699b      	ldr	r3, [r3, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2876
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80022c2:	60da      	str	r2, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2879
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	2a00      	cmp	r2, #0
 80022c8:	da13      	bge.n	80022f2 <ETH_Prepare_Tx_Descriptors+0x23e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2882
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022ca:	f8d9 1018 	ldr.w	r1, [r9, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2885
      for(idx = 0; idx < descnbr; idx ++)
 80022ce:	2200      	movs	r2, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2885 (discriminator 1)
 80022d0:	4596      	cmp	lr, r2
 80022d2:	f43f aefb 	beq.w	80020cc <ETH_Prepare_Tx_Descriptors+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2887
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80022d6:	68cb      	ldr	r3, [r1, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2885
      for(idx = 0; idx < descnbr; idx ++)
 80022d8:	3201      	adds	r2, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2887
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80022da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022de:	60cb      	str	r3, [r1, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2890
        INCR_TX_DESC_INDEX(descidx, 1U);
 80022e0:	1c73      	adds	r3, r6, #1
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	bf88      	it	hi
 80022e6:	1ef3      	subhi	r3, r6, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2892
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022e8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2885
      for(idx = 0; idx < descnbr; idx ++)
 80022ec:	461e      	mov	r6, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2892
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022ee:	6989      	ldr	r1, [r1, #24]
 80022f0:	e7ee      	b.n	80022d0 <ETH_Prepare_Tx_Descriptors+0x21c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2904
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80022f2:	f8d8 2000 	ldr.w	r2, [r8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2898
    descnbr += 1U;
 80022f6:	f10e 0e01 	add.w	lr, lr, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2904
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80022fa:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2906
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80022fc:	689d      	ldr	r5, [r3, #8]
 80022fe:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8002302:	f425 557f 	bic.w	r5, r5, #16320	; 0x3fc0
 8002306:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800230a:	432a      	orrs	r2, r5
 800230c:	609a      	str	r2, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2908
    if (txbuffer->next != NULL)
 800230e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8002312:	b312      	cbz	r2, 800235a <ETH_Prepare_Tx_Descriptors+0x2a6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2913
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002314:	6815      	ldr	r5, [r2, #0]
 8002316:	605d      	str	r5, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2915
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002318:	689d      	ldr	r5, [r3, #8]
 800231a:	ea05 0807 	and.w	r8, r5, r7
 800231e:	6855      	ldr	r5, [r2, #4]
 8002320:	ea48 4505 	orr.w	r5, r8, r5, lsl #16
 8002324:	609d      	str	r5, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2924
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002326:	f8d1 a000 	ldr.w	sl, [r1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2927
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800232a:	68dd      	ldr	r5, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2924
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800232c:	f01a 0f10 	tst.w	sl, #16
 8002330:	d019      	beq.n	8002366 <ETH_Prepare_Tx_Descriptors+0x2b2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2927
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002332:	ea05 080c 	and.w	r8, r5, ip
 8002336:	69cd      	ldr	r5, [r1, #28]
 8002338:	ea48 0505 	orr.w	r5, r8, r5
 800233c:	60dd      	str	r5, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2929
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800233e:	68dd      	ldr	r5, [r3, #12]
 8002340:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2939
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002344:	60dd      	str	r5, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2944
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002346:	68dd      	ldr	r5, [r3, #12]
 8002348:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800234c:	60dd      	str	r5, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2946
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800234e:	68dd      	ldr	r5, [r3, #12]
 8002350:	f025 4580 	bic.w	r5, r5, #1073741824	; 0x40000000
 8002354:	60dd      	str	r5, [r3, #12]
 8002356:	4625      	mov	r5, r4
 8002358:	e76c      	b.n	8002234 <ETH_Prepare_Tx_Descriptors+0x180>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2919
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 800235a:	605a      	str	r2, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2921
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	403a      	ands	r2, r7
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	4642      	mov	r2, r8
 8002364:	e7df      	b.n	8002326 <ETH_Prepare_Tx_Descriptors+0x272>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2934
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002366:	ea05 080b 	and.w	r8, r5, fp
 800236a:	684d      	ldr	r5, [r1, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2936
      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800236c:	f01a 0f01 	tst.w	sl, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2934
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002370:	ea48 0505 	orr.w	r5, r8, r5
 8002374:	60dd      	str	r5, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2936
      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002376:	d0e6      	beq.n	8002346 <ETH_Prepare_Tx_Descriptors+0x292>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2939
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002378:	68dd      	ldr	r5, [r3, #12]
 800237a:	f425 3840 	bic.w	r8, r5, #196608	; 0x30000
 800237e:	694d      	ldr	r5, [r1, #20]
 8002380:	ea48 0505 	orr.w	r5, r8, r5
 8002384:	e7de      	b.n	8002344 <ETH_Prepare_Tx_Descriptors+0x290>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2957
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800238c:	e75e      	b.n	800224c <ETH_Prepare_Tx_Descriptors+0x198>
 800238e:	bf00      	nop
 8002390:	c000ffff 	.word	0xc000ffff
 8002394:	ffff8000 	.word	0xffff8000
 8002398:	fffc0000 	.word	0xfffc0000

0800239c <HAL_ETH_DescAssignMemory>:
HAL_ETH_DescAssignMemory():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:694
  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 800239c:	b10a      	cbz	r2, 80023a2 <HAL_ETH_DescAssignMemory+0x6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:694 (discriminator 1)
 800239e:	2903      	cmp	r1, #3
 80023a0:	d903      	bls.n	80023aa <HAL_ETH_DescAssignMemory+0xe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:697
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80023a2:	2301      	movs	r3, #1
 80023a4:	65c3      	str	r3, [r0, #92]	; 0x5c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:699
    return HAL_ERROR;
 80023a6:	4618      	mov	r0, r3
 80023a8:	4770      	bx	lr
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:692
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 80023aa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80023ae:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:703
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 80023b0:	600a      	str	r2, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:705
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 80023b2:	610a      	str	r2, [r1, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:707
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80023b4:	68ca      	ldr	r2, [r1, #12]
 80023b6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80023ba:	60ca      	str	r2, [r1, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:709
  if(pBuffer2 != NULL)
 80023bc:	b12b      	cbz	r3, 80023ca <HAL_ETH_DescAssignMemory+0x2e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:712
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 80023be:	608b      	str	r3, [r1, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:714
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 80023c0:	614b      	str	r3, [r1, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:716
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80023c2:	68cb      	ldr	r3, [r1, #12]
 80023c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023c8:	60cb      	str	r3, [r1, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:719
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80023ca:	68cb      	ldr	r3, [r1, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:721
  return HAL_OK;
 80023cc:	2000      	movs	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:719
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80023ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023d2:	60cb      	str	r3, [r1, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:722
}
 80023d4:	4770      	bx	lr

080023d6 <HAL_ETH_Start_IT>:
HAL_ETH_Start_IT():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:795
  if(heth->gState == HAL_ETH_STATE_READY)
 80023d6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80023d8:	2b10      	cmp	r3, #16
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:791
{
 80023da:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:795
  if(heth->gState == HAL_ETH_STATE_READY)
 80023dc:	d143      	bne.n	8002466 <HAL_ETH_Start_IT+0x90>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:797
    heth->gState = HAL_ETH_STATE_BUSY;
 80023de:	2323      	movs	r3, #35	; 0x23
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:793
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80023e0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:797
    heth->gState = HAL_ETH_STATE_BUSY;
 80023e2:	2204      	movs	r2, #4
 80023e4:	6543      	str	r3, [r0, #84]	; 0x54
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:792
  uint32_t descindex = 0, counter;
 80023e6:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:802
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80023e8:	68cc      	ldr	r4, [r1, #12]
 80023ea:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
 80023ee:	60cc      	str	r4, [r1, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:803
      INCR_RX_DESC_INDEX(descindex, 1U);
 80023f0:	1c59      	adds	r1, r3, #1
 80023f2:	2903      	cmp	r1, #3
 80023f4:	bf8c      	ite	hi
 80023f6:	3b03      	subhi	r3, #3
 80023f8:	460b      	movls	r3, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:800
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 80023fa:	3a01      	subs	r2, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:804
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80023fc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8002400:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:800
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 8002402:	d1f1      	bne.n	80023e8 <HAL_ETH_Start_IT+0x12>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:808
    heth->RxDescList.ItMode = 1U;
 8002404:	2301      	movs	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:820
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002406:	f241 1404 	movw	r4, #4356	; 0x1104
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:808
    heth->RxDescList.ItMode = 1U;
 800240a:	64c3      	str	r3, [r0, #76]	; 0x4c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:811
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800240c:	6803      	ldr	r3, [r0, #0]
 800240e:	6819      	ldr	r1, [r3, #0]
 8002410:	f041 0102 	orr.w	r1, r1, #2
 8002414:	6019      	str	r1, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:814
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002416:	6819      	ldr	r1, [r3, #0]
 8002418:	f041 0101 	orr.w	r1, r1, #1
 800241c:	6019      	str	r1, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:817
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800241e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8002422:	f041 0101 	orr.w	r1, r1, #1
 8002426:	f8c3 1d00 	str.w	r1, [r3, #3328]	; 0xd00
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:820
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800242a:	5919      	ldr	r1, [r3, r4]
 800242c:	f041 0101 	orr.w	r1, r1, #1
 8002430:	5119      	str	r1, [r3, r4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:823
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002432:	f241 1408 	movw	r4, #4360	; 0x1108
 8002436:	5919      	ldr	r1, [r3, r4]
 8002438:	f041 0101 	orr.w	r1, r1, #1
 800243c:	5119      	str	r1, [r3, r4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:826
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800243e:	f503 548b 	add.w	r4, r3, #4448	; 0x1160
 8002442:	6821      	ldr	r1, [r4, #0]
 8002444:	f441 7181 	orr.w	r1, r1, #258	; 0x102
 8002448:	6021      	str	r1, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:828
    heth->gState = HAL_ETH_STATE_READY;
 800244a:	2110      	movs	r1, #16
 800244c:	6541      	str	r1, [r0, #84]	; 0x54
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:829
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 800244e:	2122      	movs	r1, #34	; 0x22
 8002450:	6581      	str	r1, [r0, #88]	; 0x58
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:836
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002452:	f241 1034 	movw	r0, #4404	; 0x1134
 8002456:	5819      	ldr	r1, [r3, r0]
 8002458:	f441 4150 	orr.w	r1, r1, #53248	; 0xd000
 800245c:	f041 0141 	orr.w	r1, r1, #65	; 0x41
 8002460:	5019      	str	r1, [r3, r0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:839
    return HAL_OK;
 8002462:	4610      	mov	r0, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:845
}
 8002464:	bd10      	pop	{r4, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:843
    return HAL_ERROR;
 8002466:	2001      	movs	r0, #1
 8002468:	e7fc      	b.n	8002464 <HAL_ETH_Start_IT+0x8e>

0800246a <HAL_ETH_Stop_IT>:
HAL_ETH_Stop_IT():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:898
  if(heth->gState != HAL_ETH_STATE_RESET)
 800246a:	6d43      	ldr	r3, [r0, #84]	; 0x54
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:894
{
 800246c:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:898
  if(heth->gState != HAL_ETH_STATE_RESET)
 800246e:	2b00      	cmp	r3, #0
 8002470:	d032      	beq.n	80024d8 <HAL_ETH_Stop_IT+0x6e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:901
    heth->gState = HAL_ETH_STATE_BUSY;
 8002472:	2323      	movs	r3, #35	; 0x23
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:906
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMA_NORMAL_IT | ETH_DMA_RX_IT | ETH_DMA_TX_IT));
 8002474:	f241 1434 	movw	r4, #4404	; 0x1134
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:895
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[0];
 8002478:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:901
    heth->gState = HAL_ETH_STATE_BUSY;
 800247a:	6543      	str	r3, [r0, #84]	; 0x54
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:906
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMA_NORMAL_IT | ETH_DMA_RX_IT | ETH_DMA_TX_IT));
 800247c:	6803      	ldr	r3, [r0, #0]
 800247e:	591a      	ldr	r2, [r3, r4]
 8002480:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002484:	f022 0241 	bic.w	r2, r2, #65	; 0x41
 8002488:	511a      	str	r2, [r3, r4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:909
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800248a:	f241 1404 	movw	r4, #4356	; 0x1104
 800248e:	591a      	ldr	r2, [r3, r4]
 8002490:	f022 0201 	bic.w	r2, r2, #1
 8002494:	511a      	str	r2, [r3, r4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:912
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002496:	f241 1408 	movw	r4, #4360	; 0x1108
 800249a:	591a      	ldr	r2, [r3, r4]
 800249c:	f022 0201 	bic.w	r2, r2, #1
 80024a0:	511a      	str	r2, [r3, r4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:915
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	f022 0201 	bic.w	r2, r2, #1
 80024a8:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:918
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80024aa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:921
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	f022 0202 	bic.w	r2, r2, #2
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	2304      	movs	r3, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:926 (discriminator 3)
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80024c0:	68ca      	ldr	r2, [r1, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:924 (discriminator 3)
    for(index = 0; index < (uint32_t)ETH_RX_DESC_CNT; index++)
 80024c2:	3b01      	subs	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:926 (discriminator 3)
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80024c4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80024c8:	60ca      	str	r2, [r1, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:924 (discriminator 3)
    for(index = 0; index < (uint32_t)ETH_RX_DESC_CNT; index++)
 80024ca:	d1f9      	bne.n	80024c0 <HAL_ETH_Stop_IT+0x56>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:931
    heth->gState = HAL_ETH_STATE_READY;
 80024cc:	2210      	movs	r2, #16
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:929
    heth->RxDescList.ItMode = 0U;
 80024ce:	64c3      	str	r3, [r0, #76]	; 0x4c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:931
    heth->gState = HAL_ETH_STATE_READY;
 80024d0:	6542      	str	r2, [r0, #84]	; 0x54
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:932
    heth->RxState = HAL_ETH_STATE_READY;
 80024d2:	6582      	str	r2, [r0, #88]	; 0x58
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:935
    return HAL_OK;
 80024d4:	4618      	mov	r0, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:941
}
 80024d6:	bd10      	pop	{r4, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:939
    return HAL_ERROR;
 80024d8:	2001      	movs	r0, #1
 80024da:	e7fc      	b.n	80024d6 <HAL_ETH_Stop_IT+0x6c>

080024dc <HAL_ETH_Transmit>:
HAL_ETH_Transmit():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:952
{
 80024dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024de:	4604      	mov	r4, r0
 80024e0:	4615      	mov	r5, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:956
  if(pTxConfig == NULL)
 80024e2:	b929      	cbnz	r1, 80024f0 <HAL_ETH_Transmit+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:958
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80024e4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80024e6:	f043 0301 	orr.w	r3, r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:968
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80024ea:	65e3      	str	r3, [r4, #92]	; 0x5c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1016
    return HAL_ERROR;
 80024ec:	2001      	movs	r0, #1
 80024ee:	e025      	b.n	800253c <HAL_ETH_Transmit+0x60>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:962
  if(heth->gState == HAL_ETH_STATE_READY)
 80024f0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80024f2:	2b10      	cmp	r3, #16
 80024f4:	d1fa      	bne.n	80024ec <HAL_ETH_Transmit+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:965
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80024f6:	2200      	movs	r2, #0
 80024f8:	f7ff fddc 	bl	80020b4 <ETH_Prepare_Tx_Descriptors>
 80024fc:	b118      	cbz	r0, 8002506 <HAL_ETH_Transmit+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:968
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80024fe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002500:	f043 0302 	orr.w	r3, r3, #2
 8002504:	e7f1      	b.n	80024ea <HAL_ETH_Transmit+0xe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:972
    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002506:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002508:	1d9a      	adds	r2, r3, #6
 800250a:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:975
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	2a03      	cmp	r2, #3
 8002512:	bf8a      	itet	hi
 8002514:	3b03      	subhi	r3, #3
 8002516:	62a2      	strls	r2, [r4, #40]	; 0x28
 8002518:	62a3      	strhi	r3, [r4, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:979
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800251a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800251c:	6823      	ldr	r3, [r4, #0]
 800251e:	3206      	adds	r2, #6
 8002520:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002524:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8002528:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:981
    tickstart = HAL_GetTick();
 800252a:	f000 fc85 	bl	8002e38 <HAL_GetTick>
 800252e:	4607      	mov	r7, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:984
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002530:	68f3      	ldr	r3, [r6, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	db03      	blt.n	800253e <HAL_ETH_Transmit+0x62>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1009
    heth->gState = HAL_ETH_STATE_READY;
 8002536:	2310      	movs	r3, #16
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1012
    return HAL_OK;
 8002538:	2000      	movs	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1009
    heth->gState = HAL_ETH_STATE_READY;
 800253a:	6563      	str	r3, [r4, #84]	; 0x54
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1018
}
 800253c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:986
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	04d2      	lsls	r2, r2, #19
 8002548:	d508      	bpl.n	800255c <HAL_ETH_Transmit+0x80>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:988
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800254a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800254c:	f042 0208 	orr.w	r2, r2, #8
 8002550:	65e2      	str	r2, [r4, #92]	; 0x5c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:989
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6623      	str	r3, [r4, #96]	; 0x60
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:991
        heth->gState = HAL_ETH_STATE_ERROR;
 8002556:	23e0      	movs	r3, #224	; 0xe0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1002
          heth->gState = HAL_ETH_STATE_READY;
 8002558:	6563      	str	r3, [r4, #84]	; 0x54
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1003
          return HAL_ERROR;
 800255a:	e7c7      	b.n	80024ec <HAL_ETH_Transmit+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:997
      if(Timeout != HAL_MAX_DELAY)
 800255c:	1c6b      	adds	r3, r5, #1
 800255e:	d0e7      	beq.n	8002530 <HAL_ETH_Transmit+0x54>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:999
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8002560:	f000 fc6a 	bl	8002e38 <HAL_GetTick>
 8002564:	1bc0      	subs	r0, r0, r7
 8002566:	42a8      	cmp	r0, r5
 8002568:	d801      	bhi.n	800256e <HAL_ETH_Transmit+0x92>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:999 (discriminator 1)
 800256a:	2d00      	cmp	r5, #0
 800256c:	d1e0      	bne.n	8002530 <HAL_ETH_Transmit+0x54>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1001
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800256e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002570:	f043 0304 	orr.w	r3, r3, #4
 8002574:	65e3      	str	r3, [r4, #92]	; 0x5c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1002
          heth->gState = HAL_ETH_STATE_READY;
 8002576:	2310      	movs	r3, #16
 8002578:	e7ee      	b.n	8002558 <HAL_ETH_Transmit+0x7c>

0800257a <HAL_ETH_IsRxDataAvailable>:
HAL_ETH_IsRxDataAvailable():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1067
{
 800257a:	b5f0      	push	{r4, r5, r6, r7, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1074
  if(dmarxdesclist->AppDescNbr != 0U)
 800257c:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800257e:	b97d      	cbnz	r5, 80025a0 <HAL_ETH_IsRxDataAvailable+0x26>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1069
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8002580:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1072
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8002582:	462a      	mov	r2, r5
 8002584:	4629      	mov	r1, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1070
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002586:	2705      	movs	r7, #5
 8002588:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 800258c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1081
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 800258e:	68f3      	ldr	r3, [r6, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	db01      	blt.n	8002598 <HAL_ETH_IsRxDataAvailable+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1081 (discriminator 1)
 8002594:	3f01      	subs	r7, #1
 8002596:	d105      	bne.n	80025a4 <HAL_ETH_IsRxDataAvailable+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1147
  if(appdesccnt > 0U)
 8002598:	2900      	cmp	r1, #0
 800259a:	d13c      	bne.n	8002616 <HAL_ETH_IsRxDataAvailable+0x9c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1178
  dmarxdesclist->AppDescNbr = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	6443      	str	r3, [r0, #68]	; 0x44
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1077
    return 0;
 80025a0:	2000      	movs	r0, #0
 80025a2:	e020      	b.n	80025e6 <HAL_ETH_IsRxDataAvailable+0x6c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1086
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80025a4:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 80025a8:	1c63      	adds	r3, r4, #1
 80025aa:	f01c 5f80 	tst.w	ip, #268435456	; 0x10000000
 80025ae:	d01b      	beq.n	80025e8 <HAL_ETH_IsRxDataAvailable+0x6e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1089
      appdesccnt += 1U;
 80025b0:	3101      	adds	r1, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1091
      if(appdesccnt == 1U)
 80025b2:	2901      	cmp	r1, #1
 80025b4:	bf08      	it	eq
 80025b6:	4622      	moveq	r2, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1097
      INCR_RX_DESC_INDEX(descidx, 1U);
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	bf88      	it	hi
 80025bc:	1ee3      	subhi	r3, r4, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1101
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80025be:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 80025c2:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1103
      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 80025c4:	68e5      	ldr	r5, [r4, #12]
 80025c6:	2d00      	cmp	r5, #0
 80025c8:	db09      	blt.n	80025de <HAL_ETH_IsRxDataAvailable+0x64>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1105
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80025ca:	68e4      	ldr	r4, [r4, #12]
 80025cc:	0067      	lsls	r7, r4, #1
 80025ce:	d506      	bpl.n	80025de <HAL_ETH_IsRxDataAvailable+0x64>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1108
          dmarxdesclist->AppContextDesc = 1;
 80025d0:	2401      	movs	r4, #1
 80025d2:	6484      	str	r4, [r0, #72]	; 0x48
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1110
          INCR_RX_DESC_INDEX(descidx, 1U);
 80025d4:	191c      	adds	r4, r3, r4
 80025d6:	2c03      	cmp	r4, #3
 80025d8:	bf8c      	ite	hi
 80025da:	3b03      	subhi	r3, #3
 80025dc:	4623      	movls	r3, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1116
      dmarxdesclist->AppDescNbr = appdesccnt;
 80025de:	6441      	str	r1, [r0, #68]	; 0x44
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1115
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 80025e0:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1119
      return 1;
 80025e4:	2001      	movs	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1181
}
 80025e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1122
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80025e8:	68f6      	ldr	r6, [r6, #12]
 80025ea:	00b6      	lsls	r6, r6, #2
 80025ec:	d50a      	bpl.n	8002604 <HAL_ETH_IsRxDataAvailable+0x8a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1129
      INCR_RX_DESC_INDEX(descidx, 1U);
 80025ee:	2b03      	cmp	r3, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1126
      appdesccnt = 1U;
 80025f0:	f04f 0101 	mov.w	r1, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1129
      INCR_RX_DESC_INDEX(descidx, 1U);
 80025f4:	bf88      	it	hi
 80025f6:	1ee3      	subhi	r3, r4, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1131
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80025f8:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 80025fc:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80025fe:	4622      	mov	r2, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1126
      appdesccnt = 1U;
 8002600:	461c      	mov	r4, r3
 8002602:	e7c4      	b.n	800258e <HAL_ETH_IsRxDataAvailable+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1140
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002604:	2b03      	cmp	r3, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1137
      appdesccnt += 1U;
 8002606:	f101 0101 	add.w	r1, r1, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1140
      INCR_RX_DESC_INDEX(descidx, 1U);
 800260a:	bf88      	it	hi
 800260c:	1ee3      	subhi	r3, r4, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1142
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800260e:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 8002612:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002614:	e7f4      	b.n	8002600 <HAL_ETH_IsRxDataAvailable+0x86>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1150
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002616:	eb00 0382 	add.w	r3, r0, r2, lsl #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1155
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800261a:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1150
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1154
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002620:	691c      	ldr	r4, [r3, #16]
 8002622:	601c      	str	r4, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1155
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002624:	60de      	str	r6, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1157
      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8002626:	695c      	ldr	r4, [r3, #20]
 8002628:	b12c      	cbz	r4, 8002636 <HAL_ETH_IsRxDataAvailable+0xbc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1159
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 800262a:	695c      	ldr	r4, [r3, #20]
 800262c:	609c      	str	r4, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1160
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800262e:	68dc      	ldr	r4, [r3, #12]
 8002630:	f044 7400 	orr.w	r4, r4, #33554432	; 0x2000000
 8002634:	60dc      	str	r4, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1163
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002636:	68dc      	ldr	r4, [r3, #12]
 8002638:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800263c:	60dc      	str	r4, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1165
      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 800263e:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8002640:	b11c      	cbz	r4, 800264a <HAL_ETH_IsRxDataAvailable+0xd0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1167
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002642:	68dc      	ldr	r4, [r3, #12]
 8002644:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
 8002648:	60dc      	str	r4, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1171
      INCR_RX_DESC_INDEX(descidx, 1U);
 800264a:	1c53      	adds	r3, r2, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1152
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 800264c:	3501      	adds	r5, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1171
      INCR_RX_DESC_INDEX(descidx, 1U);
 800264e:	2b03      	cmp	r3, #3
 8002650:	bf8c      	ite	hi
 8002652:	3a03      	subhi	r2, #3
 8002654:	461a      	movls	r2, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1152
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002656:	42a9      	cmp	r1, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1173
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002658:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 800265c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1152
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 800265e:	d1df      	bne.n	8002620 <HAL_ETH_IsRxDataAvailable+0xa6>
 8002660:	e79c      	b.n	800259c <HAL_ETH_IsRxDataAvailable+0x22>

08002662 <HAL_ETH_GetRxDataBuffer>:
HAL_ETH_GetRxDataBuffer():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1197
{
 8002662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002664:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1204
  if(rxbuff == NULL)
 8002666:	460c      	mov	r4, r1
 8002668:	b911      	cbnz	r1, 8002670 <HAL_ETH_GetRxDataBuffer+0xe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1206
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800266a:	2001      	movs	r0, #1
 800266c:	65e8      	str	r0, [r5, #92]	; 0x5c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1284
}
 800266e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1210
  if(dmarxdesclist->AppDescNbr == 0U)
 8002670:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002672:	b1b3      	cbz	r3, 80026a2 <HAL_ETH_GetRxDataBuffer+0x40>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1219
      descidx = dmarxdesclist->FirstAppDesc;
 8002674:	6c29      	ldr	r1, [r5, #64]	; 0x40
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1225
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002676:	2600      	movs	r6, #0
 8002678:	6c6a      	ldr	r2, [r5, #68]	; 0x44
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1220
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800267a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800267e:	6968      	ldr	r0, [r5, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1225
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002680:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8002684:	4637      	mov	r7, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1220
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1225 (discriminator 1)
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002688:	45bc      	cmp	ip, r7
 800268a:	d810      	bhi.n	80026ae <HAL_ETH_GetRxDataBuffer+0x4c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1257
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 800268c:	68da      	ldr	r2, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1260
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 800268e:	6919      	ldr	r1, [r3, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1257
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8002690:	f3c2 020e 	ubfx	r2, r2, #0, #15
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1260
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002694:	6021      	str	r1, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1257
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8002696:	1b92      	subs	r2, r2, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1263
  if(lastdesclen <= heth->Init.RxBuffLen)
 8002698:	4290      	cmp	r0, r2
 800269a:	d31f      	bcc.n	80026dc <HAL_ETH_GetRxDataBuffer+0x7a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1265
    rxbuff->len = lastdesclen;
 800269c:	6062      	str	r2, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1283
  return HAL_OK;
 800269e:	2000      	movs	r0, #0
 80026a0:	e7e5      	b.n	800266e <HAL_ETH_GetRxDataBuffer+0xc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1212
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80026a2:	f7ff ff6a 	bl	800257a <HAL_ETH_IsRxDataAvailable>
 80026a6:	2800      	cmp	r0, #0
 80026a8:	d1e4      	bne.n	8002674 <HAL_ETH_GetRxDataBuffer+0x12>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1215
      return HAL_ERROR;
 80026aa:	2001      	movs	r0, #1
 80026ac:	e7df      	b.n	800266e <HAL_ETH_GetRxDataBuffer+0xc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1228
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80026ae:	691a      	ldr	r2, [r3, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1229
    rxbuff->len =  heth->Init.RxBuffLen;
 80026b0:	e9c4 2000 	strd	r2, r0, [r4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1232
    if(dmarxdesc->BackupAddr1 != 0U)
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	b11a      	cbz	r2, 80026c0 <HAL_ETH_GetRxDataBuffer+0x5e>
 80026b8:	68a4      	ldr	r4, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1237
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80026ba:	695a      	ldr	r2, [r3, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1238
      rxbuff->len =  heth->Init.RxBuffLen;
 80026bc:	e9c4 2000 	strd	r2, r0, [r4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1249
    INCR_RX_DESC_INDEX(descidx, 1U);
 80026c0:	1c4a      	adds	r2, r1, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1246
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80026c2:	68de      	ldr	r6, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1253
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 80026c4:	68a4      	ldr	r4, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1225
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80026c6:	3701      	adds	r7, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1249
    INCR_RX_DESC_INDEX(descidx, 1U);
 80026c8:	2a03      	cmp	r2, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1246
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80026ca:	f3c6 060e 	ubfx	r6, r6, #0, #15
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1249
    INCR_RX_DESC_INDEX(descidx, 1U);
 80026ce:	bf88      	it	hi
 80026d0:	1eca      	subhi	r2, r1, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1250
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80026d2:	eb05 0382 	add.w	r3, r5, r2, lsl #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1225
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80026d6:	4611      	mov	r1, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1250
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1253
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 80026da:	e7d5      	b.n	8002688 <HAL_ETH_GetRxDataBuffer+0x26>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1268
  else if(dmarxdesc->BackupAddr1 != 0U)
 80026dc:	6959      	ldr	r1, [r3, #20]
 80026de:	2900      	cmp	r1, #0
 80026e0:	d0e3      	beq.n	80026aa <HAL_ETH_GetRxDataBuffer+0x48>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1273
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 80026e2:	68a1      	ldr	r1, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1276
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 80026e4:	1a12      	subs	r2, r2, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1275
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80026e6:	695b      	ldr	r3, [r3, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1271
    rxbuff->len = heth->Init.RxBuffLen;
 80026e8:	6060      	str	r0, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1275
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80026ea:	600b      	str	r3, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1276
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 80026ec:	604a      	str	r2, [r1, #4]
 80026ee:	e7d6      	b.n	800269e <HAL_ETH_GetRxDataBuffer+0x3c>

080026f0 <HAL_ETH_GetRxDataLength>:
HAL_ETH_GetRxDataLength():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1294
{
 80026f0:	b570      	push	{r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1299
  if(dmarxdesclist->AppDescNbr == 0U)
 80026f2:	e9d0 5310 	ldrd	r5, r3, [r0, #64]	; 0x40
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1294
{
 80026f6:	4604      	mov	r4, r0
 80026f8:	460e      	mov	r6, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1299
  if(dmarxdesclist->AppDescNbr == 0U)
 80026fa:	b16b      	cbz	r3, 8002718 <HAL_ETH_GetRxDataLength+0x28>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1309
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 80026fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026fe:	442b      	add	r3, r5
 8002700:	1e5a      	subs	r2, r3, #1
 8002702:	2a03      	cmp	r2, #3
 8002704:	d80e      	bhi.n	8002724 <HAL_ETH_GetRxDataLength+0x34>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1311
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002706:	eb04 0482 	add.w	r4, r4, r2, lsl #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1315
  return HAL_OK;
 800270a:	2000      	movs	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1311
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800270c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1313
  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002714:	6033      	str	r3, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1316
}
 8002716:	bd70      	pop	{r4, r5, r6, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1301
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002718:	f7ff ff2f 	bl	800257a <HAL_ETH_IsRxDataAvailable>
 800271c:	2800      	cmp	r0, #0
 800271e:	d1ed      	bne.n	80026fc <HAL_ETH_GetRxDataLength+0xc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1304
      return HAL_ERROR;
 8002720:	2001      	movs	r0, #1
 8002722:	e7f8      	b.n	8002716 <HAL_ETH_GetRxDataLength+0x26>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1309 (discriminator 1)
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8002724:	1f5a      	subs	r2, r3, #5
 8002726:	e7ee      	b.n	8002706 <HAL_ETH_GetRxDataLength+0x16>

08002728 <HAL_ETH_BuildRxDescriptors>:
HAL_ETH_BuildRxDescriptors():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1403
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8002728:	6c41      	ldr	r1, [r0, #68]	; 0x44
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1399
{
 800272a:	b5f0      	push	{r4, r5, r6, r7, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1406
  if(dmarxdesclist->AppDescNbr == 0U)
 800272c:	2900      	cmp	r1, #0
 800272e:	d037      	beq.n	80027a0 <HAL_ETH_BuildRxDescriptors+0x78>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1412
  if(dmarxdesclist->AppContextDesc != 0U)
 8002730:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002732:	b193      	cbz	r3, 800275a <HAL_ETH_BuildRxDescriptors+0x32>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1415
    totalappdescnbr += 1U;
 8002734:	1c4e      	adds	r6, r1, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1401
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8002736:	6c05      	ldr	r5, [r0, #64]	; 0x40
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1418
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002738:	2400      	movs	r4, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1421
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800273a:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1436
    if(descscan < (dmarxdesclist->AppDescNbr - 1U))
 800273e:	3901      	subs	r1, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1402
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002740:	eb00 0385 	add.w	r3, r0, r5, lsl #2
 8002744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1418 (discriminator 1)
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002746:	42a6      	cmp	r6, r4
 8002748:	d109      	bne.n	800275e <HAL_ETH_BuildRxDescriptors+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1446
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 800274a:	6801      	ldr	r1, [r0, #0]
 800274c:	f241 1228 	movw	r2, #4392	; 0x1128
 8002750:	508b      	str	r3, [r1, r2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1449
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8002752:	2300      	movs	r3, #0
 8002754:	6443      	str	r3, [r0, #68]	; 0x44
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1451
  return HAL_OK;
 8002756:	4618      	mov	r0, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1452
}
 8002758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800275a:	460e      	mov	r6, r1
 800275c:	e7eb      	b.n	8002736 <HAL_ETH_BuildRxDescriptors+0xe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1420
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1421
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002762:	60df      	str	r7, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1423
    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8002764:	695a      	ldr	r2, [r3, #20]
 8002766:	b12a      	cbz	r2, 8002774 <HAL_ETH_BuildRxDescriptors+0x4c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1425
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	609a      	str	r2, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1426
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002772:	60da      	str	r2, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1429
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800277a:	60da      	str	r2, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1431
    if(dmarxdesclist->ItMode != 0U)
 800277c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800277e:	b11a      	cbz	r2, 8002788 <HAL_ETH_BuildRxDescriptors+0x60>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1433
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002786:	60da      	str	r2, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1436
    if(descscan < (dmarxdesclist->AppDescNbr - 1U))
 8002788:	42a1      	cmp	r1, r4
 800278a:	d907      	bls.n	800279c <HAL_ETH_BuildRxDescriptors+0x74>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1439
      INCR_RX_DESC_INDEX(descindex, 1U);
 800278c:	1c6a      	adds	r2, r5, #1
 800278e:	2a03      	cmp	r2, #3
 8002790:	bf88      	it	hi
 8002792:	1eea      	subhi	r2, r5, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1441
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002794:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8002798:	4615      	mov	r5, r2
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1418 (discriminator 2)
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800279c:	3401      	adds	r4, #1
 800279e:	e7d2      	b.n	8002746 <HAL_ETH_BuildRxDescriptors+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1409
    return HAL_ERROR;
 80027a0:	2001      	movs	r0, #1
 80027a2:	e7d9      	b.n	8002758 <HAL_ETH_BuildRxDescriptors+0x30>

080027a4 <HAL_ETH_TxCpltCallback>:
HAL_ETH_TxCpltCallback():
 80027a4:	4770      	bx	lr

080027a6 <HAL_ETH_DMAErrorCallback>:
HAL_ETH_DMAErrorCallback():
 80027a6:	4770      	bx	lr

080027a8 <HAL_ETH_MACErrorCallback>:
HAL_ETH_MACErrorCallback():
 80027a8:	4770      	bx	lr

080027aa <HAL_ETH_PMTCallback>:
HAL_ETH_PMTCallback():
 80027aa:	4770      	bx	lr

080027ac <HAL_ETH_EEECallback>:
HAL_ETH_EEECallback():
 80027ac:	4770      	bx	lr

080027ae <HAL_ETH_WakeUpCallback>:
HAL_ETH_WakeUpCallback():
 80027ae:	4770      	bx	lr

080027b0 <HAL_ETH_IRQHandler>:
HAL_ETH_IRQHandler():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1464
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80027b0:	6803      	ldr	r3, [r0, #0]
 80027b2:	f503 528b 	add.w	r2, r3, #4448	; 0x1160
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	0652      	lsls	r2, r2, #25
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1462
{
 80027ba:	b510      	push	{r4, lr}
 80027bc:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1464
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80027be:	d50c      	bpl.n	80027da <HAL_ETH_IRQHandler+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1466
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80027c0:	f241 1234 	movw	r2, #4404	; 0x1134
 80027c4:	589b      	ldr	r3, [r3, r2]
 80027c6:	0659      	lsls	r1, r3, #25
 80027c8:	d507      	bpl.n	80027da <HAL_ETH_IRQHandler+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1474
      HAL_ETH_RxCpltCallback(heth);
 80027ca:	f00a fa1f 	bl	800cc0c <HAL_ETH_RxCpltCallback>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1478
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80027ce:	6823      	ldr	r3, [r4, #0]
 80027d0:	f248 0240 	movw	r2, #32832	; 0x8040
 80027d4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80027d8:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1483
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	f503 528b 	add.w	r2, r3, #4448	; 0x1160
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	07d2      	lsls	r2, r2, #31
 80027e4:	d50d      	bpl.n	8002802 <HAL_ETH_IRQHandler+0x52>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1485
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80027e6:	f241 1234 	movw	r2, #4404	; 0x1134
 80027ea:	589b      	ldr	r3, [r3, r2]
 80027ec:	07d8      	lsls	r0, r3, #31
 80027ee:	d508      	bpl.n	8002802 <HAL_ETH_IRQHandler+0x52>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1492
      HAL_ETH_TxCpltCallback(heth);
 80027f0:	4620      	mov	r0, r4
 80027f2:	f7ff ffd7 	bl	80027a4 <HAL_ETH_TxCpltCallback>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1496
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80027f6:	6823      	ldr	r3, [r4, #0]
 80027f8:	f248 0201 	movw	r2, #32769	; 0x8001
 80027fc:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002800:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1502
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002802:	6822      	ldr	r2, [r4, #0]
 8002804:	f502 538b 	add.w	r3, r2, #4448	; 0x1160
 8002808:	6819      	ldr	r1, [r3, #0]
 800280a:	0449      	lsls	r1, r1, #17
 800280c:	d51c      	bpl.n	8002848 <HAL_ETH_IRQHandler+0x98>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1504
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 800280e:	f241 1134 	movw	r1, #4404	; 0x1134
 8002812:	5850      	ldr	r0, [r2, r1]
 8002814:	0440      	lsls	r0, r0, #17
 8002816:	d517      	bpl.n	8002848 <HAL_ETH_IRQHandler+0x98>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1506
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002818:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800281a:	f040 0008 	orr.w	r0, r0, #8
 800281e:	65e0      	str	r0, [r4, #92]	; 0x5c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1509
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002820:	6818      	ldr	r0, [r3, #0]
 8002822:	04c0      	lsls	r0, r0, #19
 8002824:	d54b      	bpl.n	80028be <HAL_ETH_IRQHandler+0x10e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1512
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f423 636f 	bic.w	r3, r3, #3824	; 0xef0
 800282c:	f023 030d 	bic.w	r3, r3, #13
 8002830:	04db      	lsls	r3, r3, #19
 8002832:	0cdb      	lsrs	r3, r3, #19
 8002834:	6623      	str	r3, [r4, #96]	; 0x60
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1515
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002836:	5853      	ldr	r3, [r2, r1]
 8002838:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800283c:	5053      	str	r3, [r2, r1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1518
        heth->gState = HAL_ETH_STATE_ERROR;
 800283e:	23e0      	movs	r3, #224	; 0xe0
 8002840:	6563      	str	r3, [r4, #84]	; 0x54
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1535
      HAL_ETH_DMAErrorCallback(heth);
 8002842:	4620      	mov	r0, r4
 8002844:	f7ff ffaf 	bl	80027a6 <HAL_ETH_DMAErrorCallback>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1542
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8002848:	6822      	ldr	r2, [r4, #0]
 800284a:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
 800284e:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8002852:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002856:	d109      	bne.n	800286c <HAL_ETH_IRQHandler+0xbc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1545
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002858:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1554
    HAL_ETH_MACErrorCallback(heth);
 800285c:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1545
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800285e:	6663      	str	r3, [r4, #100]	; 0x64
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1547
    heth->gState = HAL_ETH_STATE_ERROR;
 8002860:	23e0      	movs	r3, #224	; 0xe0
 8002862:	6563      	str	r3, [r4, #84]	; 0x54
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1554
    HAL_ETH_MACErrorCallback(heth);
 8002864:	f7ff ffa0 	bl	80027a8 <HAL_ETH_MACErrorCallback>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1557
    heth->MACErrorCode = (uint32_t)(0x0U);
 8002868:	2300      	movs	r3, #0
 800286a:	6663      	str	r3, [r4, #100]	; 0x64
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1561
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800286c:	6823      	ldr	r3, [r4, #0]
 800286e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002872:	06d0      	lsls	r0, r2, #27
 8002874:	d509      	bpl.n	800288a <HAL_ETH_IRQHandler+0xda>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1564
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002876:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1571
    HAL_ETH_PMTCallback(heth);
 800287a:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1564
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800287c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002880:	66a3      	str	r3, [r4, #104]	; 0x68
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1571
    HAL_ETH_PMTCallback(heth);
 8002882:	f7ff ff92 	bl	80027aa <HAL_ETH_PMTCallback>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1574
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002886:	2300      	movs	r3, #0
 8002888:	66a3      	str	r3, [r4, #104]	; 0x68
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1578
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 800288a:	6823      	ldr	r3, [r4, #0]
 800288c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002890:	0691      	lsls	r1, r2, #26
 8002892:	d509      	bpl.n	80028a8 <HAL_ETH_IRQHandler+0xf8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1581
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002894:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1588
    HAL_ETH_EEECallback(heth);
 8002898:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1581
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	66e3      	str	r3, [r4, #108]	; 0x6c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1588
    HAL_ETH_EEECallback(heth);
 80028a0:	f7ff ff84 	bl	80027ac <HAL_ETH_EEECallback>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1591
    heth->MACLPIEvent = (uint32_t)(0x0U);
 80028a4:	2300      	movs	r3, #0
 80028a6:	66e3      	str	r3, [r4, #108]	; 0x6c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1629
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80028a8:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <HAL_ETH_IRQHandler+0x120>)
 80028aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028ac:	0252      	lsls	r2, r2, #9
 80028ae:	d505      	bpl.n	80028bc <HAL_ETH_IRQHandler+0x10c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1632
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80028b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1638
      HAL_ETH_WakeUpCallback(heth);
 80028b4:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1632
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80028b6:	629a      	str	r2, [r3, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1638
      HAL_ETH_WakeUpCallback(heth);
 80028b8:	f7ff ff79 	bl	80027ae <HAL_ETH_WakeUpCallback>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1642
}
 80028bc:	bd10      	pop	{r4, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1523
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	f402 42cd 	and.w	r2, r2, #26240	; 0x6680
 80028c4:	6622      	str	r2, [r4, #96]	; 0x60
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1527
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80028c6:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	e7b9      	b.n	8002842 <HAL_ETH_IRQHandler+0x92>
 80028ce:	bf00      	nop
 80028d0:	58000080 	.word	0x58000080

080028d4 <HAL_ETH_ReadPHYRegister>:
HAL_ETH_ReadPHYRegister():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1759
{
 80028d4:	b570      	push	{r4, r5, r6, lr}
 80028d6:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1763
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80028d8:	6800      	ldr	r0, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1759
{
 80028da:	461d      	mov	r5, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1763
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80028dc:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 80028e0:	07db      	lsls	r3, r3, #31
 80028e2:	d501      	bpl.n	80028e8 <HAL_ETH_ReadPHYRegister+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1765
    return HAL_ERROR;
 80028e4:	2001      	movs	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1800
}
 80028e6:	bd70      	pop	{r4, r5, r6, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1769
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80028e8:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1777
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80028ec:	f023 7378 	bic.w	r3, r3, #65011712	; 0x3e00000
 80028f0:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1778
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80028f4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80028f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1780
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80028fc:	f043 030d 	orr.w	r3, r3, #13
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1783
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002900:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1785
  tickstart = HAL_GetTick();
 8002904:	f000 fa98 	bl	8002e38 <HAL_GetTick>
 8002908:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1788
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800290a:	6823      	ldr	r3, [r4, #0]
 800290c:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 8002910:	f010 0001 	ands.w	r0, r0, #1
 8002914:	d104      	bne.n	8002920 <HAL_ETH_ReadPHYRegister+0x4c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1797
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002916:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800291a:	b29b      	uxth	r3, r3
 800291c:	602b      	str	r3, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1799
  return HAL_OK;
 800291e:	e7e2      	b.n	80028e6 <HAL_ETH_ReadPHYRegister+0x12>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1790
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002920:	f000 fa8a 	bl	8002e38 <HAL_GetTick>
 8002924:	1b80      	subs	r0, r0, r6
 8002926:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800292a:	d9ee      	bls.n	800290a <HAL_ETH_ReadPHYRegister+0x36>
 800292c:	e7da      	b.n	80028e4 <HAL_ETH_ReadPHYRegister+0x10>
	...

08002930 <HAL_ETH_WritePHYRegister>:
HAL_ETH_WritePHYRegister():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1813
{
 8002930:	b538      	push	{r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1817
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002932:	6805      	ldr	r5, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1813
{
 8002934:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1817
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002936:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 800293a:	07c0      	lsls	r0, r0, #31
 800293c:	d501      	bpl.n	8002942 <HAL_ETH_WritePHYRegister+0x12>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1819
    return HAL_ERROR;
 800293e:	2001      	movs	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1855
}
 8002940:	bd38      	pop	{r3, r4, r5, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1823
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002942:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1831
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002946:	b29b      	uxth	r3, r3
 8002948:	f020 7078 	bic.w	r0, r0, #65011712	; 0x3e00000
 800294c:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1832
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002950:	f420 10f8 	bic.w	r0, r0, #2031616	; 0x1f0000
 8002954:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1838
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002958:	4a0c      	ldr	r2, [pc, #48]	; (800298c <HAL_ETH_WritePHYRegister+0x5c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1833
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800295a:	f020 000c 	bic.w	r0, r0, #12
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1838
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800295e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1834
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002962:	f040 0005 	orr.w	r0, r0, #5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1841
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002966:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1843
  tickstart = HAL_GetTick();
 800296a:	f000 fa65 	bl	8002e38 <HAL_GetTick>
 800296e:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1846
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002970:	6823      	ldr	r3, [r4, #0]
 8002972:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 8002976:	f010 0001 	ands.w	r0, r0, #1
 800297a:	d0e1      	beq.n	8002940 <HAL_ETH_WritePHYRegister+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1848
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 800297c:	f000 fa5c 	bl	8002e38 <HAL_GetTick>
 8002980:	1b40      	subs	r0, r0, r5
 8002982:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002986:	d9f3      	bls.n	8002970 <HAL_ETH_WritePHYRegister+0x40>
 8002988:	e7d9      	b.n	800293e <HAL_ETH_WritePHYRegister+0xe>
 800298a:	bf00      	nop
 800298c:	40028000 	.word	0x40028000

08002990 <HAL_ETH_GetMACConfig>:
HAL_ETH_GetMACConfig():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1885
  if (macconf == NULL)
 8002990:	2900      	cmp	r1, #0
 8002992:	f000 80c1 	beq.w	8002b18 <HAL_ETH_GetMACConfig+0x188>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1891
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002996:	6803      	ldr	r3, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1939
  return HAL_OK;
 8002998:	2000      	movs	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1891
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	f002 020c 	and.w	r2, r2, #12
 80029a0:	62ca      	str	r2, [r1, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1892
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80029a8:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1893
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80029b2:	624a      	str	r2, [r1, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1894
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 80029ba:	f3c2 2200 	ubfx	r2, r2, #8, #1
 80029be:	f881 2020 	strb.w	r2, [r1, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1895
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	f3c2 2240 	ubfx	r2, r2, #9, #1
 80029c8:	77ca      	strb	r2, [r1, #31]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1896
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	f482 6280 	eor.w	r2, r2, #1024	; 0x400
 80029d0:	f3c2 2280 	ubfx	r2, r2, #10, #1
 80029d4:	778a      	strb	r2, [r1, #30]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1897
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	f3c2 22c0 	ubfx	r2, r2, #11, #1
 80029dc:	774a      	strb	r2, [r1, #29]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1898
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80029e4:	770a      	strb	r2, [r1, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1899
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80029ec:	618a      	str	r2, [r1, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1900
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80029f4:	614a      	str	r2, [r1, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1901
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	f3c2 4200 	ubfx	r2, r2, #16, #1
 80029fc:	748a      	strb	r2, [r1, #18]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1902
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	f482 3200 	eor.w	r2, r2, #131072	; 0x20000
 8002a04:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8002a08:	744a      	strb	r2, [r1, #17]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1903
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8002a10:	f3c2 42c0 	ubfx	r2, r2, #19, #1
 8002a14:	740a      	strb	r2, [r1, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1904
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	f3c2 5200 	ubfx	r2, r2, #20, #1
 8002a1c:	73ca      	strb	r2, [r1, #15]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1905
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8002a24:	738a      	strb	r2, [r1, #14]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1906
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8002a2c:	734a      	strb	r2, [r1, #13]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1907
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8002a34:	730a      	strb	r2, [r1, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1908
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	f002 62e0 	and.w	r2, r2, #117440512	; 0x7000000
 8002a3c:	608a      	str	r2, [r1, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1909
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	f3c2 62c0 	ubfx	r2, r2, #27, #1
 8002a44:	710a      	strb	r2, [r1, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1910
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8002a4c:	600a      	str	r2, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1912
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8002a54:	634a      	str	r2, [r1, #52]	; 0x34
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1913
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	f482 3280 	eor.w	r2, r2, #65536	; 0x10000
 8002a5c:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8002a60:	f881 2032 	strb.w	r2, [r1, #50]	; 0x32
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1914
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8002a6a:	f881 2031 	strb.w	r2, [r1, #49]	; 0x31
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1915
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	f3c2 4280 	ubfx	r2, r2, #18, #1
 8002a74:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1916
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	f3c2 6200 	ubfx	r2, r2, #24, #1
 8002a7e:	f881 2038 	strb.w	r2, [r1, #56]	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1917
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	f3c2 6244 	ubfx	r2, r2, #25, #5
 8002a88:	63ca      	str	r2, [r1, #60]	; 0x3c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1920
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	f3c2 2200 	ubfx	r2, r2, #8, #1
 8002a90:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1921
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	f002 020f 	and.w	r2, r2, #15
 8002a9a:	644a      	str	r2, [r1, #68]	; 0x44
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1923
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002a9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a9e:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8002aa2:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1924
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002aa6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002aa8:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8002aac:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8002ab0:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1925
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002ab4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ab6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002aba:	650a      	str	r2, [r1, #80]	; 0x50
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1926
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002abc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002abe:	0c12      	lsrs	r2, r2, #16
 8002ac0:	648a      	str	r2, [r1, #72]	; 0x48
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1929
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002ac2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002ac6:	f002 0201 	and.w	r2, r2, #1
 8002aca:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1930
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8002ace:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002ad2:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8002ad6:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1932
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002ada:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8002ade:	f002 0272 	and.w	r2, r2, #114	; 0x72
 8002ae2:	658a      	str	r2, [r1, #88]	; 0x58
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1934
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002ae4:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
 8002ae8:	f002 0223 	and.w	r2, r2, #35	; 0x23
 8002aec:	65ca      	str	r2, [r1, #92]	; 0x5c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1935
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002aee:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
 8002af2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8002af6:	f881 2062 	strb.w	r2, [r1, #98]	; 0x62
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1936
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002afa:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1937
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002afe:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1936
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002b02:	f3c2 1200 	ubfx	r2, r2, #4, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1937
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002b06:	f083 0340 	eor.w	r3, r3, #64	; 0x40
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1936
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002b0a:	f881 2061 	strb.w	r2, [r1, #97]	; 0x61
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1937
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002b0e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002b12:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1939
  return HAL_OK;
 8002b16:	4770      	bx	lr
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1887
    return HAL_ERROR;
 8002b18:	2001      	movs	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1940
}
 8002b1a:	4770      	bx	lr

08002b1c <HAL_ETH_SetMACConfig>:
HAL_ETH_SetMACConfig():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1985
{
 8002b1c:	b508      	push	{r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1986
  if(macconf == NULL)
 8002b1e:	b131      	cbz	r1, 8002b2e <HAL_ETH_SetMACConfig+0x12>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1991
  if(heth->RxState == HAL_ETH_STATE_READY)
 8002b20:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002b22:	2b10      	cmp	r3, #16
 8002b24:	d103      	bne.n	8002b2e <HAL_ETH_SetMACConfig+0x12>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1993
    ETH_SetMACConfig(heth, macconf);
 8002b26:	f7ff f99f 	bl	8001e68 <ETH_SetMACConfig>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1995
    return HAL_OK;
 8002b2a:	2000      	movs	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2001
}
 8002b2c:	bd08      	pop	{r3, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:1988
    return HAL_ERROR;
 8002b2e:	2001      	movs	r0, #1
 8002b30:	e7fc      	b.n	8002b2c <HAL_ETH_SetMACConfig+0x10>
	...

08002b34 <HAL_ETH_SetMDIOClockRange>:
HAL_ETH_SetMDIOClockRange():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2037
{
 8002b34:	b538      	push	{r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2041
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002b36:	6803      	ldr	r3, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2037
{
 8002b38:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2041
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002b3a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2047
  hclk = HAL_RCC_GetHCLKFreq();
 8002b3e:	f7fe fe4f 	bl	80017e0 <HAL_RCC_GetHCLKFreq>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2050
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002b42:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_ETH_SetMDIOClockRange+0x58>)
 8002b44:	4a12      	ldr	r2, [pc, #72]	; (8002b90 <HAL_ETH_SetMDIOClockRange+0x5c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2044
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002b46:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2050
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002b4a:	4403      	add	r3, r0
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d805      	bhi.n	8002b5c <HAL_ETH_SetMDIOClockRange+0x28>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2053
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002b50:	f444 7400 	orr.w	r4, r4, #512	; 0x200
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2077
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002b54:	682b      	ldr	r3, [r5, #0]
 8002b56:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2078
}
 8002b5a:	bd38      	pop	{r3, r4, r5, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2055
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002b5c:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <HAL_ETH_SetMDIOClockRange+0x60>)
 8002b5e:	4a0e      	ldr	r2, [pc, #56]	; (8002b98 <HAL_ETH_SetMDIOClockRange+0x64>)
 8002b60:	4403      	add	r3, r0
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d802      	bhi.n	8002b6c <HAL_ETH_SetMDIOClockRange+0x38>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2058
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002b66:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8002b6a:	e7f3      	b.n	8002b54 <HAL_ETH_SetMDIOClockRange+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2060
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_ETH_SetMDIOClockRange+0x68>)
 8002b6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ba0 <HAL_ETH_SetMDIOClockRange+0x6c>)
 8002b70:	4403      	add	r3, r0
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d9ee      	bls.n	8002b54 <HAL_ETH_SetMDIOClockRange+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2065
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002b76:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_ETH_SetMDIOClockRange+0x70>)
 8002b78:	4a0b      	ldr	r2, [pc, #44]	; (8002ba8 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002b7a:	4403      	add	r3, r0
 8002b7c:	4293      	cmp	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2068
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002b7e:	bf94      	ite	ls
 8002b80:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2073
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002b84:	f444 6480 	orrhi.w	r4, r4, #1024	; 0x400
 8002b88:	e7e4      	b.n	8002b54 <HAL_ETH_SetMDIOClockRange+0x20>
 8002b8a:	bf00      	nop
 8002b8c:	feced300 	.word	0xfeced300
 8002b90:	00e4e1bf 	.word	0x00e4e1bf
 8002b94:	fde9f140 	.word	0xfde9f140
 8002b98:	017d783f 	.word	0x017d783f
 8002b9c:	fc6c7900 	.word	0xfc6c7900
 8002ba0:	026259ff 	.word	0x026259ff
 8002ba4:	fa0a1f00 	.word	0xfa0a1f00
 8002ba8:	02faf07f 	.word	0x02faf07f

08002bac <HAL_ETH_Init>:
HAL_ETH_Init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:277
{
 8002bac:	b570      	push	{r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:280
  if(heth == NULL)
 8002bae:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:277
{
 8002bb0:	b0a4      	sub	sp, #144	; 0x90
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:280
  if(heth == NULL)
 8002bb2:	2800      	cmp	r0, #0
 8002bb4:	f000 80a6 	beq.w	8002d04 <HAL_ETH_Init+0x158>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:306
  if(heth->gState == HAL_ETH_STATE_RESET)
 8002bb8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002bba:	b90b      	cbnz	r3, 8002bc0 <HAL_ETH_Init+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:309
    HAL_ETH_MspInit(heth);
 8002bbc:	f009 ff9a 	bl	800caf4 <HAL_ETH_MspInit>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:313
  heth->gState = HAL_ETH_STATE_BUSY;
 8002bc0:	2323      	movs	r3, #35	; 0x23
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:317
  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002bc2:	7a20      	ldrb	r0, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:313
  heth->gState = HAL_ETH_STATE_BUSY;
 8002bc4:	6563      	str	r3, [r4, #84]	; 0x54
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:315
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc6:	4b7b      	ldr	r3, [pc, #492]	; (8002db4 <HAL_ETH_Init+0x208>)
 8002bc8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8002bcc:	f042 0202 	orr.w	r2, r2, #2
 8002bd0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8002bd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	9301      	str	r3, [sp, #4]
 8002bde:	9b01      	ldr	r3, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:317
  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002be0:	2800      	cmp	r0, #0
 8002be2:	f040 8082 	bne.w	8002cea <HAL_ETH_Init+0x13e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:323
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002be6:	f000 f933 	bl	8002e50 <HAL_SYSCFG_ETHInterfaceSelect>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:329
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002bea:	6823      	ldr	r3, [r4, #0]
 8002bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:332
  tickstart = HAL_GetTick();
 8002bf8:	f000 f91e 	bl	8002e38 <HAL_GetTick>
 8002bfc:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:335
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002bfe:	6823      	ldr	r3, [r4, #0]
 8002c00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c04:	681d      	ldr	r5, [r3, #0]
 8002c06:	f015 0501 	ands.w	r5, r5, #1
 8002c0a:	d171      	bne.n	8002cf0 <HAL_ETH_Init+0x144>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:349
  ETH_MAC_MDIO_ClkConfig(heth);
 8002c0c:	4620      	mov	r0, r4
ETH_MACDMAConfig():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2520
  macDefaultConf.ChecksumOffload = ENABLE;
 8002c0e:	2601      	movs	r6, #1
HAL_ETH_Init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:349
  ETH_MAC_MDIO_ClkConfig(heth);
 8002c10:	f7ff ff90 	bl	8002b34 <HAL_ETH_SetMDIOClockRange>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:352
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002c14:	f7fe fde4 	bl	80017e0 <HAL_RCC_GetHCLKFreq>
 8002c18:	4b67      	ldr	r3, [pc, #412]	; (8002db8 <HAL_ETH_Init+0x20c>)
ETH_MACDMAConfig():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2525
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002c1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
HAL_ETH_Init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:352
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002c1e:	6822      	ldr	r2, [r4, #0]
ETH_MACDMAConfig():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2517
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002c20:	9514      	str	r5, [sp, #80]	; 0x50
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2520
  macDefaultConf.ChecksumOffload = ENABLE;
 8002c22:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2523
  macDefaultConf.DeferralCheck = DISABLE;
 8002c26:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2526
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002c2a:	f88d 5064 	strb.w	r5, [sp, #100]	; 0x64
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2527
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002c2e:	951a      	str	r5, [sp, #104]	; 0x68
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2537
  macDefaultConf.PauseTime = 0x0;
 8002c30:	951d      	str	r5, [sp, #116]	; 0x74
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2539
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002c32:	f88d 506c 	strb.w	r5, [sp, #108]	; 0x6c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2543
  macDefaultConf.RetryTransmission = ENABLE;
 8002c36:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2524
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002c3a:	f8ad 608c 	strh.w	r6, [sp, #140]	; 0x8c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2529
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002c3e:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2536
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002c42:	951f      	str	r5, [sp, #124]	; 0x7c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2549
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002c44:	f8ad 5080 	strh.w	r5, [sp, #128]	; 0x80
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2540
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002c48:	f88d 5082 	strb.w	r5, [sp, #130]	; 0x82
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2538
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002c4c:	9516      	str	r5, [sp, #88]	; 0x58
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2551
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002c4e:	f8ad 505c 	strh.w	r5, [sp, #92]	; 0x5c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2521
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002c52:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2532
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002c56:	950d      	str	r5, [sp, #52]	; 0x34
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2534
  macDefaultConf.JumboPacket = DISABLE;
 8002c58:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2553
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002c5c:	951c      	str	r5, [sp, #112]	; 0x70
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2554
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002c5e:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
HAL_ETH_Init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:352
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002c62:	fbb0 f0f3 	udiv	r0, r0, r3
ETH_MACDMAConfig():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2530
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002c66:	f44f 63c3 	mov.w	r3, #1560	; 0x618
HAL_ETH_Init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:352
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002c6a:	3801      	subs	r0, #1
ETH_MACDMAConfig():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2530
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002c6c:	9318      	str	r3, [sp, #96]	; 0x60
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2545
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002c6e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
HAL_ETH_Init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:352
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002c72:	f8c2 00dc 	str.w	r0, [r2, #220]	; 0xdc
ETH_MACDMAConfig():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2542
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002c76:	2002      	movs	r0, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2545
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002c78:	930b      	str	r3, [sp, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2525
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002c7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c7e:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2535
  macDefaultConf.LoopbackMode = DISABLE;
 8002c82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2557
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002c86:	a90b      	add	r1, sp, #44	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2535
  macDefaultConf.LoopbackMode = DISABLE;
 8002c88:	9312      	str	r3, [sp, #72]	; 0x48
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2542
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002c8a:	2320      	movs	r3, #32
 8002c8c:	e9cd 0321 	strd	r0, r3, [sp, #132]	; 0x84
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2531
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002c90:	4b4a      	ldr	r3, [pc, #296]	; (8002dbc <HAL_ETH_Init+0x210>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2557
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002c92:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2531
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002c94:	930e      	str	r3, [sp, #56]	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2552
  macDefaultConf.Watchdog = ENABLE;
 8002c96:	f240 1301 	movw	r3, #257	; 0x101
 8002c9a:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2557
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002c9e:	f7ff f8e3 	bl	8001e68 <ETH_SetMACConfig>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2568
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ca2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2573
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002ca6:	a902      	add	r1, sp, #8
 8002ca8:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2560
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002caa:	f88d 600c 	strb.w	r6, [sp, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2568
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002cae:	9306      	str	r3, [sp, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2566
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002cb0:	9308      	str	r3, [sp, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2570
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002cb2:	f44f 7306 	mov.w	r3, #536	; 0x218
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2562
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002cb6:	9502      	str	r5, [sp, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2570
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002cb8:	930a      	str	r3, [sp, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2561
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002cba:	9604      	str	r6, [sp, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2565
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002cbc:	f8ad 5014 	strh.w	r5, [sp, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2567
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002cc0:	f88d 501c 	strb.w	r5, [sp, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2563
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002cc4:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2573
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002cc8:	f7ff f9ac 	bl	8002024 <ETH_SetDMAConfig>
HAL_ETH_Init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:358
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002ccc:	6823      	ldr	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:361
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002cce:	6960      	ldr	r0, [r4, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:358
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002cd0:	f503 5188 	add.w	r1, r3, #4352	; 0x1100
 8002cd4:	680a      	ldr	r2, [r1, #0]
 8002cd6:	f422 12e0 	bic.w	r2, r2, #1835008	; 0x1c0000
 8002cda:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002cde:	600a      	str	r2, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:361
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002ce0:	f010 0103 	ands.w	r1, r0, #3
 8002ce4:	d010      	beq.n	8002d08 <HAL_ETH_Init+0x15c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:364
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002ce6:	65e6      	str	r6, [r4, #92]	; 0x5c
 8002ce8:	e00a      	b.n	8002d00 <HAL_ETH_Init+0x154>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:323
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002cea:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002cee:	e77a      	b.n	8002be6 <HAL_ETH_Init+0x3a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:337
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002cf0:	f000 f8a2 	bl	8002e38 <HAL_GetTick>
 8002cf4:	1b80      	subs	r0, r0, r6
 8002cf6:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8002cfa:	d980      	bls.n	8002bfe <HAL_ETH_Init+0x52>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:340
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002cfc:	2304      	movs	r3, #4
 8002cfe:	65e3      	str	r3, [r4, #92]	; 0x5c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:366
    heth->gState = HAL_ETH_STATE_ERROR;
 8002d00:	23e0      	movs	r3, #224	; 0xe0
 8002d02:	6563      	str	r3, [r4, #84]	; 0x54
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:282
    return HAL_ERROR;
 8002d04:	2001      	movs	r0, #1
 8002d06:	e052      	b.n	8002dae <HAL_ETH_Init+0x202>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:372
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002d08:	f241 1508 	movw	r5, #4360	; 0x1108
 8002d0c:	595a      	ldr	r2, [r3, r5]
 8002d0e:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8002d12:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8002d16:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8002d1a:	68e0      	ldr	r0, [r4, #12]
 8002d1c:	515a      	str	r2, [r3, r5]
ETH_DMATxDescListInit():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2640
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d1e:	f100 0660 	add.w	r6, r0, #96	; 0x60
 8002d22:	f104 0518 	add.w	r5, r4, #24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2642
    dmatxdesc = heth->Init.TxDesc + i;
 8002d26:	4602      	mov	r2, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2644
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002d28:	6011      	str	r1, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2645
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002d2a:	6051      	str	r1, [r2, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2646
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002d2c:	6091      	str	r1, [r2, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2647
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002d2e:	60d1      	str	r1, [r2, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2649
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002d30:	f845 2b04 	str.w	r2, [r5], #4
 8002d34:	3218      	adds	r2, #24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2640
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d36:	42b2      	cmp	r2, r6
 8002d38:	d1f6      	bne.n	8002d28 <HAL_ETH_Init+0x17c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2652
  heth->TxDescList.CurTxDesc = 0;
 8002d3a:	62a1      	str	r1, [r4, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2655
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002d3c:	f241 122c 	movw	r2, #4396	; 0x112c
 8002d40:	2103      	movs	r1, #3
ETH_DMARxDescListInit():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2680
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002d42:	2500      	movs	r5, #0
ETH_DMATxDescListInit():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2655
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002d44:	5099      	str	r1, [r3, r2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2658
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002d46:	f241 1214 	movw	r2, #4372	; 0x1114
ETH_DMARxDescListInit():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2678
    dmarxdesc =  heth->Init.RxDesc + i;
 8002d4a:	6921      	ldr	r1, [r4, #16]
ETH_DMATxDescListInit():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2658
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002d4c:	5098      	str	r0, [r3, r2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2661
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002d4e:	f503 5289 	add.w	r2, r3, #4384	; 0x1120
 8002d52:	f101 0660 	add.w	r6, r1, #96	; 0x60
 8002d56:	6010      	str	r0, [r2, #0]
 8002d58:	f104 002c 	add.w	r0, r4, #44	; 0x2c
ETH_DMARxDescListInit():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2678
    dmarxdesc =  heth->Init.RxDesc + i;
 8002d5c:	460a      	mov	r2, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2680
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002d5e:	6015      	str	r5, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2681
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002d60:	6055      	str	r5, [r2, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2682
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002d62:	6095      	str	r5, [r2, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2683
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002d64:	60d5      	str	r5, [r2, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2684
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002d66:	6115      	str	r5, [r2, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2685
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002d68:	6155      	str	r5, [r2, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2688
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002d6a:	f840 2b04 	str.w	r2, [r0], #4
 8002d6e:	3218      	adds	r2, #24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2676
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d70:	42b2      	cmp	r2, r6
 8002d72:	d1f4      	bne.n	8002d5e <HAL_ETH_Init+0x1b2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2698
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002d74:	f241 1230 	movw	r2, #4400	; 0x1130
 8002d78:	2003      	movs	r0, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2693
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002d7a:	6465      	str	r5, [r4, #68]	; 0x44
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2692
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002d7c:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2695
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002d80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2698
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002d84:	5098      	str	r0, [r3, r2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2701
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002d86:	f241 121c 	movw	r2, #4380	; 0x111c
HAL_ETH_Init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:392
  return HAL_OK;
 8002d8a:	2000      	movs	r0, #0
ETH_DMARxDescListInit():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2701
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002d8c:	5099      	str	r1, [r3, r2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:2704
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8002d8e:	f501 61d8 	add.w	r1, r1, #1728	; 0x6c0
 8002d92:	f241 1228 	movw	r2, #4392	; 0x1128
 8002d96:	5099      	str	r1, [r3, r2]
HAL_ETH_Init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:383
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002d98:	6862      	ldr	r2, [r4, #4]
 8002d9a:	8891      	ldrh	r1, [r2, #4]
 8002d9c:	f8c3 1300 	str.w	r1, [r3, #768]	; 0x300
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:386
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002da0:	6812      	ldr	r2, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:385
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002da2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:389
  heth->gState = HAL_ETH_STATE_READY;
 8002da6:	2310      	movs	r3, #16
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:388
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002da8:	65e5      	str	r5, [r4, #92]	; 0x5c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:389
  heth->gState = HAL_ETH_STATE_READY;
 8002daa:	6563      	str	r3, [r4, #84]	; 0x54
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:390
  heth->RxState = HAL_ETH_STATE_READY;
 8002dac:	65a3      	str	r3, [r4, #88]	; 0x58
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c:393
}
 8002dae:	b024      	add	sp, #144	; 0x90
 8002db0:	bd70      	pop	{r4, r5, r6, pc}
 8002db2:	bf00      	nop
 8002db4:	58024400 	.word	0x58024400
 8002db8:	000f4240 	.word	0x000f4240
 8002dbc:	01010000 	.word	0x01010000

08002dc0 <HAL_MspInit>:
HAL_MspInit():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c:217
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002dc0:	4770      	bx	lr
	...

08002dc4 <HAL_Init>:
HAL_Init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c:135
{
 8002dc4:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c:145
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dc6:	2003      	movs	r0, #3
 8002dc8:	f7fe fe50 	bl	8001a6c <HAL_NVIC_SetPriorityGrouping>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c:148
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002dcc:	f7fe fb50 	bl	8001470 <HAL_RCC_GetSysClockFreq>
 8002dd0:	490f      	ldr	r1, [pc, #60]	; (8002e10 <HAL_Init+0x4c>)
 8002dd2:	4a10      	ldr	r2, [pc, #64]	; (8002e14 <HAL_Init+0x50>)
 8002dd4:	698b      	ldr	r3, [r1, #24]
 8002dd6:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002dda:	5cd3      	ldrb	r3, [r2, r3]
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	40d8      	lsrs	r0, r3
 8002de2:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <HAL_Init+0x54>)
 8002de4:	6018      	str	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c:151
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002de6:	698b      	ldr	r3, [r1, #24]
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	5cd3      	ldrb	r3, [r2, r3]
 8002dee:	f003 031f 	and.w	r3, r3, #31
 8002df2:	40d8      	lsrs	r0, r3
 8002df4:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_Init+0x58>)
 8002df6:	6018      	str	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c:154
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002df8:	200f      	movs	r0, #15
 8002dfa:	f009 fc01 	bl	800c600 <HAL_InitTick>
 8002dfe:	4604      	mov	r4, r0
 8002e00:	b918      	cbnz	r0, 8002e0a <HAL_Init+0x46>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c:160
  HAL_MspInit();
 8002e02:	f7ff ffdd 	bl	8002dc0 <HAL_MspInit>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c:164
}
 8002e06:	4620      	mov	r0, r4
 8002e08:	bd10      	pop	{r4, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c:156
    return HAL_ERROR;
 8002e0a:	2401      	movs	r4, #1
 8002e0c:	e7fb      	b.n	8002e06 <HAL_Init+0x42>
 8002e0e:	bf00      	nop
 8002e10:	58024400 	.word	0x58024400
 8002e14:	080210e6 	.word	0x080210e6
 8002e18:	20000020 	.word	0x20000020
 8002e1c:	20000024 	.word	0x20000024

08002e20 <HAL_IncTick>:
HAL_IncTick():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c:334
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002e20:	4a03      	ldr	r2, [pc, #12]	; (8002e30 <HAL_IncTick+0x10>)
 8002e22:	4b04      	ldr	r3, [pc, #16]	; (8002e34 <HAL_IncTick+0x14>)
 8002e24:	6811      	ldr	r1, [r2, #0]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	440b      	add	r3, r1
 8002e2a:	6013      	str	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c:335
}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	2000807c 	.word	0x2000807c
 8002e34:	20000004 	.word	0x20000004

08002e38 <HAL_GetTick>:
HAL_GetTick():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c:345
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002e38:	4b01      	ldr	r3, [pc, #4]	; (8002e40 <HAL_GetTick+0x8>)
 8002e3a:	6818      	ldr	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c:346
}
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	2000807c 	.word	0x2000807c

08002e44 <HAL_GetREVID>:
HAL_GetREVID():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c:460
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8002e44:	4b01      	ldr	r3, [pc, #4]	; (8002e4c <HAL_GetREVID+0x8>)
 8002e46:	6818      	ldr	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c:461
}
 8002e48:	0c00      	lsrs	r0, r0, #16
 8002e4a:	4770      	bx	lr
 8002e4c:	5c001000 	.word	0x5c001000

08002e50 <HAL_SYSCFG_ETHInterfaceSelect>:
HAL_SYSCFG_ETHInterfaceSelect():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c:597
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002e50:	4a03      	ldr	r2, [pc, #12]	; (8002e60 <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 8002e52:	6853      	ldr	r3, [r2, #4]
 8002e54:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8002e58:	4318      	orrs	r0, r3
 8002e5a:	6050      	str	r0, [r2, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c:598
}
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	58000400 	.word	0x58000400

08002e64 <HAL_PWREx_ConfigSupply>:
HAL_PWREx_ConfigSupply():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c:241
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8002e64:	4a11      	ldr	r2, [pc, #68]	; (8002eac <HAL_PWREx_ConfigSupply+0x48>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c:235
{
 8002e66:	b538      	push	{r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c:241
  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8002e68:	68d3      	ldr	r3, [r2, #12]
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	f013 0f04 	tst.w	r3, #4
 8002e70:	d104      	bne.n	8002e7c <HAL_PWREx_ConfigSupply+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c:243
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002e72:	68d2      	ldr	r2, [r2, #12]
 8002e74:	f002 0207 	and.w	r2, r2, #7
 8002e78:	4282      	cmp	r2, r0
 8002e7a:	d115      	bne.n	8002ea8 <HAL_PWREx_ConfigSupply+0x44>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c:251
      return HAL_ERROR;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002e7c:	68cb      	ldr	r3, [r1, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c:257

  /* Get tick */
  tickstart = HAL_GetTick();

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8002e7e:	4c0b      	ldr	r4, [pc, #44]	; (8002eac <HAL_PWREx_ConfigSupply+0x48>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c:251
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002e80:	f023 0307 	bic.w	r3, r3, #7
 8002e84:	4303      	orrs	r3, r0
 8002e86:	60cb      	str	r3, [r1, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c:254
  tickstart = HAL_GetTick();
 8002e88:	f7ff ffd6 	bl	8002e38 <HAL_GetTick>
 8002e8c:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c:257
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8002e8e:	6863      	ldr	r3, [r4, #4]
 8002e90:	049b      	lsls	r3, r3, #18
 8002e92:	d501      	bpl.n	8002e98 <HAL_PWREx_ConfigSupply+0x34>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c:265
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8002e94:	2000      	movs	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c:266
}
 8002e96:	bd38      	pop	{r3, r4, r5, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c:259
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8002e98:	f7ff ffce 	bl	8002e38 <HAL_GetTick>
 8002e9c:	1b40      	subs	r0, r0, r5
 8002e9e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002ea2:	d9f4      	bls.n	8002e8e <HAL_PWREx_ConfigSupply+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c:261
      return HAL_TIMEOUT;
 8002ea4:	2003      	movs	r0, #3
 8002ea6:	e7f6      	b.n	8002e96 <HAL_PWREx_ConfigSupply+0x32>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c:246
      return HAL_ERROR;
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	e7f4      	b.n	8002e96 <HAL_PWREx_ConfigSupply+0x32>
 8002eac:	58024800 	.word	0x58024800

08002eb0 <fs_open>:
fs_open():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/apps/httpd/fs.c:63
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8002eb0:	b570      	push	{r4, r5, r6, lr}
 8002eb2:	460e      	mov	r6, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/apps/httpd/fs.c:66
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8002eb4:	4605      	mov	r5, r0
 8002eb6:	b1a8      	cbz	r0, 8002ee4 <fs_open+0x34>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/apps/httpd/fs.c:66 (discriminator 1)
 8002eb8:	b1a1      	cbz	r1, 8002ee4 <fs_open+0x34>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/apps/httpd/fs.c:78
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8002eba:	4c0c      	ldr	r4, [pc, #48]	; (8002eec <fs_open+0x3c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/apps/httpd/fs.c:79
    if (!strcmp(name, (const char *)f->name)) {
 8002ebc:	6861      	ldr	r1, [r4, #4]
 8002ebe:	4630      	mov	r0, r6
 8002ec0:	f7fd fa0e 	bl	80002e0 <strcmp>
 8002ec4:	b940      	cbnz	r0, 8002ed8 <fs_open+0x28>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/apps/httpd/fs.c:80
      file->data = (const char *)f->data;
 8002ec6:	68a3      	ldr	r3, [r4, #8]
 8002ec8:	602b      	str	r3, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/apps/httpd/fs.c:81
      file->len = f->len;
 8002eca:	68e3      	ldr	r3, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/apps/httpd/fs.c:83
      file->index = f->len;
      file->pextension = NULL;
 8002ecc:	60e8      	str	r0, [r5, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/apps/httpd/fs.c:82
      file->index = f->len;
 8002ece:	e9c5 3301 	strd	r3, r3, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/apps/httpd/fs.c:84
      file->flags = f->flags;
 8002ed2:	7c23      	ldrb	r3, [r4, #16]
 8002ed4:	742b      	strb	r3, [r5, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/apps/httpd/fs.c:97
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
}
 8002ed6:	bd70      	pop	{r4, r5, r6, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/apps/httpd/fs.c:78 (discriminator 2)
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8002ed8:	6824      	ldr	r4, [r4, #0]
 8002eda:	2c00      	cmp	r4, #0
 8002edc:	d1ee      	bne.n	8002ebc <fs_open+0xc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/apps/httpd/fs.c:96
  return ERR_VAL;
 8002ede:	f06f 0005 	mvn.w	r0, #5
 8002ee2:	e7f8      	b.n	8002ed6 <fs_open+0x26>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/apps/httpd/fs.c:67
     return ERR_ARG;
 8002ee4:	f06f 000f 	mvn.w	r0, #15
 8002ee8:	e7f5      	b.n	8002ed6 <fs_open+0x26>
 8002eea:	bf00      	nop
 8002eec:	0801e3bc 	.word	0x0801e3bc

08002ef0 <fs_close>:
fs_close():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/apps/httpd/fs.c:112
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8002ef0:	4770      	bx	lr
	...

08002ef4 <ip4_route>:
ip4_route():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:164
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8002ef4:	4b13      	ldr	r3, [pc, #76]	; (8002f44 <ip4_route+0x50>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:153
{
 8002ef6:	b530      	push	{r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:164 (discriminator 2)
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	b96b      	cbnz	r3, 8002f18 <ip4_route+0x24>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:209
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8002efc:	4a12      	ldr	r2, [pc, #72]	; (8002f48 <ip4_route+0x54>)
 8002efe:	6812      	ldr	r2, [r2, #0]
 8002f00:	b1ea      	cbz	r2, 8002f3e <ip4_route+0x4a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:209 (discriminator 1)
 8002f02:	f892 1033 	ldrb.w	r1, [r2, #51]	; 0x33
 8002f06:	f001 0105 	and.w	r1, r1, #5
 8002f0a:	2905      	cmp	r1, #5
 8002f0c:	d117      	bne.n	8002f3e <ip4_route+0x4a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:209 (discriminator 2)
 8002f0e:	6851      	ldr	r1, [r2, #4]
 8002f10:	2900      	cmp	r1, #0
 8002f12:	bf18      	it	ne
 8002f14:	4613      	movne	r3, r2
 8002f16:	e012      	b.n	8002f3e <ip4_route+0x4a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:166
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8002f18:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
 8002f1c:	07cd      	lsls	r5, r1, #31
 8002f1e:	d5eb      	bpl.n	8002ef8 <ip4_route+0x4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:166 (discriminator 1)
 8002f20:	074c      	lsls	r4, r1, #29
 8002f22:	d5e9      	bpl.n	8002ef8 <ip4_route+0x4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:166 (discriminator 2)
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	2a00      	cmp	r2, #0
 8002f28:	d0e6      	beq.n	8002ef8 <ip4_route+0x4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:168
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8002f2a:	6804      	ldr	r4, [r0, #0]
 8002f2c:	689d      	ldr	r5, [r3, #8]
 8002f2e:	4062      	eors	r2, r4
 8002f30:	422a      	tst	r2, r5
 8002f32:	d004      	beq.n	8002f3e <ip4_route+0x4a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:173
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8002f34:	078a      	lsls	r2, r1, #30
 8002f36:	d4df      	bmi.n	8002ef8 <ip4_route+0x4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:173 (discriminator 1)
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	4294      	cmp	r4, r2
 8002f3c:	d1dc      	bne.n	8002ef8 <ip4_route+0x4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:221
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	bd30      	pop	{r4, r5, pc}
 8002f42:	bf00      	nop
 8002f44:	2000810c 	.word	0x2000810c
 8002f48:	20008110 	.word	0x20008110

08002f4c <ip4_input>:
ip4_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:375
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8002f4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:388

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8002f50:	6847      	ldr	r7, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:375
{
 8002f52:	4605      	mov	r5, r0
 8002f54:	4688      	mov	r8, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:389
  if (IPH_V(iphdr) != 4) {
 8002f56:	f897 9000 	ldrb.w	r9, [r7]
 8002f5a:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d005      	beq.n	8002f6e <ip4_input+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:392
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8002f62:	4628      	mov	r0, r5
 8002f64:	f007 fc8e 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:727
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8002f68:	2000      	movs	r0, #0
 8002f6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:411
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8002f6e:	8878      	ldrh	r0, [r7, #2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:407
  iphdr_hlen = IPH_HL(iphdr);
 8002f70:	f009 090f 	and.w	r9, r9, #15
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:411
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8002f74:	f007 fbfc 	bl	800a770 <lwip_htons>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:414
  if (iphdr_len < p->tot_len) {
 8002f78:	892b      	ldrh	r3, [r5, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:409
  iphdr_hlen *= 4;
 8002f7a:	ea4f 0989 	mov.w	r9, r9, lsl #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:411
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8002f7e:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:414
  if (iphdr_len < p->tot_len) {
 8002f80:	4283      	cmp	r3, r0
 8002f82:	d903      	bls.n	8002f8c <ip4_input+0x40>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:415
    pbuf_realloc(p, iphdr_len);
 8002f84:	4601      	mov	r1, r0
 8002f86:	4628      	mov	r0, r5
 8002f88:	f007 fdb6 	bl	800aaf8 <pbuf_realloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:419
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8002f8c:	896b      	ldrh	r3, [r5, #10]
 8002f8e:	454b      	cmp	r3, r9
 8002f90:	d3e7      	bcc.n	8002f62 <ip4_input+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:419 (discriminator 1)
 8002f92:	892b      	ldrh	r3, [r5, #8]
 8002f94:	42a3      	cmp	r3, r4
 8002f96:	d3e4      	bcc.n	8002f62 <ip4_input+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:419 (discriminator 2)
 8002f98:	f1b9 0f13 	cmp.w	r9, #19
 8002f9c:	d9e1      	bls.n	8002f62 <ip4_input+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:460
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4c4f      	ldr	r4, [pc, #316]	; (80030e0 <ip4_input+0x194>)
 8002fa2:	6163      	str	r3, [r4, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:464
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8002fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:461
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8002fa8:	68fa      	ldr	r2, [r7, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:464
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8002faa:	2be0      	cmp	r3, #224	; 0xe0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:461
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8002fac:	6122      	str	r2, [r4, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:464
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8002fae:	d10e      	bne.n	8002fce <ip4_input+0x82>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:479
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8002fb0:	f898 3033 	ldrb.w	r3, [r8, #51]	; 0x33
 8002fb4:	07da      	lsls	r2, r3, #31
 8002fb6:	d404      	bmi.n	8002fc2 <ip4_input+0x76>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:557
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8002fb8:	7a7b      	ldrb	r3, [r7, #9]
 8002fba:	2b11      	cmp	r3, #17
 8002fbc:	d05f      	beq.n	800307e <ip4_input+0x132>
 8002fbe:	2600      	movs	r6, #0
 8002fc0:	e01e      	b.n	8003000 <ip4_input+0xb4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:479 (discriminator 1)
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8002fc2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f6      	beq.n	8002fb8 <ip4_input+0x6c>
 8002fca:	4646      	mov	r6, r8
 8002fcc:	e018      	b.n	8003000 <ip4_input+0xb4>
 8002fce:	4646      	mov	r6, r8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:489
    int first = 1;
 8002fd0:	f04f 0a01 	mov.w	sl, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:535
        netif = netif_list;
 8002fd4:	f8df b10c 	ldr.w	fp, [pc, #268]	; 80030e4 <ip4_input+0x198>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:499
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8002fd8:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
 8002fdc:	07db      	lsls	r3, r3, #31
 8002fde:	d404      	bmi.n	8002fea <ip4_input+0x9e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:524
      if (first) {
 8002fe0:	f1ba 0f00 	cmp.w	sl, #0
 8002fe4:	d13e      	bne.n	8003064 <ip4_input+0x118>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:537
        netif = netif->next;
 8002fe6:	6836      	ldr	r6, [r6, #0]
 8002fe8:	e041      	b.n	800306e <ip4_input+0x122>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:499 (discriminator 1)
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8002fea:	6873      	ldr	r3, [r6, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f7      	beq.n	8002fe0 <ip4_input+0x94>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:501
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8002ff0:	6960      	ldr	r0, [r4, #20]
 8002ff2:	4283      	cmp	r3, r0
 8002ff4:	d004      	beq.n	8003000 <ip4_input+0xb4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:503 (discriminator 1)
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8002ff6:	4631      	mov	r1, r6
 8002ff8:	f001 f918 	bl	800422c <ip4_addr_isbroadcast_u32>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:501 (discriminator 1)
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8002ffc:	2800      	cmp	r0, #0
 8002ffe:	d0ef      	beq.n	8002fe0 <ip4_input+0x94>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:575
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8003000:	6920      	ldr	r0, [r4, #16]
 8003002:	b148      	cbz	r0, 8003018 <ip4_input+0xcc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:580
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8003004:	4641      	mov	r1, r8
 8003006:	f001 f911 	bl	800422c <ip4_addr_isbroadcast_u32>
 800300a:	2800      	cmp	r0, #0
 800300c:	d1a9      	bne.n	8002f62 <ip4_input+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:581 (discriminator 1)
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800300e:	6923      	ldr	r3, [r4, #16]
 8003010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:580 (discriminator 1)
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8003014:	2be0      	cmp	r3, #224	; 0xe0
 8003016:	d0a4      	beq.n	8002f62 <ip4_input+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:594
  if (netif == NULL) {
 8003018:	2e00      	cmp	r6, #0
 800301a:	d0a2      	beq.n	8002f62 <ip4_input+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:613
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003022:	b133      	cbz	r3, 8003032 <ip4_input+0xe6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:618
    p = ip4_reass(p);
 8003024:	4628      	mov	r0, r5
 8003026:	f000 fa01 	bl	800342c <ip4_reass>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:620
    if (p == NULL) {
 800302a:	4605      	mov	r5, r0
 800302c:	2800      	cmp	r0, #0
 800302e:	d09b      	beq.n	8002f68 <ip4_input+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:623
    iphdr = (struct ip_hdr *)p->payload;
 8003030:	6847      	ldr	r7, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:661
  ip_data.current_ip4_header = iphdr;
 8003032:	60a7      	str	r7, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:669
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8003034:	f1c9 0100 	rsb	r1, r9, #0
 8003038:	4628      	mov	r0, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:660
  ip_data.current_input_netif = inp;
 800303a:	e9c4 6800 	strd	r6, r8, [r4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:662
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800303e:	783b      	ldrb	r3, [r7, #0]
 8003040:	f003 030f 	and.w	r3, r3, #15
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	81a3      	strh	r3, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:669
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8003048:	f007 fc16 	bl	800a878 <pbuf_header>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:671
    switch (IPH_PROTO(iphdr)) {
 800304c:	7a7b      	ldrb	r3, [r7, #9]
 800304e:	2b06      	cmp	r3, #6
 8003050:	d029      	beq.n	80030a6 <ip4_input+0x15a>
 8003052:	2b11      	cmp	r3, #17
 8003054:	d01b      	beq.n	800308e <ip4_input+0x142>
 8003056:	2b01      	cmp	r3, #1
 8003058:	d12a      	bne.n	80030b0 <ip4_input+0x164>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:690
      icmp_input(p, inp);
 800305a:	4641      	mov	r1, r8
 800305c:	4628      	mov	r0, r5
 800305e:	f001 f83b 	bl	80040d8 <icmp_input>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:691
      break;
 8003062:	e018      	b.n	8003096 <ip4_input+0x14a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:529
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8003064:	7d23      	ldrb	r3, [r4, #20]
 8003066:	2b7f      	cmp	r3, #127	; 0x7f
 8003068:	d0a6      	beq.n	8002fb8 <ip4_input+0x6c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:535
        netif = netif_list;
 800306a:	f8db 6000 	ldr.w	r6, [fp]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:539
      if (netif == inp) {
 800306e:	4546      	cmp	r6, r8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:540
        netif = netif->next;
 8003070:	f04f 0a00 	mov.w	sl, #0
 8003074:	bf08      	it	eq
 8003076:	6836      	ldreq	r6, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:542
    } while (netif != NULL);
 8003078:	2e00      	cmp	r6, #0
 800307a:	d1ad      	bne.n	8002fd8 <ip4_input+0x8c>
 800307c:	e79c      	b.n	8002fb8 <ip4_input+0x6c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:561
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800307e:	eb07 0309 	add.w	r3, r7, r9
 8003082:	885b      	ldrh	r3, [r3, #2]
 8003084:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8003088:	d199      	bne.n	8002fbe <ip4_input+0x72>
 800308a:	4646      	mov	r6, r8
 800308c:	e7c4      	b.n	8003018 <ip4_input+0xcc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:678
      udp_input(p, inp);
 800308e:	4641      	mov	r1, r8
 8003090:	4628      	mov	r0, r5
 8003092:	f006 fea9 	bl	8009de8 <udp_input>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:719
  ip_data.current_netif = NULL;
 8003096:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:720
  ip_data.current_input_netif = NULL;
 8003098:	e9c4 3300 	strd	r3, r3, [r4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:721
  ip_data.current_ip4_header = NULL;
 800309c:	60a3      	str	r3, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:722
  ip_data.current_ip_header_tot_len = 0;
 800309e:	81a3      	strh	r3, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:724
  ip4_addr_set_any(ip4_current_dest_addr());
 80030a0:	e9c4 3304 	strd	r3, r3, [r4, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:726
  return ERR_OK;
 80030a4:	e760      	b.n	8002f68 <ip4_input+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:684
      tcp_input(p, inp);
 80030a6:	4641      	mov	r1, r8
 80030a8:	4628      	mov	r0, r5
 80030aa:	f008 fb4f 	bl	800b74c <tcp_input>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:685
      break;
 80030ae:	e7f2      	b.n	8003096 <ip4_input+0x14a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:701
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80030b0:	4631      	mov	r1, r6
 80030b2:	6960      	ldr	r0, [r4, #20]
 80030b4:	f001 f8ba 	bl	800422c <ip4_addr_isbroadcast_u32>
 80030b8:	b968      	cbnz	r0, 80030d6 <ip4_input+0x18a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:702 (discriminator 1)
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80030ba:	6963      	ldr	r3, [r4, #20]
 80030bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:701 (discriminator 1)
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80030c0:	2be0      	cmp	r3, #224	; 0xe0
 80030c2:	d008      	beq.n	80030d6 <ip4_input+0x18a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:703
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 80030c4:	4649      	mov	r1, r9
 80030c6:	4628      	mov	r0, r5
 80030c8:	f007 fbd9 	bl	800a87e <pbuf_header_force>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:704
        p->payload = iphdr;
 80030cc:	606f      	str	r7, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:705
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80030ce:	2102      	movs	r1, #2
 80030d0:	4628      	mov	r0, r5
 80030d2:	f001 f8a1 	bl	8004218 <icmp_dest_unreach>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:708
      pbuf_free(p);
 80030d6:	4628      	mov	r0, r5
 80030d8:	f007 fbd4 	bl	800a884 <pbuf_free>
 80030dc:	e7db      	b.n	8003096 <ip4_input+0x14a>
 80030de:	bf00      	nop
 80030e0:	2000be1c 	.word	0x2000be1c
 80030e4:	2000810c 	.word	0x2000810c

080030e8 <ip4_output_if_src>:
ip4_output_if_src():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:798
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80030e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80030ec:	461e      	mov	r6, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:819
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80030ee:	89c3      	ldrh	r3, [r0, #14]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:798
{
 80030f0:	4605      	mov	r5, r0
 80030f2:	468a      	mov	sl, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:819
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80030f4:	2b01      	cmp	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:798
{
 80030f6:	4617      	mov	r7, r2
 80030f8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:819
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80030fc:	d006      	beq.n	800310c <ip4_output_if_src+0x24>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:819 (discriminator 1)
 80030fe:	4b30      	ldr	r3, [pc, #192]	; (80031c0 <ip4_output_if_src+0xd8>)
 8003100:	f240 3233 	movw	r2, #819	; 0x333
 8003104:	492f      	ldr	r1, [pc, #188]	; (80031c4 <ip4_output_if_src+0xdc>)
 8003106:	4830      	ldr	r0, [pc, #192]	; (80031c8 <ip4_output_if_src+0xe0>)
 8003108:	f009 ff48 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:824

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800310c:	2f00      	cmp	r7, #0
 800310e:	d047      	beq.n	80031a0 <ip4_output_if_src+0xb8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:855
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8003110:	2114      	movs	r1, #20
 8003112:	4628      	mov	r0, r5
 8003114:	f007 fbb0 	bl	800a878 <pbuf_header>
 8003118:	2800      	cmp	r0, #0
 800311a:	d14d      	bne.n	80031b8 <ip4_output_if_src+0xd0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:864
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800311c:	896b      	ldrh	r3, [r5, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:863
    iphdr = (struct ip_hdr *)p->payload;
 800311e:	686c      	ldr	r4, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:864
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8003120:	2b13      	cmp	r3, #19
 8003122:	d806      	bhi.n	8003132 <ip4_output_if_src+0x4a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:864 (discriminator 1)
 8003124:	4b26      	ldr	r3, [pc, #152]	; (80031c0 <ip4_output_if_src+0xd8>)
 8003126:	f240 3261 	movw	r2, #865	; 0x361
 800312a:	4928      	ldr	r1, [pc, #160]	; (80031cc <ip4_output_if_src+0xe4>)
 800312c:	4826      	ldr	r0, [pc, #152]	; (80031c8 <ip4_output_if_src+0xe0>)
 800312e:	f009 ff35 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:868
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 8003132:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:867
    IPH_TTL_SET(iphdr, ttl);
 8003136:	7226      	strb	r6, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:889
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8003138:	2600      	movs	r6, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:868
    IPH_PROTO_SET(iphdr, proto);
 800313a:	7263      	strb	r3, [r4, #9]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:874
    ip4_addr_copy(iphdr->dest, *dest);
 800313c:	683b      	ldr	r3, [r7, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:890
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800313e:	f8df 9094 	ldr.w	r9, [pc, #148]	; 80031d4 <ip4_output_if_src+0xec>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:874
    ip4_addr_copy(iphdr->dest, *dest);
 8003142:	6123      	str	r3, [r4, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:880
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8003144:	2345      	movs	r3, #69	; 0x45
 8003146:	7023      	strb	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:881
    IPH_TOS_SET(iphdr, tos);
 8003148:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800314c:	7063      	strb	r3, [r4, #1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:885
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800314e:	8928      	ldrh	r0, [r5, #8]
 8003150:	f007 fb0e 	bl	800a770 <lwip_htons>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:889
    IPH_OFFSET_SET(iphdr, 0);
 8003154:	71a6      	strb	r6, [r4, #6]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:885
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8003156:	8060      	strh	r0, [r4, #2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:889
    IPH_OFFSET_SET(iphdr, 0);
 8003158:	71e6      	strb	r6, [r4, #7]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:890
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800315a:	f8b9 0000 	ldrh.w	r0, [r9]
 800315e:	f007 fb07 	bl	800a770 <lwip_htons>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:894
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8003162:	f8b9 3000 	ldrh.w	r3, [r9]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:890
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8003166:	80a0      	strh	r0, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:894
    ++ip_id;
 8003168:	3301      	adds	r3, #1
 800316a:	f8a9 3000 	strh.w	r3, [r9]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:896

    if (src == NULL) {
 800316e:	f1ba 0f00 	cmp.w	sl, #0
 8003172:	d112      	bne.n	800319a <ip4_output_if_src+0xb2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:897
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8003174:	4b16      	ldr	r3, [pc, #88]	; (80031d0 <ip4_output_if_src+0xe8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	60e3      	str	r3, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:918
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800317a:	72a6      	strb	r6, [r4, #10]
 800317c:	72e6      	strb	r6, [r4, #11]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:955
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800317e:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
 8003182:	b193      	cbz	r3, 80031aa <ip4_output_if_src+0xc2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:955 (discriminator 1)
 8003184:	892a      	ldrh	r2, [r5, #8]
 8003186:	429a      	cmp	r2, r3
 8003188:	d90f      	bls.n	80031aa <ip4_output_if_src+0xc2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:956
    return ip4_frag(p, netif, dest);
 800318a:	463a      	mov	r2, r7
 800318c:	4641      	mov	r1, r8
 800318e:	4628      	mov	r0, r5
 8003190:	f000 faf6 	bl	8003780 <ip4_frag>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:962
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8003194:	b002      	add	sp, #8
 8003196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:900
      ip4_addr_copy(iphdr->src, *src);
 800319a:	f8da 3000 	ldr.w	r3, [sl]
 800319e:	e7eb      	b.n	8003178 <ip4_output_if_src+0x90>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:928
    ip4_addr_copy(dest_addr, iphdr->dest);
 80031a0:	686b      	ldr	r3, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:929
    dest = &dest_addr;
 80031a2:	af01      	add	r7, sp, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:928
    ip4_addr_copy(dest_addr, iphdr->dest);
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	9301      	str	r3, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:929
    dest = &dest_addr;
 80031a8:	e7e9      	b.n	800317e <ip4_output_if_src+0x96>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:961
  return netif->output(netif, p, dest);
 80031aa:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80031ae:	463a      	mov	r2, r7
 80031b0:	4629      	mov	r1, r5
 80031b2:	4640      	mov	r0, r8
 80031b4:	4798      	blx	r3
 80031b6:	e7ed      	b.n	8003194 <ip4_output_if_src+0xac>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:860
      return ERR_BUF;
 80031b8:	f06f 0001 	mvn.w	r0, #1
 80031bc:	e7ea      	b.n	8003194 <ip4_output_if_src+0xac>
 80031be:	bf00      	nop
 80031c0:	0801e3d0 	.word	0x0801e3d0
 80031c4:	0801e436 	.word	0x0801e436
 80031c8:	0800e36a 	.word	0x0800e36a
 80031cc:	0801e442 	.word	0x0801e442
 80031d0:	0801e8dc 	.word	0x0801e8dc
 80031d4:	20007d9c 	.word	0x20007d9c

080031d8 <ip4_output_if>:
ip4_output_if():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:758
{
 80031d8:	b4f0      	push	{r4, r5, r6, r7}
 80031da:	9c06      	ldr	r4, [sp, #24]
 80031dc:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80031e0:	f89d 6014 	ldrb.w	r6, [sp, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:776
  if (dest != LWIP_IP_HDRINCL) {
 80031e4:	b11a      	cbz	r2, 80031ee <ip4_output_if+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:777
    if (ip4_addr_isany(src)) {
 80031e6:	b109      	cbz	r1, 80031ec <ip4_output_if+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:777 (discriminator 1)
 80031e8:	680f      	ldr	r7, [r1, #0]
 80031ea:	b907      	cbnz	r7, 80031ee <ip4_output_if+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:778
      src_used = netif_ip4_addr(netif);
 80031ec:	1d21      	adds	r1, r4, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:786
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80031ee:	9504      	str	r5, [sp, #16]
 80031f0:	e9cd 6405 	strd	r6, r4, [sp, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:788
}
 80031f4:	bcf0      	pop	{r4, r5, r6, r7}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4.c:786
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80031f6:	f7ff bf77 	b.w	80030e8 <ip4_output_if_src>
	...

080031fc <ip_reass_dequeue_datagram>:
ip_reass_dequeue_datagram():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:318
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80031fc:	b538      	push	{r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:320
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80031fe:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <ip_reass_dequeue_datagram+0x34>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:318
{
 8003200:	4604      	mov	r4, r0
 8003202:	460d      	mov	r5, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:320
  if (reassdatagrams == ipr) {
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	4282      	cmp	r2, r0
 8003208:	d107      	bne.n	800321a <ip_reass_dequeue_datagram+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:322
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800320a:	6802      	ldr	r2, [r0, #0]
 800320c:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:330
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800320e:	4621      	mov	r1, r4
 8003210:	2004      	movs	r0, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:331
}
 8003212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:330
  memp_free(MEMP_REASSDATA, ipr);
 8003216:	f009 b855 	b.w	800c2c4 <memp_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:325
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800321a:	b931      	cbnz	r1, 800322a <ip_reass_dequeue_datagram+0x2e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:325 (discriminator 1)
 800321c:	4b05      	ldr	r3, [pc, #20]	; (8003234 <ip_reass_dequeue_datagram+0x38>)
 800321e:	f240 1245 	movw	r2, #325	; 0x145
 8003222:	4905      	ldr	r1, [pc, #20]	; (8003238 <ip_reass_dequeue_datagram+0x3c>)
 8003224:	4805      	ldr	r0, [pc, #20]	; (800323c <ip_reass_dequeue_datagram+0x40>)
 8003226:	f009 feb9 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:326
    prev->next = ipr->next;
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	602b      	str	r3, [r5, #0]
 800322e:	e7ee      	b.n	800320e <ip_reass_dequeue_datagram+0x12>
 8003230:	20007da0 	.word	0x20007da0
 8003234:	0801e554 	.word	0x0801e554
 8003238:	0801e5bf 	.word	0x0801e5bf
 800323c:	0800e36a 	.word	0x0800e36a

08003240 <ip_reass_free_complete_datagram>:
ip_reass_free_complete_datagram():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:171
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8003240:	4281      	cmp	r1, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:165
{
 8003242:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003246:	4605      	mov	r5, r0
 8003248:	460f      	mov	r7, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:171
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800324a:	d105      	bne.n	8003258 <ip_reass_free_complete_datagram+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:171 (discriminator 1)
 800324c:	4b2f      	ldr	r3, [pc, #188]	; (800330c <ip_reass_free_complete_datagram+0xcc>)
 800324e:	22ab      	movs	r2, #171	; 0xab
 8003250:	492f      	ldr	r1, [pc, #188]	; (8003310 <ip_reass_free_complete_datagram+0xd0>)
 8003252:	4830      	ldr	r0, [pc, #192]	; (8003314 <ip_reass_free_complete_datagram+0xd4>)
 8003254:	f009 fea2 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:172
  if (prev != NULL) {
 8003258:	b147      	cbz	r7, 800326c <ip_reass_free_complete_datagram+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:173
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	42ab      	cmp	r3, r5
 800325e:	d005      	beq.n	800326c <ip_reass_free_complete_datagram+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:173 (discriminator 1)
 8003260:	4b2a      	ldr	r3, [pc, #168]	; (800330c <ip_reass_free_complete_datagram+0xcc>)
 8003262:	22ad      	movs	r2, #173	; 0xad
 8003264:	492c      	ldr	r1, [pc, #176]	; (8003318 <ip_reass_free_complete_datagram+0xd8>)
 8003266:	482b      	ldr	r0, [pc, #172]	; (8003314 <ip_reass_free_complete_datagram+0xd4>)
 8003268:	f009 fe98 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:178
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800326c:	686e      	ldr	r6, [r5, #4]
 800326e:	6873      	ldr	r3, [r6, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:179
  if (iprh->start == 0) {
 8003270:	889a      	ldrh	r2, [r3, #4]
 8003272:	bb92      	cbnz	r2, 80032da <ip_reass_free_complete_datagram+0x9a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:183
    ipr->p = iprh->next_pbuf;
 8003274:	681a      	ldr	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:185
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8003276:	f105 011c 	add.w	r1, r5, #28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:183
    ipr->p = iprh->next_pbuf;
 800327a:	606a      	str	r2, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:185
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800327c:	f105 0208 	add.w	r2, r5, #8
 8003280:	f852 0b04 	ldr.w	r0, [r2], #4
 8003284:	428a      	cmp	r2, r1
 8003286:	f843 0b04 	str.w	r0, [r3], #4
 800328a:	d1f9      	bne.n	8003280 <ip_reass_free_complete_datagram+0x40>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:186
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800328c:	2101      	movs	r1, #1
 800328e:	4630      	mov	r0, r6
 8003290:	f000 ffc7 	bl	8004222 <icmp_time_exceeded>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:187
    clen = pbuf_clen(p);
 8003294:	4630      	mov	r0, r6
 8003296:	f007 fc9f 	bl	800abd8 <pbuf_clen>
 800329a:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:190
    pbuf_free(p);
 800329c:	4630      	mov	r0, r6
 800329e:	f007 faf1 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:196
  p = ipr->p;
 80032a2:	686e      	ldr	r6, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:204
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80032a4:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800330c <ip_reass_free_complete_datagram+0xcc>
 80032a8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8003324 <ip_reass_free_complete_datagram+0xe4>
 80032ac:	f8df a064 	ldr.w	sl, [pc, #100]	; 8003314 <ip_reass_free_complete_datagram+0xd4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:197
  while (p != NULL) {
 80032b0:	b9ae      	cbnz	r6, 80032de <ip_reass_free_complete_datagram+0x9e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:209
  ip_reass_dequeue_datagram(ipr, prev);
 80032b2:	4628      	mov	r0, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:210
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 80032b4:	4d19      	ldr	r5, [pc, #100]	; (800331c <ip_reass_free_complete_datagram+0xdc>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:209
  ip_reass_dequeue_datagram(ipr, prev);
 80032b6:	4639      	mov	r1, r7
 80032b8:	f7ff ffa0 	bl	80031fc <ip_reass_dequeue_datagram>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:210
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 80032bc:	882b      	ldrh	r3, [r5, #0]
 80032be:	42a3      	cmp	r3, r4
 80032c0:	d205      	bcs.n	80032ce <ip_reass_free_complete_datagram+0x8e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:210 (discriminator 1)
 80032c2:	4b12      	ldr	r3, [pc, #72]	; (800330c <ip_reass_free_complete_datagram+0xcc>)
 80032c4:	22d2      	movs	r2, #210	; 0xd2
 80032c6:	4916      	ldr	r1, [pc, #88]	; (8003320 <ip_reass_free_complete_datagram+0xe0>)
 80032c8:	4812      	ldr	r0, [pc, #72]	; (8003314 <ip_reass_free_complete_datagram+0xd4>)
 80032ca:	f009 fe67 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:211
  ip_reass_pbufcount -= pbufs_freed;
 80032ce:	882b      	ldrh	r3, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:214
}
 80032d0:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:211
  ip_reass_pbufcount -= pbufs_freed;
 80032d2:	1b1b      	subs	r3, r3, r4
 80032d4:	802b      	strh	r3, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:214
}
 80032d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:166
  u16_t pbufs_freed = 0;
 80032da:	2400      	movs	r4, #0
 80032dc:	e7e1      	b.n	80032a2 <ip_reass_free_complete_datagram+0x62>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:199
    iprh = (struct ip_reass_helper *)p->payload;
 80032de:	6873      	ldr	r3, [r6, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:203
    clen = pbuf_clen(pcur);
 80032e0:	4630      	mov	r0, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:202
    p = iprh->next_pbuf;
 80032e2:	f8d3 b000 	ldr.w	fp, [r3]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:203
    clen = pbuf_clen(pcur);
 80032e6:	f007 fc77 	bl	800abd8 <pbuf_clen>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:204
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80032ea:	4404      	add	r4, r0
 80032ec:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 80032f0:	db05      	blt.n	80032fe <ip_reass_free_complete_datagram+0xbe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:204 (discriminator 1)
 80032f2:	4643      	mov	r3, r8
 80032f4:	22cc      	movs	r2, #204	; 0xcc
 80032f6:	4649      	mov	r1, r9
 80032f8:	4650      	mov	r0, sl
 80032fa:	f009 fe4f 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:206
    pbuf_free(pcur);
 80032fe:	4630      	mov	r0, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:205
    pbufs_freed += clen;
 8003300:	b2a4      	uxth	r4, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:206
    pbuf_free(pcur);
 8003302:	f007 fabf 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:202
    p = iprh->next_pbuf;
 8003306:	465e      	mov	r6, fp
 8003308:	e7d2      	b.n	80032b0 <ip_reass_free_complete_datagram+0x70>
 800330a:	bf00      	nop
 800330c:	0801e554 	.word	0x0801e554
 8003310:	0801e5d8 	.word	0x0801e5d8
 8003314:	0800e36a 	.word	0x0800e36a
 8003318:	0801e5e4 	.word	0x0801e5e4
 800331c:	20007d9e 	.word	0x20007d9e
 8003320:	0801e613 	.word	0x0801e613
 8003324:	0801e5f6 	.word	0x0801e5f6

08003328 <ip_reass_remove_oldest_datagram>:
ip_reass_remove_oldest_datagram():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:228
{
 8003328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800332c:	4606      	mov	r6, r0
 800332e:	460f      	mov	r7, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:233
  int pbufs_freed = 0, pbufs_freed_current;
 8003330:	2500      	movs	r5, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:243
    r = reassdatagrams;
 8003332:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800339c <ip_reass_remove_oldest_datagram+0x74>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:242
    other_datagrams = 0;
 8003336:	2400      	movs	r4, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:243
    r = reassdatagrams;
 8003338:	f8d8 3000 	ldr.w	r3, [r8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:241
    oldest_prev = NULL;
 800333c:	4621      	mov	r1, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:240
    prev = NULL;
 800333e:	46a4      	mov	ip, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:239
    oldest = NULL;
 8003340:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:244
    while (r != NULL) {
 8003342:	b953      	cbnz	r3, 800335a <ip_reass_remove_oldest_datagram+0x32>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:262
    if (oldest != NULL) {
 8003344:	b110      	cbz	r0, 800334c <ip_reass_remove_oldest_datagram+0x24>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:263
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8003346:	f7ff ff7b 	bl	8003240 <ip_reass_free_complete_datagram>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:264
      pbufs_freed += pbufs_freed_current;
 800334a:	4405      	add	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:266
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800334c:	42bd      	cmp	r5, r7
 800334e:	da01      	bge.n	8003354 <ip_reass_remove_oldest_datagram+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:266 (discriminator 1)
 8003350:	2c01      	cmp	r4, #1
 8003352:	dcf0      	bgt.n	8003336 <ip_reass_remove_oldest_datagram+0xe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:268
}
 8003354:	4628      	mov	r0, r5
 8003356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:245
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800335a:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 800335e:	695a      	ldr	r2, [r3, #20]
 8003360:	4572      	cmp	r2, lr
 8003362:	d109      	bne.n	8003378 <ip_reass_remove_oldest_datagram+0x50>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:245 (discriminator 1)
 8003364:	f8d6 e010 	ldr.w	lr, [r6, #16]
 8003368:	699a      	ldr	r2, [r3, #24]
 800336a:	4572      	cmp	r2, lr
 800336c:	d104      	bne.n	8003378 <ip_reass_remove_oldest_datagram+0x50>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:245 (discriminator 2)
 800336e:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 8003372:	88b2      	ldrh	r2, [r6, #4]
 8003374:	4596      	cmp	lr, r2
 8003376:	d008      	beq.n	800338a <ip_reass_remove_oldest_datagram+0x62>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:247
        other_datagrams++;
 8003378:	3401      	adds	r4, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:248
        if (oldest == NULL) {
 800337a:	b160      	cbz	r0, 8003396 <ip_reass_remove_oldest_datagram+0x6e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:251
        } else if (r->timer <= oldest->timer) {
 800337c:	7fc2      	ldrb	r2, [r0, #31]
 800337e:	f893 e01f 	ldrb.w	lr, [r3, #31]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:254
          oldest_prev = prev;
 8003382:	4596      	cmp	lr, r2
 8003384:	bf9c      	itt	ls
 8003386:	4661      	movls	r1, ip
 8003388:	4618      	movls	r0, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:257
      if (r->next != NULL) {
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	2a00      	cmp	r2, #0
 800338e:	bf18      	it	ne
 8003390:	469c      	movne	ip, r3
 8003392:	4613      	mov	r3, r2
 8003394:	e7d5      	b.n	8003342 <ip_reass_remove_oldest_datagram+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:250
          oldest_prev = prev;
 8003396:	4661      	mov	r1, ip
 8003398:	4618      	mov	r0, r3
 800339a:	e7f6      	b.n	800338a <ip_reass_remove_oldest_datagram+0x62>
 800339c:	20007da0 	.word	0x20007da0

080033a0 <ip_frag_free_pbuf_custom_ref>:
ip_frag_free_pbuf_custom_ref():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:685
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80033a0:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:686
  LWIP_ASSERT("p != NULL", p != NULL);
 80033a2:	4604      	mov	r4, r0
 80033a4:	b930      	cbnz	r0, 80033b4 <ip_frag_free_pbuf_custom_ref+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:686 (discriminator 1)
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <ip_frag_free_pbuf_custom_ref+0x20>)
 80033a8:	f240 22ae 	movw	r2, #686	; 0x2ae
 80033ac:	4905      	ldr	r1, [pc, #20]	; (80033c4 <ip_frag_free_pbuf_custom_ref+0x24>)
 80033ae:	4806      	ldr	r0, [pc, #24]	; (80033c8 <ip_frag_free_pbuf_custom_ref+0x28>)
 80033b0:	f009 fdf4 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:687
  memp_free(MEMP_FRAG_PBUF, p);
 80033b4:	4621      	mov	r1, r4
 80033b6:	2005      	movs	r0, #5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:688
}
 80033b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:687
  memp_free(MEMP_FRAG_PBUF, p);
 80033bc:	f008 bf82 	b.w	800c2c4 <memp_free>
 80033c0:	0801e554 	.word	0x0801e554
 80033c4:	080202fe 	.word	0x080202fe
 80033c8:	0800e36a 	.word	0x0800e36a

080033cc <ipfrag_free_pbuf_custom>:
ipfrag_free_pbuf_custom():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:694

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80033cc:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:696
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80033ce:	4604      	mov	r4, r0
 80033d0:	b930      	cbnz	r0, 80033e0 <ipfrag_free_pbuf_custom+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:696 (discriminator 1)
 80033d2:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <ipfrag_free_pbuf_custom+0x28>)
 80033d4:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 80033d8:	4907      	ldr	r1, [pc, #28]	; (80033f8 <ipfrag_free_pbuf_custom+0x2c>)
 80033da:	4808      	ldr	r0, [pc, #32]	; (80033fc <ipfrag_free_pbuf_custom+0x30>)
 80033dc:	f009 fdde 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:698
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 80033e0:	6960      	ldr	r0, [r4, #20]
 80033e2:	b108      	cbz	r0, 80033e8 <ipfrag_free_pbuf_custom+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:699
    pbuf_free(pcr->original);
 80033e4:	f007 fa4e 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:701
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80033e8:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:702
}
 80033ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:701
  ip_frag_free_pbuf_custom_ref(pcr);
 80033ee:	f7ff bfd7 	b.w	80033a0 <ip_frag_free_pbuf_custom_ref>
 80033f2:	bf00      	nop
 80033f4:	0801e554 	.word	0x0801e554
 80033f8:	0801e62e 	.word	0x0801e62e
 80033fc:	0800e36a 	.word	0x0800e36a

08003400 <ip_reass_tmr>:
ip_reass_tmr():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:129
{
 8003400:	b538      	push	{r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:132
  r = reassdatagrams;
 8003402:	4b09      	ldr	r3, [pc, #36]	; (8003428 <ip_reass_tmr+0x28>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:130
  struct ip_reassdata *r, *prev = NULL;
 8003404:	2400      	movs	r4, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:132
  r = reassdatagrams;
 8003406:	6818      	ldr	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:133
  while (r != NULL) {
 8003408:	b900      	cbnz	r0, 800340c <ip_reass_tmr+0xc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:152
}
 800340a:	bd38      	pop	{r3, r4, r5, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:136
    if (r->timer > 0) {
 800340c:	7fc3      	ldrb	r3, [r0, #31]
 800340e:	6805      	ldr	r5, [r0, #0]
 8003410:	b123      	cbz	r3, 800341c <ip_reass_tmr+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:137
      r->timer--;
 8003412:	3b01      	subs	r3, #1
 8003414:	77c3      	strb	r3, [r0, #31]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:149
      ip_reass_free_complete_datagram(tmp, prev);
 8003416:	4604      	mov	r4, r0
 8003418:	4628      	mov	r0, r5
 800341a:	e7f5      	b.n	8003408 <ip_reass_tmr+0x8>
 800341c:	4621      	mov	r1, r4
 800341e:	f7ff ff0f 	bl	8003240 <ip_reass_free_complete_datagram>
 8003422:	4620      	mov	r0, r4
 8003424:	e7f7      	b.n	8003416 <ip_reass_tmr+0x16>
 8003426:	bf00      	nop
 8003428:	20007da0 	.word	0x20007da0

0800342c <ip4_reass>:
ip4_reass():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:499
{
 800342c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:511
  fraghdr = (struct ip_hdr*)p->payload;
 8003430:	6845      	ldr	r5, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:499
{
 8003432:	4607      	mov	r7, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:513
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8003434:	782b      	ldrb	r3, [r5, #0]
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	2b05      	cmp	r3, #5
 800343c:	f040 808d 	bne.w	800355a <ip4_reass+0x12e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:519
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8003440:	88e8      	ldrh	r0, [r5, #6]
 8003442:	f007 f995 	bl	800a770 <lwip_htons>
 8003446:	f3c0 000c 	ubfx	r0, r0, #0, #13
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:524
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800344a:	4cb3      	ldr	r4, [pc, #716]	; (8003718 <ip4_reass+0x2ec>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:519
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800344c:	ea4f 09c0 	mov.w	r9, r0, lsl #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:520
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8003450:	8868      	ldrh	r0, [r5, #2]
 8003452:	f007 f98d 	bl	800a770 <lwip_htons>
 8003456:	782b      	ldrb	r3, [r5, #0]
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 8003460:	b283      	uxth	r3, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:523
  clen = pbuf_clen(p);
 8003462:	4638      	mov	r0, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:520
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8003464:	9301      	str	r3, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:523
  clen = pbuf_clen(p);
 8003466:	f007 fbb7 	bl	800abd8 <pbuf_clen>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:524
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800346a:	8823      	ldrh	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:523
  clen = pbuf_clen(p);
 800346c:	4682      	mov	sl, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:524
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800346e:	4403      	add	r3, r0
 8003470:	2b0a      	cmp	r3, #10
 8003472:	dc69      	bgt.n	8003548 <ip4_reass+0x11c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:542
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8003474:	4ea9      	ldr	r6, [pc, #676]	; (800371c <ip4_reass+0x2f0>)
 8003476:	6834      	ldr	r4, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:542 (discriminator 1)
 8003478:	2c00      	cmp	r4, #0
 800347a:	d173      	bne.n	8003564 <ip4_reass+0x138>
ip_reass_enqueue_new_datagram():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:286
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800347c:	2004      	movs	r0, #4
 800347e:	f008 fef1 	bl	800c264 <memp_malloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:287
  if (ipr == NULL) {
 8003482:	4604      	mov	r4, r0
 8003484:	b958      	cbnz	r0, 800349e <ip4_reass+0x72>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:289
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8003486:	4651      	mov	r1, sl
 8003488:	4628      	mov	r0, r5
 800348a:	f7ff ff4d 	bl	8003328 <ip_reass_remove_oldest_datagram>
 800348e:	4582      	cmp	sl, r0
 8003490:	dc63      	bgt.n	800355a <ip4_reass+0x12e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:290
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8003492:	2004      	movs	r0, #4
 8003494:	f008 fee6 	bl	800c264 <memp_malloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:292
    if (ipr == NULL)
 8003498:	4604      	mov	r4, r0
 800349a:	2800      	cmp	r0, #0
 800349c:	d05d      	beq.n	800355a <ip4_reass+0x12e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:300
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800349e:	221c      	movs	r2, #28
 80034a0:	2100      	movs	r1, #0
 80034a2:	1d20      	adds	r0, r4, #4
 80034a4:	f009 fd72 	bl	800cf8c <memset>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:301
  ipr->timer = IP_REASS_MAXAGE;
 80034a8:	2303      	movs	r3, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:308
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80034aa:	f104 0208 	add.w	r2, r4, #8
 80034ae:	f105 0114 	add.w	r1, r5, #20
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:301
  ipr->timer = IP_REASS_MAXAGE;
 80034b2:	77e3      	strb	r3, [r4, #31]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:304
  ipr->next = reassdatagrams;
 80034b4:	6833      	ldr	r3, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:305
  reassdatagrams = ipr;
 80034b6:	6034      	str	r4, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:304
  ipr->next = reassdatagrams;
 80034b8:	6023      	str	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:308
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80034ba:	462b      	mov	r3, r5
 80034bc:	f853 0b04 	ldr.w	r0, [r3], #4
 80034c0:	428b      	cmp	r3, r1
 80034c2:	f842 0b04 	str.w	r0, [r2], #4
 80034c6:	d1f9      	bne.n	80034bc <ip4_reass+0x90>
ip4_reass():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:576
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80034c8:	f8b5 b006 	ldrh.w	fp, [r5, #6]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:577
  if (is_last) {
 80034cc:	f01b 0b20 	ands.w	fp, fp, #32
 80034d0:	d108      	bne.n	80034e4 <ip4_reass+0xb8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:578
    u16_t datagram_len = (u16_t)(offset + len);
 80034d2:	9b01      	ldr	r3, [sp, #4]
 80034d4:	444b      	add	r3, r9
 80034d6:	b29b      	uxth	r3, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:579
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80034d8:	4599      	cmp	r9, r3
 80034da:	d83e      	bhi.n	800355a <ip4_reass+0x12e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:579 (discriminator 1)
 80034dc:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d83a      	bhi.n	800355a <ip4_reass+0x12e>
ip_reass_chain_frag_into_datagram_and_validate():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:353
  fraghdr = (struct ip_hdr*)new_p->payload;
 80034e4:	687d      	ldr	r5, [r7, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:354
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80034e6:	8868      	ldrh	r0, [r5, #2]
 80034e8:	f007 f942 	bl	800a770 <lwip_htons>
 80034ec:	f895 8000 	ldrb.w	r8, [r5]
 80034f0:	f008 080f 	and.w	r8, r8, #15
 80034f4:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:355
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80034f8:	88e8      	ldrh	r0, [r5, #6]
 80034fa:	f007 f939 	bl	800a770 <lwip_htons>
 80034fe:	f3c0 000c 	ubfx	r0, r0, #0, #13
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:354
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8003502:	fa1f f888 	uxth.w	r8, r8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:369
  for (q = ipr->p; q != NULL;) {
 8003506:	f8d4 c004 	ldr.w	ip, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:355
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800350a:	00c0      	lsls	r0, r0, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:362
  iprh = (struct ip_reass_helper*)new_p->payload;
 800350c:	687e      	ldr	r6, [r7, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:363
  iprh->next_pbuf = NULL;
 800350e:	2500      	movs	r5, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:369
  for (q = ipr->p; q != NULL;) {
 8003510:	4662      	mov	r2, ip
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:365
  iprh->end = offset + len;
 8003512:	eb08 0300 	add.w	r3, r8, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:350
  int valid = 1;
 8003516:	f04f 0801 	mov.w	r8, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:363
  iprh->next_pbuf = NULL;
 800351a:	7035      	strb	r5, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:365
  iprh->end = offset + len;
 800351c:	b29b      	uxth	r3, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:363
  iprh->next_pbuf = NULL;
 800351e:	7075      	strb	r5, [r6, #1]
 8003520:	70b5      	strb	r5, [r6, #2]
 8003522:	70f5      	strb	r5, [r6, #3]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:364
  iprh->start = offset;
 8003524:	80b0      	strh	r0, [r6, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:365
  iprh->end = offset + len;
 8003526:	80f3      	strh	r3, [r6, #6]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:369
  for (q = ipr->p; q != NULL;) {
 8003528:	bb5a      	cbnz	r2, 8003582 <ip4_reass+0x156>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:423
    if (iprh_prev != NULL) {
 800352a:	2d00      	cmp	r5, #0
 800352c:	f040 80a2 	bne.w	8003674 <ip4_reass+0x248>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:435
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8003530:	f1bc 0f00 	cmp.w	ip, #0
 8003534:	f000 808d 	beq.w	8003652 <ip4_reass+0x226>
 8003538:	4b79      	ldr	r3, [pc, #484]	; (8003720 <ip4_reass+0x2f4>)
 800353a:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800353e:	4979      	ldr	r1, [pc, #484]	; (8003724 <ip4_reass+0x2f8>)
 8003540:	4879      	ldr	r0, [pc, #484]	; (8003728 <ip4_reass+0x2fc>)
 8003542:	f009 fd2b 	bl	800cf9c <iprintf>
 8003546:	e084      	b.n	8003652 <ip4_reass+0x226>
ip4_reass():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:526
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8003548:	4601      	mov	r1, r0
 800354a:	4628      	mov	r0, r5
 800354c:	f7ff feec 	bl	8003328 <ip_reass_remove_oldest_datagram>
 8003550:	b118      	cbz	r0, 800355a <ip4_reass+0x12e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:527 (discriminator 1)
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8003552:	8823      	ldrh	r3, [r4, #0]
 8003554:	4453      	add	r3, sl
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:526 (discriminator 1)
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8003556:	2b0a      	cmp	r3, #10
 8003558:	dd8c      	ble.n	8003474 <ip4_reass+0x48>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:668
  pbuf_free(p);
 800355a:	4638      	mov	r0, r7
 800355c:	f007 f992 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:663
  return NULL;
 8003560:	2600      	movs	r6, #0
 8003562:	e070      	b.n	8003646 <ip4_reass+0x21a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:546
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8003564:	68eb      	ldr	r3, [r5, #12]
 8003566:	6962      	ldr	r2, [r4, #20]
 8003568:	429a      	cmp	r2, r3
 800356a:	d108      	bne.n	800357e <ip4_reass+0x152>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:546 (discriminator 1)
 800356c:	692b      	ldr	r3, [r5, #16]
 800356e:	69a2      	ldr	r2, [r4, #24]
 8003570:	429a      	cmp	r2, r3
 8003572:	d104      	bne.n	800357e <ip4_reass+0x152>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:546 (discriminator 2)
 8003574:	89a2      	ldrh	r2, [r4, #12]
 8003576:	88ab      	ldrh	r3, [r5, #4]
 8003578:	429a      	cmp	r2, r3
 800357a:	f000 80dd 	beq.w	8003738 <ip4_reass+0x30c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:542 (discriminator 2)
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800357e:	6824      	ldr	r4, [r4, #0]
 8003580:	e77a      	b.n	8003478 <ip4_reass+0x4c>
ip_reass_chain_frag_into_datagram_and_validate():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:370
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8003582:	f8d2 e004 	ldr.w	lr, [r2, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:371
    if (iprh->start < iprh_tmp->start) {
 8003586:	f8be 1004 	ldrh.w	r1, [lr, #4]
 800358a:	4288      	cmp	r0, r1
 800358c:	d263      	bcs.n	8003656 <ip4_reass+0x22a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:373
      iprh->next_pbuf = q;
 800358e:	6032      	str	r2, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:374
      if (iprh_prev != NULL) {
 8003590:	2d00      	cmp	r5, #0
 8003592:	d05c      	beq.n	800364e <ip4_reass+0x222>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:377
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8003594:	88ea      	ldrh	r2, [r5, #6]
 8003596:	4290      	cmp	r0, r2
 8003598:	f0c0 80a1 	bcc.w	80036de <ip4_reass+0x2b2>
 800359c:	428b      	cmp	r3, r1
 800359e:	f200 809e 	bhi.w	80036de <ip4_reass+0x2b2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:383
        if (iprh_prev->end != iprh->start) {
 80035a2:	4290      	cmp	r0, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:382
        iprh_prev->next_pbuf = new_p;
 80035a4:	602f      	str	r7, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:430
      if (iprh_prev->end != iprh->start) {
 80035a6:	f040 80e3 	bne.w	8003770 <ip4_reass+0x344>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:445
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80035aa:	f1bb 0f00 	cmp.w	fp, #0
 80035ae:	d004      	beq.n	80035ba <ip4_reass+0x18e>
 80035b0:	7fa3      	ldrb	r3, [r4, #30]
 80035b2:	f013 0301 	ands.w	r3, r3, #1
 80035b6:	f000 809d 	beq.w	80036f4 <ip4_reass+0x2c8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:447
    if (valid) {
 80035ba:	f1b8 0f00 	cmp.w	r8, #0
 80035be:	d168      	bne.n	8003692 <ip4_reass+0x266>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:463
          q = iprh->next_pbuf;
 80035c0:	f04f 0800 	mov.w	r8, #0
ip4_reass():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:595
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80035c4:	4f54      	ldr	r7, [pc, #336]	; (8003718 <ip4_reass+0x2ec>)
 80035c6:	883b      	ldrh	r3, [r7, #0]
 80035c8:	449a      	add	sl, r3
 80035ca:	f8a7 a000 	strh.w	sl, [r7]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:596
  if (is_last) {
 80035ce:	f1bb 0f00 	cmp.w	fp, #0
 80035d2:	d107      	bne.n	80035e4 <ip4_reass+0x1b8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:597
    u16_t datagram_len = (u16_t)(offset + len);
 80035d4:	9b01      	ldr	r3, [sp, #4]
 80035d6:	4499      	add	r9, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:599
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80035d8:	7fa3      	ldrb	r3, [r4, #30]
 80035da:	f043 0301 	orr.w	r3, r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:598
    ipr->datagram_len = datagram_len;
 80035de:	f8a4 901c 	strh.w	r9, [r4, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:599
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80035e2:	77a3      	strb	r3, [r4, #30]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:605
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80035e4:	f1b8 0f01 	cmp.w	r8, #1
 80035e8:	d1ba      	bne.n	8003560 <ip4_reass+0x134>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:609
    ipr->datagram_len += IP_HLEN;
 80035ea:	8ba3      	ldrh	r3, [r4, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:616
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80035ec:	f104 011c 	add.w	r1, r4, #28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:609
    ipr->datagram_len += IP_HLEN;
 80035f0:	3314      	adds	r3, #20
 80035f2:	83a3      	strh	r3, [r4, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:612
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80035f4:	6863      	ldr	r3, [r4, #4]
 80035f6:	685e      	ldr	r6, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:616
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80035f8:	f104 0308 	add.w	r3, r4, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:612
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80035fc:	6835      	ldr	r5, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:616
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80035fe:	4632      	mov	r2, r6
 8003600:	f853 0b04 	ldr.w	r0, [r3], #4
 8003604:	428b      	cmp	r3, r1
 8003606:	f842 0b04 	str.w	r0, [r2], #4
 800360a:	d1f9      	bne.n	8003600 <ip4_reass+0x1d4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:617
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800360c:	8ba0      	ldrh	r0, [r4, #28]
 800360e:	f007 f8af 	bl	800a770 <lwip_htons>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:618
    IPH_OFFSET_SET(fraghdr, 0);
 8003612:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:617
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8003614:	8070      	strh	r0, [r6, #2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:618
    IPH_OFFSET_SET(fraghdr, 0);
 8003616:	71b3      	strb	r3, [r6, #6]
 8003618:	71f3      	strb	r3, [r6, #7]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:619
    IPH_CHKSUM_SET(fraghdr, 0);
 800361a:	72b3      	strb	r3, [r6, #10]
 800361c:	72f3      	strb	r3, [r6, #11]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:627
    p = ipr->p;
 800361e:	6866      	ldr	r6, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:630
    while (r != NULL) {
 8003620:	2d00      	cmp	r5, #0
 8003622:	d169      	bne.n	80036f8 <ip4_reass+0x2cc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:640
    if (ipr == reassdatagrams) {
 8003624:	4b3d      	ldr	r3, [pc, #244]	; (800371c <ip4_reass+0x2f0>)
 8003626:	681b      	ldr	r3, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:644
        if (ipr_prev->next == ipr) {
 8003628:	42a3      	cmp	r3, r4
 800362a:	d002      	beq.n	8003632 <ip4_reass+0x206>
 800362c:	461d      	mov	r5, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:643
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800362e:	2b00      	cmp	r3, #0
 8003630:	d170      	bne.n	8003714 <ip4_reass+0x2e8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:651
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8003632:	4629      	mov	r1, r5
 8003634:	4620      	mov	r0, r4
 8003636:	f7ff fde1 	bl	80031fc <ip_reass_dequeue_datagram>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:654
    ip_reass_pbufcount -= pbuf_clen(p);
 800363a:	4630      	mov	r0, r6
 800363c:	f007 facc 	bl	800abd8 <pbuf_clen>
 8003640:	883b      	ldrh	r3, [r7, #0]
 8003642:	1a18      	subs	r0, r3, r0
 8003644:	8038      	strh	r0, [r7, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:670
}
 8003646:	4630      	mov	r0, r6
 8003648:	b003      	add	sp, #12
 800364a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
ip_reass_chain_frag_into_datagram_and_validate():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:390
        if (iprh->end > iprh_tmp->start) {
 800364e:	428b      	cmp	r3, r1
 8003650:	d845      	bhi.n	80036de <ip4_reass+0x2b2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:439
      ipr->p = new_p;
 8003652:	6067      	str	r7, [r4, #4]
 8003654:	e7a9      	b.n	80035aa <ip4_reass+0x17e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:399
    } else if (iprh->start == iprh_tmp->start) {
 8003656:	d042      	beq.n	80036de <ip4_reass+0x2b2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:403
    } else if (iprh->start < iprh_tmp->end) {
 8003658:	f8be 2006 	ldrh.w	r2, [lr, #6]
 800365c:	4282      	cmp	r2, r0
 800365e:	d83e      	bhi.n	80036de <ip4_reass+0x2b2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:409
      if (iprh_prev != NULL) {
 8003660:	b125      	cbz	r5, 800366c <ip4_reass+0x240>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:410
        if (iprh_prev->end != iprh_tmp->start) {
 8003662:	88ea      	ldrh	r2, [r5, #6]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:413
          valid = 0;
 8003664:	428a      	cmp	r2, r1
 8003666:	bf18      	it	ne
 8003668:	f04f 0800 	movne.w	r8, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:417
    q = iprh_tmp->next_pbuf;
 800366c:	f8de 2000 	ldr.w	r2, [lr]
 8003670:	4675      	mov	r5, lr
 8003672:	e759      	b.n	8003528 <ip4_reass+0xfc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:427
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8003674:	88eb      	ldrh	r3, [r5, #6]
 8003676:	4283      	cmp	r3, r0
 8003678:	d906      	bls.n	8003688 <ip4_reass+0x25c>
 800367a:	4b29      	ldr	r3, [pc, #164]	; (8003720 <ip4_reass+0x2f4>)
 800367c:	f240 12ab 	movw	r2, #427	; 0x1ab
 8003680:	492a      	ldr	r1, [pc, #168]	; (800372c <ip4_reass+0x300>)
 8003682:	4829      	ldr	r0, [pc, #164]	; (8003728 <ip4_reass+0x2fc>)
 8003684:	f009 fc8a 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:429
      iprh_prev->next_pbuf = new_p;
 8003688:	602f      	str	r7, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:430
      if (iprh_prev->end != iprh->start) {
 800368a:	88ea      	ldrh	r2, [r5, #6]
 800368c:	88b3      	ldrh	r3, [r6, #4]
 800368e:	429a      	cmp	r2, r3
 8003690:	e789      	b.n	80035a6 <ip4_reass+0x17a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:450
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8003692:	6863      	ldr	r3, [r4, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d093      	beq.n	80035c0 <ip4_reass+0x194>
 8003698:	6859      	ldr	r1, [r3, #4]
 800369a:	888b      	ldrh	r3, [r1, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d18f      	bne.n	80035c0 <ip4_reass+0x194>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:455
        q = iprh->next_pbuf;
 80036a0:	6833      	ldr	r3, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:456
        while (q != NULL) {
 80036a2:	b99b      	cbnz	r3, 80036cc <ip4_reass+0x2a0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:469
          LWIP_ASSERT("sanity check",
 80036a4:	42b1      	cmp	r1, r6
 80036a6:	d106      	bne.n	80036b6 <ip4_reass+0x28a>
 80036a8:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <ip4_reass+0x2f4>)
 80036aa:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80036ae:	4920      	ldr	r1, [pc, #128]	; (8003730 <ip4_reass+0x304>)
 80036b0:	481d      	ldr	r0, [pc, #116]	; (8003728 <ip4_reass+0x2fc>)
 80036b2:	f009 fc73 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:471
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80036b6:	6833      	ldr	r3, [r6, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d083      	beq.n	80035c4 <ip4_reass+0x198>
 80036bc:	4b18      	ldr	r3, [pc, #96]	; (8003720 <ip4_reass+0x2f4>)
 80036be:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80036c2:	491c      	ldr	r1, [pc, #112]	; (8003734 <ip4_reass+0x308>)
 80036c4:	4818      	ldr	r0, [pc, #96]	; (8003728 <ip4_reass+0x2fc>)
 80036c6:	f009 fc69 	bl	800cf9c <iprintf>
ip4_reass():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:587
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80036ca:	e77b      	b.n	80035c4 <ip4_reass+0x198>
ip_reass_chain_frag_into_datagram_and_validate():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:457
          iprh = (struct ip_reass_helper*)q->payload;
 80036cc:	685a      	ldr	r2, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:458
          if (iprh_prev->end != iprh->start) {
 80036ce:	88f0      	ldrh	r0, [r6, #6]
 80036d0:	8893      	ldrh	r3, [r2, #4]
 80036d2:	4298      	cmp	r0, r3
 80036d4:	f47f af74 	bne.w	80035c0 <ip4_reass+0x194>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:463
          q = iprh->next_pbuf;
 80036d8:	6813      	ldr	r3, [r2, #0]
 80036da:	4616      	mov	r6, r2
 80036dc:	e7e1      	b.n	80036a2 <ip4_reass+0x276>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:485
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80036de:	4638      	mov	r0, r7
 80036e0:	f007 fa7a 	bl	800abd8 <pbuf_clen>
 80036e4:	4a0c      	ldr	r2, [pc, #48]	; (8003718 <ip4_reass+0x2ec>)
 80036e6:	8813      	ldrh	r3, [r2, #0]
 80036e8:	1a18      	subs	r0, r3, r0
 80036ea:	8010      	strh	r0, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:486
  pbuf_free(new_p);
 80036ec:	4638      	mov	r0, r7
 80036ee:	f007 f8c9 	bl	800a884 <pbuf_free>
ip4_reass():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:587
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80036f2:	e732      	b.n	800355a <ip4_reass+0x12e>
ip_reass_chain_frag_into_datagram_and_validate():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:482
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80036f4:	4698      	mov	r8, r3
 80036f6:	e765      	b.n	80035c4 <ip4_reass+0x198>
ip4_reass():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:631
      iprh = (struct ip_reass_helper*)r->payload;
 80036f8:	f8d5 8004 	ldr.w	r8, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:634
      pbuf_header(r, -IP_HLEN);
 80036fc:	f06f 0113 	mvn.w	r1, #19
 8003700:	4628      	mov	r0, r5
 8003702:	f007 f8b9 	bl	800a878 <pbuf_header>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:635
      pbuf_cat(p, r);
 8003706:	4629      	mov	r1, r5
 8003708:	4630      	mov	r0, r6
 800370a:	f007 fa89 	bl	800ac20 <pbuf_cat>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:636
      r = iprh->next_pbuf;
 800370e:	f8d8 5000 	ldr.w	r5, [r8]
 8003712:	e785      	b.n	8003620 <ip4_reass+0x1f4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:644
        if (ipr_prev->next == ipr) {
 8003714:	682b      	ldr	r3, [r5, #0]
 8003716:	e787      	b.n	8003628 <ip4_reass+0x1fc>
 8003718:	20007d9e 	.word	0x20007d9e
 800371c:	20007da0 	.word	0x20007da0
 8003720:	0801e554 	.word	0x0801e554
 8003724:	0801e4ee 	.word	0x0801e4ee
 8003728:	0800e36a 	.word	0x0800e36a
 800372c:	0801e4d0 	.word	0x0801e4d0
 8003730:	0801e525 	.word	0x0801e525
 8003734:	0801e532 	.word	0x0801e532
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:562
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8003738:	88e8      	ldrh	r0, [r5, #6]
 800373a:	f007 f819 	bl	800a770 <lwip_htons>
 800373e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8003742:	2800      	cmp	r0, #0
 8003744:	f47f aec0 	bne.w	80034c8 <ip4_reass+0x9c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:563 (discriminator 1)
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8003748:	89e0      	ldrh	r0, [r4, #14]
 800374a:	f007 f811 	bl	800a770 <lwip_htons>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:562 (discriminator 1)
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800374e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8003752:	2800      	cmp	r0, #0
 8003754:	f43f aeb8 	beq.w	80034c8 <ip4_reass+0x9c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:568
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8003758:	462b      	mov	r3, r5
 800375a:	f104 0208 	add.w	r2, r4, #8
 800375e:	f105 0114 	add.w	r1, r5, #20
 8003762:	f853 0b04 	ldr.w	r0, [r3], #4
 8003766:	428b      	cmp	r3, r1
 8003768:	f842 0b04 	str.w	r0, [r2], #4
 800376c:	d1f9      	bne.n	8003762 <ip4_reass+0x336>
 800376e:	e6ab      	b.n	80034c8 <ip4_reass+0x9c>
ip_reass_chain_frag_into_datagram_and_validate():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:445
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8003770:	f1bb 0f00 	cmp.w	fp, #0
 8003774:	f43f af24 	beq.w	80035c0 <ip4_reass+0x194>
 8003778:	f04f 0800 	mov.w	r8, #0
 800377c:	e718      	b.n	80035b0 <ip4_reass+0x184>
ip4_reass():
 800377e:	bf00      	nop

08003780 <ip4_frag>:
ip4_frag():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:728
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8003780:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:719
{
 8003782:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:728
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8003786:	f1b3 0814 	subs.w	r8, r3, #20
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:719
{
 800378a:	b08b      	sub	sp, #44	; 0x2c
 800378c:	4607      	mov	r7, r0
 800378e:	468b      	mov	fp, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:728
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8003790:	bf48      	it	mi
 8003792:	f1a3 080d 	submi.w	r8, r3, #13
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:719
{
 8003796:	9208      	str	r2, [sp, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:728
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8003798:	ea4f 08e8 	mov.w	r8, r8, asr #3
 800379c:	fa1f f388 	uxth.w	r3, r8
 80037a0:	9307      	str	r3, [sp, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:735
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 80037a2:	6843      	ldr	r3, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:737
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80037a4:	781e      	ldrb	r6, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:735
  original_iphdr = (struct ip_hdr *)p->payload;
 80037a6:	9302      	str	r3, [sp, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:737
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80037a8:	f006 060f 	and.w	r6, r6, #15
 80037ac:	00b6      	lsls	r6, r6, #2
 80037ae:	2e14      	cmp	r6, #20
 80037b0:	d00b      	beq.n	80037ca <ip4_frag+0x4a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:737 (discriminator 1)
 80037b2:	4b5b      	ldr	r3, [pc, #364]	; (8003920 <ip4_frag+0x1a0>)
 80037b4:	f240 22e1 	movw	r2, #737	; 0x2e1
 80037b8:	495a      	ldr	r1, [pc, #360]	; (8003924 <ip4_frag+0x1a4>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:742 (discriminator 1)

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80037ba:	485b      	ldr	r0, [pc, #364]	; (8003928 <ip4_frag+0x1a8>)
 80037bc:	f009 fbee 	bl	800cf9c <iprintf>
 80037c0:	f06f 0005 	mvn.w	r0, #5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:861
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 80037c4:	b00b      	add	sp, #44	; 0x2c
 80037c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:740
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80037ca:	9b02      	ldr	r3, [sp, #8]
 80037cc:	88d8      	ldrh	r0, [r3, #6]
 80037ce:	f006 ffcf 	bl	800a770 <lwip_htons>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:741
  ofo = tmp & IP_OFFMASK;
 80037d2:	f3c0 030c 	ubfx	r3, r0, #0, #13
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:742
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80037d6:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:741
  ofo = tmp & IP_OFFMASK;
 80037da:	9304      	str	r3, [sp, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:742
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80037dc:	d004      	beq.n	80037e8 <ip4_frag+0x68>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:742 (discriminator 1)
 80037de:	4b50      	ldr	r3, [pc, #320]	; (8003920 <ip4_frag+0x1a0>)
 80037e0:	f240 22e6 	movw	r2, #742	; 0x2e6
 80037e4:	4951      	ldr	r1, [pc, #324]	; (800392c <ip4_frag+0x1ac>)
 80037e6:	e7e8      	b.n	80037ba <ip4_frag+0x3a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:744
  left = p->tot_len - IP_HLEN;
 80037e8:	893d      	ldrh	r5, [r7, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:748
    fragsize = LWIP_MIN(left, nfb * 8);
 80037ea:	fa1f f888 	uxth.w	r8, r8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:744
  left = p->tot_len - IP_HLEN;
 80037ee:	3d14      	subs	r5, #20
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:748
    fragsize = LWIP_MIN(left, nfb * 8);
 80037f0:	ea4f 03c8 	mov.w	r3, r8, lsl #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:744
  left = p->tot_len - IP_HLEN;
 80037f4:	b2ad      	uxth	r5, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:748
    fragsize = LWIP_MIN(left, nfb * 8);
 80037f6:	9306      	str	r3, [sp, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:746
  while (left) {
 80037f8:	b90d      	cbnz	r5, 80037fe <ip4_frag+0x7e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:857
  return ERR_OK;
 80037fa:	4628      	mov	r0, r5
 80037fc:	e7e2      	b.n	80037c4 <ip4_frag+0x44>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:748
    fragsize = LWIP_MIN(left, nfb * 8);
 80037fe:	9b06      	ldr	r3, [sp, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:772
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8003800:	2200      	movs	r2, #0
 8003802:	2114      	movs	r1, #20
 8003804:	2002      	movs	r0, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:748
    fragsize = LWIP_MIN(left, nfb * 8);
 8003806:	42ab      	cmp	r3, r5
 8003808:	bfa8      	it	ge
 800380a:	462b      	movge	r3, r5
 800380c:	b29b      	uxth	r3, r3
 800380e:	9305      	str	r3, [sp, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:772
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8003810:	f007 f8a0 	bl	800a954 <pbuf_alloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:773
    if (rambuf == NULL) {
 8003814:	4680      	mov	r8, r0
 8003816:	b370      	cbz	r0, 8003876 <ip4_frag+0xf6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:776
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8003818:	897b      	ldrh	r3, [r7, #10]
 800381a:	2b13      	cmp	r3, #19
 800381c:	d806      	bhi.n	800382c <ip4_frag+0xac>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:776 (discriminator 1)
 800381e:	4b40      	ldr	r3, [pc, #256]	; (8003920 <ip4_frag+0x1a0>)
 8003820:	f240 3209 	movw	r2, #777	; 0x309
 8003824:	4942      	ldr	r1, [pc, #264]	; (8003930 <ip4_frag+0x1b0>)
 8003826:	4840      	ldr	r0, [pc, #256]	; (8003928 <ip4_frag+0x1a8>)
 8003828:	f009 fbb8 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:778
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800382c:	9b02      	ldr	r3, [sp, #8]
 800382e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003832:	4619      	mov	r1, r3
 8003834:	3114      	adds	r1, #20
 8003836:	f853 0b04 	ldr.w	r0, [r3], #4
 800383a:	428b      	cmp	r3, r1
 800383c:	f842 0b04 	str.w	r0, [r2], #4
 8003840:	d1f9      	bne.n	8003836 <ip4_frag+0xb6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:779
    iphdr = (struct ip_hdr *)rambuf->payload;
 8003842:	f8d8 3004 	ldr.w	r3, [r8, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:781
    left_to_copy = fragsize;
 8003846:	f8dd 9014 	ldr.w	r9, [sp, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:779
    iphdr = (struct ip_hdr *)rambuf->payload;
 800384a:	9303      	str	r3, [sp, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:782
    while (left_to_copy) {
 800384c:	f1b9 0f00 	cmp.w	r9, #0
 8003850:	d037      	beq.n	80038c2 <ip4_frag+0x142>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:784
      u16_t plen = p->len - poff;
 8003852:	897c      	ldrh	r4, [r7, #10]
 8003854:	1ba4      	subs	r4, r4, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:785
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8003856:	b2a4      	uxth	r4, r4
 8003858:	454c      	cmp	r4, r9
 800385a:	bf28      	it	cs
 800385c:	464c      	movcs	r4, r9
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:787
      if (!newpbuflen) {
 800385e:	b914      	cbnz	r4, 8003866 <ip4_frag+0xe6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:816
        p = p->next;
 8003860:	683f      	ldr	r7, [r7, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:815
        poff = 0;
 8003862:	2600      	movs	r6, #0
 8003864:	e7f2      	b.n	800384c <ip4_frag+0xcc>
ip_frag_alloc_pbuf_custom_ref():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:679
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8003866:	2005      	movs	r0, #5
 8003868:	f008 fcfc 	bl	800c264 <memp_malloc>
ip4_frag():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:793
      if (pcr == NULL) {
 800386c:	4682      	mov	sl, r0
 800386e:	b928      	cbnz	r0, 800387c <ip4_frag+0xfc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:802
        pbuf_free(rambuf);
 8003870:	4640      	mov	r0, r8
 8003872:	f007 f807 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:860
  return ERR_MEM;
 8003876:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800387a:	e7a3      	b.n	80037c4 <ip4_frag+0x44>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:798
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800387c:	9401      	str	r4, [sp, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4621      	mov	r1, r4
 8003884:	4433      	add	r3, r6
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	4603      	mov	r3, r0
 800388a:	2004      	movs	r0, #4
 800388c:	f006 ffc4 	bl	800a818 <pbuf_alloced_custom>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:800
      if (newpbuf == NULL) {
 8003890:	b918      	cbnz	r0, 800389a <ip4_frag+0x11a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:801
        ip_frag_free_pbuf_custom_ref(pcr);
 8003892:	4650      	mov	r0, sl
 8003894:	f7ff fd84 	bl	80033a0 <ip_frag_free_pbuf_custom_ref>
 8003898:	e7ea      	b.n	8003870 <ip4_frag+0xf0>
 800389a:	9009      	str	r0, [sp, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:813
      left_to_copy -= newpbuflen;
 800389c:	eba9 0904 	sub.w	r9, r9, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:805
      pbuf_ref(p);
 80038a0:	4638      	mov	r0, r7
 80038a2:	f007 f9a1 	bl	800abe8 <pbuf_ref>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:807
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80038a6:	4b23      	ldr	r3, [pc, #140]	; (8003934 <ip4_frag+0x1b4>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:813
      left_to_copy -= newpbuflen;
 80038a8:	fa1f f989 	uxth.w	r9, r9
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:806
      pcr->original = p;
 80038ac:	f8ca 7014 	str.w	r7, [sl, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:807
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80038b0:	f8ca 3010 	str.w	r3, [sl, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:812
      pbuf_cat(rambuf, newpbuf);
 80038b4:	4640      	mov	r0, r8
 80038b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80038b8:	f007 f9b2 	bl	800ac20 <pbuf_cat>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:814
      if (left_to_copy) {
 80038bc:	f1b9 0f00 	cmp.w	r9, #0
 80038c0:	d1ce      	bne.n	8003860 <ip4_frag+0xe0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:826
    tmp = (IP_OFFMASK & (ofo));
 80038c2:	9b04      	ldr	r3, [sp, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:819
    poff += newpbuflen;
 80038c4:	4426      	add	r6, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:826
    tmp = (IP_OFFMASK & (ofo));
 80038c6:	f3c3 000c 	ubfx	r0, r3, #0, #13
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:823
    last = (left <= netif->mtu - IP_HLEN);
 80038ca:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:819
    poff += newpbuflen;
 80038ce:	b2b6      	uxth	r6, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:823
    last = (left <= netif->mtu - IP_HLEN);
 80038d0:	3b13      	subs	r3, #19
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:827
    if (!last) {
 80038d2:	429d      	cmp	r5, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:828
      tmp = tmp | IP_MF;
 80038d4:	bfa8      	it	ge
 80038d6:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:830
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80038da:	f006 ff49 	bl	800a770 <lwip_htons>
 80038de:	9b03      	ldr	r3, [sp, #12]
 80038e0:	80d8      	strh	r0, [r3, #6]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:831
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80038e2:	9b05      	ldr	r3, [sp, #20]
 80038e4:	f103 0014 	add.w	r0, r3, #20
 80038e8:	b280      	uxth	r0, r0
 80038ea:	f006 ff41 	bl	800a770 <lwip_htons>
 80038ee:	9b03      	ldr	r3, [sp, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:832
    IPH_CHKSUM_SET(iphdr, 0);
 80038f0:	9a03      	ldr	r2, [sp, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:842
    netif->output(netif, rambuf, dest);
 80038f2:	4641      	mov	r1, r8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:831
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80038f4:	8058      	strh	r0, [r3, #2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:832
    IPH_CHKSUM_SET(iphdr, 0);
 80038f6:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:842
    netif->output(netif, rambuf, dest);
 80038f8:	4658      	mov	r0, fp
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:832
    IPH_CHKSUM_SET(iphdr, 0);
 80038fa:	7293      	strb	r3, [r2, #10]
 80038fc:	72d3      	strb	r3, [r2, #11]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:842
    netif->output(netif, rambuf, dest);
 80038fe:	f8db 3014 	ldr.w	r3, [fp, #20]
 8003902:	9a08      	ldr	r2, [sp, #32]
 8003904:	4798      	blx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:852
    pbuf_free(rambuf);
 8003906:	4640      	mov	r0, r8
 8003908:	f006 ffbc 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:853
    left -= fragsize;
 800390c:	9b05      	ldr	r3, [sp, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:854
    ofo += nfb;
 800390e:	9a07      	ldr	r2, [sp, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:853
    left -= fragsize;
 8003910:	1aed      	subs	r5, r5, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:854
    ofo += nfb;
 8003912:	9b04      	ldr	r3, [sp, #16]
 8003914:	4413      	add	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:853
    left -= fragsize;
 8003916:	b2ad      	uxth	r5, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_frag.c:854
    ofo += nfb;
 8003918:	b29b      	uxth	r3, r3
 800391a:	9304      	str	r3, [sp, #16]
 800391c:	e76c      	b.n	80037f8 <ip4_frag+0x78>
 800391e:	bf00      	nop
 8003920:	0801e554 	.word	0x0801e554
 8003924:	0801e46f 	.word	0x0801e46f
 8003928:	0800e36a 	.word	0x0800e36a
 800392c:	0801e496 	.word	0x0801e496
 8003930:	0801e4b0 	.word	0x0801e4b0
 8003934:	080033cd 	.word	0x080033cd

08003938 <etharp_free_entry>:
etharp_free_entry():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:171
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8003938:	b570      	push	{r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:175
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800393a:	2618      	movs	r6, #24
 800393c:	4c07      	ldr	r4, [pc, #28]	; (800395c <etharp_free_entry+0x24>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:171
{
 800393e:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:175
  if (arp_table[i].q != NULL) {
 8003940:	4346      	muls	r6, r0
 8003942:	59a0      	ldr	r0, [r4, r6]
 8003944:	b118      	cbz	r0, 800394e <etharp_free_entry+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:178
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8003946:	f006 ff9d 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:179
    arp_table[i].q = NULL;
 800394a:	2300      	movs	r3, #0
 800394c:	51a3      	str	r3, [r4, r6]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:182
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800394e:	2318      	movs	r3, #24
 8003950:	fb03 4405 	mla	r4, r3, r5, r4
 8003954:	2300      	movs	r3, #0
 8003956:	7523      	strb	r3, [r4, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:190
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8003958:	bd70      	pop	{r4, r5, r6, pc}
 800395a:	bf00      	nop
 800395c:	20007da4 	.word	0x20007da4

08003960 <etharp_raw>:
etharp_raw():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1107
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8003960:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003964:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003966:	4689      	mov	r9, r1
 8003968:	4692      	mov	sl, r2
 800396a:	4698      	mov	r8, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1112
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800396c:	4607      	mov	r7, r0
 800396e:	b930      	cbnz	r0, 800397e <etharp_raw+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1112 (discriminator 1)
 8003970:	4b2c      	ldr	r3, [pc, #176]	; (8003a24 <etharp_raw+0xc4>)
 8003972:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8003976:	492c      	ldr	r1, [pc, #176]	; (8003a28 <etharp_raw+0xc8>)
 8003978:	482c      	ldr	r0, [pc, #176]	; (8003a2c <etharp_raw+0xcc>)
 800397a:	f009 fb0f 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1115

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800397e:	2200      	movs	r2, #0
 8003980:	211c      	movs	r1, #28
 8003982:	2002      	movs	r0, #2
 8003984:	f006 ffe6 	bl	800a954 <pbuf_alloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1117
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8003988:	4606      	mov	r6, r0
 800398a:	2800      	cmp	r0, #0
 800398c:	d047      	beq.n	8003a1e <etharp_raw+0xbe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1123
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800398e:	8943      	ldrh	r3, [r0, #10]
 8003990:	2b1b      	cmp	r3, #27
 8003992:	d806      	bhi.n	80039a2 <etharp_raw+0x42>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1123 (discriminator 1)
 8003994:	4b23      	ldr	r3, [pc, #140]	; (8003a24 <etharp_raw+0xc4>)
 8003996:	f240 4264 	movw	r2, #1124	; 0x464
 800399a:	4925      	ldr	r1, [pc, #148]	; (8003a30 <etharp_raw+0xd0>)
 800399c:	4823      	ldr	r0, [pc, #140]	; (8003a2c <etharp_raw+0xcc>)
 800399e:	f009 fafd 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1126
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80039a2:	6874      	ldr	r4, [r6, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1128
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80039a4:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80039a8:	f006 fee2 	bl	800a770 <lwip_htons>
 80039ac:	80e0      	strh	r0, [r4, #6]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1130

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80039ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80039b2:	2b06      	cmp	r3, #6
 80039b4:	d006      	beq.n	80039c4 <etharp_raw+0x64>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1130 (discriminator 1)
 80039b6:	4b1b      	ldr	r3, [pc, #108]	; (8003a24 <etharp_raw+0xc4>)
 80039b8:	f240 426b 	movw	r2, #1131	; 0x46b
 80039bc:	491d      	ldr	r1, [pc, #116]	; (8003a34 <etharp_raw+0xd4>)
 80039be:	481b      	ldr	r0, [pc, #108]	; (8003a2c <etharp_raw+0xcc>)
 80039c0:	f009 faec 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1134
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80039c4:	f8d8 3000 	ldr.w	r3, [r8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1157
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80039c8:	464a      	mov	r2, r9
 80039ca:	4631      	mov	r1, r6
 80039cc:	4638      	mov	r0, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1134
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80039ce:	60a3      	str	r3, [r4, #8]
 80039d0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80039d4:	81a3      	strh	r3, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1135
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80039d6:	682b      	ldr	r3, [r5, #0]
 80039d8:	f8c4 3012 	str.w	r3, [r4, #18]
 80039dc:	88ab      	ldrh	r3, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1141
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80039de:	2500      	movs	r5, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1135
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80039e0:	82e3      	strh	r3, [r4, #22]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1138
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80039e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f8c4 300e 	str.w	r3, [r4, #14]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1139
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80039ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039ec:	681b      	ldr	r3, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1141
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80039ee:	7025      	strb	r5, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1139
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80039f0:	61a3      	str	r3, [r4, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1141
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80039f2:	2301      	movs	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1142
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80039f4:	70e5      	strb	r5, [r4, #3]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1141
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80039f6:	7063      	strb	r3, [r4, #1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1142
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80039f8:	2308      	movs	r3, #8
 80039fa:	70a3      	strb	r3, [r4, #2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1144
  hdr->hwlen = ETH_HWADDR_LEN;
 80039fc:	2306      	movs	r3, #6
 80039fe:	7123      	strb	r3, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1145
  hdr->protolen = sizeof(ip4_addr_t);
 8003a00:	2304      	movs	r3, #4
 8003a02:	7163      	strb	r3, [r4, #5]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1157
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8003a04:	f640 0306 	movw	r3, #2054	; 0x806
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	4653      	mov	r3, sl
 8003a0c:	f7fd f8f6 	bl	8000bfc <ethernet_output>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1162
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8003a10:	4630      	mov	r0, r6
 8003a12:	f006 ff37 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1166
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8003a16:	4628      	mov	r0, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1167
}
 8003a18:	b002      	add	sp, #8
 8003a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1121
    return ERR_MEM;
 8003a1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a22:	e7f9      	b.n	8003a18 <etharp_raw+0xb8>
 8003a24:	0801e707 	.word	0x0801e707
 8003a28:	0801e8ef 	.word	0x0801e8ef
 8003a2c:	0800e36a 	.word	0x0800e36a
 8003a30:	0801e770 	.word	0x0801e770
 8003a34:	0801e7a1 	.word	0x0801e7a1

08003a38 <etharp_find_entry.isra.0>:
etharp_find_entry():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:258
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8003a38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a3c:	4b3d      	ldr	r3, [pc, #244]	; (8003b34 <etharp_find_entry.isra.0+0xfc>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:264
  s8_t old_queue = ARP_TABLE_SIZE;
 8003a3e:	220a      	movs	r2, #10
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:258
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8003a40:	4604      	mov	r4, r0
 8003a42:	2000      	movs	r0, #0
 8003a44:	9101      	str	r1, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:260
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8003a46:	4696      	mov	lr, r2
 8003a48:	4611      	mov	r1, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:266
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8003a4a:	4682      	mov	sl, r0
 8003a4c:	4681      	mov	r9, r0
 8003a4e:	4680      	mov	r8, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:261
  s8_t empty = ARP_TABLE_SIZE;
 8003a50:	4694      	mov	ip, r2
 8003a52:	461d      	mov	r5, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:288
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8003a54:	f1bc 0f0a 	cmp.w	ip, #10
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:286
    u8_t state = arp_table[i].state;
 8003a58:	f893 b014 	ldrb.w	fp, [r3, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:288
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8003a5c:	d129      	bne.n	8003ab2 <etharp_find_entry.isra.0+0x7a>
 8003a5e:	f1bb 0f00 	cmp.w	fp, #0
 8003a62:	d129      	bne.n	8003ab8 <etharp_find_entry.isra.0+0x80>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:291
      empty = i;
 8003a64:	fa4f fc80 	sxtb.w	ip, r0
 8003a68:	3001      	adds	r0, #1
 8003a6a:	3318      	adds	r3, #24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:285
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8003a6c:	280a      	cmp	r0, #10
 8003a6e:	d1f1      	bne.n	8003a54 <etharp_find_entry.isra.0+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:340
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8003a70:	9b01      	ldr	r3, [sp, #4]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d15b      	bne.n	8003b2e <etharp_find_entry.isra.0+0xf6>
 8003a76:	f1bc 0f0a 	cmp.w	ip, #10
 8003a7a:	d03c      	beq.n	8003af6 <etharp_find_entry.isra.0+0xbe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:358
    i = empty;
 8003a7c:	fa5f f68c 	uxtb.w	r6, ip
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:390
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8003a80:	2318      	movs	r3, #24
 8003a82:	fb03 5306 	mla	r3, r3, r6, r5
 8003a86:	7d1b      	ldrb	r3, [r3, #20]
 8003a88:	b133      	cbz	r3, 8003a98 <etharp_find_entry.isra.0+0x60>
 8003a8a:	4b2b      	ldr	r3, [pc, #172]	; (8003b38 <etharp_find_entry.isra.0+0x100>)
 8003a8c:	f240 1287 	movw	r2, #391	; 0x187
 8003a90:	492a      	ldr	r1, [pc, #168]	; (8003b3c <etharp_find_entry.isra.0+0x104>)
 8003a92:	482b      	ldr	r0, [pc, #172]	; (8003b40 <etharp_find_entry.isra.0+0x108>)
 8003a94:	f009 fa82 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:394
  if (ipaddr != NULL) {
 8003a98:	b124      	cbz	r4, 8003aa4 <etharp_find_entry.isra.0+0x6c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:396
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8003a9a:	2318      	movs	r3, #24
 8003a9c:	6822      	ldr	r2, [r4, #0]
 8003a9e:	fb03 5306 	mla	r3, r3, r6, r5
 8003aa2:	605a      	str	r2, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:398
  arp_table[i].ctime = 0;
 8003aa4:	2318      	movs	r3, #24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:402
  return (err_t)i;
 8003aa6:	b270      	sxtb	r0, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:398
  arp_table[i].ctime = 0;
 8003aa8:	fb03 5506 	mla	r5, r3, r6, r5
 8003aac:	2300      	movs	r3, #0
 8003aae:	826b      	strh	r3, [r5, #18]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:402
  return (err_t)i;
 8003ab0:	e008      	b.n	8003ac4 <etharp_find_entry.isra.0+0x8c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:292
    } else if (state != ETHARP_STATE_EMPTY) {
 8003ab2:	f1bb 0f00 	cmp.w	fp, #0
 8003ab6:	d0d7      	beq.n	8003a68 <etharp_find_entry.isra.0+0x30>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:296
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8003ab8:	b13c      	cbz	r4, 8003aca <etharp_find_entry.isra.0+0x92>
 8003aba:	6827      	ldr	r7, [r4, #0]
 8003abc:	685e      	ldr	r6, [r3, #4]
 8003abe:	42b7      	cmp	r7, r6
 8003ac0:	d103      	bne.n	8003aca <etharp_find_entry.isra.0+0x92>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:303
        return i;
 8003ac2:	b240      	sxtb	r0, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:403
}
 8003ac4:	b003      	add	sp, #12
 8003ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:306
      if (state == ETHARP_STATE_PENDING) {
 8003aca:	f1bb 0f01 	cmp.w	fp, #1
 8003ace:	8a5f      	ldrh	r7, [r3, #18]
 8003ad0:	d10c      	bne.n	8003aec <etharp_find_entry.isra.0+0xb4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:308
        if (arp_table[i].q != NULL) {
 8003ad2:	681e      	ldr	r6, [r3, #0]
 8003ad4:	b126      	cbz	r6, 8003ae0 <etharp_find_entry.isra.0+0xa8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:309
          if (arp_table[i].ctime >= age_queue) {
 8003ad6:	4547      	cmp	r7, r8
 8003ad8:	d3c6      	bcc.n	8003a68 <etharp_find_entry.isra.0+0x30>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:310
            old_queue = i;
 8003ada:	b242      	sxtb	r2, r0
 8003adc:	46b8      	mov	r8, r7
 8003ade:	e7c3      	b.n	8003a68 <etharp_find_entry.isra.0+0x30>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:316
          if (arp_table[i].ctime >= age_pending) {
 8003ae0:	454f      	cmp	r7, r9
 8003ae2:	d3c1      	bcc.n	8003a68 <etharp_find_entry.isra.0+0x30>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:317
            old_pending = i;
 8003ae4:	fa4f fe80 	sxtb.w	lr, r0
 8003ae8:	46b9      	mov	r9, r7
 8003aea:	e7bd      	b.n	8003a68 <etharp_find_entry.isra.0+0x30>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:329
          if (arp_table[i].ctime >= age_stable) {
 8003aec:	4557      	cmp	r7, sl
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:330
            old_stable = i;
 8003aee:	bf24      	itt	cs
 8003af0:	b241      	sxtbcs	r1, r0
 8003af2:	46ba      	movcs	sl, r7
 8003af4:	e7b8      	b.n	8003a68 <etharp_find_entry.isra.0+0x30>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:362
    if (old_stable < ARP_TABLE_SIZE) {
 8003af6:	290a      	cmp	r1, #10
 8003af8:	d00f      	beq.n	8003b1a <etharp_find_entry.isra.0+0xe2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:367
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8003afa:	2318      	movs	r3, #24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:364
      i = old_stable;
 8003afc:	b2ce      	uxtb	r6, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:367
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8003afe:	4359      	muls	r1, r3
 8003b00:	586b      	ldr	r3, [r5, r1]
 8003b02:	b133      	cbz	r3, 8003b12 <etharp_find_entry.isra.0+0xda>
 8003b04:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <etharp_find_entry.isra.0+0x100>)
 8003b06:	f240 126f 	movw	r2, #367	; 0x16f
 8003b0a:	490e      	ldr	r1, [pc, #56]	; (8003b44 <etharp_find_entry.isra.0+0x10c>)
 8003b0c:	480c      	ldr	r0, [pc, #48]	; (8003b40 <etharp_find_entry.isra.0+0x108>)
 8003b0e:	f009 fa45 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:386
    etharp_free_entry(i);
 8003b12:	4630      	mov	r0, r6
 8003b14:	f7ff ff10 	bl	8003938 <etharp_free_entry>
 8003b18:	e7b2      	b.n	8003a80 <etharp_find_entry.isra.0+0x48>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:369
    } else if (old_pending < ARP_TABLE_SIZE) {
 8003b1a:	f1be 0f0a 	cmp.w	lr, #10
 8003b1e:	d002      	beq.n	8003b26 <etharp_find_entry.isra.0+0xee>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:371
      i = old_pending;
 8003b20:	fa5f f68e 	uxtb.w	r6, lr
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:372
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
 8003b24:	e7f5      	b.n	8003b12 <etharp_find_entry.isra.0+0xda>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:374
    } else if (old_queue < ARP_TABLE_SIZE) {
 8003b26:	2a0a      	cmp	r2, #10
 8003b28:	d001      	beq.n	8003b2e <etharp_find_entry.isra.0+0xf6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:376
      i = old_queue;
 8003b2a:	b2d6      	uxtb	r6, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:377
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
 8003b2c:	e7f1      	b.n	8003b12 <etharp_find_entry.isra.0+0xda>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:344
    return (s8_t)ERR_MEM;
 8003b2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b32:	e7c7      	b.n	8003ac4 <etharp_find_entry.isra.0+0x8c>
 8003b34:	20007da4 	.word	0x20007da4
 8003b38:	0801e707 	.word	0x0801e707
 8003b3c:	0801e651 	.word	0x0801e651
 8003b40:	0800e36a 	.word	0x0800e36a
 8003b44:	0801e63a 	.word	0x0801e63a

08003b48 <etharp_cleanup_netif>:
etharp_cleanup_netif():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:560
{
 8003b48:	b570      	push	{r4, r5, r6, lr}
 8003b4a:	4606      	mov	r6, r0
 8003b4c:	4d07      	ldr	r5, [pc, #28]	; (8003b6c <etharp_cleanup_netif+0x24>)
 8003b4e:	2400      	movs	r4, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:565
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8003b50:	7d2b      	ldrb	r3, [r5, #20]
 8003b52:	b12b      	cbz	r3, 8003b60 <etharp_cleanup_netif+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:565 (discriminator 1)
 8003b54:	68ab      	ldr	r3, [r5, #8]
 8003b56:	42b3      	cmp	r3, r6
 8003b58:	d102      	bne.n	8003b60 <etharp_cleanup_netif+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:566
      etharp_free_entry(i);
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f7ff feec 	bl	8003938 <etharp_free_entry>
 8003b60:	3401      	adds	r4, #1
 8003b62:	3518      	adds	r5, #24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:563 (discriminator 2)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8003b64:	2c0a      	cmp	r4, #10
 8003b66:	d1f3      	bne.n	8003b50 <etharp_cleanup_netif+0x8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:569
}
 8003b68:	bd70      	pop	{r4, r5, r6, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20007da4 	.word	0x20007da4

08003b70 <etharp_input>:
etharp_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:642
{
 8003b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b74:	4680      	mov	r8, r0
 8003b76:	b086      	sub	sp, #24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:648
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8003b78:	460c      	mov	r4, r1
 8003b7a:	b949      	cbnz	r1, 8003b90 <etharp_input+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:648 (discriminator 1)
 8003b7c:	4b49      	ldr	r3, [pc, #292]	; (8003ca4 <etharp_input+0x134>)
 8003b7e:	f44f 7222 	mov.w	r2, #648	; 0x288
 8003b82:	4949      	ldr	r1, [pc, #292]	; (8003ca8 <etharp_input+0x138>)
 8003b84:	4849      	ldr	r0, [pc, #292]	; (8003cac <etharp_input+0x13c>)
 8003b86:	f009 fa09 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:740
}
 8003b8a:	b006      	add	sp, #24
 8003b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:650 (discriminator 2)
  hdr = (struct etharp_hdr *)p->payload;
 8003b90:	6846      	ldr	r6, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:653 (discriminator 2)
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8003b92:	8833      	ldrh	r3, [r6, #0]
 8003b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b98:	d108      	bne.n	8003bac <etharp_input+0x3c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:653 (discriminator 1)
 8003b9a:	7933      	ldrb	r3, [r6, #4]
 8003b9c:	2b06      	cmp	r3, #6
 8003b9e:	d105      	bne.n	8003bac <etharp_input+0x3c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:654
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8003ba0:	7973      	ldrb	r3, [r6, #5]
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d102      	bne.n	8003bac <etharp_input+0x3c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:655
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8003ba6:	8873      	ldrh	r3, [r6, #2]
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d003      	beq.n	8003bb4 <etharp_input+0x44>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:739 (discriminator 2)
  pbuf_free(p);
 8003bac:	4640      	mov	r0, r8
 8003bae:	f006 fe69 	bl	800a884 <pbuf_free>
 8003bb2:	e7ea      	b.n	8003b8a <etharp_input+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:676
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8003bb4:	f8d6 300e 	ldr.w	r3, [r6, #14]
 8003bb8:	f106 0708 	add.w	r7, r6, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:680
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8003bbc:	684d      	ldr	r5, [r1, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:676
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8003bbe:	9305      	str	r3, [sp, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:677
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8003bc0:	69b3      	ldr	r3, [r6, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:680
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8003bc2:	b115      	cbz	r5, 8003bca <etharp_input+0x5a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:692
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8003bc4:	429d      	cmp	r5, r3
 8003bc6:	d059      	beq.n	8003c7c <etharp_input+0x10c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:681
    for_us = 0;
 8003bc8:	2500      	movs	r5, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:692
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8003bca:	f04f 0902 	mov.w	r9, #2
etharp_update_arp_entry():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:427 (discriminator 4)
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8003bce:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8003bd2:	2b06      	cmp	r3, #6
 8003bd4:	d006      	beq.n	8003be4 <etharp_input+0x74>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:427
 8003bd6:	4b33      	ldr	r3, [pc, #204]	; (8003ca4 <etharp_input+0x134>)
 8003bd8:	f240 12ab 	movw	r2, #427	; 0x1ab
 8003bdc:	4934      	ldr	r1, [pc, #208]	; (8003cb0 <etharp_input+0x140>)
 8003bde:	4833      	ldr	r0, [pc, #204]	; (8003cac <etharp_input+0x13c>)
 8003be0:	f009 f9dc 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:433
  if (ip4_addr_isany(ipaddr) ||
 8003be4:	9805      	ldr	r0, [sp, #20]
 8003be6:	2800      	cmp	r0, #0
 8003be8:	d03c      	beq.n	8003c64 <etharp_input+0xf4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:434
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8003bea:	4621      	mov	r1, r4
 8003bec:	f000 fb1e 	bl	800422c <ip4_addr_isbroadcast_u32>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:433
  if (ip4_addr_isany(ipaddr) ||
 8003bf0:	4682      	mov	sl, r0
 8003bf2:	bbb8      	cbnz	r0, 8003c64 <etharp_input+0xf4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:435
      ip4_addr_ismulticast(ipaddr)) {
 8003bf4:	9b05      	ldr	r3, [sp, #20]
 8003bf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:434
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8003bfa:	2be0      	cmp	r3, #224	; 0xe0
 8003bfc:	d032      	beq.n	8003c64 <etharp_input+0xf4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:440
  i = etharp_find_entry(ipaddr, flags, netif);
 8003bfe:	4649      	mov	r1, r9
 8003c00:	a805      	add	r0, sp, #20
 8003c02:	f7ff ff19 	bl	8003a38 <etharp_find_entry.isra.0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:442
  if (i < 0) {
 8003c06:	2800      	cmp	r0, #0
 8003c08:	db2c      	blt.n	8003c64 <etharp_input+0xf4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:457
    arp_table[i].state = ETHARP_STATE_STABLE;
 8003c0a:	2218      	movs	r2, #24
 8003c0c:	4b29      	ldr	r3, [pc, #164]	; (8003cb4 <etharp_input+0x144>)
 8003c0e:	f04f 0e02 	mov.w	lr, #2
 8003c12:	fb02 f100 	mul.w	r1, r2, r0
 8003c16:	eb03 0c01 	add.w	ip, r3, r1
 8003c1a:	f88c e014 	strb.w	lr, [ip, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:467
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8003c1e:	f04f 0e0c 	mov.w	lr, #12
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:461
  arp_table[i].netif = netif;
 8003c22:	f8cc 4008 	str.w	r4, [ip, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:467
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8003c26:	fb12 e200 	smlabb	r2, r2, r0, lr
 8003c2a:	6838      	ldr	r0, [r7, #0]
 8003c2c:	eb03 0e02 	add.w	lr, r3, r2
 8003c30:	5098      	str	r0, [r3, r2]
 8003c32:	88ba      	ldrh	r2, [r7, #4]
 8003c34:	f8ae 2004 	strh.w	r2, [lr, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:483
  if (arp_table[i].q != NULL) {
 8003c38:	f853 9001 	ldr.w	r9, [r3, r1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:469
  arp_table[i].ctime = 0;
 8003c3c:	f8ac a012 	strh.w	sl, [ip, #18]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:483
  if (arp_table[i].q != NULL) {
 8003c40:	f1b9 0f00 	cmp.w	r9, #0
 8003c44:	d00e      	beq.n	8003c64 <etharp_input+0xf4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:485
    arp_table[i].q = NULL;
 8003c46:	f843 a001 	str.w	sl, [r3, r1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:488
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8003c4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c4e:	f104 022d 	add.w	r2, r4, #45	; 0x2d
 8003c52:	4649      	mov	r1, r9
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	4620      	mov	r0, r4
 8003c58:	463b      	mov	r3, r7
 8003c5a:	f7fc ffcf 	bl	8000bfc <ethernet_output>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:490
    pbuf_free(p);
 8003c5e:	4648      	mov	r0, r9
 8003c60:	f006 fe10 	bl	800a884 <pbuf_free>
etharp_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:696
  switch (hdr->opcode) {
 8003c64:	88f3      	ldrh	r3, [r6, #6]
 8003c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c6a:	d00a      	beq.n	8003c82 <etharp_input+0x112>
 8003c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c70:	d19c      	bne.n	8003bac <etharp_input+0x3c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:730
    dhcp_arp_reply(netif, &sipaddr);
 8003c72:	a905      	add	r1, sp, #20
 8003c74:	4620      	mov	r0, r4
 8003c76:	f001 f939 	bl	8004eec <dhcp_arp_reply>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:732
    break;
 8003c7a:	e797      	b.n	8003bac <etharp_input+0x3c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:684
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8003c7c:	2501      	movs	r5, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:692
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8003c7e:	46a9      	mov	r9, r5
 8003c80:	e7a5      	b.n	8003bce <etharp_input+0x5e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:705
    if (for_us) {
 8003c82:	2d00      	cmp	r5, #0
 8003c84:	d092      	beq.n	8003bac <etharp_input+0x3c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:707
      etharp_raw(netif,
 8003c86:	2202      	movs	r2, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:708
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8003c88:	f104 032d 	add.w	r3, r4, #45	; 0x2d
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:707
      etharp_raw(netif,
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	9203      	str	r2, [sp, #12]
 8003c90:	aa05      	add	r2, sp, #20
 8003c92:	4619      	mov	r1, r3
 8003c94:	e9cd 7201 	strd	r7, r2, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:709
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8003c98:	1d22      	adds	r2, r4, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:707
      etharp_raw(netif,
 8003c9a:	9200      	str	r2, [sp, #0]
 8003c9c:	463a      	mov	r2, r7
 8003c9e:	f7ff fe5f 	bl	8003960 <etharp_raw>
 8003ca2:	e783      	b.n	8003bac <etharp_input+0x3c>
 8003ca4:	0801e707 	.word	0x0801e707
 8003ca8:	0801e8ef 	.word	0x0801e8ef
 8003cac:	0800e36a 	.word	0x0800e36a
 8003cb0:	0801e699 	.word	0x0801e699
 8003cb4:	20007da4 	.word	0x20007da4

08003cb8 <etharp_request>:
etharp_request():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1200
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8003cb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003cba:	4602      	mov	r2, r0
etharp_request_dst():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1184
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8003cbc:	2401      	movs	r4, #1
 8003cbe:	f100 032d 	add.w	r3, r0, #45	; 0x2d
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1185
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8003cc2:	3204      	adds	r2, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1184
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8003cc4:	e9cd 1402 	strd	r1, r4, [sp, #8]
 8003cc8:	4904      	ldr	r1, [pc, #16]	; (8003cdc <etharp_request+0x24>)
 8003cca:	9200      	str	r2, [sp, #0]
 8003ccc:	9101      	str	r1, [sp, #4]
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4a03      	ldr	r2, [pc, #12]	; (8003ce0 <etharp_request+0x28>)
 8003cd2:	f7ff fe45 	bl	8003960 <etharp_raw>
etharp_request():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1203
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8003cd6:	b004      	add	sp, #16
 8003cd8:	bd10      	pop	{r4, pc}
 8003cda:	bf00      	nop
 8003cdc:	0800e392 	.word	0x0800e392
 8003ce0:	0800e2cc 	.word	0x0800e2cc

08003ce4 <etharp_tmr>:
etharp_tmr():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:200
{
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	4c13      	ldr	r4, [pc, #76]	; (8003d34 <etharp_tmr+0x50>)
 8003ce8:	2500      	movs	r5, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:227
        arp_table[i].state = ETHARP_STATE_STABLE;
 8003cea:	2602      	movs	r6, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:223
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8003cec:	2704      	movs	r7, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:206
    u8_t state = arp_table[i].state;
 8003cee:	7d22      	ldrb	r2, [r4, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:207
    if (state != ETHARP_STATE_EMPTY
 8003cf0:	b16a      	cbz	r2, 8003d0e <etharp_tmr+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:212
      arp_table[i].ctime++;
 8003cf2:	8a63      	ldrh	r3, [r4, #18]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	b29b      	uxth	r3, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:213
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8003cf8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:212
      arp_table[i].ctime++;
 8003cfc:	8263      	strh	r3, [r4, #18]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:213
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8003cfe:	d203      	bcs.n	8003d08 <etharp_tmr+0x24>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:213 (discriminator 1)
 8003d00:	2a01      	cmp	r2, #1
 8003d02:	d109      	bne.n	8003d18 <etharp_tmr+0x34>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:214
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d90f      	bls.n	8003d28 <etharp_tmr+0x44>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:220
        etharp_free_entry(i);
 8003d08:	4628      	mov	r0, r5
 8003d0a:	f7ff fe15 	bl	8003938 <etharp_free_entry>
 8003d0e:	3501      	adds	r5, #1
 8003d10:	3418      	adds	r4, #24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:205 (discriminator 2)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8003d12:	2d0a      	cmp	r5, #10
 8003d14:	d1eb      	bne.n	8003cee <etharp_tmr+0xa>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:234
}
 8003d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:221
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8003d18:	2a03      	cmp	r2, #3
 8003d1a:	d101      	bne.n	8003d20 <etharp_tmr+0x3c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:223
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8003d1c:	7527      	strb	r7, [r4, #20]
 8003d1e:	e7f6      	b.n	8003d0e <etharp_tmr+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:224
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8003d20:	2a04      	cmp	r2, #4
 8003d22:	d1f4      	bne.n	8003d0e <etharp_tmr+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:227
        arp_table[i].state = ETHARP_STATE_STABLE;
 8003d24:	7526      	strb	r6, [r4, #20]
 8003d26:	e7f2      	b.n	8003d0e <etharp_tmr+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:230
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8003d28:	1d21      	adds	r1, r4, #4
 8003d2a:	68a0      	ldr	r0, [r4, #8]
 8003d2c:	f7ff ffc4 	bl	8003cb8 <etharp_request>
 8003d30:	e7ed      	b.n	8003d0e <etharp_tmr+0x2a>
 8003d32:	bf00      	nop
 8003d34:	20007da4 	.word	0x20007da4

08003d38 <etharp_output_to_arp_index>:
etharp_output_to_arp_index():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:747
{
 8003d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:748
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8003d3c:	2318      	movs	r3, #24
 8003d3e:	4d25      	ldr	r5, [pc, #148]	; (8003dd4 <etharp_output_to_arp_index+0x9c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:747
{
 8003d40:	b085      	sub	sp, #20
 8003d42:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:748
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8003d44:	fb03 5302 	mla	r3, r3, r2, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:747
{
 8003d48:	4689      	mov	r9, r1
 8003d4a:	4614      	mov	r4, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:748
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8003d4c:	7d1b      	ldrb	r3, [r3, #20]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d806      	bhi.n	8003d60 <etharp_output_to_arp_index+0x28>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:748 (discriminator 1)
 8003d52:	4b21      	ldr	r3, [pc, #132]	; (8003dd8 <etharp_output_to_arp_index+0xa0>)
 8003d54:	f240 22ed 	movw	r2, #749	; 0x2ed
 8003d58:	4920      	ldr	r1, [pc, #128]	; (8003ddc <etharp_output_to_arp_index+0xa4>)
 8003d5a:	4821      	ldr	r0, [pc, #132]	; (8003de0 <etharp_output_to_arp_index+0xa8>)
 8003d5c:	f009 f91e 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:753
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8003d60:	2318      	movs	r3, #24
 8003d62:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8003d66:	f106 082d 	add.w	r8, r6, #45	; 0x2d
 8003d6a:	fb03 5404 	mla	r4, r3, r4, r5
 8003d6e:	00c9      	lsls	r1, r1, #3
 8003d70:	7d23      	ldrb	r3, [r4, #20]
 8003d72:	f101 070c 	add.w	r7, r1, #12
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	442f      	add	r7, r5
 8003d7a:	d10b      	bne.n	8003d94 <etharp_output_to_arp_index+0x5c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:754
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8003d7c:	8a63      	ldrh	r3, [r4, #18]
 8003d7e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8003d82:	d913      	bls.n	8003dac <etharp_output_to_arp_index+0x74>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:756
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8003d84:	3104      	adds	r1, #4
 8003d86:	4630      	mov	r0, r6
 8003d88:	4429      	add	r1, r5
 8003d8a:	f7ff ff95 	bl	8003cb8 <etharp_request>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:761
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8003d8e:	b908      	cbnz	r0, 8003d94 <etharp_output_to_arp_index+0x5c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:762
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8003d90:	2303      	movs	r3, #3
 8003d92:	7523      	strb	r3, [r4, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:767
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8003d94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d98:	4642      	mov	r2, r8
 8003d9a:	4649      	mov	r1, r9
 8003d9c:	4630      	mov	r0, r6
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	463b      	mov	r3, r7
 8003da2:	f7fc ff2b 	bl	8000bfc <ethernet_output>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:768
}
 8003da6:	b005      	add	sp, #20
 8003da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:759
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8003dac:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8003db0:	d3f0      	bcc.n	8003d94 <etharp_output_to_arp_index+0x5c>
etharp_request_dst():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1184
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8003db2:	2301      	movs	r3, #1
etharp_output_to_arp_index():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:761
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8003db4:	3104      	adds	r1, #4
etharp_request_dst():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1184
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8003db6:	463a      	mov	r2, r7
 8003db8:	4630      	mov	r0, r6
 8003dba:	9303      	str	r3, [sp, #12]
etharp_output_to_arp_index():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:761
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8003dbc:	4429      	add	r1, r5
etharp_request_dst():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1184
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8003dbe:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <etharp_output_to_arp_index+0xac>)
 8003dc0:	9102      	str	r1, [sp, #8]
 8003dc2:	4641      	mov	r1, r8
 8003dc4:	9301      	str	r3, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1185
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8003dc6:	1d33      	adds	r3, r6, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1184
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	4643      	mov	r3, r8
 8003dcc:	f7ff fdc8 	bl	8003960 <etharp_raw>
 8003dd0:	e7dd      	b.n	8003d8e <etharp_output_to_arp_index+0x56>
 8003dd2:	bf00      	nop
 8003dd4:	20007da4 	.word	0x20007da4
 8003dd8:	0801e707 	.word	0x0801e707
 8003ddc:	0801e6bd 	.word	0x0801e6bd
 8003de0:	0800e36a 	.word	0x0800e36a
 8003de4:	0800e392 	.word	0x0800e392

08003de8 <etharp_query>:
etharp_query():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:931
{
 8003de8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dec:	4688      	mov	r8, r1
 8003dee:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:938
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8003df0:	4601      	mov	r1, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:931
{
 8003df2:	4616      	mov	r6, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:938
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8003df4:	f8d8 0000 	ldr.w	r0, [r8]
 8003df8:	f000 fa18 	bl	800422c <ip4_addr_isbroadcast_u32>
 8003dfc:	2800      	cmp	r0, #0
 8003dfe:	d14d      	bne.n	8003e9c <etharp_query+0xb4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:939 (discriminator 1)
      ip4_addr_ismulticast(ipaddr) ||
 8003e00:	f8d8 3000 	ldr.w	r3, [r8]
 8003e04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:938 (discriminator 1)
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8003e08:	2ae0      	cmp	r2, #224	; 0xe0
 8003e0a:	d047      	beq.n	8003e9c <etharp_query+0xb4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:940
      ip4_addr_isany(ipaddr)) {
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d045      	beq.n	8003e9c <etharp_query+0xb4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:946
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8003e10:	2101      	movs	r1, #1
 8003e12:	4640      	mov	r0, r8
 8003e14:	f7ff fe10 	bl	8003a38 <etharp_find_entry.isra.0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:949
  if (i < 0) {
 8003e18:	1e05      	subs	r5, r0, #0
 8003e1a:	db42      	blt.n	8003ea2 <etharp_query+0xba>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:959
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8003e1c:	4f38      	ldr	r7, [pc, #224]	; (8003f00 <etharp_query+0x118>)
 8003e1e:	2318      	movs	r3, #24
 8003e20:	fb03 7305 	mla	r3, r3, r5, r7
 8003e24:	7d1a      	ldrb	r2, [r3, #20]
 8003e26:	2a00      	cmp	r2, #0
 8003e28:	d14f      	bne.n	8003eca <etharp_query+0xe2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:961
    arp_table[i].state = ETHARP_STATE_PENDING;
 8003e2a:	2201      	movs	r2, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:963
    arp_table[i].netif = netif;
 8003e2c:	609c      	str	r4, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:961
    arp_table[i].state = ETHARP_STATE_PENDING;
 8003e2e:	751a      	strb	r2, [r3, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:974
    result = etharp_request(netif, ipaddr);
 8003e30:	4641      	mov	r1, r8
 8003e32:	4620      	mov	r0, r4
 8003e34:	f7ff ff40 	bl	8003cb8 <etharp_request>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:981
    if (q == NULL) {
 8003e38:	2e00      	cmp	r6, #0
 8003e3a:	d14a      	bne.n	8003ed2 <etharp_query+0xea>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1084
}
 8003e3c:	b002      	add	sp, #8
 8003e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:995
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8003e42:	d1fb      	bne.n	8003e3c <etharp_query+0x54>
 8003e44:	4634      	mov	r4, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1004
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8003e46:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8003f08 <etharp_query+0x120>
 8003e4a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8003f0c <etharp_query+0x124>
 8003e4e:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8003f10 <etharp_query+0x128>
 8003e52:	8962      	ldrh	r2, [r4, #10]
 8003e54:	8923      	ldrh	r3, [r4, #8]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d108      	bne.n	8003e6c <etharp_query+0x84>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1004 (discriminator 1)
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	b133      	cbz	r3, 8003e6c <etharp_query+0x84>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1004 (discriminator 2)
 8003e5e:	4643      	mov	r3, r8
 8003e60:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8003e64:	4649      	mov	r1, r9
 8003e66:	4650      	mov	r0, sl
 8003e68:	f009 f898 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1005
      if (p->type != PBUF_ROM) {
 8003e6c:	7b23      	ldrb	r3, [r4, #12]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d119      	bne.n	8003ea6 <etharp_query+0xbe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1009
      p = p->next;
 8003e72:	6824      	ldr	r4, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1003
    while (p) {
 8003e74:	2c00      	cmp	r4, #0
 8003e76:	d1ec      	bne.n	8003e52 <etharp_query+0x6a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1023
      pbuf_ref(p);
 8003e78:	46b0      	mov	r8, r6
 8003e7a:	4630      	mov	r0, r6
 8003e7c:	f006 feb4 	bl	800abe8 <pbuf_ref>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1069
      if (arp_table[i].q != NULL) {
 8003e80:	2318      	movs	r3, #24
 8003e82:	fb03 f205 	mul.w	r2, r3, r5
 8003e86:	461c      	mov	r4, r3
 8003e88:	58b8      	ldr	r0, [r7, r2]
 8003e8a:	b108      	cbz	r0, 8003e90 <etharp_query+0xa8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1071
        pbuf_free(arp_table[i].q);
 8003e8c:	f006 fcfa 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1073
      arp_table[i].q = p;
 8003e90:	fb04 f305 	mul.w	r3, r4, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1074
      result = ERR_OK;
 8003e94:	2000      	movs	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1073
      arp_table[i].q = p;
 8003e96:	f847 8003 	str.w	r8, [r7, r3]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1075
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
 8003e9a:	e7cf      	b.n	8003e3c <etharp_query+0x54>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:942
    return ERR_ARG;
 8003e9c:	f06f 000f 	mvn.w	r0, #15
 8003ea0:	e7cc      	b.n	8003e3c <etharp_query+0x54>
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	e7ca      	b.n	8003e3c <etharp_query+0x54>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1013
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	8921      	ldrh	r1, [r4, #8]
 8003eaa:	2002      	movs	r0, #2
 8003eac:	f006 fd52 	bl	800a954 <pbuf_alloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1014
      if (p != NULL) {
 8003eb0:	4680      	mov	r8, r0
 8003eb2:	b138      	cbz	r0, 8003ec4 <etharp_query+0xdc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1015
        if (pbuf_copy(p, q) != ERR_OK) {
 8003eb4:	4631      	mov	r1, r6
 8003eb6:	f006 fef7 	bl	800aca8 <pbuf_copy>
 8003eba:	2800      	cmp	r0, #0
 8003ebc:	d0e0      	beq.n	8003e80 <etharp_query+0x98>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1016
          pbuf_free(p);
 8003ebe:	4640      	mov	r0, r8
 8003ec0:	f006 fce0 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:1080
      result = ERR_MEM;
 8003ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ec8:	e7b8      	b.n	8003e3c <etharp_query+0x54>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:972
  if (is_new_entry || (q == NULL)) {
 8003eca:	2e00      	cmp	r6, #0
 8003ecc:	d0b0      	beq.n	8003e30 <etharp_query+0x48>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:933
  err_t result = ERR_MEM;
 8003ece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:989
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8003ed2:	2318      	movs	r3, #24
 8003ed4:	fb03 7205 	mla	r2, r3, r5, r7
 8003ed8:	7d12      	ldrb	r2, [r2, #20]
 8003eda:	2a01      	cmp	r2, #1
 8003edc:	d9b1      	bls.n	8003e42 <etharp_query+0x5a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:991
    ETHARP_SET_HINT(netif, i);
 8003ede:	4a09      	ldr	r2, [pc, #36]	; (8003f04 <etharp_query+0x11c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:993
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8003ee0:	4631      	mov	r1, r6
 8003ee2:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:991
    ETHARP_SET_HINT(netif, i);
 8003ee4:	7015      	strb	r5, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:993
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8003ee6:	220c      	movs	r2, #12
 8003ee8:	fb13 2305 	smlabb	r3, r3, r5, r2
 8003eec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ef0:	443b      	add	r3, r7
 8003ef2:	9200      	str	r2, [sp, #0]
 8003ef4:	f104 022d 	add.w	r2, r4, #45	; 0x2d
 8003ef8:	f7fc fe80 	bl	8000bfc <ethernet_output>
 8003efc:	e79e      	b.n	8003e3c <etharp_query+0x54>
 8003efe:	bf00      	nop
 8003f00:	20007da4 	.word	0x20007da4
 8003f04:	20007e94 	.word	0x20007e94
 8003f08:	0801e707 	.word	0x0801e707
 8003f0c:	0801e6ed 	.word	0x0801e6ed
 8003f10:	0800e36a 	.word	0x0800e36a

08003f14 <etharp_output>:
etharp_output():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:790
{
 8003f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f16:	460e      	mov	r6, r1
 8003f18:	b085      	sub	sp, #20
 8003f1a:	4615      	mov	r5, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:795
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	b930      	cbnz	r0, 8003f2e <etharp_output+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:795 (discriminator 1)
 8003f20:	4b3d      	ldr	r3, [pc, #244]	; (8004018 <etharp_output+0x104>)
 8003f22:	f240 321b 	movw	r2, #795	; 0x31b
 8003f26:	493d      	ldr	r1, [pc, #244]	; (800401c <etharp_output+0x108>)
 8003f28:	483d      	ldr	r0, [pc, #244]	; (8004020 <etharp_output+0x10c>)
 8003f2a:	f009 f837 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:796
  LWIP_ASSERT("q != NULL", q != NULL);
 8003f2e:	b936      	cbnz	r6, 8003f3e <etharp_output+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:796 (discriminator 1)
 8003f30:	4b39      	ldr	r3, [pc, #228]	; (8004018 <etharp_output+0x104>)
 8003f32:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8003f36:	493b      	ldr	r1, [pc, #236]	; (8004024 <etharp_output+0x110>)
 8003f38:	4839      	ldr	r0, [pc, #228]	; (8004020 <etharp_output+0x10c>)
 8003f3a:	f009 f82f 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:797
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8003f3e:	b935      	cbnz	r5, 8003f4e <etharp_output+0x3a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:797 (discriminator 1)
 8003f40:	4b35      	ldr	r3, [pc, #212]	; (8004018 <etharp_output+0x104>)
 8003f42:	f240 321d 	movw	r2, #797	; 0x31d
 8003f46:	4938      	ldr	r1, [pc, #224]	; (8004028 <etharp_output+0x114>)
 8003f48:	4835      	ldr	r0, [pc, #212]	; (8004020 <etharp_output+0x10c>)
 8003f4a:	f009 f827 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:803
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8003f4e:	4621      	mov	r1, r4
 8003f50:	6828      	ldr	r0, [r5, #0]
 8003f52:	f000 f96b 	bl	800422c <ip4_addr_isbroadcast_u32>
 8003f56:	2800      	cmp	r0, #0
 8003f58:	d158      	bne.n	800400c <etharp_output+0xf8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:807
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8003f5a:	682b      	ldr	r3, [r5, #0]
 8003f5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f60:	2ae0      	cmp	r2, #224	; 0xe0
 8003f62:	d11b      	bne.n	8003f9c <etharp_output+0x88>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:809
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8003f64:	2301      	movs	r3, #1
 8003f66:	f8ad 3008 	strh.w	r3, [sp, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:811
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8003f6a:	235e      	movs	r3, #94	; 0x5e
 8003f6c:	f88d 300a 	strb.w	r3, [sp, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:812
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8003f70:	786b      	ldrb	r3, [r5, #1]
 8003f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f76:	f88d 300b 	strb.w	r3, [sp, #11]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:813
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8003f7a:	78ab      	ldrb	r3, [r5, #2]
 8003f7c:	f88d 300c 	strb.w	r3, [sp, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:814
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8003f80:	78eb      	ldrb	r3, [r5, #3]
 8003f82:	f88d 300d 	strb.w	r3, [sp, #13]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:816
    dest = &mcastaddr;
 8003f86:	ab02      	add	r3, sp, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:893
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8003f88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f8c:	4631      	mov	r1, r6
 8003f8e:	4620      	mov	r0, r4
 8003f90:	9200      	str	r2, [sp, #0]
 8003f92:	f104 022d 	add.w	r2, r4, #45	; 0x2d
 8003f96:	f7fc fe31 	bl	8000bfc <ethernet_output>
 8003f9a:	e01f      	b.n	8003fdc <etharp_output+0xc8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:822
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8003f9c:	6862      	ldr	r2, [r4, #4]
 8003f9e:	68a1      	ldr	r1, [r4, #8]
 8003fa0:	405a      	eors	r2, r3
 8003fa2:	420a      	tst	r2, r1
 8003fa4:	d008      	beq.n	8003fb8 <etharp_output+0xa4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:823 (discriminator 1)
        !ip4_addr_islinklocal(ipaddr)) {
 8003fa6:	b29b      	uxth	r3, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:822 (discriminator 1)
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8003fa8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d003      	beq.n	8003fb8 <etharp_output+0xa4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:841
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8003fb0:	68e3      	ldr	r3, [r4, #12]
 8003fb2:	b36b      	cbz	r3, 8004010 <etharp_output+0xfc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:843
            dst_addr = netif_ip4_gw(netif);
 8003fb4:	f104 050c 	add.w	r5, r4, #12
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:858
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8003fb8:	4b1c      	ldr	r3, [pc, #112]	; (800402c <etharp_output+0x118>)
 8003fba:	2018      	movs	r0, #24
 8003fbc:	491c      	ldr	r1, [pc, #112]	; (8004030 <etharp_output+0x11c>)
 8003fbe:	781a      	ldrb	r2, [r3, #0]
 8003fc0:	fb00 1002 	mla	r0, r0, r2, r1
 8003fc4:	7d01      	ldrb	r1, [r0, #20]
 8003fc6:	2901      	cmp	r1, #1
 8003fc8:	4619      	mov	r1, r3
 8003fca:	d909      	bls.n	8003fe0 <etharp_output+0xcc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:858 (discriminator 1)
 8003fcc:	682f      	ldr	r7, [r5, #0]
 8003fce:	6843      	ldr	r3, [r0, #4]
 8003fd0:	429f      	cmp	r7, r3
 8003fd2:	d105      	bne.n	8003fe0 <etharp_output+0xcc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:882
        return etharp_output_to_arp_index(netif, q, i);
 8003fd4:	4631      	mov	r1, r6
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	f7ff feae 	bl	8003d38 <etharp_output_to_arp_index>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:894
}
 8003fdc:	b005      	add	sp, #20
 8003fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fe0:	4b13      	ldr	r3, [pc, #76]	; (8004030 <etharp_output+0x11c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:790
{
 8003fe2:	2200      	movs	r2, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:875
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8003fe4:	7d18      	ldrb	r0, [r3, #20]
 8003fe6:	2801      	cmp	r0, #1
 8003fe8:	d906      	bls.n	8003ff8 <etharp_output+0xe4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:875 (discriminator 1)
 8003fea:	682f      	ldr	r7, [r5, #0]
 8003fec:	6858      	ldr	r0, [r3, #4]
 8003fee:	4287      	cmp	r7, r0
 8003ff0:	d102      	bne.n	8003ff8 <etharp_output+0xe4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:881
        ETHARP_SET_HINT(netif, i);
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	700a      	strb	r2, [r1, #0]
 8003ff6:	e7ed      	b.n	8003fd4 <etharp_output+0xc0>
 8003ff8:	3201      	adds	r2, #1
 8003ffa:	3318      	adds	r3, #24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:874 (discriminator 2)
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8003ffc:	2a0a      	cmp	r2, #10
 8003ffe:	d1f1      	bne.n	8003fe4 <etharp_output+0xd0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:887
    return etharp_query(netif, dst_addr, q);
 8004000:	4632      	mov	r2, r6
 8004002:	4629      	mov	r1, r5
 8004004:	4620      	mov	r0, r4
 8004006:	f7ff feef 	bl	8003de8 <etharp_query>
 800400a:	e7e7      	b.n	8003fdc <etharp_output+0xc8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:805
    dest = (const struct eth_addr *)&ethbroadcast;
 800400c:	4b09      	ldr	r3, [pc, #36]	; (8004034 <etharp_output+0x120>)
 800400e:	e7bb      	b.n	8003f88 <etharp_output+0x74>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/etharp.c:847
            return ERR_RTE;
 8004010:	f06f 0003 	mvn.w	r0, #3
 8004014:	e7e2      	b.n	8003fdc <etharp_output+0xc8>
 8004016:	bf00      	nop
 8004018:	0801e707 	.word	0x0801e707
 800401c:	0801e8ef 	.word	0x0801e8ef
 8004020:	0800e36a 	.word	0x0800e36a
 8004024:	08020342 	.word	0x08020342
 8004028:	0801e67a 	.word	0x0801e67a
 800402c:	20007e94 	.word	0x20007e94
 8004030:	20007da4 	.word	0x20007da4
 8004034:	0800e2cc 	.word	0x0800e2cc

08004038 <icmp_send_response.isra.0>:
icmp_send_response():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:333
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8004038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800403a:	4604      	mov	r4, r0
 800403c:	b087      	sub	sp, #28
 800403e:	460f      	mov	r7, r1
 8004040:	4616      	mov	r6, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:346

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8004042:	2124      	movs	r1, #36	; 0x24
 8004044:	2200      	movs	r2, #0
 8004046:	2001      	movs	r0, #1
 8004048:	f006 fc84 	bl	800a954 <pbuf_alloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:348
                 PBUF_RAM);
  if (q == NULL) {
 800404c:	4605      	mov	r5, r0
 800404e:	2800      	cmp	r0, #0
 8004050:	d039      	beq.n	80040c6 <icmp_send_response.isra.0+0x8e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:353
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8004052:	8943      	ldrh	r3, [r0, #10]
 8004054:	2b23      	cmp	r3, #35	; 0x23
 8004056:	d806      	bhi.n	8004066 <icmp_send_response.isra.0+0x2e>
 8004058:	4b1c      	ldr	r3, [pc, #112]	; (80040cc <icmp_send_response.isra.0+0x94>)
 800405a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800405e:	491c      	ldr	r1, [pc, #112]	; (80040d0 <icmp_send_response.isra.0+0x98>)
 8004060:	481c      	ldr	r0, [pc, #112]	; (80040d4 <icmp_send_response.isra.0+0x9c>)
 8004062:	f008 ff9b 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:356
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8004066:	6822      	ldr	r2, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:366
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8004068:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:363
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800406a:	686c      	ldr	r4, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:370
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800406c:	f102 001c 	add.w	r0, r2, #28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:366
  icmphdr->id = 0;
 8004070:	7123      	strb	r3, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:370
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8004072:	f104 0108 	add.w	r1, r4, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:366
  icmphdr->id = 0;
 8004076:	7163      	strb	r3, [r4, #5]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:367
  icmphdr->seqno = 0;
 8004078:	71a3      	strb	r3, [r4, #6]
 800407a:	71e3      	strb	r3, [r4, #7]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:370
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800407c:	4613      	mov	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:364
  icmphdr->type = type;
 800407e:	7027      	strb	r7, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:365
  icmphdr->code = code;
 8004080:	7066      	strb	r6, [r4, #1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:370
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8004082:	f853 6b04 	ldr.w	r6, [r3], #4
 8004086:	4283      	cmp	r3, r0
 8004088:	f841 6b04 	str.w	r6, [r1], #4
 800408c:	d1f9      	bne.n	8004082 <icmp_send_response.isra.0+0x4a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:373
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800408e:	68d3      	ldr	r3, [r2, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:381
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8004090:	a805      	add	r0, sp, #20
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:373
  ip4_addr_copy(iphdr_src, iphdr->src);
 8004092:	9305      	str	r3, [sp, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:381
  netif = ip4_route(&iphdr_src);
 8004094:	f7fe ff2e 	bl	8002ef4 <ip4_route>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:383
#endif
  if (netif != NULL) {
 8004098:	4607      	mov	r7, r0
 800409a:	b188      	cbz	r0, 80040c0 <icmp_send_response.isra.0+0x88>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:385
    /* calculate checksum */
    icmphdr->chksum = 0;
 800409c:	2600      	movs	r6, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:388
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800409e:	8969      	ldrh	r1, [r5, #10]
 80040a0:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:385
    icmphdr->chksum = 0;
 80040a2:	70a6      	strb	r6, [r4, #2]
 80040a4:	70e6      	strb	r6, [r4, #3]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:388
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80040a6:	f004 ff95 	bl	8008fd4 <inet_chksum>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:392
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80040aa:	2301      	movs	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:388
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80040ac:	8060      	strh	r0, [r4, #2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:392
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80040ae:	aa05      	add	r2, sp, #20
 80040b0:	9702      	str	r7, [sp, #8]
 80040b2:	4631      	mov	r1, r6
 80040b4:	4628      	mov	r0, r5
 80040b6:	e9cd 6300 	strd	r6, r3, [sp]
 80040ba:	23ff      	movs	r3, #255	; 0xff
 80040bc:	f7ff f88c 	bl	80031d8 <ip4_output_if>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:394
  }
  pbuf_free(q);
 80040c0:	4628      	mov	r0, r5
 80040c2:	f006 fbdf 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:395
}
 80040c6:	b007      	add	sp, #28
 80040c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040ca:	bf00      	nop
 80040cc:	0801e849 	.word	0x0801e849
 80040d0:	0801e8b0 	.word	0x0801e8b0
 80040d4:	0800e36a 	.word	0x0800e36a

080040d8 <icmp_input>:
icmp_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:94
  iphdr_in = ip4_current_header();
 80040d8:	4b49      	ldr	r3, [pc, #292]	; (8004200 <icmp_input+0x128>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:81
{
 80040da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:94
  iphdr_in = ip4_current_header();
 80040de:	f8d3 9008 	ldr.w	r9, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:81
{
 80040e2:	b085      	sub	sp, #20
 80040e4:	4604      	mov	r4, r0
 80040e6:	460f      	mov	r7, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:95
  hlen = IPH_HL(iphdr_in) * 4;
 80040e8:	f899 5000 	ldrb.w	r5, [r9]
 80040ec:	4698      	mov	r8, r3
 80040ee:	f005 050f 	and.w	r5, r5, #15
 80040f2:	00ad      	lsls	r5, r5, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:96
  if (hlen < IP_HLEN) {
 80040f4:	2d13      	cmp	r5, #19
 80040f6:	d92a      	bls.n	800414e <icmp_input+0x76>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:100
  if (p->len < sizeof(u16_t)*2) {
 80040f8:	8942      	ldrh	r2, [r0, #10]
 80040fa:	2a03      	cmp	r2, #3
 80040fc:	d927      	bls.n	800414e <icmp_input+0x76>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:105
  type = *((u8_t *)p->payload);
 80040fe:	6842      	ldr	r2, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:109
  switch (type) {
 8004100:	7812      	ldrb	r2, [r2, #0]
 8004102:	2a08      	cmp	r2, #8
 8004104:	d123      	bne.n	800414e <icmp_input+0x76>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:119
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8004106:	6958      	ldr	r0, [r3, #20]
 8004108:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800410c:	2ae0      	cmp	r2, #224	; 0xe0
 800410e:	d01e      	beq.n	800414e <icmp_input+0x76>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:129
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8004110:	6819      	ldr	r1, [r3, #0]
 8004112:	f000 f88b 	bl	800422c <ip4_addr_isbroadcast_u32>
 8004116:	4606      	mov	r6, r0
 8004118:	b9c8      	cbnz	r0, 800414e <icmp_input+0x76>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:139
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800411a:	8923      	ldrh	r3, [r4, #8]
 800411c:	2b07      	cmp	r3, #7
 800411e:	d916      	bls.n	800414e <icmp_input+0x76>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:155
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8004120:	f105 010e 	add.w	r1, r5, #14
 8004124:	4620      	mov	r0, r4
 8004126:	f006 fba7 	bl	800a878 <pbuf_header>
 800412a:	2800      	cmp	r0, #0
 800412c:	d058      	beq.n	80041e0 <icmp_input+0x108>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:161
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800412e:	8921      	ldrh	r1, [r4, #8]
 8004130:	4632      	mov	r2, r6
 8004132:	2002      	movs	r0, #2
 8004134:	4429      	add	r1, r5
 8004136:	b289      	uxth	r1, r1
 8004138:	f006 fc0c 	bl	800a954 <pbuf_alloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:162
      if (r == NULL) {
 800413c:	4606      	mov	r6, r0
 800413e:	b130      	cbz	r0, 800414e <icmp_input+0x76>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:166
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8004140:	8942      	ldrh	r2, [r0, #10]
 8004142:	f105 0308 	add.w	r3, r5, #8
 8004146:	429a      	cmp	r2, r3
 8004148:	d207      	bcs.n	800415a <icmp_input+0x82>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:182
        pbuf_free(r);
 800414a:	f006 fb9b 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:278
  pbuf_free(p);
 800414e:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:289
}
 8004150:	b005      	add	sp, #20
 8004152:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:278
  pbuf_free(p);
 8004156:	f006 bb95 	b.w	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:172
      MEMCPY(r->payload, iphdr_in, hlen);
 800415a:	4649      	mov	r1, r9
 800415c:	462a      	mov	r2, r5
 800415e:	6840      	ldr	r0, [r0, #4]
 8004160:	f008 ff06 	bl	800cf70 <memcpy>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:174
      if (pbuf_header(r, (s16_t)-hlen)) {
 8004164:	4269      	negs	r1, r5
 8004166:	4630      	mov	r0, r6
 8004168:	f006 fb86 	bl	800a878 <pbuf_header>
 800416c:	b138      	cbz	r0, 800417e <icmp_input+0xa6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:175 (discriminator 1)
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800416e:	4b25      	ldr	r3, [pc, #148]	; (8004204 <icmp_input+0x12c>)
 8004170:	22af      	movs	r2, #175	; 0xaf
 8004172:	4925      	ldr	r1, [pc, #148]	; (8004208 <icmp_input+0x130>)
 8004174:	4825      	ldr	r0, [pc, #148]	; (800420c <icmp_input+0x134>)
 8004176:	f008 ff11 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:182
        pbuf_free(r);
 800417a:	4630      	mov	r0, r6
 800417c:	e7e5      	b.n	800414a <icmp_input+0x72>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:180
      if (pbuf_copy(r, p) != ERR_OK) {
 800417e:	4621      	mov	r1, r4
 8004180:	4630      	mov	r0, r6
 8004182:	f006 fd91 	bl	800aca8 <pbuf_copy>
 8004186:	2800      	cmp	r0, #0
 8004188:	d1f7      	bne.n	800417a <icmp_input+0xa2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:186
      pbuf_free(p);
 800418a:	4620      	mov	r0, r4
 800418c:	4634      	mov	r4, r6
 800418e:	f006 fb79 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:201
    if (pbuf_header(p, (s16_t)hlen)) {
 8004192:	4629      	mov	r1, r5
 8004194:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:200
    iecho = (struct icmp_echo_hdr *)p->payload;
 8004196:	6866      	ldr	r6, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:201
    if (pbuf_header(p, (s16_t)hlen)) {
 8004198:	f006 fb6e 	bl	800a878 <pbuf_header>
 800419c:	2800      	cmp	r0, #0
 800419e:	d1d6      	bne.n	800414e <icmp_input+0x76>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:205
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 80041a0:	6861      	ldr	r1, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:212
        if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80041a2:	f64f 72f7 	movw	r2, #65527	; 0xfff7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:206
      ip4_addr_copy(iphdr->src, *src);
 80041a6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80041aa:	60cb      	str	r3, [r1, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:207
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80041ac:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80041b0:	610b      	str	r3, [r1, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:212
        if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80041b2:	8873      	ldrh	r3, [r6, #2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:208
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 80041b4:	7030      	strb	r0, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:243
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80041b6:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:212
        if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80041b8:	4293      	cmp	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:229
      IPH_CHKSUM_SET(iphdr, 0);
 80041ba:	f04f 0200 	mov.w	r2, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:213
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
 80041be:	bf8c      	ite	hi
 80041c0:	3309      	addhi	r3, #9
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:215
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
 80041c2:	3308      	addls	r3, #8
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	8073      	strh	r3, [r6, #2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:228
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80041c8:	23ff      	movs	r3, #255	; 0xff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:229
      IPH_CHKSUM_SET(iphdr, 0);
 80041ca:	728a      	strb	r2, [r1, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:228
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80041cc:	720b      	strb	r3, [r1, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:229
      IPH_CHKSUM_SET(iphdr, 0);
 80041ce:	72ca      	strb	r2, [r1, #11]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:243
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80041d0:	2101      	movs	r1, #1
 80041d2:	9702      	str	r7, [sp, #8]
 80041d4:	e9cd 2100 	strd	r2, r1, [sp]
 80041d8:	490d      	ldr	r1, [pc, #52]	; (8004210 <icmp_input+0x138>)
 80041da:	f7fe fffd 	bl	80031d8 <ip4_output_if>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:275
  pbuf_free(p);
 80041de:	e7b6      	b.n	800414e <icmp_input+0x76>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:191
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80041e0:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 80041e4:	4620      	mov	r0, r4
 80041e6:	31f2      	adds	r1, #242	; 0xf2
 80041e8:	b209      	sxth	r1, r1
 80041ea:	f006 fb45 	bl	800a878 <pbuf_header>
 80041ee:	2800      	cmp	r0, #0
 80041f0:	d0cf      	beq.n	8004192 <icmp_input+0xba>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:192 (discriminator 1)
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80041f2:	4b04      	ldr	r3, [pc, #16]	; (8004204 <icmp_input+0x12c>)
 80041f4:	22c0      	movs	r2, #192	; 0xc0
 80041f6:	4907      	ldr	r1, [pc, #28]	; (8004214 <icmp_input+0x13c>)
 80041f8:	4804      	ldr	r0, [pc, #16]	; (800420c <icmp_input+0x134>)
 80041fa:	f008 fecf 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:193 (discriminator 1)
        goto icmperr;
 80041fe:	e7a6      	b.n	800414e <icmp_input+0x76>
 8004200:	2000be1c 	.word	0x2000be1c
 8004204:	0801e849 	.word	0x0801e849
 8004208:	0801e7e2 	.word	0x0801e7e2
 800420c:	0800e36a 	.word	0x0800e36a
 8004210:	2000be30 	.word	0x2000be30
 8004214:	0801e817 	.word	0x0801e817

08004218 <icmp_dest_unreach>:
icmp_dest_unreach():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:304
  icmp_send_response(p, ICMP_DUR, t);
 8004218:	460a      	mov	r2, r1
 800421a:	3004      	adds	r0, #4
 800421c:	2103      	movs	r1, #3
 800421e:	f7ff bf0b 	b.w	8004038 <icmp_send_response.isra.0>

08004222 <icmp_time_exceeded>:
icmp_time_exceeded():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/icmp.c:319
  icmp_send_response(p, ICMP_TE, t);
 8004222:	460a      	mov	r2, r1
 8004224:	3004      	adds	r0, #4
 8004226:	210b      	movs	r1, #11
 8004228:	f7ff bf06 	b.w	8004038 <icmp_send_response.isra.0>

0800422c <ip4_addr_isbroadcast_u32>:
ip4_addr_isbroadcast_u32():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_addr.c:64
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800422c:	1e43      	subs	r3, r0, #1
 800422e:	3303      	adds	r3, #3
 8004230:	d812      	bhi.n	8004258 <ip4_addr_isbroadcast_u32+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_addr.c:68
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8004232:	f891 3033 	ldrb.w	r3, [r1, #51]	; 0x33
 8004236:	f013 0302 	ands.w	r3, r3, #2
 800423a:	d00b      	beq.n	8004254 <ip4_addr_isbroadcast_u32+0x28>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_addr.c:73
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800423c:	684a      	ldr	r2, [r1, #4]
 800423e:	4282      	cmp	r2, r0
 8004240:	d00c      	beq.n	800425c <ip4_addr_isbroadcast_u32+0x30>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_addr.c:76
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8004242:	688b      	ldr	r3, [r1, #8]
 8004244:	4042      	eors	r2, r0
 8004246:	421a      	tst	r2, r3
 8004248:	d108      	bne.n	800425c <ip4_addr_isbroadcast_u32+0x30>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_addr.c:78
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800424a:	43db      	mvns	r3, r3
 800424c:	4383      	bics	r3, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_addr.c:83
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800424e:	bf0c      	ite	eq
 8004250:	2301      	moveq	r3, #1
 8004252:	2300      	movne	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_addr.c:85
  }
}
 8004254:	4618      	mov	r0, r3
 8004256:	4770      	bx	lr
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_addr.c:66
    return 1;
 8004258:	2301      	movs	r3, #1
 800425a:	e7fb      	b.n	8004254 <ip4_addr_isbroadcast_u32+0x28>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/ip4_addr.c:83
    return 0;
 800425c:	2300      	movs	r3, #0
 800425e:	e7f9      	b.n	8004254 <ip4_addr_isbroadcast_u32+0x28>

08004260 <dhcp_set_state>:
dhcp_set_state():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1377
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 8004260:	7a43      	ldrb	r3, [r0, #9]
 8004262:	428b      	cmp	r3, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1379
    dhcp->state = new_state;
    dhcp->tries = 0;
 8004264:	bf1f      	itttt	ne
 8004266:	2300      	movne	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1378
    dhcp->state = new_state;
 8004268:	7241      	strbne	r1, [r0, #9]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1379
    dhcp->tries = 0;
 800426a:	7283      	strbne	r3, [r0, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1380
    dhcp->request_timeout = 0;
 800426c:	82c3      	strhne	r3, [r0, #22]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1382
  }
}
 800426e:	4770      	bx	lr

08004270 <dhcp_option_short>:
dhcp_option_short():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1409
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
}

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 8004270:	b538      	push	{r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1410
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8004272:	8a83      	ldrh	r3, [r0, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1409
{
 8004274:	4604      	mov	r4, r0
 8004276:	460d      	mov	r5, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1410
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8004278:	3302      	adds	r3, #2
 800427a:	2b44      	cmp	r3, #68	; 0x44
 800427c:	d906      	bls.n	800428c <dhcp_option_short+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1410 (discriminator 1)
 800427e:	4b0a      	ldr	r3, [pc, #40]	; (80042a8 <dhcp_option_short+0x38>)
 8004280:	f240 5282 	movw	r2, #1410	; 0x582
 8004284:	4909      	ldr	r1, [pc, #36]	; (80042ac <dhcp_option_short+0x3c>)
 8004286:	480a      	ldr	r0, [pc, #40]	; (80042b0 <dhcp_option_short+0x40>)
 8004288:	f008 fe88 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1411
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800428c:	8aa3      	ldrh	r3, [r4, #20]
 800428e:	0a28      	lsrs	r0, r5, #8
 8004290:	6922      	ldr	r2, [r4, #16]
 8004292:	18d1      	adds	r1, r2, r3
 8004294:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1412
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8004298:	1c99      	adds	r1, r3, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1411
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800429a:	3301      	adds	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1412
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 800429c:	82a1      	strh	r1, [r4, #20]
 800429e:	fa12 f383 	uxtah	r3, r2, r3
 80042a2:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1413
}
 80042a6:	bd38      	pop	{r3, r4, r5, pc}
 80042a8:	0801eb54 	.word	0x0801eb54
 80042ac:	0801ebbb 	.word	0x0801ebbb
 80042b0:	0800e36a 	.word	0x0800e36a

080042b4 <dhcp_option>:
dhcp_option():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1391
{
 80042b4:	b570      	push	{r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1392
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80042b6:	8a83      	ldrh	r3, [r0, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1391
{
 80042b8:	4615      	mov	r5, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1392
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80042ba:	3202      	adds	r2, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1391
{
 80042bc:	4604      	mov	r4, r0
 80042be:	460e      	mov	r6, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1392
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80042c0:	4413      	add	r3, r2
 80042c2:	2b44      	cmp	r3, #68	; 0x44
 80042c4:	d906      	bls.n	80042d4 <dhcp_option+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1392 (discriminator 1)
 80042c6:	4b0a      	ldr	r3, [pc, #40]	; (80042f0 <dhcp_option+0x3c>)
 80042c8:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 80042cc:	4909      	ldr	r1, [pc, #36]	; (80042f4 <dhcp_option+0x40>)
 80042ce:	480a      	ldr	r0, [pc, #40]	; (80042f8 <dhcp_option+0x44>)
 80042d0:	f008 fe64 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1393
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 80042d4:	8aa3      	ldrh	r3, [r4, #20]
 80042d6:	6922      	ldr	r2, [r4, #16]
 80042d8:	18d1      	adds	r1, r2, r3
 80042da:	f881 60f0 	strb.w	r6, [r1, #240]	; 0xf0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1394
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 80042de:	1c99      	adds	r1, r3, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1393
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 80042e0:	3301      	adds	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1394
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 80042e2:	82a1      	strh	r1, [r4, #20]
 80042e4:	fa12 f383 	uxtah	r3, r2, r3
 80042e8:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1395
}
 80042ec:	bd70      	pop	{r4, r5, r6, pc}
 80042ee:	bf00      	nop
 80042f0:	0801eb54 	.word	0x0801eb54
 80042f4:	0801ea91 	.word	0x0801ea91
 80042f8:	0800e36a 	.word	0x0800e36a

080042fc <dhcp_option_byte>:
dhcp_option_byte():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1402
{
 80042fc:	b538      	push	{r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1403
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 80042fe:	8a83      	ldrh	r3, [r0, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1402
{
 8004300:	4604      	mov	r4, r0
 8004302:	460d      	mov	r5, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1403
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8004304:	2b43      	cmp	r3, #67	; 0x43
 8004306:	d906      	bls.n	8004316 <dhcp_option_byte+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1403 (discriminator 1)
 8004308:	4b07      	ldr	r3, [pc, #28]	; (8004328 <dhcp_option_byte+0x2c>)
 800430a:	f240 527b 	movw	r2, #1403	; 0x57b
 800430e:	4907      	ldr	r1, [pc, #28]	; (800432c <dhcp_option_byte+0x30>)
 8004310:	4807      	ldr	r0, [pc, #28]	; (8004330 <dhcp_option_byte+0x34>)
 8004312:	f008 fe43 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1404
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8004316:	8aa2      	ldrh	r2, [r4, #20]
 8004318:	6923      	ldr	r3, [r4, #16]
 800431a:	1c51      	adds	r1, r2, #1
 800431c:	4413      	add	r3, r2
 800431e:	82a1      	strh	r1, [r4, #20]
 8004320:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1405
}
 8004324:	bd38      	pop	{r3, r4, r5, pc}
 8004326:	bf00      	nop
 8004328:	0801eb54 	.word	0x0801eb54
 800432c:	0801ead9 	.word	0x0801ead9
 8004330:	0800e36a 	.word	0x0800e36a

08004334 <dhcp_option_long>:
dhcp_option_long():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1417

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 8004334:	b538      	push	{r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1418
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8004336:	8a83      	ldrh	r3, [r0, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1417
{
 8004338:	4605      	mov	r5, r0
 800433a:	460c      	mov	r4, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1418
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800433c:	3304      	adds	r3, #4
 800433e:	2b44      	cmp	r3, #68	; 0x44
 8004340:	d906      	bls.n	8004350 <dhcp_option_long+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1418 (discriminator 1)
 8004342:	4b10      	ldr	r3, [pc, #64]	; (8004384 <dhcp_option_long+0x50>)
 8004344:	f240 528a 	movw	r2, #1418	; 0x58a
 8004348:	490f      	ldr	r1, [pc, #60]	; (8004388 <dhcp_option_long+0x54>)
 800434a:	4810      	ldr	r0, [pc, #64]	; (800438c <dhcp_option_long+0x58>)
 800434c:	f008 fe26 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1419
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8004350:	8aab      	ldrh	r3, [r5, #20]
 8004352:	0e20      	lsrs	r0, r4, #24
 8004354:	692a      	ldr	r2, [r5, #16]
 8004356:	18d1      	adds	r1, r2, r3
 8004358:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 800435c:	1c59      	adds	r1, r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1420
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800435e:	0c20      	lsrs	r0, r4, #16
 8004360:	fa12 f181 	uxtah	r1, r2, r1
 8004364:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 8004368:	1c99      	adds	r1, r3, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1421
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800436a:	0a20      	lsrs	r0, r4, #8
 800436c:	fa12 f181 	uxtah	r1, r2, r1
 8004370:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1422
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8004374:	1d19      	adds	r1, r3, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1421
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8004376:	3303      	adds	r3, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1422
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8004378:	82a9      	strh	r1, [r5, #20]
 800437a:	fa12 f383 	uxtah	r3, r2, r3
 800437e:	f883 40f0 	strb.w	r4, [r3, #240]	; 0xf0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1423
}
 8004382:	bd38      	pop	{r3, r4, r5, pc}
 8004384:	0801eb54 	.word	0x0801eb54
 8004388:	0801eb14 	.word	0x0801eb14
 800438c:	0800e36a 	.word	0x0800e36a

08004390 <dhcp_create_msg>:
dhcp_create_msg():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1803
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 8004390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004394:	460c      	mov	r4, r1
 8004396:	4616      	mov	r6, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1821
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8004398:	4607      	mov	r7, r0
 800439a:	b950      	cbnz	r0, 80043b2 <dhcp_create_msg+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1821 (discriminator 1)
 800439c:	4b63      	ldr	r3, [pc, #396]	; (800452c <dhcp_create_msg+0x19c>)
 800439e:	f240 721d 	movw	r2, #1821	; 0x71d
 80043a2:	4963      	ldr	r1, [pc, #396]	; (8004530 <dhcp_create_msg+0x1a0>)
 80043a4:	4863      	ldr	r0, [pc, #396]	; (8004534 <dhcp_create_msg+0x1a4>)
 80043a6:	f008 fdf9 	bl	800cf9c <iprintf>
 80043aa:	f06f 000f 	mvn.w	r0, #15
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1891
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  dhcp_option_byte(dhcp, message_type);
  return ERR_OK;
}
 80043ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1822 (discriminator 2)
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80043b2:	b949      	cbnz	r1, 80043c8 <dhcp_create_msg+0x38>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1822 (discriminator 1)
 80043b4:	4b5d      	ldr	r3, [pc, #372]	; (800452c <dhcp_create_msg+0x19c>)
 80043b6:	f240 721e 	movw	r2, #1822	; 0x71e
 80043ba:	495f      	ldr	r1, [pc, #380]	; (8004538 <dhcp_create_msg+0x1a8>)
 80043bc:	485d      	ldr	r0, [pc, #372]	; (8004534 <dhcp_create_msg+0x1a4>)
 80043be:	f008 fded 	bl	800cf9c <iprintf>
 80043c2:	f06f 0005 	mvn.w	r0, #5
 80043c6:	e7f2      	b.n	80043ae <dhcp_create_msg+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1823 (discriminator 2)
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 80043c8:	68cb      	ldr	r3, [r1, #12]
 80043ca:	b133      	cbz	r3, 80043da <dhcp_create_msg+0x4a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1823 (discriminator 1)
 80043cc:	4b57      	ldr	r3, [pc, #348]	; (800452c <dhcp_create_msg+0x19c>)
 80043ce:	f240 721f 	movw	r2, #1823	; 0x71f
 80043d2:	495a      	ldr	r1, [pc, #360]	; (800453c <dhcp_create_msg+0x1ac>)
 80043d4:	4857      	ldr	r0, [pc, #348]	; (8004534 <dhcp_create_msg+0x1a4>)
 80043d6:	f008 fde1 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1824
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 80043da:	6923      	ldr	r3, [r4, #16]
 80043dc:	b133      	cbz	r3, 80043ec <dhcp_create_msg+0x5c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1824 (discriminator 1)
 80043de:	4b53      	ldr	r3, [pc, #332]	; (800452c <dhcp_create_msg+0x19c>)
 80043e0:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 80043e4:	4956      	ldr	r1, [pc, #344]	; (8004540 <dhcp_create_msg+0x1b0>)
 80043e6:	4853      	ldr	r0, [pc, #332]	; (8004534 <dhcp_create_msg+0x1a4>)
 80043e8:	f008 fdd8 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1825
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80043ec:	2200      	movs	r2, #0
 80043ee:	f44f 719a 	mov.w	r1, #308	; 0x134
 80043f2:	4610      	mov	r0, r2
 80043f4:	f006 faae 	bl	800a954 <pbuf_alloc>
 80043f8:	60e0      	str	r0, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1826
  if (dhcp->p_out == NULL) {
 80043fa:	2800      	cmp	r0, #0
 80043fc:	f000 8092 	beq.w	8004524 <dhcp_create_msg+0x194>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1831
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8004400:	8943      	ldrh	r3, [r0, #10]
 8004402:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8004406:	d206      	bcs.n	8004416 <dhcp_create_msg+0x86>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1831 (discriminator 1)
 8004408:	4b48      	ldr	r3, [pc, #288]	; (800452c <dhcp_create_msg+0x19c>)
 800440a:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800440e:	494d      	ldr	r1, [pc, #308]	; (8004544 <dhcp_create_msg+0x1b4>)
 8004410:	4848      	ldr	r0, [pc, #288]	; (8004534 <dhcp_create_msg+0x1a4>)
 8004412:	f008 fdc3 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1835
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8004416:	2e03      	cmp	r6, #3
 8004418:	d102      	bne.n	8004420 <dhcp_create_msg+0x90>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1835 (discriminator 1)
 800441a:	7a63      	ldrb	r3, [r4, #9]
 800441c:	2b03      	cmp	r3, #3
 800441e:	d107      	bne.n	8004430 <dhcp_create_msg+0xa0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1837
    if (dhcp->tries == 0) {
 8004420:	7aa3      	ldrb	r3, [r4, #10]
 8004422:	4d49      	ldr	r5, [pc, #292]	; (8004548 <dhcp_create_msg+0x1b8>)
 8004424:	b913      	cbnz	r3, 800442c <dhcp_create_msg+0x9c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1839
      xid = LWIP_RAND();
 8004426:	f008 fdd1 	bl	800cfcc <rand>
 800442a:	6028      	str	r0, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1844
    dhcp->xid = xid;
 800442c:	682b      	ldr	r3, [r5, #0]
 800442e:	6023      	str	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1849
  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8004430:	68e3      	ldr	r3, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1855
  dhcp->msg_out->hops = 0;
 8004432:	2500      	movs	r5, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1849
  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8004434:	f8d3 8004 	ldr.w	r8, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1851
  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8004438:	2301      	movs	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1849
  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 800443a:	f8c4 8010 	str.w	r8, [r4, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1851
  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 800443e:	f888 3000 	strb.w	r3, [r8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1853
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 8004442:	f888 3001 	strb.w	r3, [r8, #1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1854
  dhcp->msg_out->hlen = netif->hwaddr_len;
 8004446:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1855
  dhcp->msg_out->hops = 0;
 800444a:	f888 5003 	strb.w	r5, [r8, #3]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1854
  dhcp->msg_out->hlen = netif->hwaddr_len;
 800444e:	f888 3002 	strb.w	r3, [r8, #2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1856
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 8004452:	6820      	ldr	r0, [r4, #0]
 8004454:	f006 f98f 	bl	800a776 <lwip_htonl>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1857
  dhcp->msg_out->secs = 0;
 8004458:	6923      	ldr	r3, [r4, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1863
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800445a:	2e04      	cmp	r6, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1856
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 800445c:	f8c8 0004 	str.w	r0, [r8, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1857
  dhcp->msg_out->secs = 0;
 8004460:	721d      	strb	r5, [r3, #8]
 8004462:	725d      	strb	r5, [r3, #9]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1860
  dhcp->msg_out->flags = 0;
 8004464:	729d      	strb	r5, [r3, #10]
 8004466:	72dd      	strb	r5, [r3, #11]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1861
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 8004468:	731d      	strb	r5, [r3, #12]
 800446a:	735d      	strb	r5, [r3, #13]
 800446c:	739d      	strb	r5, [r3, #14]
 800446e:	73dd      	strb	r5, [r3, #15]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1863
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8004470:	d008      	beq.n	8004484 <dhcp_create_msg+0xf4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1863 (discriminator 2)
 8004472:	1ff2      	subs	r2, r6, #7
 8004474:	2a01      	cmp	r2, #1
 8004476:	d905      	bls.n	8004484 <dhcp_create_msg+0xf4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1863 (discriminator 3)
 8004478:	2e03      	cmp	r6, #3
 800447a:	d105      	bne.n	8004488 <dhcp_create_msg+0xf8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1865
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 800447c:	7a62      	ldrb	r2, [r4, #9]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1864
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800447e:	3a04      	subs	r2, #4
 8004480:	2a01      	cmp	r2, #1
 8004482:	d801      	bhi.n	8004488 <dhcp_create_msg+0xf8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1866
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	60da      	str	r2, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1868
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8004488:	2200      	movs	r2, #0
 800448a:	f103 001c 	add.w	r0, r3, #28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1873
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 800448e:	372d      	adds	r7, #45	; 0x2d
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1868
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8004490:	741a      	strb	r2, [r3, #16]
 8004492:	745a      	strb	r2, [r3, #17]
 8004494:	749a      	strb	r2, [r3, #18]
 8004496:	74da      	strb	r2, [r3, #19]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1869
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 8004498:	751a      	strb	r2, [r3, #20]
 800449a:	755a      	strb	r2, [r3, #21]
 800449c:	759a      	strb	r2, [r3, #22]
 800449e:	75da      	strb	r2, [r3, #23]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1870
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 80044a0:	761a      	strb	r2, [r3, #24]
 80044a2:	765a      	strb	r2, [r3, #25]
 80044a4:	769a      	strb	r2, [r3, #26]
 80044a6:	76da      	strb	r2, [r3, #27]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1873
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 80044a8:	f817 5c01 	ldrb.w	r5, [r7, #-1]
 80044ac:	b291      	uxth	r1, r2
 80044ae:	428d      	cmp	r5, r1
 80044b0:	d936      	bls.n	8004520 <dhcp_create_msg+0x190>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1873 (discriminator 1)
 80044b2:	2905      	cmp	r1, #5
 80044b4:	d834      	bhi.n	8004520 <dhcp_create_msg+0x190>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1873 (discriminator 3)
 80044b6:	5cb9      	ldrb	r1, [r7, r2]
 80044b8:	3201      	adds	r2, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1873 (discriminator 6)
 80044ba:	f800 1b01 	strb.w	r1, [r0], #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1871 (discriminator 6)
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 80044be:	2a10      	cmp	r2, #16
 80044c0:	d1f4      	bne.n	80044ac <dhcp_create_msg+0x11c>
 80044c2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80044c6:	f103 016c 	add.w	r1, r3, #108	; 0x6c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1876
    dhcp->msg_out->sname[i] = 0;
 80044ca:	2000      	movs	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1876 (discriminator 3)
 80044cc:	f802 0b01 	strb.w	r0, [r2], #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1875 (discriminator 3)
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 80044d0:	428a      	cmp	r2, r1
 80044d2:	d1fb      	bne.n	80044cc <dhcp_create_msg+0x13c>
 80044d4:	f103 00ec 	add.w	r0, r3, #236	; 0xec
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1879
    dhcp->msg_out->file[i] = 0;
 80044d8:	2100      	movs	r1, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1879 (discriminator 3)
 80044da:	f802 1b01 	strb.w	r1, [r2], #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1878 (discriminator 3)
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 80044de:	4290      	cmp	r0, r2
 80044e0:	d1fb      	bne.n	80044da <dhcp_create_msg+0x14a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1881
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80044e2:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80044e6:	2263      	movs	r2, #99	; 0x63
 80044e8:	33f0      	adds	r3, #240	; 0xf0
 80044ea:	f803 0c03 	strb.w	r0, [r3, #-3]
 80044ee:	2053      	movs	r0, #83	; 0x53
 80044f0:	f803 2c04 	strb.w	r2, [r3, #-4]
 80044f4:	f803 2c01 	strb.w	r2, [r3, #-1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1882
  dhcp->options_out_len = 0;
 80044f8:	2200      	movs	r2, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1881
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80044fa:	f803 0c02 	strb.w	r0, [r3, #-2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1882
  dhcp->options_out_len = 0;
 80044fe:	82a1      	strh	r1, [r4, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1885 (discriminator 3)
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 8004500:	f803 2b01 	strb.w	r2, [r3], #1
 8004504:	3201      	adds	r2, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1884 (discriminator 3)
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8004506:	2a44      	cmp	r2, #68	; 0x44
 8004508:	d1fa      	bne.n	8004500 <dhcp_create_msg+0x170>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1888
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800450a:	2201      	movs	r2, #1
 800450c:	2135      	movs	r1, #53	; 0x35
 800450e:	4620      	mov	r0, r4
 8004510:	f7ff fed0 	bl	80042b4 <dhcp_option>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1889
  dhcp_option_byte(dhcp, message_type);
 8004514:	4620      	mov	r0, r4
 8004516:	4631      	mov	r1, r6
 8004518:	f7ff fef0 	bl	80042fc <dhcp_option_byte>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1890
  return ERR_OK;
 800451c:	2000      	movs	r0, #0
 800451e:	e746      	b.n	80043ae <dhcp_create_msg+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1873
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8004520:	2100      	movs	r1, #0
 8004522:	e7c9      	b.n	80044b8 <dhcp_create_msg+0x128>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1829
    return ERR_MEM;
 8004524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004528:	e741      	b.n	80043ae <dhcp_create_msg+0x1e>
 800452a:	bf00      	nop
 800452c:	0801eb54 	.word	0x0801eb54
 8004530:	0801e915 	.word	0x0801e915
 8004534:	0800e36a 	.word	0x0800e36a
 8004538:	0801e934 	.word	0x0801e934
 800453c:	0801e952 	.word	0x0801e952
 8004540:	0801e977 	.word	0x0801e977
 8004544:	0801e99e 	.word	0x0801e99e
 8004548:	20007ea0 	.word	0x20007ea0

0800454c <dhcp_check>:
dhcp_check():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:292
{
 800454c:	b538      	push	{r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:293
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800454e:	6a44      	ldr	r4, [r0, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:292
{
 8004550:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:298
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8004552:	2108      	movs	r1, #8
 8004554:	4620      	mov	r0, r4
 8004556:	f7ff fe83 	bl	8004260 <dhcp_set_state>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:301
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800455a:	2200      	movs	r2, #0
 800455c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8004560:	4628      	mov	r0, r5
 8004562:	f7ff fc41 	bl	8003de8 <etharp_query>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:305
  if (dhcp->tries < 255) {
 8004566:	7aa3      	ldrb	r3, [r4, #10]
 8004568:	2bff      	cmp	r3, #255	; 0xff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:306
    dhcp->tries++;
 800456a:	bf1c      	itt	ne
 800456c:	3301      	addne	r3, #1
 800456e:	72a3      	strbne	r3, [r4, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:309
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8004570:	2301      	movs	r3, #1
 8004572:	82e3      	strh	r3, [r4, #22]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:311
}
 8004574:	bd38      	pop	{r3, r4, r5, pc}
	...

08004578 <dhcp_bind>:
dhcp_bind():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1018
{
 8004578:	b537      	push	{r0, r1, r2, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1022
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800457a:	4605      	mov	r5, r0
 800457c:	b940      	cbnz	r0, 8004590 <dhcp_bind+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1022 (discriminator 1)
 800457e:	4b3d      	ldr	r3, [pc, #244]	; (8004674 <dhcp_bind+0xfc>)
 8004580:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8004584:	493c      	ldr	r1, [pc, #240]	; (8004678 <dhcp_bind+0x100>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1024 (discriminator 1)
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8004586:	483d      	ldr	r0, [pc, #244]	; (800467c <dhcp_bind+0x104>)
 8004588:	f008 fd08 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1118
}
 800458c:	b003      	add	sp, #12
 800458e:	bd30      	pop	{r4, r5, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1023 (discriminator 2)
  dhcp = netif_dhcp_data(netif);
 8004590:	6a44      	ldr	r4, [r0, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1024 (discriminator 2)
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8004592:	b924      	cbnz	r4, 800459e <dhcp_bind+0x26>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1024 (discriminator 1)
 8004594:	4b37      	ldr	r3, [pc, #220]	; (8004674 <dhcp_bind+0xfc>)
 8004596:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800459a:	4939      	ldr	r1, [pc, #228]	; (8004680 <dhcp_bind+0x108>)
 800459c:	e7f3      	b.n	8004586 <dhcp_bind+0xe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1028 (discriminator 2)
  dhcp->lease_used = 0;
 800459e:	2300      	movs	r3, #0
 80045a0:	8423      	strh	r3, [r4, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1030 (discriminator 2)
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80045a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	d00c      	beq.n	80045c2 <dhcp_bind+0x4a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1033
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80045a8:	331e      	adds	r3, #30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1034
     if (timeout > 0xffff) {
 80045aa:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1033
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80045ae:	bf36      	itet	cc
 80045b0:	223c      	movcc	r2, #60	; 0x3c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1035
       timeout = 0xffff;
 80045b2:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1033
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80045b6:	fbb3 f3f2 	udivcc	r3, r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1037
     dhcp->t0_timeout = (u16_t)timeout;
 80045ba:	b29a      	uxth	r2, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1038
     if (dhcp->t0_timeout == 0) {
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d043      	beq.n	8004648 <dhcp_bind+0xd0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1037
     dhcp->t0_timeout = (u16_t)timeout;
 80045c0:	8462      	strh	r2, [r4, #34]	; 0x22
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1045
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80045c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045c4:	1c58      	adds	r0, r3, #1
 80045c6:	d00e      	beq.n	80045e6 <dhcp_bind+0x6e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1048
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80045c8:	331e      	adds	r3, #30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1049
    if (timeout > 0xffff) {
 80045ca:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1048
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80045ce:	bf36      	itet	cc
 80045d0:	223c      	movcc	r2, #60	; 0x3c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1050
      timeout = 0xffff;
 80045d2:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1048
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80045d6:	fbb3 f3f2 	udivcc	r3, r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1052
    dhcp->t1_timeout = (u16_t)timeout;
 80045da:	b29a      	uxth	r2, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1053
    if (dhcp->t1_timeout == 0) {
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d036      	beq.n	800464e <dhcp_bind+0xd6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1052
    dhcp->t1_timeout = (u16_t)timeout;
 80045e0:	8322      	strh	r2, [r4, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1057
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80045e2:	8b23      	ldrh	r3, [r4, #24]
 80045e4:	83a3      	strh	r3, [r4, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1060
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80045e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80045e8:	1c59      	adds	r1, r3, #1
 80045ea:	d00d      	beq.n	8004608 <dhcp_bind+0x90>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1062
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80045ec:	331e      	adds	r3, #30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1063
    if (timeout > 0xffff) {
 80045ee:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1062
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80045f2:	bf36      	itet	cc
 80045f4:	223c      	movcc	r2, #60	; 0x3c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1064
      timeout = 0xffff;
 80045f6:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1062
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80045fa:	fbb3 f3f2 	udivcc	r3, r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1066
    dhcp->t2_timeout = (u16_t)timeout;
 80045fe:	b29a      	uxth	r2, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1067
    if (dhcp->t2_timeout == 0) {
 8004600:	b343      	cbz	r3, 8004654 <dhcp_bind+0xdc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1066
    dhcp->t2_timeout = (u16_t)timeout;
 8004602:	8362      	strh	r2, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1071
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8004604:	8b63      	ldrh	r3, [r4, #26]
 8004606:	83e3      	strh	r3, [r4, #30]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1075
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8004608:	8b63      	ldrh	r3, [r4, #26]
 800460a:	8b22      	ldrh	r2, [r4, #24]
 800460c:	429a      	cmp	r2, r3
 800460e:	d302      	bcc.n	8004616 <dhcp_bind+0x9e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1075 (discriminator 1)
 8004610:	b10b      	cbz	r3, 8004616 <dhcp_bind+0x9e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1076
    dhcp->t1_timeout = 0;
 8004612:	2300      	movs	r3, #0
 8004614:	8323      	strh	r3, [r4, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1079
  if (dhcp->subnet_mask_given) {
 8004616:	7ae3      	ldrb	r3, [r4, #11]
 8004618:	b1fb      	cbz	r3, 800465a <dhcp_bind+0xe2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1081
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800461a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1090
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800461c:	9300      	str	r3, [sp, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1094
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800461e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004620:	9301      	str	r3, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1096
  if (ip4_addr_isany_val(gw_addr)) {
 8004622:	b92b      	cbnz	r3, 8004630 <dhcp_bind+0xb8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1098
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8004624:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004626:	9a00      	ldr	r2, [sp, #0]
 8004628:	4013      	ands	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1100
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800462a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800462e:	9301      	str	r3, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1114
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8004630:	4620      	mov	r0, r4
 8004632:	210a      	movs	r1, #10
 8004634:	f7ff fe14 	bl	8004260 <dhcp_set_state>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1116
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8004638:	ab01      	add	r3, sp, #4
 800463a:	466a      	mov	r2, sp
 800463c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8004640:	4628      	mov	r0, r5
 8004642:	f005 fdd5 	bl	800a1f0 <netif_set_addr>
 8004646:	e7a1      	b.n	800458c <dhcp_bind+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1039
       dhcp->t0_timeout = 1;
 8004648:	2301      	movs	r3, #1
 800464a:	8463      	strh	r3, [r4, #34]	; 0x22
 800464c:	e7b9      	b.n	80045c2 <dhcp_bind+0x4a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1054
      dhcp->t1_timeout = 1;
 800464e:	2301      	movs	r3, #1
 8004650:	8323      	strh	r3, [r4, #24]
 8004652:	e7c6      	b.n	80045e2 <dhcp_bind+0x6a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1068
      dhcp->t2_timeout = 1;
 8004654:	2301      	movs	r3, #1
 8004656:	8363      	strh	r3, [r4, #26]
 8004658:	e7d4      	b.n	8004604 <dhcp_bind+0x8c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1084
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800465a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1085
    if (first_octet <= 127) {
 800465e:	061a      	lsls	r2, r3, #24
 8004660:	d401      	bmi.n	8004666 <dhcp_bind+0xee>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1086
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8004662:	23ff      	movs	r3, #255	; 0xff
 8004664:	e7da      	b.n	800461c <dhcp_bind+0xa4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1087
    } else if (first_octet >= 192) {
 8004666:	2bbf      	cmp	r3, #191	; 0xbf
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1088
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8004668:	bf8c      	ite	hi
 800466a:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1090
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800466e:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 8004672:	e7d3      	b.n	800461c <dhcp_bind+0xa4>
 8004674:	0801eb54 	.word	0x0801eb54
 8004678:	0801e8e4 	.word	0x0801e8e4
 800467c:	0800e36a 	.word	0x0800e36a
 8004680:	0801e8fd 	.word	0x0801e8fd

08004684 <dhcp_inc_pcb_refcount>:
dhcp_inc_pcb_refcount():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:215
{
 8004684:	b538      	push	{r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:216
  if (dhcp_pcb_refcount == 0) {
 8004686:	4d15      	ldr	r5, [pc, #84]	; (80046dc <dhcp_inc_pcb_refcount+0x58>)
 8004688:	782b      	ldrb	r3, [r5, #0]
 800468a:	b9f3      	cbnz	r3, 80046ca <dhcp_inc_pcb_refcount+0x46>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:217
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800468c:	4c14      	ldr	r4, [pc, #80]	; (80046e0 <dhcp_inc_pcb_refcount+0x5c>)
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	b12b      	cbz	r3, 800469e <dhcp_inc_pcb_refcount+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:217 (discriminator 1)
 8004692:	4b14      	ldr	r3, [pc, #80]	; (80046e4 <dhcp_inc_pcb_refcount+0x60>)
 8004694:	22d9      	movs	r2, #217	; 0xd9
 8004696:	4914      	ldr	r1, [pc, #80]	; (80046e8 <dhcp_inc_pcb_refcount+0x64>)
 8004698:	4814      	ldr	r0, [pc, #80]	; (80046ec <dhcp_inc_pcb_refcount+0x68>)
 800469a:	f008 fc7f 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:220
    dhcp_pcb = udp_new();
 800469e:	f005 fd53 	bl	800a148 <udp_new>
 80046a2:	6020      	str	r0, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:222
    if (dhcp_pcb == NULL) {
 80046a4:	b1b0      	cbz	r0, 80046d4 <dhcp_inc_pcb_refcount+0x50>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:226
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80046a6:	7a02      	ldrb	r2, [r0, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:229
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 80046a8:	4911      	ldr	r1, [pc, #68]	; (80046f0 <dhcp_inc_pcb_refcount+0x6c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:226
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80046aa:	f042 0220 	orr.w	r2, r2, #32
 80046ae:	7202      	strb	r2, [r0, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:229
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 80046b0:	2244      	movs	r2, #68	; 0x44
 80046b2:	f005 fc2f 	bl	8009f14 <udp_bind>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:230
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 80046b6:	2243      	movs	r2, #67	; 0x43
 80046b8:	490d      	ldr	r1, [pc, #52]	; (80046f0 <dhcp_inc_pcb_refcount+0x6c>)
 80046ba:	6820      	ldr	r0, [r4, #0]
 80046bc:	f005 fd00 	bl	800a0c0 <udp_connect>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:231
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80046c0:	2200      	movs	r2, #0
 80046c2:	490c      	ldr	r1, [pc, #48]	; (80046f4 <dhcp_inc_pcb_refcount+0x70>)
 80046c4:	6820      	ldr	r0, [r4, #0]
 80046c6:	f005 fd23 	bl	800a110 <udp_recv>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:234
  dhcp_pcb_refcount++;
 80046ca:	782b      	ldrb	r3, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:236
  return ERR_OK;
 80046cc:	2000      	movs	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:234
  dhcp_pcb_refcount++;
 80046ce:	3301      	adds	r3, #1
 80046d0:	702b      	strb	r3, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:237
}
 80046d2:	bd38      	pop	{r3, r4, r5, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:223
      return ERR_MEM;
 80046d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046d8:	e7fb      	b.n	80046d2 <dhcp_inc_pcb_refcount+0x4e>
 80046da:	bf00      	nop
 80046dc:	20007e9c 	.word	0x20007e9c
 80046e0:	20007e98 	.word	0x20007e98
 80046e4:	0801eb54 	.word	0x0801eb54
 80046e8:	0801ea6c 	.word	0x0801ea6c
 80046ec:	0800e36a 	.word	0x0800e36a
 80046f0:	0801e8dc 	.word	0x0801e8dc
 80046f4:	08004afd 	.word	0x08004afd

080046f8 <dhcp_option_trailer>:
dhcp_option_trailer():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1921
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 80046f8:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1922
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 80046fa:	4604      	mov	r4, r0
 80046fc:	b940      	cbnz	r0, 8004710 <dhcp_option_trailer+0x18>
 80046fe:	4b17      	ldr	r3, [pc, #92]	; (800475c <dhcp_option_trailer+0x64>)
 8004700:	f240 7282 	movw	r2, #1922	; 0x782
 8004704:	4916      	ldr	r1, [pc, #88]	; (8004760 <dhcp_option_trailer+0x68>)
 8004706:	4817      	ldr	r0, [pc, #92]	; (8004764 <dhcp_option_trailer+0x6c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1932
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  }
}
 8004708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1922
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 800470c:	f008 bc46 	b.w	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1923 (discriminator 2)
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 8004710:	6903      	ldr	r3, [r0, #16]
 8004712:	b933      	cbnz	r3, 8004722 <dhcp_option_trailer+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1923 (discriminator 1)
 8004714:	4b11      	ldr	r3, [pc, #68]	; (800475c <dhcp_option_trailer+0x64>)
 8004716:	f240 7283 	movw	r2, #1923	; 0x783
 800471a:	4913      	ldr	r1, [pc, #76]	; (8004768 <dhcp_option_trailer+0x70>)
 800471c:	4811      	ldr	r0, [pc, #68]	; (8004764 <dhcp_option_trailer+0x6c>)
 800471e:	f008 fc3d 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1924
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8004722:	8aa3      	ldrh	r3, [r4, #20]
 8004724:	2b43      	cmp	r3, #67	; 0x43
 8004726:	d906      	bls.n	8004736 <dhcp_option_trailer+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1924 (discriminator 1)
 8004728:	4b0c      	ldr	r3, [pc, #48]	; (800475c <dhcp_option_trailer+0x64>)
 800472a:	f240 7284 	movw	r2, #1924	; 0x784
 800472e:	490f      	ldr	r1, [pc, #60]	; (800476c <dhcp_option_trailer+0x74>)
 8004730:	480c      	ldr	r0, [pc, #48]	; (8004764 <dhcp_option_trailer+0x6c>)
 8004732:	f008 fc33 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1925
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 8004736:	8aa3      	ldrh	r3, [r4, #20]
 8004738:	6922      	ldr	r2, [r4, #16]
 800473a:	1c59      	adds	r1, r3, #1
 800473c:	4413      	add	r3, r2
 800473e:	82a1      	strh	r1, [r4, #20]
 8004740:	21ff      	movs	r1, #255	; 0xff
 8004742:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1930
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8004746:	2100      	movs	r1, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1927
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8004748:	8aa3      	ldrh	r3, [r4, #20]
 800474a:	2b43      	cmp	r3, #67	; 0x43
 800474c:	d900      	bls.n	8004750 <dhcp_option_trailer+0x58>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1932
}
 800474e:	bd10      	pop	{r4, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1930
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8004750:	1c58      	adds	r0, r3, #1
 8004752:	4413      	add	r3, r2
 8004754:	82a0      	strh	r0, [r4, #20]
 8004756:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
 800475a:	e7f5      	b.n	8004748 <dhcp_option_trailer+0x50>
 800475c:	0801eb54 	.word	0x0801eb54
 8004760:	0801ebfc 	.word	0x0801ebfc
 8004764:	0800e36a 	.word	0x0800e36a
 8004768:	0801ec1e 	.word	0x0801ec1e
 800476c:	0801ec4a 	.word	0x0801ec4a

08004770 <dhcp_handle_ack.isra.1>:
dhcp_handle_ack():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:585
dhcp_handle_ack(struct netif *netif)
 8004770:	b538      	push	{r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:597
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8004772:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:604
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8004774:	4d17      	ldr	r5, [pc, #92]	; (80047d4 <dhcp_handle_ack.isra.1+0x64>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:585
dhcp_handle_ack(struct netif *netif)
 8004776:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:598
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8004778:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:604
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800477c:	78eb      	ldrb	r3, [r5, #3]
 800477e:	b113      	cbz	r3, 8004786 <dhcp_handle_ack.isra.1+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:606
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8004780:	4b15      	ldr	r3, [pc, #84]	; (80047d8 <dhcp_handle_ack.isra.1+0x68>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	6343      	str	r3, [r0, #52]	; 0x34
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:609
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8004786:	792b      	ldrb	r3, [r5, #4]
 8004788:	b1db      	cbz	r3, 80047c2 <dhcp_handle_ack.isra.1+0x52>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:611
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800478a:	4b13      	ldr	r3, [pc, #76]	; (80047d8 <dhcp_handle_ack.isra.1+0x68>)
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	63a3      	str	r3, [r4, #56]	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:618
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8004790:	796b      	ldrb	r3, [r5, #5]
 8004792:	b1cb      	cbz	r3, 80047c8 <dhcp_handle_ack.isra.1+0x58>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:620
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8004794:	4b10      	ldr	r3, [pc, #64]	; (80047d8 <dhcp_handle_ack.isra.1+0x68>)
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	63e3      	str	r3, [r4, #60]	; 0x3c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:627
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800479a:	6863      	ldr	r3, [r4, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	62a3      	str	r3, [r4, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:636
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80047a0:	79ab      	ldrb	r3, [r5, #6]
 80047a2:	b12b      	cbz	r3, 80047b0 <dhcp_handle_ack.isra.1+0x40>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:638
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80047a4:	4b0c      	ldr	r3, [pc, #48]	; (80047d8 <dhcp_handle_ack.isra.1+0x68>)
 80047a6:	6998      	ldr	r0, [r3, #24]
 80047a8:	f005 ffe5 	bl	800a776 <lwip_htonl>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:639
    dhcp->subnet_mask_given = 1;
 80047ac:	2301      	movs	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:638
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80047ae:	62e0      	str	r0, [r4, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:641
    dhcp->subnet_mask_given = 0;
 80047b0:	72e3      	strb	r3, [r4, #11]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:645
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80047b2:	79eb      	ldrb	r3, [r5, #7]
 80047b4:	b123      	cbz	r3, 80047c0 <dhcp_handle_ack.isra.1+0x50>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:646
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80047b6:	4b08      	ldr	r3, [pc, #32]	; (80047d8 <dhcp_handle_ack.isra.1+0x68>)
 80047b8:	69d8      	ldr	r0, [r3, #28]
 80047ba:	f005 ffdc 	bl	800a776 <lwip_htonl>
 80047be:	6320      	str	r0, [r4, #48]	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:665
}
 80047c0:	bd38      	pop	{r3, r4, r5, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:614
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80047c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047c4:	085b      	lsrs	r3, r3, #1
 80047c6:	e7e2      	b.n	800478e <dhcp_handle_ack.isra.1+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:623
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80047c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047ca:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80047ce:	08db      	lsrs	r3, r3, #3
 80047d0:	e7e2      	b.n	8004798 <dhcp_handle_ack.isra.1+0x28>
 80047d2:	bf00      	nop
 80047d4:	20008080 	.word	0x20008080
 80047d8:	20008088 	.word	0x20008088

080047dc <dhcp_delete_msg>:
dhcp_delete_msg():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1900
{
 80047dc:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1901
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 80047de:	4604      	mov	r4, r0
 80047e0:	b940      	cbnz	r0, 80047f4 <dhcp_delete_msg+0x18>
 80047e2:	4b11      	ldr	r3, [pc, #68]	; (8004828 <dhcp_delete_msg+0x4c>)
 80047e4:	f240 726d 	movw	r2, #1901	; 0x76d
 80047e8:	4910      	ldr	r1, [pc, #64]	; (800482c <dhcp_delete_msg+0x50>)
 80047ea:	4811      	ldr	r0, [pc, #68]	; (8004830 <dhcp_delete_msg+0x54>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1909
}
 80047ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1901
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 80047f0:	f008 bbd4 	b.w	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1902 (discriminator 2)
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 80047f4:	68c3      	ldr	r3, [r0, #12]
 80047f6:	b933      	cbnz	r3, 8004806 <dhcp_delete_msg+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1902 (discriminator 1)
 80047f8:	4b0b      	ldr	r3, [pc, #44]	; (8004828 <dhcp_delete_msg+0x4c>)
 80047fa:	f240 726e 	movw	r2, #1902	; 0x76e
 80047fe:	490d      	ldr	r1, [pc, #52]	; (8004834 <dhcp_delete_msg+0x58>)
 8004800:	480b      	ldr	r0, [pc, #44]	; (8004830 <dhcp_delete_msg+0x54>)
 8004802:	f008 fbcb 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1903
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 8004806:	6923      	ldr	r3, [r4, #16]
 8004808:	b933      	cbnz	r3, 8004818 <dhcp_delete_msg+0x3c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1903 (discriminator 1)
 800480a:	4b07      	ldr	r3, [pc, #28]	; (8004828 <dhcp_delete_msg+0x4c>)
 800480c:	f240 726f 	movw	r2, #1903	; 0x76f
 8004810:	4909      	ldr	r1, [pc, #36]	; (8004838 <dhcp_delete_msg+0x5c>)
 8004812:	4807      	ldr	r0, [pc, #28]	; (8004830 <dhcp_delete_msg+0x54>)
 8004814:	f008 fbc2 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1904
  if (dhcp->p_out != NULL) {
 8004818:	68e0      	ldr	r0, [r4, #12]
 800481a:	b108      	cbz	r0, 8004820 <dhcp_delete_msg+0x44>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1905
    pbuf_free(dhcp->p_out);
 800481c:	f006 f832 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1907
  dhcp->p_out = NULL;
 8004820:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1908
  dhcp->msg_out = NULL;
 8004822:	e9c4 3303 	strd	r3, r3, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1909
}
 8004826:	bd10      	pop	{r4, pc}
 8004828:	0801eb54 	.word	0x0801eb54
 800482c:	0801ea02 	.word	0x0801ea02
 8004830:	0800e36a 	.word	0x0800e36a
 8004834:	0801ea20 	.word	0x0801ea20
 8004838:	0801ea45 	.word	0x0801ea45

0800483c <dhcp_discover>:
dhcp_discover():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:962
{
 800483c:	b573      	push	{r0, r1, r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:968
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800483e:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:963
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8004840:	6a44      	ldr	r4, [r0, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:962
{
 8004842:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:969
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8004844:	2106      	movs	r1, #6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:968
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8004846:	62a3      	str	r3, [r4, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:969
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8004848:	4620      	mov	r0, r4
 800484a:	f7ff fd09 	bl	8004260 <dhcp_set_state>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:971
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 800484e:	2201      	movs	r2, #1
 8004850:	4621      	mov	r1, r4
 8004852:	4630      	mov	r0, r6
 8004854:	f7ff fd9c 	bl	8004390 <dhcp_create_msg>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:972
  if (result == ERR_OK) {
 8004858:	4605      	mov	r5, r0
 800485a:	bb78      	cbnz	r0, 80048bc <dhcp_discover+0x80>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:975
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800485c:	2202      	movs	r2, #2
 800485e:	2139      	movs	r1, #57	; 0x39
 8004860:	4620      	mov	r0, r4
 8004862:	f7ff fd27 	bl	80042b4 <dhcp_option>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:976
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8004866:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
 8004868:	4620      	mov	r0, r4
 800486a:	f7ff fd01 	bl	8004270 <dhcp_option_short>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:978
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800486e:	2203      	movs	r2, #3
 8004870:	2137      	movs	r1, #55	; 0x37
 8004872:	4620      	mov	r0, r4
 8004874:	f7ff fd1e 	bl	80042b4 <dhcp_option>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:980
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8004878:	2101      	movs	r1, #1
 800487a:	4620      	mov	r0, r4
 800487c:	f7ff fd3e 	bl	80042fc <dhcp_option_byte>
 8004880:	2103      	movs	r1, #3
 8004882:	4620      	mov	r0, r4
 8004884:	f7ff fd3a 	bl	80042fc <dhcp_option_byte>
 8004888:	211c      	movs	r1, #28
 800488a:	4620      	mov	r0, r4
 800488c:	f7ff fd36 	bl	80042fc <dhcp_option_byte>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:982
    dhcp_option_trailer(dhcp);
 8004890:	4620      	mov	r0, r4
 8004892:	f7ff ff31 	bl	80046f8 <dhcp_option_trailer>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:985
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8004896:	8aa1      	ldrh	r1, [r4, #20]
 8004898:	68e0      	ldr	r0, [r4, #12]
 800489a:	31f0      	adds	r1, #240	; 0xf0
 800489c:	b289      	uxth	r1, r1
 800489e:	f006 f92b 	bl	800aaf8 <pbuf_realloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:988
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 80048a2:	4b13      	ldr	r3, [pc, #76]	; (80048f0 <dhcp_discover+0xb4>)
 80048a4:	4813      	ldr	r0, [pc, #76]	; (80048f4 <dhcp_discover+0xb8>)
 80048a6:	4a14      	ldr	r2, [pc, #80]	; (80048f8 <dhcp_discover+0xbc>)
 80048a8:	e9cd 6300 	strd	r6, r3, [sp]
 80048ac:	2343      	movs	r3, #67	; 0x43
 80048ae:	68e1      	ldr	r1, [r4, #12]
 80048b0:	6800      	ldr	r0, [r0, #0]
 80048b2:	f005 fb83 	bl	8009fbc <udp_sendto_if_src>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:990
    dhcp_delete_msg(dhcp);
 80048b6:	4620      	mov	r0, r4
 80048b8:	f7ff ff90 	bl	80047dc <dhcp_delete_msg>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:995
  if (dhcp->tries < 255) {
 80048bc:	7aa3      	ldrb	r3, [r4, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1008
}
 80048be:	4628      	mov	r0, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:995
  if (dhcp->tries < 255) {
 80048c0:	2bff      	cmp	r3, #255	; 0xff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:996
    dhcp->tries++;
 80048c2:	bf1c      	itt	ne
 80048c4:	3301      	addne	r3, #1
 80048c6:	72a3      	strbne	r3, [r4, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1004
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 80048c8:	7aa2      	ldrb	r2, [r4, #10]
 80048ca:	2a05      	cmp	r2, #5
 80048cc:	bf96      	itet	ls
 80048ce:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
 80048d2:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 80048d6:	4093      	lslls	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1005
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80048d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1004
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 80048dc:	bf98      	it	ls
 80048de:	b29b      	uxthls	r3, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1005
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80048e0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80048e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80048e8:	82e3      	strh	r3, [r4, #22]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1008
}
 80048ea:	b002      	add	sp, #8
 80048ec:	bd70      	pop	{r4, r5, r6, pc}
 80048ee:	bf00      	nop
 80048f0:	0801e8dc 	.word	0x0801e8dc
 80048f4:	20007e98 	.word	0x20007e98
 80048f8:	0801e8e0 	.word	0x0801e8e0

080048fc <dhcp_select>:
dhcp_select():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:353
{
 80048fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:354
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80048fe:	6a44      	ldr	r4, [r0, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:353
{
 8004900:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:360
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8004902:	2101      	movs	r1, #1
 8004904:	4620      	mov	r0, r4
 8004906:	f7ff fcab 	bl	8004260 <dhcp_set_state>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:363
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800490a:	2203      	movs	r2, #3
 800490c:	4621      	mov	r1, r4
 800490e:	4630      	mov	r0, r6
 8004910:	f7ff fd3e 	bl	8004390 <dhcp_create_msg>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:364
  if (result == ERR_OK) {
 8004914:	4605      	mov	r5, r0
 8004916:	2800      	cmp	r0, #0
 8004918:	d147      	bne.n	80049aa <dhcp_select+0xae>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:365
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800491a:	2202      	movs	r2, #2
 800491c:	2139      	movs	r1, #57	; 0x39
 800491e:	4620      	mov	r0, r4
 8004920:	f7ff fcc8 	bl	80042b4 <dhcp_option>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:366
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8004924:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
 8004926:	4620      	mov	r0, r4
 8004928:	f7ff fca2 	bl	8004270 <dhcp_option_short>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:369
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800492c:	2204      	movs	r2, #4
 800492e:	2132      	movs	r1, #50	; 0x32
 8004930:	4620      	mov	r0, r4
 8004932:	f7ff fcbf 	bl	80042b4 <dhcp_option>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:370
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8004936:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004938:	f005 ff1d 	bl	800a776 <lwip_htonl>
 800493c:	4601      	mov	r1, r0
 800493e:	4620      	mov	r0, r4
 8004940:	f7ff fcf8 	bl	8004334 <dhcp_option_long>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:372
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8004944:	2204      	movs	r2, #4
 8004946:	2136      	movs	r1, #54	; 0x36
 8004948:	4620      	mov	r0, r4
 800494a:	f7ff fcb3 	bl	80042b4 <dhcp_option>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:373
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800494e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004950:	f005 ff11 	bl	800a776 <lwip_htonl>
 8004954:	4601      	mov	r1, r0
 8004956:	4620      	mov	r0, r4
 8004958:	f7ff fcec 	bl	8004334 <dhcp_option_long>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:375
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800495c:	2203      	movs	r2, #3
 800495e:	2137      	movs	r1, #55	; 0x37
 8004960:	4620      	mov	r0, r4
 8004962:	f7ff fca7 	bl	80042b4 <dhcp_option>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:377
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8004966:	2101      	movs	r1, #1
 8004968:	4620      	mov	r0, r4
 800496a:	f7ff fcc7 	bl	80042fc <dhcp_option_byte>
 800496e:	2103      	movs	r1, #3
 8004970:	4620      	mov	r0, r4
 8004972:	f7ff fcc3 	bl	80042fc <dhcp_option_byte>
 8004976:	211c      	movs	r1, #28
 8004978:	4620      	mov	r0, r4
 800497a:	f7ff fcbf 	bl	80042fc <dhcp_option_byte>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:384
    dhcp_option_trailer(dhcp);
 800497e:	4620      	mov	r0, r4
 8004980:	f7ff feba 	bl	80046f8 <dhcp_option_trailer>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:386
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8004984:	8aa1      	ldrh	r1, [r4, #20]
 8004986:	68e0      	ldr	r0, [r4, #12]
 8004988:	31f0      	adds	r1, #240	; 0xf0
 800498a:	b289      	uxth	r1, r1
 800498c:	f006 f8b4 	bl	800aaf8 <pbuf_realloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:389
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8004990:	4b12      	ldr	r3, [pc, #72]	; (80049dc <dhcp_select+0xe0>)
 8004992:	4813      	ldr	r0, [pc, #76]	; (80049e0 <dhcp_select+0xe4>)
 8004994:	4a13      	ldr	r2, [pc, #76]	; (80049e4 <dhcp_select+0xe8>)
 8004996:	e9cd 6300 	strd	r6, r3, [sp]
 800499a:	2343      	movs	r3, #67	; 0x43
 800499c:	68e1      	ldr	r1, [r4, #12]
 800499e:	6800      	ldr	r0, [r0, #0]
 80049a0:	f005 fb0c 	bl	8009fbc <udp_sendto_if_src>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:390
    dhcp_delete_msg(dhcp);
 80049a4:	4620      	mov	r0, r4
 80049a6:	f7ff ff19 	bl	80047dc <dhcp_delete_msg>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:395
  if (dhcp->tries < 255) {
 80049aa:	7aa3      	ldrb	r3, [r4, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:402
}
 80049ac:	4628      	mov	r0, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:395
  if (dhcp->tries < 255) {
 80049ae:	2bff      	cmp	r3, #255	; 0xff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:396
    dhcp->tries++;
 80049b0:	bf1c      	itt	ne
 80049b2:	3301      	addne	r3, #1
 80049b4:	72a3      	strbne	r3, [r4, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:398
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 80049b6:	7aa2      	ldrb	r2, [r4, #10]
 80049b8:	2a05      	cmp	r2, #5
 80049ba:	bf96      	itet	ls
 80049bc:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
 80049c0:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 80049c4:	4093      	lslls	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:399
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80049c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:398
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 80049ca:	bf98      	it	ls
 80049cc:	b29b      	uxthls	r3, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:399
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80049ce:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80049d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80049d6:	82e3      	strh	r3, [r4, #22]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:402
}
 80049d8:	b002      	add	sp, #8
 80049da:	bd70      	pop	{r4, r5, r6, pc}
 80049dc:	0801e8dc 	.word	0x0801e8dc
 80049e0:	20007e98 	.word	0x20007e98
 80049e4:	0801e8e0 	.word	0x0801e8e0

080049e8 <dhcp_reboot>:
dhcp_reboot():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1230
{
 80049e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1231
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80049ea:	6a44      	ldr	r4, [r0, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1230
{
 80049ec:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1236
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80049ee:	2103      	movs	r1, #3
 80049f0:	4620      	mov	r0, r4
 80049f2:	f7ff fc35 	bl	8004260 <dhcp_set_state>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1239
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80049f6:	2203      	movs	r2, #3
 80049f8:	4621      	mov	r1, r4
 80049fa:	4630      	mov	r0, r6
 80049fc:	f7ff fcc8 	bl	8004390 <dhcp_create_msg>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1240
  if (result == ERR_OK) {
 8004a00:	4605      	mov	r5, r0
 8004a02:	2800      	cmp	r0, #0
 8004a04:	d13a      	bne.n	8004a7c <dhcp_reboot+0x94>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1241
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8004a06:	2202      	movs	r2, #2
 8004a08:	2139      	movs	r1, #57	; 0x39
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	f7ff fc52 	bl	80042b4 <dhcp_option>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1242
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8004a10:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004a14:	4620      	mov	r0, r4
 8004a16:	f7ff fc2b 	bl	8004270 <dhcp_option_short>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1244
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8004a1a:	2204      	movs	r2, #4
 8004a1c:	2132      	movs	r1, #50	; 0x32
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f7ff fc48 	bl	80042b4 <dhcp_option>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1245
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8004a24:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004a26:	f005 fea6 	bl	800a776 <lwip_htonl>
 8004a2a:	4601      	mov	r1, r0
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	f7ff fc81 	bl	8004334 <dhcp_option_long>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1247
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8004a32:	2203      	movs	r2, #3
 8004a34:	2137      	movs	r1, #55	; 0x37
 8004a36:	4620      	mov	r0, r4
 8004a38:	f7ff fc3c 	bl	80042b4 <dhcp_option>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1249
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	4620      	mov	r0, r4
 8004a40:	f7ff fc5c 	bl	80042fc <dhcp_option_byte>
 8004a44:	2103      	movs	r1, #3
 8004a46:	4620      	mov	r0, r4
 8004a48:	f7ff fc58 	bl	80042fc <dhcp_option_byte>
 8004a4c:	211c      	movs	r1, #28
 8004a4e:	4620      	mov	r0, r4
 8004a50:	f7ff fc54 	bl	80042fc <dhcp_option_byte>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1252
    dhcp_option_trailer(dhcp);
 8004a54:	4620      	mov	r0, r4
 8004a56:	f7ff fe4f 	bl	80046f8 <dhcp_option_trailer>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1254
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8004a5a:	8aa1      	ldrh	r1, [r4, #20]
 8004a5c:	68e0      	ldr	r0, [r4, #12]
 8004a5e:	31f0      	adds	r1, #240	; 0xf0
 8004a60:	b289      	uxth	r1, r1
 8004a62:	f006 f849 	bl	800aaf8 <pbuf_realloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1257
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8004a66:	4813      	ldr	r0, [pc, #76]	; (8004ab4 <dhcp_reboot+0xcc>)
 8004a68:	9600      	str	r6, [sp, #0]
 8004a6a:	2343      	movs	r3, #67	; 0x43
 8004a6c:	4a12      	ldr	r2, [pc, #72]	; (8004ab8 <dhcp_reboot+0xd0>)
 8004a6e:	68e1      	ldr	r1, [r4, #12]
 8004a70:	6800      	ldr	r0, [r0, #0]
 8004a72:	f005 fb09 	bl	800a088 <udp_sendto_if>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1258
    dhcp_delete_msg(dhcp);
 8004a76:	4620      	mov	r0, r4
 8004a78:	f7ff feb0 	bl	80047dc <dhcp_delete_msg>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1263
  if (dhcp->tries < 255) {
 8004a7c:	7aa3      	ldrb	r3, [r4, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1270
}
 8004a7e:	4628      	mov	r0, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1263
  if (dhcp->tries < 255) {
 8004a80:	2bff      	cmp	r3, #255	; 0xff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1264
    dhcp->tries++;
 8004a82:	bf1c      	itt	ne
 8004a84:	3301      	addne	r3, #1
 8004a86:	72a3      	strbne	r3, [r4, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1266
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8004a88:	7aa3      	ldrb	r3, [r4, #10]
 8004a8a:	2b09      	cmp	r3, #9
 8004a8c:	bf96      	itet	ls
 8004a8e:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8004a92:	f242 7310 	movwhi	r3, #10000	; 0x2710
 8004a96:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1267
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8004a9a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1266
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8004a9e:	bf9c      	itt	ls
 8004aa0:	00db      	lslls	r3, r3, #3
 8004aa2:	b29b      	uxthls	r3, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1267
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8004aa4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8004aa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004aac:	82e3      	strh	r3, [r4, #22]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1270
}
 8004aae:	b002      	add	sp, #8
 8004ab0:	bd70      	pop	{r4, r5, r6, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20007e98 	.word	0x20007e98
 8004ab8:	0801e8e0 	.word	0x0801e8e0

08004abc <dhcp_dec_pcb_refcount>:
dhcp_dec_pcb_refcount():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:242
{
 8004abc:	b538      	push	{r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:243
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8004abe:	4d0a      	ldr	r5, [pc, #40]	; (8004ae8 <dhcp_dec_pcb_refcount+0x2c>)
 8004ac0:	782b      	ldrb	r3, [r5, #0]
 8004ac2:	b92b      	cbnz	r3, 8004ad0 <dhcp_dec_pcb_refcount+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:243 (discriminator 1)
 8004ac4:	4b09      	ldr	r3, [pc, #36]	; (8004aec <dhcp_dec_pcb_refcount+0x30>)
 8004ac6:	22f3      	movs	r2, #243	; 0xf3
 8004ac8:	4909      	ldr	r1, [pc, #36]	; (8004af0 <dhcp_dec_pcb_refcount+0x34>)
 8004aca:	480a      	ldr	r0, [pc, #40]	; (8004af4 <dhcp_dec_pcb_refcount+0x38>)
 8004acc:	f008 fa66 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:244
  dhcp_pcb_refcount--;
 8004ad0:	782c      	ldrb	r4, [r5, #0]
 8004ad2:	3c01      	subs	r4, #1
 8004ad4:	b2e4      	uxtb	r4, r4
 8004ad6:	702c      	strb	r4, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:246
  if (dhcp_pcb_refcount == 0) {
 8004ad8:	b924      	cbnz	r4, 8004ae4 <dhcp_dec_pcb_refcount+0x28>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:247
    udp_remove(dhcp_pcb);
 8004ada:	4d07      	ldr	r5, [pc, #28]	; (8004af8 <dhcp_dec_pcb_refcount+0x3c>)
 8004adc:	6828      	ldr	r0, [r5, #0]
 8004ade:	f005 fb1b 	bl	800a118 <udp_remove>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:248
    dhcp_pcb = NULL;
 8004ae2:	602c      	str	r4, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:250
}
 8004ae4:	bd38      	pop	{r3, r4, r5, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20007e9c 	.word	0x20007e9c
 8004aec:	0801eb54 	.word	0x0801eb54
 8004af0:	0801e9de 	.word	0x0801e9de
 8004af4:	0800e36a 	.word	0x0800e36a
 8004af8:	20007e98 	.word	0x20007e98

08004afc <dhcp_recv>:
dhcp_recv():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1680
  struct netif *netif = ip_current_input_netif();
 8004afc:	4b76      	ldr	r3, [pc, #472]	; (8004cd8 <dhcp_recv+0x1dc>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1679
{
 8004afe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1680
  struct netif *netif = ip_current_input_netif();
 8004b02:	685e      	ldr	r6, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1679
{
 8004b04:	b089      	sub	sp, #36	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1681
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8004b06:	f8d6 9024 	ldr.w	r9, [r6, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1679
{
 8004b0a:	9201      	str	r2, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1689
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8004b0c:	f1b9 0f00 	cmp.w	r9, #0
 8004b10:	d050      	beq.n	8004bb4 <dhcp_recv+0xb8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1689 (discriminator 1)
 8004b12:	f899 3008 	ldrb.w	r3, [r9, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d049      	beq.n	8004bae <dhcp_recv+0xb2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1704
  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8004b1a:	f8d9 3004 	ldr.w	r3, [r9, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1682
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8004b1e:	6854      	ldr	r4, [r2, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1704
  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8004b20:	b133      	cbz	r3, 8004b30 <dhcp_recv+0x34>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1704 (discriminator 1)
 8004b22:	4b6e      	ldr	r3, [pc, #440]	; (8004cdc <dhcp_recv+0x1e0>)
 8004b24:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 8004b28:	496d      	ldr	r1, [pc, #436]	; (8004ce0 <dhcp_recv+0x1e4>)
 8004b2a:	486e      	ldr	r0, [pc, #440]	; (8004ce4 <dhcp_recv+0x1e8>)
 8004b2c:	f008 fa36 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1706
  if (p->len < DHCP_MIN_REPLY_LEN) {
 8004b30:	9b01      	ldr	r3, [sp, #4]
 8004b32:	895b      	ldrh	r3, [r3, #10]
 8004b34:	2b2b      	cmp	r3, #43	; 0x2b
 8004b36:	d93a      	bls.n	8004bae <dhcp_recv+0xb2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1711
  if (reply_msg->op != DHCP_BOOTREPLY) {
 8004b38:	7823      	ldrb	r3, [r4, #0]
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d137      	bne.n	8004bae <dhcp_recv+0xb2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1716
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8004b3e:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
 8004b42:	f106 012d 	add.w	r1, r6, #45	; 0x2d
 8004b46:	f104 021c 	add.w	r2, r4, #28
 8004b4a:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1716 (discriminator 1)
 8004b4c:	b2dd      	uxtb	r5, r3
 8004b4e:	42a8      	cmp	r0, r5
 8004b50:	d901      	bls.n	8004b56 <dhcp_recv+0x5a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1716 (discriminator 3)
 8004b52:	2b06      	cmp	r3, #6
 8004b54:	d124      	bne.n	8004ba0 <dhcp_recv+0xa4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1725
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8004b56:	6860      	ldr	r0, [r4, #4]
 8004b58:	f005 fe0d 	bl	800a776 <lwip_htonl>
 8004b5c:	f8d9 3000 	ldr.w	r3, [r9]
 8004b60:	4298      	cmp	r0, r3
 8004b62:	d124      	bne.n	8004bae <dhcp_recv+0xb2>
dhcp_parse_reply():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1472
  dhcp_clear_all_options(dhcp);
 8004b64:	4b60      	ldr	r3, [pc, #384]	; (8004ce8 <dhcp_recv+0x1ec>)
 8004b66:	2200      	movs	r2, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1474
  if (p->len < DHCP_SNAME_OFS) {
 8004b68:	9901      	ldr	r1, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1472
  dhcp_clear_all_options(dhcp);
 8004b6a:	605a      	str	r2, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1474
  if (p->len < DHCP_SNAME_OFS) {
 8004b6c:	8949      	ldrh	r1, [r1, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1472
  dhcp_clear_all_options(dhcp);
 8004b6e:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1474
  if (p->len < DHCP_SNAME_OFS) {
 8004b70:	292b      	cmp	r1, #43	; 0x2b
 8004b72:	d91c      	bls.n	8004bae <dhcp_recv+0xb2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1477
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8004b74:	9901      	ldr	r1, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1486
  options_idx = DHCP_OPTIONS_OFS;
 8004b76:	f04f 0bf0 	mov.w	fp, #240	; 0xf0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1469
  int parse_sname_as_options = 0;
 8004b7a:	9203      	str	r2, [sp, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1477
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8004b7c:	6849      	ldr	r1, [r1, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1591
      if (!dhcp_option_given(dhcp, decode_idx)) {
 8004b7e:	9302      	str	r3, [sp, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1477
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8004b80:	f8c9 1004 	str.w	r1, [r9, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1488
  options_idx_max = p->tot_len;
 8004b84:	9901      	ldr	r1, [sp, #4]
 8004b86:	f8b1 a008 	ldrh.w	sl, [r1, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1486
  options_idx = DHCP_OPTIONS_OFS;
 8004b8a:	f8dd 8004 	ldr.w	r8, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1491
  while ((q != NULL) && (options_idx >= q->len)) {
 8004b8e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8004b92:	455b      	cmp	r3, fp
 8004b94:	d914      	bls.n	8004bc0 <dhcp_recv+0xc4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1501
  options = (u8_t*)q->payload;
 8004b96:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004b9a:	465d      	mov	r5, fp
 8004b9c:	9304      	str	r3, [sp, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1503
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8004b9e:	e0b4      	b.n	8004d0a <dhcp_recv+0x20e>
dhcp_recv():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1717
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8004ba0:	f811 7b01 	ldrb.w	r7, [r1], #1
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004baa:	42af      	cmp	r7, r5
 8004bac:	d0ce      	beq.n	8004b4c <dhcp_recv+0x50>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1789
    dhcp->msg_in = NULL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f8c9 3004 	str.w	r3, [r9, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1791
  pbuf_free(p);
 8004bb4:	9801      	ldr	r0, [sp, #4]
 8004bb6:	f005 fe65 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1792
}
 8004bba:	b009      	add	sp, #36	; 0x24
 8004bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
dhcp_parse_reply():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1492
    options_idx -= q->len;
 8004bc0:	ebab 0203 	sub.w	r2, fp, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1493
    options_idx_max -= q->len;
 8004bc4:	ebaa 0a03 	sub.w	sl, sl, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1494
    q = q->next;
 8004bc8:	f8d8 8000 	ldr.w	r8, [r8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1492
    options_idx -= q->len;
 8004bcc:	fa1f fb82 	uxth.w	fp, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1493
    options_idx_max -= q->len;
 8004bd0:	fa1f fa8a 	uxth.w	sl, sl
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1491
  while ((q != NULL) && (options_idx >= q->len)) {
 8004bd4:	f1b8 0f00 	cmp.w	r8, #0
 8004bd8:	d1d9      	bne.n	8004b8e <dhcp_recv+0x92>
 8004bda:	e7e8      	b.n	8004bae <dhcp_recv+0xb2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1513
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 8004bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 80a4 	beq.w	8004d2e <dhcp_recv+0x232>
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	e0a0      	b.n	8004d2e <dhcp_recv+0x232>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1517
    switch(op) {
 8004bec:	2c36      	cmp	r4, #54	; 0x36
 8004bee:	d03d      	beq.n	8004c6c <dhcp_recv+0x170>
 8004bf0:	d336      	bcc.n	8004c60 <dhcp_recv+0x164>
 8004bf2:	2c3a      	cmp	r4, #58	; 0x3a
 8004bf4:	d040      	beq.n	8004c78 <dhcp_recv+0x17c>
 8004bf6:	2c3b      	cmp	r4, #59	; 0x3b
 8004bf8:	f040 80a9 	bne.w	8004d4e <dhcp_recv+0x252>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1577
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d053      	beq.n	8004ca8 <dhcp_recv+0x1ac>
 8004c00:	4b36      	ldr	r3, [pc, #216]	; (8004cdc <dhcp_recv+0x1e0>)
 8004c02:	f240 6229 	movw	r2, #1577	; 0x629
 8004c06:	e00a      	b.n	8004c1e <dhcp_recv+0x122>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1523
        offset--;
 8004c08:	3d01      	subs	r5, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1521
        decode_len = len = 0;
 8004c0a:	4623      	mov	r3, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1507
    int decode_idx = -1;
 8004c0c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1523
        offset--;
 8004c10:	b2ad      	uxth	r5, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1524
        break;
 8004c12:	e09f      	b.n	8004d54 <dhcp_recv+0x258>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1526
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d035      	beq.n	8004c84 <dhcp_recv+0x188>
 8004c18:	4b30      	ldr	r3, [pc, #192]	; (8004cdc <dhcp_recv+0x1e0>)
 8004c1a:	f240 52f6 	movw	r2, #1526	; 0x5f6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1545
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004c1e:	4933      	ldr	r1, [pc, #204]	; (8004cec <dhcp_recv+0x1f0>)
 8004c20:	e005      	b.n	8004c2e <dhcp_recv+0x132>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1531
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d831      	bhi.n	8004c8a <dhcp_recv+0x18e>
 8004c26:	4b2d      	ldr	r3, [pc, #180]	; (8004cdc <dhcp_recv+0x1e0>)
 8004c28:	f240 52fb 	movw	r2, #1531	; 0x5fb
 8004c2c:	4930      	ldr	r1, [pc, #192]	; (8004cf0 <dhcp_recv+0x1f4>)
 8004c2e:	482d      	ldr	r0, [pc, #180]	; (8004ce4 <dhcp_recv+0x1e8>)
 8004c30:	f008 f9b4 	bl	800cf9c <iprintf>
 8004c34:	e7bb      	b.n	8004bae <dhcp_recv+0xb2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1545
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d02a      	beq.n	8004c90 <dhcp_recv+0x194>
 8004c3a:	4b28      	ldr	r3, [pc, #160]	; (8004cdc <dhcp_recv+0x1e0>)
 8004c3c:	f240 6209 	movw	r2, #1545	; 0x609
 8004c40:	e7ed      	b.n	8004c1e <dhcp_recv+0x122>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1559
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d004      	beq.n	8004c50 <dhcp_recv+0x154>
 8004c46:	4b25      	ldr	r3, [pc, #148]	; (8004cdc <dhcp_recv+0x1e0>)
 8004c48:	f240 6217 	movw	r2, #1559	; 0x617
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1565
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8004c4c:	4929      	ldr	r1, [pc, #164]	; (8004cf4 <dhcp_recv+0x1f8>)
 8004c4e:	e7ee      	b.n	8004c2e <dhcp_recv+0x132>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1561
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8004c50:	f1bb 0ff0 	cmp.w	fp, #240	; 0xf0
 8004c54:	d01f      	beq.n	8004c96 <dhcp_recv+0x19a>
 8004c56:	4b21      	ldr	r3, [pc, #132]	; (8004cdc <dhcp_recv+0x1e0>)
 8004c58:	f240 6219 	movw	r2, #1561	; 0x619
 8004c5c:	4926      	ldr	r1, [pc, #152]	; (8004cf8 <dhcp_recv+0x1fc>)
 8004c5e:	e7e6      	b.n	8004c2e <dhcp_recv+0x132>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1565
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d01e      	beq.n	8004ca2 <dhcp_recv+0x1a6>
 8004c64:	4b1d      	ldr	r3, [pc, #116]	; (8004cdc <dhcp_recv+0x1e0>)
 8004c66:	f240 621d 	movw	r2, #1565	; 0x61d
 8004c6a:	e7ef      	b.n	8004c4c <dhcp_recv+0x150>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1569
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d015      	beq.n	8004c9c <dhcp_recv+0x1a0>
 8004c70:	4b1a      	ldr	r3, [pc, #104]	; (8004cdc <dhcp_recv+0x1e0>)
 8004c72:	f240 6221 	movw	r2, #1569	; 0x621
 8004c76:	e7d2      	b.n	8004c1e <dhcp_recv+0x122>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1573
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d012      	beq.n	8004ca2 <dhcp_recv+0x1a6>
 8004c7c:	4b17      	ldr	r3, [pc, #92]	; (8004cdc <dhcp_recv+0x1e0>)
 8004c7e:	f240 6225 	movw	r2, #1573	; 0x625
 8004c82:	e7cc      	b.n	8004c1e <dhcp_recv+0x122>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1526
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004c84:	461c      	mov	r4, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1527
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8004c86:	2706      	movs	r7, #6
 8004c88:	e064      	b.n	8004d54 <dhcp_recv+0x258>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1532
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8004c8a:	2707      	movs	r7, #7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1530
        decode_len = 4; /* only copy the first given router */
 8004c8c:	2404      	movs	r4, #4
 8004c8e:	e061      	b.n	8004d54 <dhcp_recv+0x258>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1545
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004c90:	461c      	mov	r4, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1546
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8004c92:	2703      	movs	r7, #3
 8004c94:	e05e      	b.n	8004d54 <dhcp_recv+0x258>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1516
    decode_len = len;
 8004c96:	461c      	mov	r4, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1562
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8004c98:	2700      	movs	r7, #0
 8004c9a:	e05b      	b.n	8004d54 <dhcp_recv+0x258>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1569
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004c9c:	461c      	mov	r4, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1570
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8004c9e:	2702      	movs	r7, #2
 8004ca0:	e058      	b.n	8004d54 <dhcp_recv+0x258>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1573
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004ca2:	461c      	mov	r4, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1574
        decode_idx = DHCP_OPTION_IDX_T1;
 8004ca4:	461f      	mov	r7, r3
 8004ca6:	e055      	b.n	8004d54 <dhcp_recv+0x258>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1577
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004ca8:	461c      	mov	r4, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1578
        decode_idx = DHCP_OPTION_IDX_T2;
 8004caa:	2705      	movs	r7, #5
 8004cac:	e052      	b.n	8004d54 <dhcp_recv+0x258>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1608
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8004cae:	2c01      	cmp	r4, #1
 8004cb0:	d004      	beq.n	8004cbc <dhcp_recv+0x1c0>
 8004cb2:	4b0a      	ldr	r3, [pc, #40]	; (8004cdc <dhcp_recv+0x1e0>)
 8004cb4:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 8004cb8:	4910      	ldr	r1, [pc, #64]	; (8004cfc <dhcp_recv+0x200>)
 8004cba:	e7b8      	b.n	8004c2e <dhcp_recv+0x132>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1609
          value = ((u8_t*)&value)[0];
 8004cbc:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8004cc0:	9307      	str	r3, [sp, #28]
 8004cc2:	e06b      	b.n	8004d9c <dhcp_recv+0x2a0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1619
        q = q->next;
 8004cc4:	f8d8 8000 	ldr.w	r8, [r8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1620
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8004cc8:	f1b8 0f00 	cmp.w	r8, #0
 8004ccc:	d11a      	bne.n	8004d04 <dhcp_recv+0x208>
 8004cce:	4b03      	ldr	r3, [pc, #12]	; (8004cdc <dhcp_recv+0x1e0>)
 8004cd0:	f240 6254 	movw	r2, #1620	; 0x654
 8004cd4:	490a      	ldr	r1, [pc, #40]	; (8004d00 <dhcp_recv+0x204>)
 8004cd6:	e7aa      	b.n	8004c2e <dhcp_recv+0x132>
 8004cd8:	2000be1c 	.word	0x2000be1c
 8004cdc:	0801eb54 	.word	0x0801eb54
 8004ce0:	0801ec89 	.word	0x0801ec89
 8004ce4:	0800e36a 	.word	0x0800e36a
 8004ce8:	20008080 	.word	0x20008080
 8004cec:	0801ec9c 	.word	0x0801ec9c
 8004cf0:	0801eca5 	.word	0x0801eca5
 8004cf4:	0801ecb7 	.word	0x0801ecb7
 8004cf8:	0801ecc0 	.word	0x0801ecc0
 8004cfc:	0801ece8 	.word	0x0801ece8
 8004d00:	0801ecfb 	.word	0x0801ecfb
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1621
        options = (u8_t*)q->payload;
 8004d04:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004d08:	9304      	str	r3, [sp, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1503
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8004d0a:	4555      	cmp	r5, sl
 8004d0c:	d259      	bcs.n	8004dc2 <dhcp_recv+0x2c6>
 8004d0e:	9b04      	ldr	r3, [sp, #16]
 8004d10:	5d5c      	ldrb	r4, [r3, r5]
 8004d12:	2cff      	cmp	r4, #255	; 0xff
 8004d14:	d055      	beq.n	8004dc2 <dhcp_recv+0x2c6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1508
    u16_t val_offset = offset + 2;
 8004d16:	1cab      	adds	r3, r5, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1510
    if ((offset + 1) < q->len) {
 8004d18:	f8b8 200a 	ldrh.w	r2, [r8, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1508
    u16_t val_offset = offset + 2;
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	9305      	str	r3, [sp, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1510
    if ((offset + 1) < q->len) {
 8004d20:	1c6b      	adds	r3, r5, #1
 8004d22:	4293      	cmp	r3, r2
 8004d24:	f6bf af5a 	bge.w	8004bdc <dhcp_recv+0xe0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1511
      len = options[offset + 1];
 8004d28:	9b04      	ldr	r3, [sp, #16]
 8004d2a:	442b      	add	r3, r5
 8004d2c:	785b      	ldrb	r3, [r3, #1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1517
    switch(op) {
 8004d2e:	2c34      	cmp	r4, #52	; 0x34
 8004d30:	d087      	beq.n	8004c42 <dhcp_recv+0x146>
 8004d32:	f63f af5b 	bhi.w	8004bec <dhcp_recv+0xf0>
 8004d36:	2c01      	cmp	r4, #1
 8004d38:	f43f af6c 	beq.w	8004c14 <dhcp_recv+0x118>
 8004d3c:	2c00      	cmp	r4, #0
 8004d3e:	f43f af63 	beq.w	8004c08 <dhcp_recv+0x10c>
 8004d42:	2c03      	cmp	r4, #3
 8004d44:	f43f af6d 	beq.w	8004c22 <dhcp_recv+0x126>
 8004d48:	2c33      	cmp	r4, #51	; 0x33
 8004d4a:	f43f af74 	beq.w	8004c36 <dhcp_recv+0x13a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1507
    int decode_idx = -1;
 8004d4e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1581
        decode_len = 0;
 8004d52:	2400      	movs	r4, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1585
    offset += len + 2;
 8004d54:	3502      	adds	r5, #2
 8004d56:	fa13 f585 	uxtah	r5, r3, r5
 8004d5a:	b2ad      	uxth	r5, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1586
    if (decode_len > 0) {
 8004d5c:	b32c      	cbz	r4, 8004daa <dhcp_recv+0x2ae>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1587
      u32_t value = 0;
 8004d5e:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1590
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8004d60:	2f07      	cmp	r7, #7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1587
      u32_t value = 0;
 8004d62:	9307      	str	r3, [sp, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1590
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8004d64:	d906      	bls.n	8004d74 <dhcp_recv+0x278>
 8004d66:	4b51      	ldr	r3, [pc, #324]	; (8004eac <dhcp_recv+0x3b0>)
 8004d68:	f240 6236 	movw	r2, #1590	; 0x636
 8004d6c:	4950      	ldr	r1, [pc, #320]	; (8004eb0 <dhcp_recv+0x3b4>)
 8004d6e:	4851      	ldr	r0, [pc, #324]	; (8004eb4 <dhcp_recv+0x3b8>)
 8004d70:	f008 f914 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1591
      if (!dhcp_option_given(dhcp, decode_idx)) {
 8004d74:	9b02      	ldr	r3, [sp, #8]
 8004d76:	5ddb      	ldrb	r3, [r3, r7]
 8004d78:	b9bb      	cbnz	r3, 8004daa <dhcp_recv+0x2ae>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1592
        copy_len = LWIP_MIN(decode_len, 4);
 8004d7a:	b2a2      	uxth	r2, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1593
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8004d7c:	9b05      	ldr	r3, [sp, #20]
 8004d7e:	a907      	add	r1, sp, #28
 8004d80:	4640      	mov	r0, r8
 8004d82:	9205      	str	r2, [sp, #20]
 8004d84:	f006 f816 	bl	800adb4 <pbuf_copy_partial>
 8004d88:	9b05      	ldr	r3, [sp, #20]
 8004d8a:	4283      	cmp	r3, r0
 8004d8c:	f47f af0f 	bne.w	8004bae <dhcp_recv+0xb2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1605
        } else if (decode_len == 4) {
 8004d90:	2c04      	cmp	r4, #4
 8004d92:	d18c      	bne.n	8004cae <dhcp_recv+0x1b2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1606
          value = lwip_ntohl(value);
 8004d94:	9807      	ldr	r0, [sp, #28]
 8004d96:	f005 fcee 	bl	800a776 <lwip_htonl>
 8004d9a:	9007      	str	r0, [sp, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1611
        dhcp_got_option(dhcp, decode_idx);
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	9a02      	ldr	r2, [sp, #8]
 8004da0:	55d3      	strb	r3, [r2, r7]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1612
        dhcp_set_option_value(dhcp, decode_idx, value);
 8004da2:	9b07      	ldr	r3, [sp, #28]
 8004da4:	4a44      	ldr	r2, [pc, #272]	; (8004eb8 <dhcp_recv+0x3bc>)
 8004da6:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1615
    if (offset >= q->len) {
 8004daa:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8004dae:	429d      	cmp	r5, r3
 8004db0:	d3ab      	bcc.n	8004d0a <dhcp_recv+0x20e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1616
      offset -= q->len;
 8004db2:	1aed      	subs	r5, r5, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1617
      offset_max -= q->len;
 8004db4:	ebaa 0a03 	sub.w	sl, sl, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1616
      offset -= q->len;
 8004db8:	b2ad      	uxth	r5, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1617
      offset_max -= q->len;
 8004dba:	fa1f fa8a 	uxth.w	sl, sl
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1618
      if ((offset < offset_max) && offset_max) {
 8004dbe:	4555      	cmp	r5, sl
 8004dc0:	d380      	bcc.n	8004cc4 <dhcp_recv+0x1c8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1629
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8004dc2:	9b02      	ldr	r3, [sp, #8]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	b9cb      	cbnz	r3, 8004dfc <dhcp_recv+0x300>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1665
  } else if (parse_sname_as_options) {
 8004dc8:	9b03      	ldr	r3, [sp, #12]
 8004dca:	bb03      	cbnz	r3, 8004e0e <dhcp_recv+0x312>
dhcp_recv():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1739
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8004dcc:	9b02      	ldr	r3, [sp, #8]
 8004dce:	785b      	ldrb	r3, [r3, #1]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f43f aeec 	beq.w	8004bae <dhcp_recv+0xb2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1745
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8004dd6:	4a38      	ldr	r2, [pc, #224]	; (8004eb8 <dhcp_recv+0x3bc>)
 8004dd8:	7913      	ldrb	r3, [r2, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1747
  if (msg_type == DHCP_ACK) {
 8004dda:	2b05      	cmp	r3, #5
 8004ddc:	d132      	bne.n	8004e44 <dhcp_recv+0x348>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1750
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8004dde:	f899 3009 	ldrb.w	r3, [r9, #9]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d123      	bne.n	8004e2e <dhcp_recv+0x332>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1751
      dhcp_handle_ack(netif);
 8004de6:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8004de8:	f7ff fcc2 	bl	8004770 <dhcp_handle_ack.isra.1>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1753
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8004dec:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1755
        dhcp_check(netif);
 8004df0:	4630      	mov	r0, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1753
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8004df2:	071b      	lsls	r3, r3, #28
 8004df4:	d523      	bpl.n	8004e3e <dhcp_recv+0x342>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1755
        dhcp_check(netif);
 8004df6:	f7ff fba9 	bl	800454c <dhcp_check>
 8004dfa:	e6d8      	b.n	8004bae <dhcp_recv+0xb2>
dhcp_parse_reply():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1630
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8004dfc:	4b2e      	ldr	r3, [pc, #184]	; (8004eb8 <dhcp_recv+0x3bc>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1631
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8004dfe:	2200      	movs	r2, #0
 8004e00:	9902      	ldr	r1, [sp, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1630
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8004e02:	681b      	ldr	r3, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1631
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8004e04:	700a      	strb	r2, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1632
    if (overload == DHCP_OVERLOAD_FILE) {
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d00c      	beq.n	8004e24 <dhcp_recv+0x328>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1635
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d106      	bne.n	8004e1c <dhcp_recv+0x320>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1666
    parse_sname_as_options = 0;
 8004e0e:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1668
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8004e10:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1667
    options_idx = DHCP_SNAME_OFS;
 8004e14:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1666
    parse_sname_as_options = 0;
 8004e18:	9303      	str	r3, [sp, #12]
 8004e1a:	e6b6      	b.n	8004b8a <dhcp_recv+0x8e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1638
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	d1d3      	bne.n	8004dc8 <dhcp_recv+0x2cc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1639
      parse_sname_as_options = 1;
 8004e20:	2301      	movs	r3, #1
 8004e22:	9303      	str	r3, [sp, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1663
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8004e24:	f04f 0aec 	mov.w	sl, #236	; 0xec
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1662
    options_idx = DHCP_FILE_OFS;
 8004e28:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
 8004e2c:	e6ad      	b.n	8004b8a <dhcp_recv+0x8e>
dhcp_recv():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1766
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8004e2e:	3b03      	subs	r3, #3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	f63f aebc 	bhi.w	8004bae <dhcp_recv+0xb2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1768
      dhcp_handle_ack(netif);
 8004e36:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8004e38:	f7ff fc9a 	bl	8004770 <dhcp_handle_ack.isra.1>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1769
      dhcp_bind(netif);
 8004e3c:	4630      	mov	r0, r6
 8004e3e:	f7ff fb9b 	bl	8004578 <dhcp_bind>
 8004e42:	e6b4      	b.n	8004bae <dhcp_recv+0xb2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1773
  else if ((msg_type == DHCP_NAK) &&
 8004e44:	2b06      	cmp	r3, #6
 8004e46:	d115      	bne.n	8004e74 <dhcp_recv+0x378>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1774 (discriminator 1)
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8004e48:	f899 3009 	ldrb.w	r3, [r9, #9]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1773 (discriminator 1)
  else if ((msg_type == DHCP_NAK) &&
 8004e4c:	1eda      	subs	r2, r3, #3
 8004e4e:	2a02      	cmp	r2, #2
 8004e50:	d902      	bls.n	8004e58 <dhcp_recv+0x35c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1774
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	f47f aeab 	bne.w	8004bae <dhcp_recv+0xb2>
dhcp_handle_nak():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:273
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8004e58:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8004e5a:	210c      	movs	r1, #12
 8004e5c:	f7ff fa00 	bl	8004260 <dhcp_set_state>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:275
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8004e60:	4b16      	ldr	r3, [pc, #88]	; (8004ebc <dhcp_recv+0x3c0>)
 8004e62:	4630      	mov	r0, r6
 8004e64:	461a      	mov	r2, r3
 8004e66:	4619      	mov	r1, r3
 8004e68:	f005 f9c2 	bl	800a1f0 <netif_set_addr>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:277
  dhcp_discover(netif);
 8004e6c:	4630      	mov	r0, r6
 8004e6e:	f7ff fce5 	bl	800483c <dhcp_discover>
 8004e72:	e69c      	b.n	8004bae <dhcp_recv+0xb2>
dhcp_recv():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1780
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	f47f ae9a 	bne.w	8004bae <dhcp_recv+0xb2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1780 (discriminator 1)
 8004e7a:	f899 3009 	ldrb.w	r3, [r9, #9]
 8004e7e:	2b06      	cmp	r3, #6
 8004e80:	f47f ae95 	bne.w	8004bae <dhcp_recv+0xb2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1782
    dhcp->request_timeout = 0;
 8004e84:	9b03      	ldr	r3, [sp, #12]
 8004e86:	f8a9 3016 	strh.w	r3, [r9, #22]
dhcp_handle_offer():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:327
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8004e8a:	9b02      	ldr	r3, [sp, #8]
 8004e8c:	789b      	ldrb	r3, [r3, #2]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f43f ae8d 	beq.w	8004bae <dhcp_recv+0xb2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:322
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8004e94:	6a74      	ldr	r4, [r6, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:328
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8004e96:	6890      	ldr	r0, [r2, #8]
 8004e98:	f005 fc6d 	bl	800a776 <lwip_htonl>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:332
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8004e9c:	6863      	ldr	r3, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:328
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8004e9e:	6260      	str	r0, [r4, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:336
    dhcp_select(netif);
 8004ea0:	4630      	mov	r0, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:332
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	62a3      	str	r3, [r4, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:336
    dhcp_select(netif);
 8004ea6:	f7ff fd29 	bl	80048fc <dhcp_select>
 8004eaa:	e680      	b.n	8004bae <dhcp_recv+0xb2>
 8004eac:	0801eb54 	.word	0x0801eb54
 8004eb0:	0801ecd7 	.word	0x0801ecd7
 8004eb4:	0800e36a 	.word	0x0800e36a
 8004eb8:	20008088 	.word	0x20008088
 8004ebc:	0801e8dc 	.word	0x0801e8dc

08004ec0 <dhcp_network_changed>:
dhcp_network_changed():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:846
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8004ec0:	6a43      	ldr	r3, [r0, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:848
  if (!dhcp)
 8004ec2:	b193      	cbz	r3, 8004eea <dhcp_network_changed+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:850
  switch (dhcp->state) {
 8004ec4:	7a5a      	ldrb	r2, [r3, #9]
 8004ec6:	2a0a      	cmp	r2, #10
 8004ec8:	d80b      	bhi.n	8004ee2 <dhcp_network_changed+0x22>
 8004eca:	e8df f002 	tbb	[pc, r2]
 8004ece:	0a0e      	.short	0x0a0e
 8004ed0:	0606060a 	.word	0x0606060a
 8004ed4:	0a0a0a0a 	.word	0x0a0a0a0a
 8004ed8:	06          	.byte	0x06
 8004ed9:	00          	.byte	0x00
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:855
    dhcp->tries = 0;
 8004eda:	2200      	movs	r2, #0
 8004edc:	729a      	strb	r2, [r3, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:856
    dhcp_reboot(netif);
 8004ede:	f7ff bd83 	b.w	80049e8 <dhcp_reboot>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:872
    dhcp->tries = 0;
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	729a      	strb	r2, [r3, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:873
    dhcp_discover(netif);
 8004ee6:	f7ff bca9 	b.w	800483c <dhcp_discover>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:876
}
 8004eea:	4770      	bx	lr

08004eec <dhcp_arp_reply>:
dhcp_arp_reply():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:888
{
 8004eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:891
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8004eee:	4605      	mov	r5, r0
 8004ef0:	b948      	cbnz	r0, 8004f06 <dhcp_arp_reply+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:891 (discriminator 1)
 8004ef2:	4b24      	ldr	r3, [pc, #144]	; (8004f84 <dhcp_arp_reply+0x98>)
 8004ef4:	f240 327b 	movw	r2, #891	; 0x37b
 8004ef8:	4923      	ldr	r1, [pc, #140]	; (8004f88 <dhcp_arp_reply+0x9c>)
 8004efa:	4824      	ldr	r0, [pc, #144]	; (8004f8c <dhcp_arp_reply+0xa0>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:907 (discriminator 1)
}
 8004efc:	b003      	add	sp, #12
 8004efe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:891 (discriminator 1)
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8004f02:	f008 b84b 	b.w	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:892 (discriminator 2)
  dhcp = netif_dhcp_data(netif);
 8004f06:	6a44      	ldr	r4, [r0, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:895 (discriminator 2)
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8004f08:	2c00      	cmp	r4, #0
 8004f0a:	d039      	beq.n	8004f80 <dhcp_arp_reply+0x94>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:895 (discriminator 1)
 8004f0c:	7a63      	ldrb	r3, [r4, #9]
 8004f0e:	2b08      	cmp	r3, #8
 8004f10:	d136      	bne.n	8004f80 <dhcp_arp_reply+0x94>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:900
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8004f12:	680a      	ldr	r2, [r1, #0]
 8004f14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d132      	bne.n	8004f80 <dhcp_arp_reply+0x94>
dhcp_decline():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:925
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8004f1a:	210c      	movs	r1, #12
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	f7ff f99f 	bl	8004260 <dhcp_set_state>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:927
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 8004f22:	2204      	movs	r2, #4
 8004f24:	4621      	mov	r1, r4
 8004f26:	4628      	mov	r0, r5
 8004f28:	f7ff fa32 	bl	8004390 <dhcp_create_msg>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:928
  if (result == ERR_OK) {
 8004f2c:	bb08      	cbnz	r0, 8004f72 <dhcp_arp_reply+0x86>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:929
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8004f2e:	2204      	movs	r2, #4
 8004f30:	2132      	movs	r1, #50	; 0x32
 8004f32:	4620      	mov	r0, r4
 8004f34:	f7ff f9be 	bl	80042b4 <dhcp_option>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:930
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8004f38:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004f3a:	f005 fc1c 	bl	800a776 <lwip_htonl>
 8004f3e:	4601      	mov	r1, r0
 8004f40:	4620      	mov	r0, r4
 8004f42:	f7ff f9f7 	bl	8004334 <dhcp_option_long>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:932
    dhcp_option_trailer(dhcp);
 8004f46:	4620      	mov	r0, r4
 8004f48:	f7ff fbd6 	bl	80046f8 <dhcp_option_trailer>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:934
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8004f4c:	8aa1      	ldrh	r1, [r4, #20]
 8004f4e:	68e0      	ldr	r0, [r4, #12]
 8004f50:	31f0      	adds	r1, #240	; 0xf0
 8004f52:	b289      	uxth	r1, r1
 8004f54:	f005 fdd0 	bl	800aaf8 <pbuf_realloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:937
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8004f58:	4b0d      	ldr	r3, [pc, #52]	; (8004f90 <dhcp_arp_reply+0xa4>)
 8004f5a:	480e      	ldr	r0, [pc, #56]	; (8004f94 <dhcp_arp_reply+0xa8>)
 8004f5c:	4a0e      	ldr	r2, [pc, #56]	; (8004f98 <dhcp_arp_reply+0xac>)
 8004f5e:	e9cd 5300 	strd	r5, r3, [sp]
 8004f62:	2343      	movs	r3, #67	; 0x43
 8004f64:	68e1      	ldr	r1, [r4, #12]
 8004f66:	6800      	ldr	r0, [r0, #0]
 8004f68:	f005 f828 	bl	8009fbc <udp_sendto_if_src>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:938
    dhcp_delete_msg(dhcp);
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	f7ff fc35 	bl	80047dc <dhcp_delete_msg>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:944
  if (dhcp->tries < 255) {
 8004f72:	7aa3      	ldrb	r3, [r4, #10]
 8004f74:	2bff      	cmp	r3, #255	; 0xff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:945
    dhcp->tries++;
 8004f76:	bf1c      	itt	ne
 8004f78:	3301      	addne	r3, #1
 8004f7a:	72a3      	strbne	r3, [r4, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:948
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8004f7c:	2314      	movs	r3, #20
 8004f7e:	82e3      	strh	r3, [r4, #22]
dhcp_arp_reply():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:907
}
 8004f80:	b003      	add	sp, #12
 8004f82:	bd30      	pop	{r4, r5, pc}
 8004f84:	0801eb54 	.word	0x0801eb54
 8004f88:	0801e8ef 	.word	0x0801e8ef
 8004f8c:	0800e36a 	.word	0x0800e36a
 8004f90:	0801e8dc 	.word	0x0801e8dc
 8004f94:	20007e98 	.word	0x20007e98
 8004f98:	0801e8e0 	.word	0x0801e8e0

08004f9c <dhcp_renew>:
dhcp_renew():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1128
{
 8004f9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1129
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8004f9e:	6a44      	ldr	r4, [r0, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1128
{
 8004fa0:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1134
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8004fa2:	2105      	movs	r1, #5
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f7ff f95b 	bl	8004260 <dhcp_set_state>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1137
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8004faa:	2203      	movs	r2, #3
 8004fac:	4621      	mov	r1, r4
 8004fae:	4630      	mov	r0, r6
 8004fb0:	f7ff f9ee 	bl	8004390 <dhcp_create_msg>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1138
  if (result == ERR_OK) {
 8004fb4:	4605      	mov	r5, r0
 8004fb6:	bb70      	cbnz	r0, 8005016 <dhcp_renew+0x7a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1139
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8004fb8:	2202      	movs	r2, #2
 8004fba:	2139      	movs	r1, #57	; 0x39
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	f7ff f979 	bl	80042b4 <dhcp_option>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1140
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8004fc2:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	f7ff f953 	bl	8004270 <dhcp_option_short>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1142
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8004fca:	2203      	movs	r2, #3
 8004fcc:	2137      	movs	r1, #55	; 0x37
 8004fce:	4620      	mov	r0, r4
 8004fd0:	f7ff f970 	bl	80042b4 <dhcp_option>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1144
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	f7ff f990 	bl	80042fc <dhcp_option_byte>
 8004fdc:	2103      	movs	r1, #3
 8004fde:	4620      	mov	r0, r4
 8004fe0:	f7ff f98c 	bl	80042fc <dhcp_option_byte>
 8004fe4:	211c      	movs	r1, #28
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f7ff f988 	bl	80042fc <dhcp_option_byte>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1152
    dhcp_option_trailer(dhcp);
 8004fec:	4620      	mov	r0, r4
 8004fee:	f7ff fb83 	bl	80046f8 <dhcp_option_trailer>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1154
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8004ff2:	8aa1      	ldrh	r1, [r4, #20]
 8004ff4:	68e0      	ldr	r0, [r4, #12]
 8004ff6:	31f0      	adds	r1, #240	; 0xf0
 8004ff8:	b289      	uxth	r1, r1
 8004ffa:	f005 fd7d 	bl	800aaf8 <pbuf_realloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1156
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 8004ffe:	4813      	ldr	r0, [pc, #76]	; (800504c <dhcp_renew+0xb0>)
 8005000:	9600      	str	r6, [sp, #0]
 8005002:	2343      	movs	r3, #67	; 0x43
 8005004:	f104 0224 	add.w	r2, r4, #36	; 0x24
 8005008:	68e1      	ldr	r1, [r4, #12]
 800500a:	6800      	ldr	r0, [r0, #0]
 800500c:	f005 f83c 	bl	800a088 <udp_sendto_if>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1157
    dhcp_delete_msg(dhcp);
 8005010:	4620      	mov	r0, r4
 8005012:	f7ff fbe3 	bl	80047dc <dhcp_delete_msg>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1163
  if (dhcp->tries < 255) {
 8005016:	7aa3      	ldrb	r3, [r4, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1171
}
 8005018:	4628      	mov	r0, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1163
  if (dhcp->tries < 255) {
 800501a:	2bff      	cmp	r3, #255	; 0xff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1164
    dhcp->tries++;
 800501c:	bf1c      	itt	ne
 800501e:	3301      	addne	r3, #1
 8005020:	72a3      	strbne	r3, [r4, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1167
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 8005022:	7aa3      	ldrb	r3, [r4, #10]
 8005024:	2b09      	cmp	r3, #9
 8005026:	bf96      	itet	ls
 8005028:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 800502c:	f644 6320 	movwhi	r3, #20000	; 0x4e20
 8005030:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1168
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8005034:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1167
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 8005038:	bf9c      	itt	ls
 800503a:	011b      	lslls	r3, r3, #4
 800503c:	b29b      	uxthls	r3, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1168
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800503e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8005042:	fbb3 f3f2 	udiv	r3, r3, r2
 8005046:	82e3      	strh	r3, [r4, #22]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1171
}
 8005048:	b002      	add	sp, #8
 800504a:	bd70      	pop	{r4, r5, r6, pc}
 800504c:	20007e98 	.word	0x20007e98

08005050 <dhcp_stop>:
dhcp_stop():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1344
{
 8005050:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1346
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 8005052:	b940      	cbnz	r0, 8005066 <dhcp_stop+0x16>
 8005054:	4b0f      	ldr	r3, [pc, #60]	; (8005094 <dhcp_stop+0x44>)
 8005056:	f240 5242 	movw	r2, #1346	; 0x542
 800505a:	490f      	ldr	r1, [pc, #60]	; (8005098 <dhcp_stop+0x48>)
 800505c:	480f      	ldr	r0, [pc, #60]	; (800509c <dhcp_stop+0x4c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1367
}
 800505e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1346
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 8005062:	f007 bf9b 	b.w	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1347 (discriminator 2)
  dhcp = netif_dhcp_data(netif);
 8005066:	6a44      	ldr	r4, [r0, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1351 (discriminator 2)
  if (dhcp != NULL) {
 8005068:	b194      	cbz	r4, 8005090 <dhcp_stop+0x40>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1359
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800506a:	6863      	ldr	r3, [r4, #4]
 800506c:	b133      	cbz	r3, 800507c <dhcp_stop+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1359 (discriminator 1)
 800506e:	4b09      	ldr	r3, [pc, #36]	; (8005094 <dhcp_stop+0x44>)
 8005070:	f240 524f 	movw	r2, #1359	; 0x54f
 8005074:	490a      	ldr	r1, [pc, #40]	; (80050a0 <dhcp_stop+0x50>)
 8005076:	4809      	ldr	r0, [pc, #36]	; (800509c <dhcp_stop+0x4c>)
 8005078:	f007 ff90 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1360
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800507c:	2100      	movs	r1, #0
 800507e:	4620      	mov	r0, r4
 8005080:	f7ff f8ee 	bl	8004260 <dhcp_set_state>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1362
    if (dhcp->pcb_allocated != 0) {
 8005084:	7a23      	ldrb	r3, [r4, #8]
 8005086:	b11b      	cbz	r3, 8005090 <dhcp_stop+0x40>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1363
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8005088:	f7ff fd18 	bl	8004abc <dhcp_dec_pcb_refcount>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1364
      dhcp->pcb_allocated = 0;
 800508c:	2300      	movs	r3, #0
 800508e:	7223      	strb	r3, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1367
}
 8005090:	bd10      	pop	{r4, pc}
 8005092:	bf00      	nop
 8005094:	0801eb54 	.word	0x0801eb54
 8005098:	0801ed6b 	.word	0x0801ed6b
 800509c:	0800e36a 	.word	0x0800e36a
 80050a0:	0801ec89 	.word	0x0801ec89

080050a4 <dhcp_start>:
dhcp_start():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:722
{
 80050a4:	b538      	push	{r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:726
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80050a6:	4605      	mov	r5, r0
 80050a8:	b948      	cbnz	r0, 80050be <dhcp_start+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:726 (discriminator 1)
 80050aa:	4b27      	ldr	r3, [pc, #156]	; (8005148 <dhcp_start+0xa4>)
 80050ac:	f240 22d6 	movw	r2, #726	; 0x2d6
 80050b0:	4926      	ldr	r1, [pc, #152]	; (800514c <dhcp_start+0xa8>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:727 (discriminator 1)
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80050b2:	4827      	ldr	r0, [pc, #156]	; (8005150 <dhcp_start+0xac>)
 80050b4:	f007 ff72 	bl	800cf9c <iprintf>
 80050b8:	f06f 000f 	mvn.w	r0, #15
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:789
}
 80050bc:	bd38      	pop	{r3, r4, r5, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:727 (discriminator 2)
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80050be:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 80050c2:	07db      	lsls	r3, r3, #31
 80050c4:	d404      	bmi.n	80050d0 <dhcp_start+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:727 (discriminator 1)
 80050c6:	4b20      	ldr	r3, [pc, #128]	; (8005148 <dhcp_start+0xa4>)
 80050c8:	f240 22d7 	movw	r2, #727	; 0x2d7
 80050cc:	4921      	ldr	r1, [pc, #132]	; (8005154 <dhcp_start+0xb0>)
 80050ce:	e7f0      	b.n	80050b2 <dhcp_start+0xe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:732 (discriminator 2)
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80050d0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:728 (discriminator 2)
  dhcp = netif_dhcp_data(netif);
 80050d2:	6a44      	ldr	r4, [r0, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:732 (discriminator 2)
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80050d4:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80050d8:	d202      	bcs.n	80050e0 <dhcp_start+0x3c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:786
    return ERR_MEM;
 80050da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050de:	e7ed      	b.n	80050bc <dhcp_start+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:738
  if (dhcp == NULL) {
 80050e0:	b9d4      	cbnz	r4, 8005118 <dhcp_start+0x74>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:740
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80050e2:	2040      	movs	r0, #64	; 0x40
 80050e4:	f005 faaa 	bl	800a63c <mem_malloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:741
    if (dhcp == NULL) {
 80050e8:	4604      	mov	r4, r0
 80050ea:	2800      	cmp	r0, #0
 80050ec:	d0f5      	beq.n	80050da <dhcp_start+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:747
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80050ee:	6268      	str	r0, [r5, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:762
  memset(dhcp, 0, sizeof(struct dhcp));
 80050f0:	2240      	movs	r2, #64	; 0x40
 80050f2:	2100      	movs	r1, #0
 80050f4:	4620      	mov	r0, r4
 80050f6:	f007 ff49 	bl	800cf8c <memset>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:767
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80050fa:	f7ff fac3 	bl	8004684 <dhcp_inc_pcb_refcount>
 80050fe:	2800      	cmp	r0, #0
 8005100:	d1eb      	bne.n	80050da <dhcp_start+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:770
  dhcp->pcb_allocated = 1;
 8005102:	2301      	movs	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:782
  result = dhcp_discover(netif);
 8005104:	4628      	mov	r0, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:770
  dhcp->pcb_allocated = 1;
 8005106:	7223      	strb	r3, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:782
  result = dhcp_discover(netif);
 8005108:	f7ff fb98 	bl	800483c <dhcp_discover>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:783
  if (result != ERR_OK) {
 800510c:	2800      	cmp	r0, #0
 800510e:	d0d5      	beq.n	80050bc <dhcp_start+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:785
    dhcp_stop(netif);
 8005110:	4628      	mov	r0, r5
 8005112:	f7ff ff9d 	bl	8005050 <dhcp_stop>
 8005116:	e7e0      	b.n	80050da <dhcp_start+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:752
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 8005118:	68e3      	ldr	r3, [r4, #12]
 800511a:	b133      	cbz	r3, 800512a <dhcp_start+0x86>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:752 (discriminator 1)
 800511c:	4b0a      	ldr	r3, [pc, #40]	; (8005148 <dhcp_start+0xa4>)
 800511e:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 8005122:	490d      	ldr	r1, [pc, #52]	; (8005158 <dhcp_start+0xb4>)
 8005124:	480a      	ldr	r0, [pc, #40]	; (8005150 <dhcp_start+0xac>)
 8005126:	f007 ff39 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:753
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 800512a:	6863      	ldr	r3, [r4, #4]
 800512c:	b133      	cbz	r3, 800513c <dhcp_start+0x98>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:753 (discriminator 1)
 800512e:	4b06      	ldr	r3, [pc, #24]	; (8005148 <dhcp_start+0xa4>)
 8005130:	f240 22f1 	movw	r2, #753	; 0x2f1
 8005134:	4909      	ldr	r1, [pc, #36]	; (800515c <dhcp_start+0xb8>)
 8005136:	4806      	ldr	r0, [pc, #24]	; (8005150 <dhcp_start+0xac>)
 8005138:	f007 ff30 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:755
    if (dhcp->pcb_allocated != 0) {
 800513c:	7a23      	ldrb	r3, [r4, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0d6      	beq.n	80050f0 <dhcp_start+0x4c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:756
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8005142:	f7ff fcbb 	bl	8004abc <dhcp_dec_pcb_refcount>
 8005146:	e7d3      	b.n	80050f0 <dhcp_start+0x4c>
 8005148:	0801eb54 	.word	0x0801eb54
 800514c:	0801e8ef 	.word	0x0801e8ef
 8005150:	0800e36a 	.word	0x0800e36a
 8005154:	0801ed32 	.word	0x0801ed32
 8005158:	0801ed53 	.word	0x0801ed53
 800515c:	0801ec89 	.word	0x0801ec89

08005160 <dhcp_supplied_address>:
dhcp_supplied_address():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1943
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8005160:	b150      	cbz	r0, 8005178 <dhcp_supplied_address+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1943 (discriminator 1)
 8005162:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005164:	b140      	cbz	r0, 8005178 <dhcp_supplied_address+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1945
    struct dhcp* dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8005166:	7a40      	ldrb	r0, [r0, #9]
 8005168:	280a      	cmp	r0, #10
 800516a:	d006      	beq.n	800517a <dhcp_supplied_address+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1945 (discriminator 4)
 800516c:	3804      	subs	r0, #4
 800516e:	2801      	cmp	r0, #1
 8005170:	bf8c      	ite	hi
 8005172:	2000      	movhi	r0, #0
 8005174:	2001      	movls	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1945 (discriminator 8)
 8005176:	b2c0      	uxtb	r0, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1949
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
 8005178:	4770      	bx	lr
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1945
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800517a:	2001      	movs	r0, #1
 800517c:	e7fb      	b.n	8005176 <dhcp_supplied_address+0x16>
	...

08005180 <dhcp_release>:
dhcp_release():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1281
{
 8005180:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1282
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8005182:	6a44      	ldr	r4, [r0, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1281
{
 8005184:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1288
  if (dhcp == NULL) {
 8005186:	2c00      	cmp	r4, #0
 8005188:	d043      	beq.n	8005212 <dhcp_release+0x92>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1291
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800518a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800518c:	9303      	str	r3, [sp, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1293
  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800518e:	f7ff ffe7 	bl	8005160 <dhcp_supplied_address>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1296
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8005192:	2100      	movs	r1, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1293
  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 8005194:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1296
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8005196:	4620      	mov	r0, r4
 8005198:	f7ff f862 	bl	8004260 <dhcp_set_state>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1306
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800519c:	2300      	movs	r3, #0
 800519e:	e9c4 3307 	strd	r3, r3, [r4, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1299
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80051a2:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1301
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80051a6:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1305
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80051aa:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80051ae:	63e3      	str	r3, [r4, #60]	; 0x3c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1308
  if (!is_dhcp_supplied_address) {
 80051b0:	b365      	cbz	r5, 800520c <dhcp_release+0x8c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1314
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 80051b2:	2207      	movs	r2, #7
 80051b4:	4621      	mov	r1, r4
 80051b6:	4630      	mov	r0, r6
 80051b8:	f7ff f8ea 	bl	8004390 <dhcp_create_msg>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1315
  if (result == ERR_OK) {
 80051bc:	4605      	mov	r5, r0
 80051be:	b9f8      	cbnz	r0, 8005200 <dhcp_release+0x80>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1316
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 80051c0:	2204      	movs	r2, #4
 80051c2:	2136      	movs	r1, #54	; 0x36
 80051c4:	4620      	mov	r0, r4
 80051c6:	f7ff f875 	bl	80042b4 <dhcp_option>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1317
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80051ca:	9803      	ldr	r0, [sp, #12]
 80051cc:	f005 fad3 	bl	800a776 <lwip_htonl>
 80051d0:	4601      	mov	r1, r0
 80051d2:	4620      	mov	r0, r4
 80051d4:	f7ff f8ae 	bl	8004334 <dhcp_option_long>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1319
    dhcp_option_trailer(dhcp);
 80051d8:	4620      	mov	r0, r4
 80051da:	f7ff fa8d 	bl	80046f8 <dhcp_option_trailer>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1321
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80051de:	8aa1      	ldrh	r1, [r4, #20]
 80051e0:	68e0      	ldr	r0, [r4, #12]
 80051e2:	31f0      	adds	r1, #240	; 0xf0
 80051e4:	b289      	uxth	r1, r1
 80051e6:	f005 fc87 	bl	800aaf8 <pbuf_realloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1323
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 80051ea:	480b      	ldr	r0, [pc, #44]	; (8005218 <dhcp_release+0x98>)
 80051ec:	9600      	str	r6, [sp, #0]
 80051ee:	2343      	movs	r3, #67	; 0x43
 80051f0:	aa03      	add	r2, sp, #12
 80051f2:	68e1      	ldr	r1, [r4, #12]
 80051f4:	6800      	ldr	r0, [r0, #0]
 80051f6:	f004 ff47 	bl	800a088 <udp_sendto_if>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1324
    dhcp_delete_msg(dhcp);
 80051fa:	4620      	mov	r0, r4
 80051fc:	f7ff faee 	bl	80047dc <dhcp_delete_msg>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1331
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8005200:	4b06      	ldr	r3, [pc, #24]	; (800521c <dhcp_release+0x9c>)
 8005202:	4630      	mov	r0, r6
 8005204:	461a      	mov	r2, r3
 8005206:	4619      	mov	r1, r3
 8005208:	f004 fff2 	bl	800a1f0 <netif_set_addr>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1334
}
 800520c:	4628      	mov	r0, r5
 800520e:	b004      	add	sp, #16
 8005210:	bd70      	pop	{r4, r5, r6, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1289
    return ERR_ARG;
 8005212:	f06f 050f 	mvn.w	r5, #15
 8005216:	e7f9      	b.n	800520c <dhcp_release+0x8c>
 8005218:	20007e98 	.word	0x20007e98
 800521c:	0801e8dc 	.word	0x0801e8dc

08005220 <dhcp_coarse_tmr>:
dhcp_coarse_tmr():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:411
  struct netif *netif = netif_list;
 8005220:	4b51      	ldr	r3, [pc, #324]	; (8005368 <dhcp_coarse_tmr+0x148>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:410
{
 8005222:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:411
  struct netif *netif = netif_list;
 8005226:	681d      	ldr	r5, [r3, #0]
dhcp_t2_timeout():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:563
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8005228:	f240 2619 	movw	r6, #537	; 0x219
dhcp_rebind():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1208
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800522c:	4f4f      	ldr	r7, [pc, #316]	; (800536c <dhcp_coarse_tmr+0x14c>)
 800522e:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8005370 <dhcp_coarse_tmr+0x150>
dhcp_coarse_tmr():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:414
  while (netif != NULL) {
 8005232:	b915      	cbnz	r5, 800523a <dhcp_coarse_tmr+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:439
}
 8005234:	b003      	add	sp, #12
 8005236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:416
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800523a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:417
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800523c:	b17c      	cbz	r4, 800525e <dhcp_coarse_tmr+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:417 (discriminator 1)
 800523e:	7a63      	ldrb	r3, [r4, #9]
 8005240:	b16b      	cbz	r3, 800525e <dhcp_coarse_tmr+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:419
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8005242:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8005244:	b169      	cbz	r1, 8005262 <dhcp_coarse_tmr+0x42>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:419 (discriminator 1)
 8005246:	8c22      	ldrh	r2, [r4, #32]
 8005248:	3201      	adds	r2, #1
 800524a:	b292      	uxth	r2, r2
 800524c:	4291      	cmp	r1, r2
 800524e:	8422      	strh	r2, [r4, #32]
 8005250:	d107      	bne.n	8005262 <dhcp_coarse_tmr+0x42>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:422
        dhcp_release(netif);
 8005252:	4628      	mov	r0, r5
 8005254:	f7ff ff94 	bl	8005180 <dhcp_release>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:423
        dhcp_discover(netif);
 8005258:	4628      	mov	r0, r5
 800525a:	f7ff faef 	bl	800483c <dhcp_discover>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:437
    netif = netif->next;
 800525e:	682d      	ldr	r5, [r5, #0]
 8005260:	e7e7      	b.n	8005232 <dhcp_coarse_tmr+0x12>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:425
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8005262:	f8b4 901e 	ldrh.w	r9, [r4, #30]
 8005266:	f1b9 0f00 	cmp.w	r9, #0
 800526a:	d064      	beq.n	8005336 <dhcp_coarse_tmr+0x116>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:425 (discriminator 1)
 800526c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8005270:	f1b9 0f01 	cmp.w	r9, #1
 8005274:	83e2      	strh	r2, [r4, #30]
 8005276:	d15e      	bne.n	8005336 <dhcp_coarse_tmr+0x116>
dhcp_t2_timeout():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:563
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8005278:	3b01      	subs	r3, #1
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b09      	cmp	r3, #9
 800527e:	d8ee      	bhi.n	800525e <dhcp_coarse_tmr+0x3e>
 8005280:	fa26 f303 	lsr.w	r3, r6, r3
 8005284:	07db      	lsls	r3, r3, #31
 8005286:	d5ea      	bpl.n	800525e <dhcp_coarse_tmr+0x3e>
dhcp_rebind():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1186
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8005288:	2104      	movs	r1, #4
 800528a:	4620      	mov	r0, r4
 800528c:	f7fe ffe8 	bl	8004260 <dhcp_set_state>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1189
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8005290:	2203      	movs	r2, #3
 8005292:	4621      	mov	r1, r4
 8005294:	4628      	mov	r0, r5
 8005296:	f7ff f87b 	bl	8004390 <dhcp_create_msg>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1190
  if (result == ERR_OK) {
 800529a:	bb60      	cbnz	r0, 80052f6 <dhcp_coarse_tmr+0xd6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1191
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800529c:	2202      	movs	r2, #2
 800529e:	2139      	movs	r1, #57	; 0x39
 80052a0:	4620      	mov	r0, r4
 80052a2:	f7ff f807 	bl	80042b4 <dhcp_option>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1192
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80052a6:	8d69      	ldrh	r1, [r5, #42]	; 0x2a
 80052a8:	4620      	mov	r0, r4
 80052aa:	f7fe ffe1 	bl	8004270 <dhcp_option_short>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1194
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80052ae:	2203      	movs	r2, #3
 80052b0:	2137      	movs	r1, #55	; 0x37
 80052b2:	4620      	mov	r0, r4
 80052b4:	f7fe fffe 	bl	80042b4 <dhcp_option>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1196
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80052b8:	4649      	mov	r1, r9
 80052ba:	4620      	mov	r0, r4
 80052bc:	f7ff f81e 	bl	80042fc <dhcp_option_byte>
 80052c0:	2103      	movs	r1, #3
 80052c2:	4620      	mov	r0, r4
 80052c4:	f7ff f81a 	bl	80042fc <dhcp_option_byte>
 80052c8:	211c      	movs	r1, #28
 80052ca:	4620      	mov	r0, r4
 80052cc:	f7ff f816 	bl	80042fc <dhcp_option_byte>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1203
    dhcp_option_trailer(dhcp);
 80052d0:	4620      	mov	r0, r4
 80052d2:	f7ff fa11 	bl	80046f8 <dhcp_option_trailer>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1205
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80052d6:	8aa1      	ldrh	r1, [r4, #20]
 80052d8:	68e0      	ldr	r0, [r4, #12]
 80052da:	31f0      	adds	r1, #240	; 0xf0
 80052dc:	b289      	uxth	r1, r1
 80052de:	f005 fc0b 	bl	800aaf8 <pbuf_realloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1208
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 80052e2:	9500      	str	r5, [sp, #0]
 80052e4:	2343      	movs	r3, #67	; 0x43
 80052e6:	4642      	mov	r2, r8
 80052e8:	68e1      	ldr	r1, [r4, #12]
 80052ea:	6838      	ldr	r0, [r7, #0]
 80052ec:	f004 fecc 	bl	800a088 <udp_sendto_if>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1209
    dhcp_delete_msg(dhcp);
 80052f0:	4620      	mov	r0, r4
 80052f2:	f7ff fa73 	bl	80047dc <dhcp_delete_msg>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1214
  if (dhcp->tries < 255) {
 80052f6:	7aa3      	ldrb	r3, [r4, #10]
 80052f8:	2bff      	cmp	r3, #255	; 0xff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1215
    dhcp->tries++;
 80052fa:	bf1c      	itt	ne
 80052fc:	3301      	addne	r3, #1
 80052fe:	72a3      	strbne	r3, [r4, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1217
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8005300:	7aa3      	ldrb	r3, [r4, #10]
 8005302:	2b09      	cmp	r3, #9
 8005304:	bf96      	itet	ls
 8005306:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 800530a:	f242 7310 	movwhi	r3, #10000	; 0x2710
 800530e:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1218
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8005312:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1217
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8005316:	bf9c      	itt	ls
 8005318:	00db      	lslls	r3, r3, #3
 800531a:	b29b      	uxthls	r3, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1218
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800531c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8005320:	fbb3 f3f2 	udiv	r3, r3, r2
dhcp_t2_timeout():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:572
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8005324:	8c22      	ldrh	r2, [r4, #32]
dhcp_rebind():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:1218
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8005326:	82e3      	strh	r3, [r4, #22]
dhcp_t2_timeout():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:572
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8005328:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800532a:	1a9b      	subs	r3, r3, r2
 800532c:	2b01      	cmp	r3, #1
 800532e:	dd96      	ble.n	800525e <dhcp_coarse_tmr+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:574
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8005330:	105b      	asrs	r3, r3, #1
 8005332:	83e3      	strh	r3, [r4, #30]
 8005334:	e793      	b.n	800525e <dhcp_coarse_tmr+0x3e>
dhcp_coarse_tmr():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:430
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8005336:	8ba2      	ldrh	r2, [r4, #28]
 8005338:	2a00      	cmp	r2, #0
 800533a:	d090      	beq.n	800525e <dhcp_coarse_tmr+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:430 (discriminator 1)
 800533c:	1e51      	subs	r1, r2, #1
 800533e:	2a01      	cmp	r2, #1
 8005340:	83a1      	strh	r1, [r4, #28]
 8005342:	d18c      	bne.n	800525e <dhcp_coarse_tmr+0x3e>
dhcp_t1_timeout():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:535
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8005344:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 8005348:	2a01      	cmp	r2, #1
 800534a:	d001      	beq.n	8005350 <dhcp_coarse_tmr+0x130>
 800534c:	2b0a      	cmp	r3, #10
 800534e:	d186      	bne.n	800525e <dhcp_coarse_tmr+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:543
    dhcp_renew(netif);
 8005350:	4628      	mov	r0, r5
 8005352:	f7ff fe23 	bl	8004f9c <dhcp_renew>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:545
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8005356:	8b63      	ldrh	r3, [r4, #26]
 8005358:	8c22      	ldrh	r2, [r4, #32]
 800535a:	1a9b      	subs	r3, r3, r2
 800535c:	2b01      	cmp	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:547
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800535e:	bfc4      	itt	gt
 8005360:	105b      	asrgt	r3, r3, #1
 8005362:	83a3      	strhgt	r3, [r4, #28]
 8005364:	e77b      	b.n	800525e <dhcp_coarse_tmr+0x3e>
 8005366:	bf00      	nop
 8005368:	2000810c 	.word	0x2000810c
 800536c:	20007e98 	.word	0x20007e98
 8005370:	0801e8e0 	.word	0x0801e8e0

08005374 <dhcp_fine_tmr>:
dhcp_fine_tmr():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:450
{
 8005374:	b538      	push	{r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:451
  struct netif *netif = netif_list;
 8005376:	4b1d      	ldr	r3, [pc, #116]	; (80053ec <dhcp_fine_tmr+0x78>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:462
        dhcp->request_timeout--;
 8005378:	2500      	movs	r5, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:451
  struct netif *netif = netif_list;
 800537a:	681c      	ldr	r4, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:453
  while (netif != NULL) {
 800537c:	b904      	cbnz	r4, 8005380 <dhcp_fine_tmr+0xc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:472
}
 800537e:	bd38      	pop	{r3, r4, r5, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:454
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8005380:	6a63      	ldr	r3, [r4, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:456
    if (dhcp != NULL) {
 8005382:	b123      	cbz	r3, 800538e <dhcp_fine_tmr+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:458
      if (dhcp->request_timeout > 1) {
 8005384:	8ada      	ldrh	r2, [r3, #22]
 8005386:	2a01      	cmp	r2, #1
 8005388:	d903      	bls.n	8005392 <dhcp_fine_tmr+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:459
        dhcp->request_timeout--;
 800538a:	3a01      	subs	r2, #1
 800538c:	82da      	strh	r2, [r3, #22]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:470
    netif = netif->next;
 800538e:	6824      	ldr	r4, [r4, #0]
 8005390:	e7f4      	b.n	800537c <dhcp_fine_tmr+0x8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:461
      else if (dhcp->request_timeout == 1) {
 8005392:	d1fc      	bne.n	800538e <dhcp_fine_tmr+0x1a>
dhcp_timeout():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:489
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8005394:	7a5a      	ldrb	r2, [r3, #9]
dhcp_fine_tmr():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:462
        dhcp->request_timeout--;
 8005396:	82dd      	strh	r5, [r3, #22]
dhcp_timeout():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:489
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8005398:	2a0c      	cmp	r2, #12
 800539a:	d001      	beq.n	80053a0 <dhcp_fine_tmr+0x2c>
 800539c:	2a06      	cmp	r2, #6
 800539e:	d103      	bne.n	80053a8 <dhcp_fine_tmr+0x34>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:500
      dhcp_discover(netif);
 80053a0:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:519
      dhcp_discover(netif);
 80053a2:	f7ff fa4b 	bl	800483c <dhcp_discover>
 80053a6:	e7f2      	b.n	800538e <dhcp_fine_tmr+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:493
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80053a8:	2a01      	cmp	r2, #1
 80053aa:	d109      	bne.n	80053c0 <dhcp_fine_tmr+0x4c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:495
    if (dhcp->tries <= 5) {
 80053ac:	7a9b      	ldrb	r3, [r3, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:496
      dhcp_select(netif);
 80053ae:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:495
    if (dhcp->tries <= 5) {
 80053b0:	2b05      	cmp	r3, #5
 80053b2:	d802      	bhi.n	80053ba <dhcp_fine_tmr+0x46>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:496
      dhcp_select(netif);
 80053b4:	f7ff faa2 	bl	80048fc <dhcp_select>
 80053b8:	e7e9      	b.n	800538e <dhcp_fine_tmr+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:499
      dhcp_release(netif);
 80053ba:	f7ff fee1 	bl	8005180 <dhcp_release>
 80053be:	e7ef      	b.n	80053a0 <dhcp_fine_tmr+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:504
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80053c0:	2a08      	cmp	r2, #8
 80053c2:	d109      	bne.n	80053d8 <dhcp_fine_tmr+0x64>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:506
    if (dhcp->tries <= 1) {
 80053c4:	7a9b      	ldrb	r3, [r3, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:507
      dhcp_check(netif);
 80053c6:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:506
    if (dhcp->tries <= 1) {
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d802      	bhi.n	80053d2 <dhcp_fine_tmr+0x5e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:507
      dhcp_check(netif);
 80053cc:	f7ff f8be 	bl	800454c <dhcp_check>
 80053d0:	e7dd      	b.n	800538e <dhcp_fine_tmr+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:512
      dhcp_bind(netif);
 80053d2:	f7ff f8d1 	bl	8004578 <dhcp_bind>
 80053d6:	e7da      	b.n	800538e <dhcp_fine_tmr+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:515
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80053d8:	2a03      	cmp	r2, #3
 80053da:	d1d8      	bne.n	800538e <dhcp_fine_tmr+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:516
    if (dhcp->tries < REBOOT_TRIES) {
 80053dc:	7a9b      	ldrb	r3, [r3, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:517
      dhcp_reboot(netif);
 80053de:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:516
    if (dhcp->tries < REBOOT_TRIES) {
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d8de      	bhi.n	80053a2 <dhcp_fine_tmr+0x2e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/ipv4/dhcp.c:517
      dhcp_reboot(netif);
 80053e4:	f7ff fb00 	bl	80049e8 <dhcp_reboot>
 80053e8:	e7d1      	b.n	800538e <dhcp_fine_tmr+0x1a>
 80053ea:	bf00      	nop
 80053ec:	2000810c 	.word	0x2000810c

080053f0 <tcpip_thread>:
tcpip_thread():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:92
tcpip_thread(void *arg)
{
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 80053f0:	4b1e      	ldr	r3, [pc, #120]	; (800546c <tcpip_thread+0x7c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:88
{
 80053f4:	b507      	push	{r0, r1, r2, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:92
  if (tcpip_init_done != NULL) {
 80053f6:	b113      	cbz	r3, 80053fe <tcpip_thread+0xe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:93
    tcpip_init_done(tcpip_init_done_arg);
 80053f8:	4a1d      	ldr	r2, [pc, #116]	; (8005470 <tcpip_thread+0x80>)
 80053fa:	6810      	ldr	r0, [r2, #0]
 80053fc:	4798      	blx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:98
  }

  LOCK_TCPIP_CORE();
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 80053fe:	4d1d      	ldr	r5, [pc, #116]	; (8005474 <tcpip_thread+0x84>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:101
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8005400:	4e1d      	ldr	r6, [pc, #116]	; (8005478 <tcpip_thread+0x88>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:155
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005402:	4c1e      	ldr	r4, [pc, #120]	; (800547c <tcpip_thread+0x8c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:96
  LOCK_TCPIP_CORE();
 8005404:	481b      	ldr	r0, [pc, #108]	; (8005474 <tcpip_thread+0x84>)
 8005406:	f7fb fceb 	bl	8000de0 <sys_mutex_lock>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:98
    UNLOCK_TCPIP_CORE();
 800540a:	4628      	mov	r0, r5
 800540c:	f7fb fced 	bl	8000dea <sys_mutex_unlock>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:101
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8005410:	a901      	add	r1, sp, #4
 8005412:	4630      	mov	r0, r6
 8005414:	f005 fdd4 	bl	800afc0 <sys_timeouts_mbox_fetch>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:102
    LOCK_TCPIP_CORE();
 8005418:	4628      	mov	r0, r5
 800541a:	f7fb fce1 	bl	8000de0 <sys_mutex_lock>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:103
    if (msg == NULL) {
 800541e:	9b01      	ldr	r3, [sp, #4]
 8005420:	b933      	cbnz	r3, 8005430 <tcpip_thread+0x40>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:105 (discriminator 1)
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005422:	4623      	mov	r3, r4
 8005424:	2269      	movs	r2, #105	; 0x69
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:155 (discriminator 1)
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005426:	4916      	ldr	r1, [pc, #88]	; (8005480 <tcpip_thread+0x90>)
 8005428:	4816      	ldr	r0, [pc, #88]	; (8005484 <tcpip_thread+0x94>)
 800542a:	f007 fdb7 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:156 (discriminator 1)
      break;
 800542e:	e7ec      	b.n	800540a <tcpip_thread+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:108
    switch (msg->type) {
 8005430:	781a      	ldrb	r2, [r3, #0]
 8005432:	2a03      	cmp	r2, #3
 8005434:	d00c      	beq.n	8005450 <tcpip_thread+0x60>
 8005436:	2a04      	cmp	r2, #4
 8005438:	d010      	beq.n	800545c <tcpip_thread+0x6c>
 800543a:	2a02      	cmp	r2, #2
 800543c:	d112      	bne.n	8005464 <tcpip_thread+0x74>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:124
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800543e:	6858      	ldr	r0, [r3, #4]
 8005440:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8005444:	4790      	blx	r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:125
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8005446:	9901      	ldr	r1, [sp, #4]
 8005448:	2009      	movs	r0, #9
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:145
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800544a:	f006 ff3b 	bl	800c2c4 <memp_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:146
      break;
 800544e:	e7dc      	b.n	800540a <tcpip_thread+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:144
      msg->msg.cb.function(msg->msg.cb.ctx);
 8005450:	e9d3 2001 	ldrd	r2, r0, [r3, #4]
 8005454:	4790      	blx	r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:145
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8005456:	9901      	ldr	r1, [sp, #4]
 8005458:	2008      	movs	r0, #8
 800545a:	e7f6      	b.n	800544a <tcpip_thread+0x5a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:150
      msg->msg.cb.function(msg->msg.cb.ctx);
 800545c:	e9d3 2001 	ldrd	r2, r0, [r3, #4]
 8005460:	4790      	blx	r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:151
      break;
 8005462:	e7d2      	b.n	800540a <tcpip_thread+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:155 (discriminator 1)
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005464:	4623      	mov	r3, r4
 8005466:	229b      	movs	r2, #155	; 0x9b
 8005468:	e7dd      	b.n	8005426 <tcpip_thread+0x36>
 800546a:	bf00      	nop
 800546c:	20007ea8 	.word	0x20007ea8
 8005470:	20007eac 	.word	0x20007eac
 8005474:	200080a8 	.word	0x200080a8
 8005478:	20007ea4 	.word	0x20007ea4
 800547c:	0801eddc 	.word	0x0801eddc
 8005480:	0801ee3e 	.word	0x0801ee3e
 8005484:	0800e36a 	.word	0x0800e36a

08005488 <tcpip_inpkt>:
tcpip_inpkt():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:170
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8005488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548a:	4607      	mov	r7, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:181
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800548c:	4810      	ldr	r0, [pc, #64]	; (80054d0 <tcpip_inpkt+0x48>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:170
{
 800548e:	460e      	mov	r6, r1
 8005490:	4615      	mov	r5, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:181
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8005492:	f7fb fc42 	bl	8000d1a <sys_mbox_valid>
 8005496:	b928      	cbnz	r0, 80054a4 <tcpip_inpkt+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:181 (discriminator 1)
 8005498:	4b0e      	ldr	r3, [pc, #56]	; (80054d4 <tcpip_inpkt+0x4c>)
 800549a:	22b5      	movs	r2, #181	; 0xb5
 800549c:	490e      	ldr	r1, [pc, #56]	; (80054d8 <tcpip_inpkt+0x50>)
 800549e:	480f      	ldr	r0, [pc, #60]	; (80054dc <tcpip_inpkt+0x54>)
 80054a0:	f007 fd7c 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:183

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80054a4:	2009      	movs	r0, #9
 80054a6:	f006 fedd 	bl	800c264 <memp_malloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:184
  if (msg == NULL) {
 80054aa:	4604      	mov	r4, r0
 80054ac:	b168      	cbz	r0, 80054ca <tcpip_inpkt+0x42>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:188
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 80054ae:	2302      	movs	r3, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:191
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
  msg->msg.inp.input_fn = input_fn;
 80054b0:	60c5      	str	r5, [r0, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:192
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80054b2:	4601      	mov	r1, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:188
  msg->type = TCPIP_MSG_INPKT;
 80054b4:	7003      	strb	r3, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:190
  msg->msg.inp.netif = inp;
 80054b6:	e9c0 7601 	strd	r7, r6, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:192
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80054ba:	4805      	ldr	r0, [pc, #20]	; (80054d0 <tcpip_inpkt+0x48>)
 80054bc:	f7fb fbf0 	bl	8000ca0 <sys_mbox_trypost>
 80054c0:	b128      	cbz	r0, 80054ce <tcpip_inpkt+0x46>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:193
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80054c2:	4621      	mov	r1, r4
 80054c4:	2009      	movs	r0, #9
 80054c6:	f006 fefd 	bl	800c2c4 <memp_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:185
    return ERR_MEM;
 80054ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:198
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80054ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054d0:	20007ea4 	.word	0x20007ea4
 80054d4:	0801eddc 	.word	0x0801eddc
 80054d8:	0801edcf 	.word	0x0801edcf
 80054dc:	0800e36a 	.word	0x0800e36a

080054e0 <tcpip_input>:
tcpip_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:215
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80054e0:	f891 3033 	ldrb.w	r3, [r1, #51]	; 0x33
 80054e4:	f013 0f18 	tst.w	r3, #24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:216
    return tcpip_inpkt(p, inp, ethernet_input);
 80054e8:	bf14      	ite	ne
 80054ea:	4a02      	ldrne	r2, [pc, #8]	; (80054f4 <tcpip_input+0x14>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:219
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 80054ec:	4a02      	ldreq	r2, [pc, #8]	; (80054f8 <tcpip_input+0x18>)
 80054ee:	f7ff bfcb 	b.w	8005488 <tcpip_inpkt>
 80054f2:	bf00      	nop
 80054f4:	08000b65 	.word	0x08000b65
 80054f8:	08002f4d 	.word	0x08002f4d

080054fc <tcpip_send_msg_wait_sem>:
tcpip_send_msg_wait_sem():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:330
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 80054fc:	b570      	push	{r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:333
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80054fe:	4c06      	ldr	r4, [pc, #24]	; (8005518 <tcpip_send_msg_wait_sem+0x1c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:330
{
 8005500:	460e      	mov	r6, r1
 8005502:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:333
  LOCK_TCPIP_CORE();
 8005504:	4620      	mov	r0, r4
 8005506:	f7fb fc6b 	bl	8000de0 <sys_mutex_lock>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:334
  fn(apimsg);
 800550a:	4630      	mov	r0, r6
 800550c:	47a8      	blx	r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:335
  UNLOCK_TCPIP_CORE();
 800550e:	4620      	mov	r0, r4
 8005510:	f7fb fc6b 	bl	8000dea <sys_mutex_unlock>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:352
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8005514:	2000      	movs	r0, #0
 8005516:	bd70      	pop	{r4, r5, r6, pc}
 8005518:	200080a8 	.word	0x200080a8

0800551c <tcpip_init>:
tcpip_init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:463
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800551c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800551e:	4605      	mov	r5, r0
 8005520:	460c      	mov	r4, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:464
  lwip_init();
 8005522:	f004 fc4f 	bl	8009dc4 <lwip_init>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:466

  tcpip_init_done = initfunc;
 8005526:	4b13      	ldr	r3, [pc, #76]	; (8005574 <tcpip_init+0x58>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:468
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8005528:	2106      	movs	r1, #6
 800552a:	4813      	ldr	r0, [pc, #76]	; (8005578 <tcpip_init+0x5c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:466
  tcpip_init_done = initfunc;
 800552c:	601d      	str	r5, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:467
  tcpip_init_done_arg = arg;
 800552e:	4b13      	ldr	r3, [pc, #76]	; (800557c <tcpip_init+0x60>)
 8005530:	601c      	str	r4, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:468
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8005532:	f7fb fb9b 	bl	8000c6c <sys_mbox_new>
 8005536:	b130      	cbz	r0, 8005546 <tcpip_init+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:469 (discriminator 1)
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8005538:	4b11      	ldr	r3, [pc, #68]	; (8005580 <tcpip_init+0x64>)
 800553a:	f240 12d5 	movw	r2, #469	; 0x1d5
 800553e:	4911      	ldr	r1, [pc, #68]	; (8005584 <tcpip_init+0x68>)
 8005540:	4811      	ldr	r0, [pc, #68]	; (8005588 <tcpip_init+0x6c>)
 8005542:	f007 fd2b 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:472
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8005546:	4811      	ldr	r0, [pc, #68]	; (800558c <tcpip_init+0x70>)
 8005548:	f7fb fc3c 	bl	8000dc4 <sys_mutex_new>
 800554c:	b130      	cbz	r0, 800555c <tcpip_init+0x40>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:473 (discriminator 1)
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800554e:	4b0c      	ldr	r3, [pc, #48]	; (8005580 <tcpip_init+0x64>)
 8005550:	f240 12d9 	movw	r2, #473	; 0x1d9
 8005554:	490e      	ldr	r1, [pc, #56]	; (8005590 <tcpip_init+0x74>)
 8005556:	480c      	ldr	r0, [pc, #48]	; (8005588 <tcpip_init+0x6c>)
 8005558:	f007 fd20 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:477
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800555c:	2302      	movs	r3, #2
 800555e:	2200      	movs	r2, #0
 8005560:	490c      	ldr	r1, [pc, #48]	; (8005594 <tcpip_init+0x78>)
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005568:	480b      	ldr	r0, [pc, #44]	; (8005598 <tcpip_init+0x7c>)
 800556a:	f7fb fc41 	bl	8000df0 <sys_thread_new>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/tcpip.c:478
}
 800556e:	b003      	add	sp, #12
 8005570:	bd30      	pop	{r4, r5, pc}
 8005572:	bf00      	nop
 8005574:	20007ea8 	.word	0x20007ea8
 8005578:	20007ea4 	.word	0x20007ea4
 800557c:	20007eac 	.word	0x20007eac
 8005580:	0801eddc 	.word	0x0801eddc
 8005584:	0801ed84 	.word	0x0801ed84
 8005588:	0800e36a 	.word	0x0800e36a
 800558c:	200080a8 	.word	0x200080a8
 8005590:	0801eda7 	.word	0x0801eda7
 8005594:	080053f1 	.word	0x080053f1
 8005598:	0801edc8 	.word	0x0801edc8

0800559c <netbuf_delete>:
netbuf_delete():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/netbuf.c:82
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800559c:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/netbuf.c:83
  if (buf != NULL) {
 800559e:	4604      	mov	r4, r0
 80055a0:	b160      	cbz	r0, 80055bc <netbuf_delete+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/netbuf.c:84
    if (buf->p != NULL) {
 80055a2:	6800      	ldr	r0, [r0, #0]
 80055a4:	b120      	cbz	r0, 80055b0 <netbuf_delete+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/netbuf.c:85
      pbuf_free(buf->p);
 80055a6:	f005 f96d 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/netbuf.c:86
      buf->p = buf->ptr = NULL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	e9c4 3300 	strd	r3, r3, [r4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/netbuf.c:88
    }
    memp_free(MEMP_NETBUF, buf);
 80055b0:	4621      	mov	r1, r4
 80055b2:	2006      	movs	r0, #6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/netbuf.c:90
  }
}
 80055b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/netbuf.c:88
    memp_free(MEMP_NETBUF, buf);
 80055b8:	f006 be84 	b.w	800c2c4 <memp_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/netbuf.c:90
}
 80055bc:	bd10      	pop	{r4, pc}
	...

080055c0 <netbuf_data>:
netbuf_data():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/netbuf.c:193
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 80055c0:	b508      	push	{r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/netbuf.c:194
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80055c2:	b940      	cbnz	r0, 80055d6 <netbuf_data+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/netbuf.c:194 (discriminator 1)
 80055c4:	4b0f      	ldr	r3, [pc, #60]	; (8005604 <netbuf_data+0x44>)
 80055c6:	22c2      	movs	r2, #194	; 0xc2
 80055c8:	490f      	ldr	r1, [pc, #60]	; (8005608 <netbuf_data+0x48>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/netbuf.c:196 (discriminator 1)
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80055ca:	4810      	ldr	r0, [pc, #64]	; (800560c <netbuf_data+0x4c>)
 80055cc:	f007 fce6 	bl	800cf9c <iprintf>
 80055d0:	f06f 000f 	mvn.w	r0, #15
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/netbuf.c:204
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
  *len = buf->ptr->len;
  return ERR_OK;
}
 80055d4:	bd08      	pop	{r3, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/netbuf.c:195 (discriminator 2)
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80055d6:	b919      	cbnz	r1, 80055e0 <netbuf_data+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/netbuf.c:195 (discriminator 1)
 80055d8:	4b0a      	ldr	r3, [pc, #40]	; (8005604 <netbuf_data+0x44>)
 80055da:	22c3      	movs	r2, #195	; 0xc3
 80055dc:	490c      	ldr	r1, [pc, #48]	; (8005610 <netbuf_data+0x50>)
 80055de:	e7f4      	b.n	80055ca <netbuf_data+0xa>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/netbuf.c:196 (discriminator 2)
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80055e0:	b91a      	cbnz	r2, 80055ea <netbuf_data+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/netbuf.c:196 (discriminator 1)
 80055e2:	4b08      	ldr	r3, [pc, #32]	; (8005604 <netbuf_data+0x44>)
 80055e4:	22c4      	movs	r2, #196	; 0xc4
 80055e6:	490b      	ldr	r1, [pc, #44]	; (8005614 <netbuf_data+0x54>)
 80055e8:	e7ef      	b.n	80055ca <netbuf_data+0xa>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/netbuf.c:198 (discriminator 2)
  if (buf->ptr == NULL) {
 80055ea:	6843      	ldr	r3, [r0, #4]
 80055ec:	b133      	cbz	r3, 80055fc <netbuf_data+0x3c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/netbuf.c:201
  *dataptr = buf->ptr->payload;
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	600b      	str	r3, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/netbuf.c:202
  *len = buf->ptr->len;
 80055f2:	6843      	ldr	r3, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/netbuf.c:203
  return ERR_OK;
 80055f4:	2000      	movs	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/netbuf.c:202
  *len = buf->ptr->len;
 80055f6:	895b      	ldrh	r3, [r3, #10]
 80055f8:	8013      	strh	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/netbuf.c:203
  return ERR_OK;
 80055fa:	e7eb      	b.n	80055d4 <netbuf_data+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/netbuf.c:199
    return ERR_BUF;
 80055fc:	f06f 0001 	mvn.w	r0, #1
 8005600:	e7e8      	b.n	80055d4 <netbuf_data+0x14>
 8005602:	bf00      	nop
 8005604:	0801ee5c 	.word	0x0801ee5c
 8005608:	0801eefd 	.word	0x0801eefd
 800560c:	0800e36a 	.word	0x0800e36a
 8005610:	0801ef16 	.word	0x0801ef16
 8005614:	0801ef33 	.word	0x0801ef33

08005618 <netconn_apimsg>:
netconn_apimsg():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:105

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8005618:	680a      	ldr	r2, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:93
{
 800561a:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:105
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800561c:	320c      	adds	r2, #12
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:93
{
 800561e:	460c      	mov	r4, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:105
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8005620:	f7ff ff6c 	bl	80054fc <tcpip_send_msg_wait_sem>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:106
  if (err == ERR_OK) {
 8005624:	b908      	cbnz	r0, 800562a <netconn_apimsg+0x12>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:107
    return apimsg->err;
 8005626:	f994 0004 	ldrsb.w	r0, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:110
  }
  return err;
}
 800562a:	bd10      	pop	{r4, pc}

0800562c <netconn_close_shutdown>:
netconn_close_shutdown():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:803
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800562c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:808
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800562e:	b958      	cbnz	r0, 8005648 <netconn_close_shutdown+0x1c>
 8005630:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <netconn_close_shutdown+0x34>)
 8005632:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005636:	490b      	ldr	r1, [pc, #44]	; (8005664 <netconn_close_shutdown+0x38>)
 8005638:	480b      	ldr	r0, [pc, #44]	; (8005668 <netconn_close_shutdown+0x3c>)
 800563a:	f007 fcaf 	bl	800cf9c <iprintf>
 800563e:	f06f 000f 	mvn.w	r0, #15
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:828
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);

  return err;
}
 8005642:	b007      	add	sp, #28
 8005644:	f85d fb04 	ldr.w	pc, [sp], #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:820 (discriminator 2)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005648:	2329      	movs	r3, #41	; 0x29
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:811 (discriminator 2)
  API_MSG_VAR_REF(msg).conn = conn;
 800564a:	9001      	str	r0, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:814 (discriminator 2)
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800564c:	f88d 100c 	strb.w	r1, [sp, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:824 (discriminator 2)
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8005650:	a901      	add	r1, sp, #4
 8005652:	4806      	ldr	r0, [pc, #24]	; (800566c <netconn_close_shutdown+0x40>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:820 (discriminator 2)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005654:	f88d 300d 	strb.w	r3, [sp, #13]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:824 (discriminator 2)
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8005658:	f7ff ffde 	bl	8005618 <netconn_apimsg>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:827 (discriminator 2)
  return err;
 800565c:	e7f1      	b.n	8005642 <netconn_close_shutdown+0x16>
 800565e:	bf00      	nop
 8005660:	0801efa4 	.word	0x0801efa4
 8005664:	0801f008 	.word	0x0801f008
 8005668:	0800e36a 	.word	0x0800e36a
 800566c:	08006921 	.word	0x08006921

08005670 <netconn_recv_data>:
netconn_recv_data():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:477
{
 8005670:	b570      	push	{r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:478
  void *buf = NULL;
 8005672:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:477
{
 8005674:	b086      	sub	sp, #24
 8005676:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:487
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8005678:	460e      	mov	r6, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:478
  void *buf = NULL;
 800567a:	9300      	str	r3, [sp, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:487
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800567c:	b951      	cbnz	r1, 8005694 <netconn_recv_data+0x24>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:487 (discriminator 1)
 800567e:	4b3e      	ldr	r3, [pc, #248]	; (8005778 <netconn_recv_data+0x108>)
 8005680:	f240 12e7 	movw	r2, #487	; 0x1e7
 8005684:	493d      	ldr	r1, [pc, #244]	; (800577c <netconn_recv_data+0x10c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:489 (discriminator 1)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8005686:	483e      	ldr	r0, [pc, #248]	; (8005780 <netconn_recv_data+0x110>)
 8005688:	f007 fc88 	bl	800cf9c <iprintf>
 800568c:	f06f 000f 	mvn.w	r0, #15
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:590
}
 8005690:	b006      	add	sp, #24
 8005692:	bd70      	pop	{r4, r5, r6, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:488 (discriminator 2)
  *new_buf = NULL;
 8005694:	600b      	str	r3, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:489 (discriminator 2)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8005696:	b920      	cbnz	r0, 80056a2 <netconn_recv_data+0x32>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:489 (discriminator 1)
 8005698:	4b37      	ldr	r3, [pc, #220]	; (8005778 <netconn_recv_data+0x108>)
 800569a:	f240 12e9 	movw	r2, #489	; 0x1e9
 800569e:	4939      	ldr	r1, [pc, #228]	; (8005784 <netconn_recv_data+0x114>)
 80056a0:	e7f1      	b.n	8005686 <netconn_recv_data+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:492 (discriminator 2)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80056a2:	4605      	mov	r5, r0
 80056a4:	f815 3b10 	ldrb.w	r3, [r5], #16
 80056a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056ac:	2b10      	cmp	r3, #16
 80056ae:	d10e      	bne.n	80056ce <netconn_recv_data+0x5e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:495
    if (!sys_mbox_valid(&conn->recvmbox)) {
 80056b0:	4628      	mov	r0, r5
 80056b2:	f7fb fb32 	bl	8000d1a <sys_mbox_valid>
 80056b6:	b950      	cbnz	r0, 80056ce <netconn_recv_data+0x5e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:497
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 80056b8:	f104 0014 	add.w	r0, r4, #20
 80056bc:	f7fb fb2d 	bl	8000d1a <sys_mbox_valid>
 80056c0:	2800      	cmp	r0, #0
 80056c2:	bf14      	ite	ne
 80056c4:	f06f 000a 	mvnne.w	r0, #10
 80056c8:	f06f 000e 	mvneq.w	r0, #14
 80056cc:	e7e0      	b.n	8005690 <netconn_recv_data+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:501
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 80056ce:	4628      	mov	r0, r5
 80056d0:	f7fb fb23 	bl	8000d1a <sys_mbox_valid>
 80056d4:	b948      	cbnz	r0, 80056ea <netconn_recv_data+0x7a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:501 (discriminator 1)
 80056d6:	4b28      	ldr	r3, [pc, #160]	; (8005778 <netconn_recv_data+0x108>)
 80056d8:	f240 12f5 	movw	r2, #501	; 0x1f5
 80056dc:	492a      	ldr	r1, [pc, #168]	; (8005788 <netconn_recv_data+0x118>)
 80056de:	4828      	ldr	r0, [pc, #160]	; (8005780 <netconn_recv_data+0x110>)
 80056e0:	f007 fc5c 	bl	800cf9c <iprintf>
 80056e4:	f06f 000a 	mvn.w	r0, #10
 80056e8:	e7d2      	b.n	8005690 <netconn_recv_data+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:503 (discriminator 2)
  if (ERR_IS_FATAL(conn->last_err)) {
 80056ea:	f994 0008 	ldrsb.w	r0, [r4, #8]
 80056ee:	f110 0f0c 	cmn.w	r0, #12
 80056f2:	dbcd      	blt.n	8005690 <netconn_recv_data+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:532
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80056f4:	2200      	movs	r2, #0
 80056f6:	4669      	mov	r1, sp
 80056f8:	4628      	mov	r0, r5
 80056fa:	f7fb fadb 	bl	8000cb4 <sys_arch_mbox_fetch>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:537
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80056fe:	7823      	ldrb	r3, [r4, #0]
 8005700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005704:	2b10      	cmp	r3, #16
 8005706:	9b00      	ldr	r3, [sp, #0]
 8005708:	d12a      	bne.n	8005760 <netconn_recv_data+0xf0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:543
    API_MSG_VAR_REF(msg).conn = conn;
 800570a:	9401      	str	r4, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:544
    if (buf != NULL) {
 800570c:	b1ab      	cbz	r3, 800573a <netconn_recv_data+0xca>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:545
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 800570e:	891b      	ldrh	r3, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:551
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 8005710:	a901      	add	r1, sp, #4
 8005712:	481e      	ldr	r0, [pc, #120]	; (800578c <netconn_recv_data+0x11c>)
 8005714:	9303      	str	r3, [sp, #12]
 8005716:	f7ff ff7f 	bl	8005618 <netconn_apimsg>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:555
    if (buf == NULL) {
 800571a:	9a00      	ldr	r2, [sp, #0]
 800571c:	b9b2      	cbnz	r2, 800574c <netconn_recv_data+0xdc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:556
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800571e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005720:	b113      	cbz	r3, 8005728 <netconn_recv_data+0xb8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:556 (discriminator 1)
 8005722:	2101      	movs	r1, #1
 8005724:	4620      	mov	r0, r4
 8005726:	4798      	blx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:557 (discriminator 3)
      if (conn->pcb.ip == NULL) {
 8005728:	6863      	ldr	r3, [r4, #4]
 800572a:	b943      	cbnz	r3, 800573e <netconn_recv_data+0xce>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:559
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 800572c:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8005730:	2800      	cmp	r0, #0
 8005732:	bf08      	it	eq
 8005734:	f06f 000d 	mvneq.w	r0, #13
 8005738:	e7aa      	b.n	8005690 <netconn_recv_data+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:547
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 800573a:	2301      	movs	r3, #1
 800573c:	e7e8      	b.n	8005710 <netconn_recv_data+0xa0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:562
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800573e:	2101      	movs	r1, #1
 8005740:	4620      	mov	r0, r4
 8005742:	f7ff ff73 	bl	800562c <netconn_close_shutdown>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:564
      return ERR_CLSD;
 8005746:	f06f 000e 	mvn.w	r0, #14
 800574a:	e7a1      	b.n	8005690 <netconn_recv_data+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:566
    len = ((struct pbuf *)buf)->tot_len;
 800574c:	8912      	ldrh	r2, [r2, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:583
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800574e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005750:	b113      	cbz	r3, 8005758 <netconn_recv_data+0xe8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:583 (discriminator 1)
 8005752:	2101      	movs	r1, #1
 8005754:	4620      	mov	r0, r4
 8005756:	4798      	blx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:587 (discriminator 3)
  *new_buf = buf;
 8005758:	9b00      	ldr	r3, [sp, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:589 (discriminator 3)
  return ERR_OK;
 800575a:	2000      	movs	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:587 (discriminator 3)
  *new_buf = buf;
 800575c:	6033      	str	r3, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:589 (discriminator 3)
  return ERR_OK;
 800575e:	e797      	b.n	8005690 <netconn_recv_data+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:574
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8005760:	b933      	cbnz	r3, 8005770 <netconn_recv_data+0x100>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:574 (discriminator 1)
 8005762:	4b05      	ldr	r3, [pc, #20]	; (8005778 <netconn_recv_data+0x108>)
 8005764:	f240 223e 	movw	r2, #574	; 0x23e
 8005768:	4909      	ldr	r1, [pc, #36]	; (8005790 <netconn_recv_data+0x120>)
 800576a:	4805      	ldr	r0, [pc, #20]	; (8005780 <netconn_recv_data+0x110>)
 800576c:	f007 fc16 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:575
    len = netbuf_len((struct netbuf*)buf);
 8005770:	9b00      	ldr	r3, [sp, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	891a      	ldrh	r2, [r3, #8]
 8005776:	e7ea      	b.n	800574e <netconn_recv_data+0xde>
 8005778:	0801efa4 	.word	0x0801efa4
 800577c:	0801f0b1 	.word	0x0801f0b1
 8005780:	0800e36a 	.word	0x0800e36a
 8005784:	0801f0cf 	.word	0x0801f0cf
 8005788:	0801f0ea 	.word	0x0801f0ea
 800578c:	080067e1 	.word	0x080067e1
 8005790:	0801f109 	.word	0x0801f109

08005794 <netconn_new_with_proto_and_callback>:
netconn_new_with_proto_and_callback():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:124
{
 8005794:	b570      	push	{r4, r5, r6, lr}
 8005796:	460d      	mov	r5, r1
 8005798:	b086      	sub	sp, #24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:129
  conn = netconn_alloc(t, callback);
 800579a:	4611      	mov	r1, r2
 800579c:	f000 fdaa 	bl	80062f4 <netconn_alloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:130
  if (conn != NULL) {
 80057a0:	4604      	mov	r4, r0
 80057a2:	2800      	cmp	r0, #0
 80057a4:	d03e      	beq.n	8005824 <netconn_new_with_proto_and_callback+0x90>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:134
    API_MSG_VAR_REF(msg).conn = conn;
 80057a6:	9001      	str	r0, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:135
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80057a8:	a901      	add	r1, sp, #4
 80057aa:	4820      	ldr	r0, [pc, #128]	; (800582c <netconn_new_with_proto_and_callback+0x98>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:133
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80057ac:	f88d 500c 	strb.w	r5, [sp, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:135
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80057b0:	f7ff ff32 	bl	8005618 <netconn_apimsg>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:136
    if (err != ERR_OK) {
 80057b4:	2800      	cmp	r0, #0
 80057b6:	d035      	beq.n	8005824 <netconn_new_with_proto_and_callback+0x90>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:137
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80057b8:	6863      	ldr	r3, [r4, #4]
 80057ba:	b12b      	cbz	r3, 80057c8 <netconn_new_with_proto_and_callback+0x34>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:137 (discriminator 1)
 80057bc:	4b1c      	ldr	r3, [pc, #112]	; (8005830 <netconn_new_with_proto_and_callback+0x9c>)
 80057be:	2289      	movs	r2, #137	; 0x89
 80057c0:	491c      	ldr	r1, [pc, #112]	; (8005834 <netconn_new_with_proto_and_callback+0xa0>)
 80057c2:	481d      	ldr	r0, [pc, #116]	; (8005838 <netconn_new_with_proto_and_callback+0xa4>)
 80057c4:	f007 fbea 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:138
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80057c8:	f104 0510 	add.w	r5, r4, #16
 80057cc:	4628      	mov	r0, r5
 80057ce:	f7fb faa4 	bl	8000d1a <sys_mbox_valid>
 80057d2:	b928      	cbnz	r0, 80057e0 <netconn_new_with_proto_and_callback+0x4c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:138 (discriminator 1)
 80057d4:	4b16      	ldr	r3, [pc, #88]	; (8005830 <netconn_new_with_proto_and_callback+0x9c>)
 80057d6:	228a      	movs	r2, #138	; 0x8a
 80057d8:	4918      	ldr	r1, [pc, #96]	; (800583c <netconn_new_with_proto_and_callback+0xa8>)
 80057da:	4817      	ldr	r0, [pc, #92]	; (8005838 <netconn_new_with_proto_and_callback+0xa4>)
 80057dc:	f007 fbde 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:140
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80057e0:	f104 0014 	add.w	r0, r4, #20
 80057e4:	f7fb fa99 	bl	8000d1a <sys_mbox_valid>
 80057e8:	b128      	cbz	r0, 80057f6 <netconn_new_with_proto_and_callback+0x62>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:140 (discriminator 1)
 80057ea:	4b11      	ldr	r3, [pc, #68]	; (8005830 <netconn_new_with_proto_and_callback+0x9c>)
 80057ec:	228c      	movs	r2, #140	; 0x8c
 80057ee:	4914      	ldr	r1, [pc, #80]	; (8005840 <netconn_new_with_proto_and_callback+0xac>)
 80057f0:	4811      	ldr	r0, [pc, #68]	; (8005838 <netconn_new_with_proto_and_callback+0xa4>)
 80057f2:	f007 fbd3 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:143
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80057f6:	f104 060c 	add.w	r6, r4, #12
 80057fa:	4630      	mov	r0, r6
 80057fc:	f7fb facd 	bl	8000d9a <sys_sem_valid>
 8005800:	b928      	cbnz	r0, 800580e <netconn_new_with_proto_and_callback+0x7a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:143 (discriminator 1)
 8005802:	4b0b      	ldr	r3, [pc, #44]	; (8005830 <netconn_new_with_proto_and_callback+0x9c>)
 8005804:	228f      	movs	r2, #143	; 0x8f
 8005806:	490f      	ldr	r1, [pc, #60]	; (8005844 <netconn_new_with_proto_and_callback+0xb0>)
 8005808:	480b      	ldr	r0, [pc, #44]	; (8005838 <netconn_new_with_proto_and_callback+0xa4>)
 800580a:	f007 fbc7 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:144
      sys_sem_free(&conn->op_completed);
 800580e:	4630      	mov	r0, r6
 8005810:	f7fb fac0 	bl	8000d94 <sys_sem_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:146
      sys_mbox_free(&conn->recvmbox);
 8005814:	4628      	mov	r0, r5
 8005816:	f7fb fa39 	bl	8000c8c <sys_mbox_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:147
      memp_free(MEMP_NETCONN, conn);
 800581a:	4621      	mov	r1, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:149
      return NULL;
 800581c:	2400      	movs	r4, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:147
      memp_free(MEMP_NETCONN, conn);
 800581e:	2007      	movs	r0, #7
 8005820:	f006 fd50 	bl	800c2c4 <memp_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:154
}
 8005824:	4620      	mov	r0, r4
 8005826:	b006      	add	sp, #24
 8005828:	bd70      	pop	{r4, r5, r6, pc}
 800582a:	bf00      	nop
 800582c:	0800627d 	.word	0x0800627d
 8005830:	0801efa4 	.word	0x0801efa4
 8005834:	0801f041 	.word	0x0801f041
 8005838:	0800e36a 	.word	0x0800e36a
 800583c:	0801f062 	.word	0x0801f062
 8005840:	0801f077 	.word	0x0801f077
 8005844:	0801f098 	.word	0x0801f098

08005848 <netconn_delete>:
netconn_delete():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:167
{
 8005848:	b530      	push	{r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:172
  if (conn == NULL) {
 800584a:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:167
{
 800584c:	b087      	sub	sp, #28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:172
  if (conn == NULL) {
 800584e:	b178      	cbz	r0, 8005870 <netconn_delete+0x28>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:184
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005850:	2329      	movs	r3, #41	; 0x29
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:177
  API_MSG_VAR_REF(msg).conn = conn;
 8005852:	9001      	str	r0, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:188
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8005854:	a901      	add	r1, sp, #4
 8005856:	4807      	ldr	r0, [pc, #28]	; (8005874 <netconn_delete+0x2c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:184
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005858:	f88d 300d 	strb.w	r3, [sp, #13]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:188
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800585c:	f7ff fedc 	bl	8005618 <netconn_apimsg>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:191
  if (err != ERR_OK) {
 8005860:	4605      	mov	r5, r0
 8005862:	b910      	cbnz	r0, 800586a <netconn_delete+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:195
  netconn_free(conn);
 8005864:	4620      	mov	r0, r4
 8005866:	f000 fd89 	bl	800637c <netconn_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:198
}
 800586a:	4628      	mov	r0, r5
 800586c:	b007      	add	sp, #28
 800586e:	bd30      	pop	{r4, r5, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:173
    return ERR_OK;
 8005870:	4605      	mov	r5, r0
 8005872:	e7fa      	b.n	800586a <netconn_delete+0x22>
 8005874:	08006571 	.word	0x08006571

08005878 <netconn_bind>:
netconn_bind():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:251
{
 8005878:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:255
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800587a:	b950      	cbnz	r0, 8005892 <netconn_bind+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:255 (discriminator 1)
 800587c:	4b0b      	ldr	r3, [pc, #44]	; (80058ac <netconn_bind+0x34>)
 800587e:	22ff      	movs	r2, #255	; 0xff
 8005880:	490b      	ldr	r1, [pc, #44]	; (80058b0 <netconn_bind+0x38>)
 8005882:	480c      	ldr	r0, [pc, #48]	; (80058b4 <netconn_bind+0x3c>)
 8005884:	f007 fb8a 	bl	800cf9c <iprintf>
 8005888:	f06f 000f 	mvn.w	r0, #15
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:282
}
 800588c:	b007      	add	sp, #28
 800588e:	f85d fb04 	ldr.w	pc, [sp], #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:260 (discriminator 2)
    addr = IP4_ADDR_ANY;
 8005892:	4b09      	ldr	r3, [pc, #36]	; (80058b8 <netconn_bind+0x40>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:275 (discriminator 2)
  API_MSG_VAR_REF(msg).conn = conn;
 8005894:	9001      	str	r0, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:260 (discriminator 2)
    addr = IP4_ADDR_ANY;
 8005896:	2900      	cmp	r1, #0
 8005898:	bf08      	it	eq
 800589a:	4619      	moveq	r1, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:278 (discriminator 2)
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800589c:	4807      	ldr	r0, [pc, #28]	; (80058bc <netconn_bind+0x44>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:277 (discriminator 2)
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800589e:	f8ad 2010 	strh.w	r2, [sp, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:276 (discriminator 2)
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80058a2:	9103      	str	r1, [sp, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:278 (discriminator 2)
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80058a4:	a901      	add	r1, sp, #4
 80058a6:	f7ff feb7 	bl	8005618 <netconn_apimsg>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:281 (discriminator 2)
  return err;
 80058aa:	e7ef      	b.n	800588c <netconn_bind+0x14>
 80058ac:	0801efa4 	.word	0x0801efa4
 80058b0:	0801ef89 	.word	0x0801ef89
 80058b4:	0800e36a 	.word	0x0800e36a
 80058b8:	0801e8dc 	.word	0x0801e8dc
 80058bc:	080066a1 	.word	0x080066a1

080058c0 <netconn_listen_with_backlog>:
netconn_listen_with_backlog():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:352
{
 80058c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:360
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80058c2:	b958      	cbnz	r0, 80058dc <netconn_listen_with_backlog+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:360 (discriminator 1)
 80058c4:	4b08      	ldr	r3, [pc, #32]	; (80058e8 <netconn_listen_with_backlog+0x28>)
 80058c6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80058ca:	4908      	ldr	r1, [pc, #32]	; (80058ec <netconn_listen_with_backlog+0x2c>)
 80058cc:	4808      	ldr	r0, [pc, #32]	; (80058f0 <netconn_listen_with_backlog+0x30>)
 80058ce:	f007 fb65 	bl	800cf9c <iprintf>
 80058d2:	f06f 000f 	mvn.w	r0, #15
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:376
}
 80058d6:	b007      	add	sp, #28
 80058d8:	f85d fb04 	ldr.w	pc, [sp], #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:363 (discriminator 2)
  API_MSG_VAR_REF(msg).conn = conn;
 80058dc:	9001      	str	r0, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:367 (discriminator 2)
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 80058de:	a901      	add	r1, sp, #4
 80058e0:	4804      	ldr	r0, [pc, #16]	; (80058f4 <netconn_listen_with_backlog+0x34>)
 80058e2:	f7ff fe99 	bl	8005618 <netconn_apimsg>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:370 (discriminator 2)
  return err;
 80058e6:	e7f6      	b.n	80058d6 <netconn_listen_with_backlog+0x16>
 80058e8:	0801efa4 	.word	0x0801efa4
 80058ec:	0801f024 	.word	0x0801f024
 80058f0:	0800e36a 	.word	0x0800e36a
 80058f4:	08006701 	.word	0x08006701

080058f8 <netconn_accept>:
netconn_accept():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:389
{
 80058f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058fa:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:397
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80058fc:	460d      	mov	r5, r1
 80058fe:	b951      	cbnz	r1, 8005916 <netconn_accept+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:397 (discriminator 1)
 8005900:	4b20      	ldr	r3, [pc, #128]	; (8005984 <netconn_accept+0x8c>)
 8005902:	f240 128d 	movw	r2, #397	; 0x18d
 8005906:	4920      	ldr	r1, [pc, #128]	; (8005988 <netconn_accept+0x90>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:399 (discriminator 1)
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8005908:	4820      	ldr	r0, [pc, #128]	; (800598c <netconn_accept+0x94>)
 800590a:	f007 fb47 	bl	800cf9c <iprintf>
 800590e:	f06f 000f 	mvn.w	r0, #15
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:463
}
 8005912:	b003      	add	sp, #12
 8005914:	bdf0      	pop	{r4, r5, r6, r7, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:398 (discriminator 2)
  *new_conn = NULL;
 8005916:	2600      	movs	r6, #0
 8005918:	600e      	str	r6, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:399 (discriminator 2)
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800591a:	b920      	cbnz	r0, 8005926 <netconn_accept+0x2e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:399 (discriminator 1)
 800591c:	4b19      	ldr	r3, [pc, #100]	; (8005984 <netconn_accept+0x8c>)
 800591e:	f240 128f 	movw	r2, #399	; 0x18f
 8005922:	491b      	ldr	r1, [pc, #108]	; (8005990 <netconn_accept+0x98>)
 8005924:	e7f0      	b.n	8005908 <netconn_accept+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:401 (discriminator 2)
  if (ERR_IS_FATAL(conn->last_err)) {
 8005926:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800592a:	f110 0f0c 	cmn.w	r0, #12
 800592e:	dbf0      	blt.n	8005912 <netconn_accept+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:406
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8005930:	f104 0714 	add.w	r7, r4, #20
 8005934:	4638      	mov	r0, r7
 8005936:	f7fb f9f0 	bl	8000d1a <sys_mbox_valid>
 800593a:	b1d0      	cbz	r0, 8005972 <netconn_accept+0x7a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:422
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800593c:	4638      	mov	r0, r7
 800593e:	4632      	mov	r2, r6
 8005940:	a901      	add	r1, sp, #4
 8005942:	f7fb f9b7 	bl	8000cb4 <sys_arch_mbox_fetch>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:426
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8005946:	6a63      	ldr	r3, [r4, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:424
  newconn = (struct netconn *)accept_ptr;
 8005948:	9f01      	ldr	r7, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:426
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800594a:	b11b      	cbz	r3, 8005954 <netconn_accept+0x5c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:426 (discriminator 1)
 800594c:	4632      	mov	r2, r6
 800594e:	2101      	movs	r1, #1
 8005950:	4620      	mov	r0, r4
 8005952:	4798      	blx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:428 (discriminator 3)
  if (accept_ptr == &netconn_aborted) {
 8005954:	4b0f      	ldr	r3, [pc, #60]	; (8005994 <netconn_accept+0x9c>)
 8005956:	9a01      	ldr	r2, [sp, #4]
 8005958:	429a      	cmp	r2, r3
 800595a:	d010      	beq.n	800597e <netconn_accept+0x86>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:436
  if (newconn == NULL) {
 800595c:	b967      	cbnz	r7, 8005978 <netconn_accept+0x80>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:441 (discriminator 1)
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 800595e:	f7fb fa57 	bl	8000e10 <sys_arch_protect>
 8005962:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8005966:	330c      	adds	r3, #12
 8005968:	bfa4      	itt	ge
 800596a:	23f1      	movge	r3, #241	; 0xf1
 800596c:	7223      	strbge	r3, [r4, #8]
 800596e:	f7fb fa5b 	bl	8000e28 <sys_arch_unprotect>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:407
    return ERR_CLSD;
 8005972:	f06f 000e 	mvn.w	r0, #14
 8005976:	e7cc      	b.n	8005912 <netconn_accept+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:455
  *new_conn = newconn;
 8005978:	602f      	str	r7, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:457
  return ERR_OK;
 800597a:	2000      	movs	r0, #0
 800597c:	e7c9      	b.n	8005912 <netconn_accept+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:434
    return ERR_ABRT;
 800597e:	f06f 000c 	mvn.w	r0, #12
 8005982:	e7c6      	b.n	8005912 <netconn_accept+0x1a>
 8005984:	0801efa4 	.word	0x0801efa4
 8005988:	0801ef4c 	.word	0x0801ef4c
 800598c:	0800e36a 	.word	0x0800e36a
 8005990:	0801ef6c 	.word	0x0801ef6c
 8005994:	200080ac 	.word	0x200080ac

08005998 <netconn_recv>:
netconn_recv():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:622
{
 8005998:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800599a:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:628
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800599c:	460e      	mov	r6, r1
 800599e:	b959      	cbnz	r1, 80059b8 <netconn_recv+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:628 (discriminator 1)
 80059a0:	4b20      	ldr	r3, [pc, #128]	; (8005a24 <netconn_recv+0x8c>)
 80059a2:	f44f 721d 	mov.w	r2, #628	; 0x274
 80059a6:	4920      	ldr	r1, [pc, #128]	; (8005a28 <netconn_recv+0x90>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:630 (discriminator 1)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80059a8:	f06f 050f 	mvn.w	r5, #15
 80059ac:	481f      	ldr	r0, [pc, #124]	; (8005a2c <netconn_recv+0x94>)
 80059ae:	f007 faf5 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:669 (discriminator 1)
}
 80059b2:	4628      	mov	r0, r5
 80059b4:	b002      	add	sp, #8
 80059b6:	bd70      	pop	{r4, r5, r6, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:629 (discriminator 2)
  *new_buf = NULL;
 80059b8:	2200      	movs	r2, #0
 80059ba:	600a      	str	r2, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:630 (discriminator 2)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80059bc:	b920      	cbnz	r0, 80059c8 <netconn_recv+0x30>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:630 (discriminator 1)
 80059be:	4b19      	ldr	r3, [pc, #100]	; (8005a24 <netconn_recv+0x8c>)
 80059c0:	f240 2276 	movw	r2, #630	; 0x276
 80059c4:	491a      	ldr	r1, [pc, #104]	; (8005a30 <netconn_recv+0x98>)
 80059c6:	e7ef      	b.n	80059a8 <netconn_recv+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:634 (discriminator 2)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80059c8:	7803      	ldrb	r3, [r0, #0]
 80059ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059ce:	2b10      	cmp	r3, #16
 80059d0:	d124      	bne.n	8005a1c <netconn_recv+0x84>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:640
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80059d2:	2006      	movs	r0, #6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:637
    struct pbuf *p = NULL;
 80059d4:	9201      	str	r2, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:640
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80059d6:	f006 fc45 	bl	800c264 <memp_malloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:641
    if (buf == NULL) {
 80059da:	4604      	mov	r4, r0
 80059dc:	b1d8      	cbz	r0, 8005a16 <netconn_recv+0x7e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:645
    err = netconn_recv_data(conn, (void **)&p);
 80059de:	4628      	mov	r0, r5
 80059e0:	a901      	add	r1, sp, #4
 80059e2:	f7ff fe45 	bl	8005670 <netconn_recv_data>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:646
    if (err != ERR_OK) {
 80059e6:	4605      	mov	r5, r0
 80059e8:	b120      	cbz	r0, 80059f4 <netconn_recv+0x5c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:647
      memp_free(MEMP_NETBUF, buf);
 80059ea:	4621      	mov	r1, r4
 80059ec:	2006      	movs	r0, #6
 80059ee:	f006 fc69 	bl	800c2c4 <memp_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:648
      return err;
 80059f2:	e7de      	b.n	80059b2 <netconn_recv+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:650
    LWIP_ASSERT("p != NULL", p != NULL);
 80059f4:	9b01      	ldr	r3, [sp, #4]
 80059f6:	b933      	cbnz	r3, 8005a06 <netconn_recv+0x6e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:650 (discriminator 1)
 80059f8:	4b0a      	ldr	r3, [pc, #40]	; (8005a24 <netconn_recv+0x8c>)
 80059fa:	f240 228a 	movw	r2, #650	; 0x28a
 80059fe:	490d      	ldr	r1, [pc, #52]	; (8005a34 <netconn_recv+0x9c>)
 8005a00:	480a      	ldr	r0, [pc, #40]	; (8005a2c <netconn_recv+0x94>)
 8005a02:	f007 facb 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:652
    buf->p = p;
 8005a06:	9b01      	ldr	r3, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:653
    buf->ptr = p;
 8005a08:	e9c4 3300 	strd	r3, r3, [r4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:654
    buf->port = 0;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	81a3      	strh	r3, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:655
    ip_addr_set_zero(&buf->addr);
 8005a10:	60a3      	str	r3, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:656
    *new_buf = buf;
 8005a12:	6034      	str	r4, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:658
    return ERR_OK;
 8005a14:	e7cd      	b.n	80059b2 <netconn_recv+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:642
      return ERR_MEM;
 8005a16:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005a1a:	e7ca      	b.n	80059b2 <netconn_recv+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:666
    return netconn_recv_data(conn, (void **)new_buf);
 8005a1c:	f7ff fe28 	bl	8005670 <netconn_recv_data>
 8005a20:	4605      	mov	r5, r0
 8005a22:	e7c6      	b.n	80059b2 <netconn_recv+0x1a>
 8005a24:	0801efa4 	.word	0x0801efa4
 8005a28:	0801f0b1 	.word	0x0801f0b1
 8005a2c:	0800e36a 	.word	0x0800e36a
 8005a30:	0801f0cf 	.word	0x0801f0cf
 8005a34:	080202fe 	.word	0x080202fe

08005a38 <netconn_write_partly>:
netconn_write_partly():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:737
{
 8005a38:	b570      	push	{r4, r5, r6, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	4616      	mov	r6, r2
 8005a3e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:742
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8005a40:	b950      	cbnz	r0, 8005a58 <netconn_write_partly+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:742 (discriminator 1)
 8005a42:	4b1d      	ldr	r3, [pc, #116]	; (8005ab8 <netconn_write_partly+0x80>)
 8005a44:	f240 22e6 	movw	r2, #742	; 0x2e6
 8005a48:	491c      	ldr	r1, [pc, #112]	; (8005abc <netconn_write_partly+0x84>)
 8005a4a:	481d      	ldr	r0, [pc, #116]	; (8005ac0 <netconn_write_partly+0x88>)
 8005a4c:	f007 faa6 	bl	800cf9c <iprintf>
 8005a50:	f06f 000f 	mvn.w	r0, #15
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:791
}
 8005a54:	b006      	add	sp, #24
 8005a56:	bd70      	pop	{r4, r5, r6, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:743 (discriminator 2)
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8005a58:	7802      	ldrb	r2, [r0, #0]
 8005a5a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005a5e:	2a10      	cmp	r2, #16
 8005a60:	d009      	beq.n	8005a76 <netconn_write_partly+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:743 (discriminator 1)
 8005a62:	4b15      	ldr	r3, [pc, #84]	; (8005ab8 <netconn_write_partly+0x80>)
 8005a64:	f240 22e7 	movw	r2, #743	; 0x2e7
 8005a68:	4916      	ldr	r1, [pc, #88]	; (8005ac4 <netconn_write_partly+0x8c>)
 8005a6a:	4815      	ldr	r0, [pc, #84]	; (8005ac0 <netconn_write_partly+0x88>)
 8005a6c:	f007 fa96 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:756
    return ERR_VAL;
 8005a70:	f06f 0005 	mvn.w	r0, #5
 8005a74:	e7ee      	b.n	8005a54 <netconn_write_partly+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:744 (discriminator 2)
  if (size == 0) {
 8005a76:	b90e      	cbnz	r6, 8005a7c <netconn_write_partly+0x44>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:745
    return ERR_OK;
 8005a78:	2000      	movs	r0, #0
 8005a7a:	e7eb      	b.n	8005a54 <netconn_write_partly+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:753
  if (dontblock && !bytes_written) {
 8005a7c:	7e04      	ldrb	r4, [r0, #24]
 8005a7e:	f003 0204 	and.w	r2, r3, #4
 8005a82:	f004 0402 	and.w	r4, r4, #2
 8005a86:	4314      	orrs	r4, r2
 8005a88:	d002      	beq.n	8005a90 <netconn_write_partly+0x58>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:753 (discriminator 1)
 8005a8a:	2d00      	cmp	r5, #0
 8005a8c:	d0f0      	beq.n	8005a70 <netconn_write_partly+0x38>
 8005a8e:	2401      	movs	r4, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:761
  API_MSG_VAR_REF(msg).conn = conn;
 8005a90:	9001      	str	r0, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:762
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 8005a92:	9103      	str	r1, [sp, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:778
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8005a94:	a901      	add	r1, sp, #4
 8005a96:	480c      	ldr	r0, [pc, #48]	; (8005ac8 <netconn_write_partly+0x90>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:763
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8005a98:	f88d 3014 	strb.w	r3, [sp, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:764
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8005a9c:	9604      	str	r6, [sp, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:778
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8005a9e:	f7ff fdbb 	bl	8005618 <netconn_apimsg>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:779
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	d1d6      	bne.n	8005a54 <netconn_write_partly+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:779 (discriminator 1)
 8005aa6:	2d00      	cmp	r5, #0
 8005aa8:	d0e6      	beq.n	8005a78 <netconn_write_partly+0x40>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:780
    if (dontblock) {
 8005aaa:	b114      	cbz	r4, 8005ab2 <netconn_write_partly+0x7a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:782
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 8005aac:	9b04      	ldr	r3, [sp, #16]
 8005aae:	602b      	str	r3, [r5, #0]
 8005ab0:	e7d0      	b.n	8005a54 <netconn_write_partly+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:785
      *bytes_written = size;
 8005ab2:	602e      	str	r6, [r5, #0]
 8005ab4:	e7ce      	b.n	8005a54 <netconn_write_partly+0x1c>
 8005ab6:	bf00      	nop
 8005ab8:	0801efa4 	.word	0x0801efa4
 8005abc:	0801f115 	.word	0x0801f115
 8005ac0:	0800e36a 	.word	0x0800e36a
 8005ac4:	0801f131 	.word	0x0801f131
 8005ac8:	08006839 	.word	0x08006839

08005acc <netconn_close>:
netconn_close():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_lib.c:841
 */
err_t
netconn_close(struct netconn *conn)
{
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8005acc:	2103      	movs	r1, #3
 8005ace:	f7ff bdad 	b.w	800562c <netconn_close_shutdown>
	...

08005ad4 <recv_udp>:
recv_udp():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:168
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 8005ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad8:	4606      	mov	r6, r0
 8005ada:	4617      	mov	r7, r2
 8005adc:	461d      	mov	r5, r3
 8005ade:	f8bd 9020 	ldrh.w	r9, [sp, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:177
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8005ae2:	460c      	mov	r4, r1
 8005ae4:	b929      	cbnz	r1, 8005af2 <recv_udp+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:177 (discriminator 1)
 8005ae6:	4b22      	ldr	r3, [pc, #136]	; (8005b70 <recv_udp+0x9c>)
 8005ae8:	22b1      	movs	r2, #177	; 0xb1
 8005aea:	4922      	ldr	r1, [pc, #136]	; (8005b74 <recv_udp+0xa0>)
 8005aec:	4822      	ldr	r0, [pc, #136]	; (8005b78 <recv_udp+0xa4>)
 8005aee:	f007 fa55 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:178
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8005af2:	b98e      	cbnz	r6, 8005b18 <recv_udp+0x44>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:178 (discriminator 1)
 8005af4:	4b1e      	ldr	r3, [pc, #120]	; (8005b70 <recv_udp+0x9c>)
 8005af6:	22b2      	movs	r2, #178	; 0xb2
 8005af8:	4920      	ldr	r1, [pc, #128]	; (8005b7c <recv_udp+0xa8>)
 8005afa:	481f      	ldr	r0, [pc, #124]	; (8005b78 <recv_udp+0xa4>)
 8005afc:	f007 fa4e 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:195
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8005b00:	4638      	mov	r0, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:232
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 8005b02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:195
    pbuf_free(p);
 8005b06:	f004 bebd 	b.w	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:230
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8005b0a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005b0c:	b373      	cbz	r3, 8005b6c <recv_udp+0x98>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:230 (discriminator 1)
 8005b0e:	462a      	mov	r2, r5
 8005b10:	4630      	mov	r0, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:232 (discriminator 1)
}
 8005b12:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:230 (discriminator 1)
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8005b16:	4718      	bx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:186
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8005b18:	6873      	ldr	r3, [r6, #4]
 8005b1a:	42a3      	cmp	r3, r4
 8005b1c:	d005      	beq.n	8005b2a <recv_udp+0x56>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:186 (discriminator 1)
 8005b1e:	4b14      	ldr	r3, [pc, #80]	; (8005b70 <recv_udp+0x9c>)
 8005b20:	22ba      	movs	r2, #186	; 0xba
 8005b22:	4917      	ldr	r1, [pc, #92]	; (8005b80 <recv_udp+0xac>)
 8005b24:	4814      	ldr	r0, [pc, #80]	; (8005b78 <recv_udp+0xa4>)
 8005b26:	f007 fa39 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:193
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8005b2a:	f106 0810 	add.w	r8, r6, #16
 8005b2e:	4640      	mov	r0, r8
 8005b30:	f7fb f8f3 	bl	8000d1a <sys_mbox_valid>
 8005b34:	2800      	cmp	r0, #0
 8005b36:	d0e3      	beq.n	8005b00 <recv_udp+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:199
  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8005b38:	2006      	movs	r0, #6
 8005b3a:	f006 fb93 	bl	800c264 <memp_malloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:200
  if (buf == NULL) {
 8005b3e:	4604      	mov	r4, r0
 8005b40:	2800      	cmp	r0, #0
 8005b42:	d0dd      	beq.n	8005b00 <recv_udp+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:205
    buf->ptr = p;
 8005b44:	e9c0 7700 	strd	r7, r7, [r0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:206
    ip_addr_set(&buf->addr, addr);
 8005b48:	b105      	cbz	r5, 8005b4c <recv_udp+0x78>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:206 (discriminator 1)
 8005b4a:	682d      	ldr	r5, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:206 (discriminator 4)
 8005b4c:	60a5      	str	r5, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:222 (discriminator 4)
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8005b4e:	4621      	mov	r1, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:207 (discriminator 4)
    buf->port = port;
 8005b50:	f8a4 900c 	strh.w	r9, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:222 (discriminator 4)
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8005b54:	4640      	mov	r0, r8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:221 (discriminator 4)
  len = p->tot_len;
 8005b56:	893d      	ldrh	r5, [r7, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:222 (discriminator 4)
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8005b58:	f7fb f8a2 	bl	8000ca0 <sys_mbox_trypost>
 8005b5c:	4601      	mov	r1, r0
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	d0d3      	beq.n	8005b0a <recv_udp+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:223
    netbuf_delete(buf);
 8005b62:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:232
}
 8005b64:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:223
    netbuf_delete(buf);
 8005b68:	f7ff bd18 	b.w	800559c <netbuf_delete>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:232
}
 8005b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b70:	0801f428 	.word	0x0801f428
 8005b74:	0801f48c 	.word	0x0801f48c
 8005b78:	0800e36a 	.word	0x0800e36a
 8005b7c:	0801f4ae 	.word	0x0801f4ae
 8005b80:	0801f4cd 	.word	0x0801f4cd

08005b84 <setup_tcp>:
setup_tcp():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:457
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8005b84:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:460
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8005b86:	6844      	ldr	r4, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:457
{
 8005b88:	4601      	mov	r1, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:461
  tcp_arg(pcb, conn);
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	f003 fba8 	bl	80092e0 <tcp_arg>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:462
  tcp_recv(pcb, recv_tcp);
 8005b90:	4620      	mov	r0, r4
 8005b92:	4909      	ldr	r1, [pc, #36]	; (8005bb8 <setup_tcp+0x34>)
 8005b94:	f003 fba8 	bl	80092e8 <tcp_recv>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:463
  tcp_sent(pcb, sent_tcp);
 8005b98:	4620      	mov	r0, r4
 8005b9a:	4908      	ldr	r1, [pc, #32]	; (8005bbc <setup_tcp+0x38>)
 8005b9c:	f003 fbba 	bl	8009314 <tcp_sent>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:464
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	4907      	ldr	r1, [pc, #28]	; (8005bc0 <setup_tcp+0x3c>)
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	f003 fbe9 	bl	800937c <tcp_poll>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:465
  tcp_err(pcb, err_tcp);
 8005baa:	4620      	mov	r0, r4
 8005bac:	4905      	ldr	r1, [pc, #20]	; (8005bc4 <setup_tcp+0x40>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:466
}
 8005bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:465
  tcp_err(pcb, err_tcp);
 8005bb2:	f003 bbc5 	b.w	8009340 <tcp_err>
 8005bb6:	bf00      	nop
 8005bb8:	08006149 	.word	0x08006149
 8005bbc:	0800620d 	.word	0x0800620d
 8005bc0:	080060cd 	.word	0x080060cd
 8005bc4:	08005bc9 	.word	0x08005bc9

08005bc8 <err_tcp>:
err_tcp():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:383
{
 8005bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bcc:	460e      	mov	r6, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:388
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8005bce:	4604      	mov	r4, r0
 8005bd0:	b930      	cbnz	r0, 8005be0 <err_tcp+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:388 (discriminator 1)
 8005bd2:	4b41      	ldr	r3, [pc, #260]	; (8005cd8 <err_tcp+0x110>)
 8005bd4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8005bd8:	4940      	ldr	r1, [pc, #256]	; (8005cdc <err_tcp+0x114>)
 8005bda:	4841      	ldr	r0, [pc, #260]	; (8005ce0 <err_tcp+0x118>)
 8005bdc:	f007 f9de 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:393
  old_state = conn->state;
 8005be0:	7865      	ldrb	r5, [r4, #1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:390
  conn->pcb.tcp = NULL;
 8005be2:	2700      	movs	r7, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:396
  if (old_state == NETCONN_CLOSE) {
 8005be4:	2d04      	cmp	r5, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:390
  conn->pcb.tcp = NULL;
 8005be6:	6067      	str	r7, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:394
  conn->state = NETCONN_NONE;
 8005be8:	7067      	strb	r7, [r4, #1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:396
  if (old_state == NETCONN_CLOSE) {
 8005bea:	d162      	bne.n	8005cb2 <err_tcp+0xea>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:399 (discriminator 1)
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8005bec:	f7fb f910 	bl	8000e10 <sys_arch_protect>
 8005bf0:	f994 3008 	ldrsb.w	r3, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:398 (discriminator 1)
    err = ERR_OK;
 8005bf4:	2600      	movs	r6, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:399 (discriminator 1)
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8005bf6:	330c      	adds	r3, #12
 8005bf8:	bfa8      	it	ge
 8005bfa:	7227      	strbge	r7, [r4, #8]
 8005bfc:	f7fb f914 	bl	8000e28 <sys_arch_unprotect>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:408
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8005c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c02:	b11b      	cbz	r3, 8005c0c <err_tcp+0x44>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:408 (discriminator 1)
 8005c04:	2200      	movs	r2, #0
 8005c06:	2104      	movs	r1, #4
 8005c08:	4620      	mov	r0, r4
 8005c0a:	4798      	blx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:411 (discriminator 3)
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8005c0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c0e:	b11b      	cbz	r3, 8005c18 <err_tcp+0x50>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:411 (discriminator 1)
 8005c10:	2200      	movs	r2, #0
 8005c12:	4620      	mov	r0, r4
 8005c14:	4611      	mov	r1, r2
 8005c16:	4798      	blx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:412 (discriminator 3)
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8005c18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c1a:	b11b      	cbz	r3, 8005c24 <err_tcp+0x5c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:412 (discriminator 1)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	2102      	movs	r1, #2
 8005c20:	4620      	mov	r0, r4
 8005c22:	4798      	blx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:415 (discriminator 3)
  if (sys_mbox_valid(&conn->recvmbox)) {
 8005c24:	f104 0710 	add.w	r7, r4, #16
 8005c28:	4638      	mov	r0, r7
 8005c2a:	f7fb f876 	bl	8000d1a <sys_mbox_valid>
 8005c2e:	b118      	cbz	r0, 8005c38 <err_tcp+0x70>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:417
    sys_mbox_trypost(&conn->recvmbox, NULL);
 8005c30:	2100      	movs	r1, #0
 8005c32:	4638      	mov	r0, r7
 8005c34:	f7fb f834 	bl	8000ca0 <sys_mbox_trypost>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:420
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8005c38:	f104 0714 	add.w	r7, r4, #20
 8005c3c:	4638      	mov	r0, r7
 8005c3e:	f7fb f86c 	bl	8000d1a <sys_mbox_valid>
 8005c42:	b118      	cbz	r0, 8005c4c <err_tcp+0x84>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:422
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 8005c44:	2100      	movs	r1, #0
 8005c46:	4638      	mov	r0, r7
 8005c48:	f7fb f82a 	bl	8000ca0 <sys_mbox_trypost>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:425
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8005c4c:	2d01      	cmp	r5, #1
 8005c4e:	d002      	beq.n	8005c56 <err_tcp+0x8e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:425 (discriminator 2)
 8005c50:	3d03      	subs	r5, #3
 8005c52:	2d01      	cmp	r5, #1
 8005c54:	d833      	bhi.n	8005cbe <err_tcp+0xf6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:429
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8005c56:	7e23      	ldrb	r3, [r4, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:430
    SET_NONBLOCKING_CONNECT(conn, 0);
 8005c58:	f023 0204 	bic.w	r2, r3, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:432
    if (!was_nonblocking_connect) {
 8005c5c:	075b      	lsls	r3, r3, #29
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:430
    SET_NONBLOCKING_CONNECT(conn, 0);
 8005c5e:	7622      	strb	r2, [r4, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:432
    if (!was_nonblocking_connect) {
 8005c60:	d438      	bmi.n	8005cd4 <err_tcp+0x10c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:435
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8005c62:	6a23      	ldr	r3, [r4, #32]
 8005c64:	b933      	cbnz	r3, 8005c74 <err_tcp+0xac>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:435 (discriminator 1)
 8005c66:	4b1c      	ldr	r3, [pc, #112]	; (8005cd8 <err_tcp+0x110>)
 8005c68:	f240 12b3 	movw	r2, #435	; 0x1b3
 8005c6c:	491d      	ldr	r1, [pc, #116]	; (8005ce4 <err_tcp+0x11c>)
 8005c6e:	481c      	ldr	r0, [pc, #112]	; (8005ce0 <err_tcp+0x118>)
 8005c70:	f007 f994 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:436
      conn->current_msg->err = err;
 8005c74:	6a23      	ldr	r3, [r4, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:437
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005c76:	681d      	ldr	r5, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:436
      conn->current_msg->err = err;
 8005c78:	711e      	strb	r6, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:437
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005c7a:	350c      	adds	r5, #12
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:438
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	f7fb f88c 	bl	8000d9a <sys_sem_valid>
 8005c82:	b930      	cbnz	r0, 8005c92 <err_tcp+0xca>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:438 (discriminator 1)
 8005c84:	4b14      	ldr	r3, [pc, #80]	; (8005cd8 <err_tcp+0x110>)
 8005c86:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8005c8a:	4917      	ldr	r1, [pc, #92]	; (8005ce8 <err_tcp+0x120>)
 8005c8c:	4814      	ldr	r0, [pc, #80]	; (8005ce0 <err_tcp+0x118>)
 8005c8e:	f007 f985 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:439
      conn->current_msg = NULL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	6223      	str	r3, [r4, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:441
      NETCONN_SET_SAFE_ERR(conn, err);
 8005c96:	f7fb f8bb 	bl	8000e10 <sys_arch_protect>
 8005c9a:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8005c9e:	330c      	adds	r3, #12
 8005ca0:	bfa8      	it	ge
 8005ca2:	7226      	strbge	r6, [r4, #8]
 8005ca4:	f7fb f8c0 	bl	8000e28 <sys_arch_unprotect>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:442
      sys_sem_signal(op_completed_sem);
 8005ca8:	4628      	mov	r0, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:447
}
 8005caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:442
      sys_sem_signal(op_completed_sem);
 8005cae:	f7fb b86e 	b.w	8000d8e <sys_sem_signal>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:402
    SYS_ARCH_SET(conn->last_err, err);
 8005cb2:	f7fb f8ad 	bl	8000e10 <sys_arch_protect>
 8005cb6:	7226      	strb	r6, [r4, #8]
 8005cb8:	f7fb f8b6 	bl	8000e28 <sys_arch_unprotect>
 8005cbc:	e7a0      	b.n	8005c00 <err_tcp+0x38>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:445
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8005cbe:	6a23      	ldr	r3, [r4, #32]
 8005cc0:	b143      	cbz	r3, 8005cd4 <err_tcp+0x10c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:445 (discriminator 1)
 8005cc2:	4b05      	ldr	r3, [pc, #20]	; (8005cd8 <err_tcp+0x110>)
 8005cc4:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005cc8:	4908      	ldr	r1, [pc, #32]	; (8005cec <err_tcp+0x124>)
 8005cca:	4805      	ldr	r0, [pc, #20]	; (8005ce0 <err_tcp+0x118>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:447 (discriminator 1)
}
 8005ccc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:445 (discriminator 1)
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8005cd0:	f007 b964 	b.w	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:447
}
 8005cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cd8:	0801f428 	.word	0x0801f428
 8005cdc:	0801f153 	.word	0x0801f153
 8005ce0:	0800e36a 	.word	0x0800e36a
 8005ce4:	0801f160 	.word	0x0801f160
 8005ce8:	0801f17a 	.word	0x0801f17a
 8005cec:	0801f193 	.word	0x0801f193

08005cf0 <lwip_netconn_do_writemore>:
lwip_netconn_do_writemore():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1498
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8005cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cf4:	4688      	mov	r8, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1507
  u8_t write_finished = 0;
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8005cf6:	4604      	mov	r4, r0
 8005cf8:	b930      	cbnz	r0, 8005d08 <lwip_netconn_do_writemore+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1507 (discriminator 1)
 8005cfa:	4b6d      	ldr	r3, [pc, #436]	; (8005eb0 <lwip_netconn_do_writemore+0x1c0>)
 8005cfc:	f240 52e3 	movw	r2, #1507	; 0x5e3
 8005d00:	496c      	ldr	r1, [pc, #432]	; (8005eb4 <lwip_netconn_do_writemore+0x1c4>)
 8005d02:	486d      	ldr	r0, [pc, #436]	; (8005eb8 <lwip_netconn_do_writemore+0x1c8>)
 8005d04:	f007 f94a 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1508
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8005d08:	7863      	ldrb	r3, [r4, #1]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d006      	beq.n	8005d1c <lwip_netconn_do_writemore+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1508 (discriminator 1)
 8005d0e:	4b68      	ldr	r3, [pc, #416]	; (8005eb0 <lwip_netconn_do_writemore+0x1c0>)
 8005d10:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8005d14:	4969      	ldr	r1, [pc, #420]	; (8005ebc <lwip_netconn_do_writemore+0x1cc>)
 8005d16:	4868      	ldr	r0, [pc, #416]	; (8005eb8 <lwip_netconn_do_writemore+0x1c8>)
 8005d18:	f007 f940 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1509
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8005d1c:	6a23      	ldr	r3, [r4, #32]
 8005d1e:	b933      	cbnz	r3, 8005d2e <lwip_netconn_do_writemore+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1509 (discriminator 1)
 8005d20:	4b63      	ldr	r3, [pc, #396]	; (8005eb0 <lwip_netconn_do_writemore+0x1c0>)
 8005d22:	f240 52e5 	movw	r2, #1509	; 0x5e5
 8005d26:	4966      	ldr	r1, [pc, #408]	; (8005ec0 <lwip_netconn_do_writemore+0x1d0>)
 8005d28:	4863      	ldr	r0, [pc, #396]	; (8005eb8 <lwip_netconn_do_writemore+0x1c8>)
 8005d2a:	f007 f937 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1510
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8005d2e:	6863      	ldr	r3, [r4, #4]
 8005d30:	b933      	cbnz	r3, 8005d40 <lwip_netconn_do_writemore+0x50>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1510 (discriminator 1)
 8005d32:	4b5f      	ldr	r3, [pc, #380]	; (8005eb0 <lwip_netconn_do_writemore+0x1c0>)
 8005d34:	f240 52e6 	movw	r2, #1510	; 0x5e6
 8005d38:	4962      	ldr	r1, [pc, #392]	; (8005ec4 <lwip_netconn_do_writemore+0x1d4>)
 8005d3a:	485f      	ldr	r0, [pc, #380]	; (8005eb8 <lwip_netconn_do_writemore+0x1c8>)
 8005d3c:	f007 f92e 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1511
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8005d40:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d306      	bcc.n	8005d58 <lwip_netconn_do_writemore+0x68>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1511 (discriminator 1)
 8005d4a:	4b59      	ldr	r3, [pc, #356]	; (8005eb0 <lwip_netconn_do_writemore+0x1c0>)
 8005d4c:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 8005d50:	495d      	ldr	r1, [pc, #372]	; (8005ec8 <lwip_netconn_do_writemore+0x1d8>)
 8005d52:	4859      	ldr	r0, [pc, #356]	; (8005eb8 <lwip_netconn_do_writemore+0x1c8>)
 8005d54:	f007 f922 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1514
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 8005d58:	6a23      	ldr	r3, [r4, #32]
 8005d5a:	7e27      	ldrb	r7, [r4, #24]
 8005d5c:	7c1e      	ldrb	r6, [r3, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1515
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8005d5e:	f007 0702 	and.w	r7, r7, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1534
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8005d62:	6899      	ldr	r1, [r3, #8]
 8005d64:	f006 0204 	and.w	r2, r6, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1542
      len = 0xffff;
      apiflags |= TCP_WRITE_FLAG_MORE;
    } else {
      len = (u16_t)diff;
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 8005d68:	6860      	ldr	r0, [r4, #4]
 8005d6a:	4317      	orrs	r7, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1534
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8005d6c:	69e2      	ldr	r2, [r4, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1542
    available = tcp_sndbuf(conn->pcb.tcp);
 8005d6e:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1534
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8005d72:	eb01 0902 	add.w	r9, r1, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1535
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 8005d76:	68d9      	ldr	r1, [r3, #12]
 8005d78:	1a8b      	subs	r3, r1, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1536
    if (diff > 0xffffUL) { /* max_u16_t */
 8005d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1537
      len = 0xffff;
 8005d7e:	bf2a      	itet	cs
 8005d80:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1540
      len = (u16_t)diff;
 8005d84:	b29b      	uxthcc	r3, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1538
      apiflags |= TCP_WRITE_FLAG_MORE;
 8005d86:	f046 0602 	orrcs.w	r6, r6, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1543
    if (available < len) {
 8005d8a:	42ab      	cmp	r3, r5
 8005d8c:	d95c      	bls.n	8005e48 <lwip_netconn_do_writemore+0x158>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1546
      /* don't try to write more than sendbuf */
      len = available;
      if (dontblock) {
 8005d8e:	b11f      	cbz	r7, 8005d98 <lwip_netconn_do_writemore+0xa8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1547
        if (!len) {
 8005d90:	b925      	cbnz	r5, 8005d9c <lwip_netconn_do_writemore+0xac>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1548
          err = ERR_WOULDBLOCK;
 8005d92:	f06f 0606 	mvn.w	r6, #6
 8005d96:	e018      	b.n	8005dca <lwip_netconn_do_writemore+0xda>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1552
          goto err_mem;
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 8005d98:	f046 0602 	orr.w	r6, r6, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1555
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8005d9c:	442a      	add	r2, r5
 8005d9e:	4291      	cmp	r1, r2
 8005da0:	d206      	bcs.n	8005db0 <lwip_netconn_do_writemore+0xc0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1555 (discriminator 1)
 8005da2:	4b43      	ldr	r3, [pc, #268]	; (8005eb0 <lwip_netconn_do_writemore+0x1c0>)
 8005da4:	f240 6213 	movw	r2, #1555	; 0x613
 8005da8:	4948      	ldr	r1, [pc, #288]	; (8005ecc <lwip_netconn_do_writemore+0x1dc>)
 8005daa:	4843      	ldr	r0, [pc, #268]	; (8005eb8 <lwip_netconn_do_writemore+0x1c8>)
 8005dac:	f007 f8f6 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1556
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8005db0:	4633      	mov	r3, r6
 8005db2:	462a      	mov	r2, r5
 8005db4:	4649      	mov	r1, r9
 8005db6:	6860      	ldr	r0, [r4, #4]
 8005db8:	f002 faa0 	bl	80082fc <tcp_write>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1558
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8005dbc:	1c43      	adds	r3, r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1556
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8005dbe:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1558
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d860      	bhi.n	8005e88 <lwip_netconn_do_writemore+0x198>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1560
err_mem:
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8005dc6:	2f00      	cmp	r7, #0
 8005dc8:	d040      	beq.n	8005e4c <lwip_netconn_do_writemore+0x15c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1560 (discriminator 1)
 8005dca:	6a23      	ldr	r3, [r4, #32]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	429d      	cmp	r5, r3
 8005dd0:	d23c      	bcs.n	8005e4c <lwip_netconn_do_writemore+0x15c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1563
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8005dd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dd4:	b11b      	cbz	r3, 8005dde <lwip_netconn_do_writemore+0xee>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1563 (discriminator 1)
 8005dd6:	462a      	mov	r2, r5
 8005dd8:	2103      	movs	r1, #3
 8005dda:	4620      	mov	r0, r4
 8005ddc:	4798      	blx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1564 (discriminator 3)
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8005dde:	7e23      	ldrb	r3, [r4, #24]
 8005de0:	f043 0310 	orr.w	r3, r3, #16
 8005de4:	7623      	strb	r3, [r4, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1573 (discriminator 3)
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
      }
    }

    if (err == ERR_OK) {
 8005de6:	2e00      	cmp	r6, #0
 8005de8:	d143      	bne.n	8005e72 <lwip_netconn_do_writemore+0x182>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1575
      err_t out_err;
      conn->write_offset += len;
 8005dea:	69e3      	ldr	r3, [r4, #28]
 8005dec:	441d      	add	r5, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1576
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8005dee:	6a23      	ldr	r3, [r4, #32]
 8005df0:	68da      	ldr	r2, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1575
      conn->write_offset += len;
 8005df2:	61e5      	str	r5, [r4, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1576
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8005df4:	4295      	cmp	r5, r2
 8005df6:	d000      	beq.n	8005dfa <lwip_netconn_do_writemore+0x10a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1576 (discriminator 1)
 8005df8:	b10f      	cbz	r7, 8005dfe <lwip_netconn_do_writemore+0x10e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1580
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
        /* everything was written */
        write_finished = 1;
 8005dfa:	2701      	movs	r7, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1578
        conn->current_msg->msg.w.len = conn->write_offset;
 8005dfc:	60dd      	str	r5, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1582
      }
      out_err = tcp_output(conn->pcb.tcp);
 8005dfe:	6860      	ldr	r0, [r4, #4]
 8005e00:	f002 fdf8 	bl	80089f4 <tcp_output>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1583
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8005e04:	f110 0f0c 	cmn.w	r0, #12
 8005e08:	db01      	blt.n	8005e0e <lwip_netconn_do_writemore+0x11e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1583 (discriminator 1)
 8005e0a:	1d01      	adds	r1, r0, #4
 8005e0c:	d14b      	bne.n	8005ea6 <lwip_netconn_do_writemore+0x1b6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1589
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
        write_finished = 1;
        conn->current_msg->msg.w.len = 0;
 8005e0e:	6a23      	ldr	r3, [r4, #32]
 8005e10:	2200      	movs	r2, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1582
      out_err = tcp_output(conn->pcb.tcp);
 8005e12:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1589
        conn->current_msg->msg.w.len = 0;
 8005e14:	60da      	str	r2, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1622
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005e16:	6a23      	ldr	r3, [r4, #32]
 8005e18:	681d      	ldr	r5, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1623
    conn->current_msg->err = err;
 8005e1a:	711e      	strb	r6, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1624
    conn->current_msg = NULL;
 8005e1c:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1625
    conn->write_offset = 0;
 8005e1e:	e9c4 3307 	strd	r3, r3, [r4, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1626
    conn->state = NETCONN_NONE;
 8005e22:	7063      	strb	r3, [r4, #1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1627
    NETCONN_SET_SAFE_ERR(conn, err);
 8005e24:	f7fa fff4 	bl	8000e10 <sys_arch_protect>
 8005e28:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8005e2c:	330c      	adds	r3, #12
 8005e2e:	bfa8      	it	ge
 8005e30:	7226      	strbge	r6, [r4, #8]
 8005e32:	f7fa fff9 	bl	8000e28 <sys_arch_unprotect>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1629
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8005e36:	f1b8 0f00 	cmp.w	r8, #0
 8005e3a:	d037      	beq.n	8005eac <lwip_netconn_do_writemore+0x1bc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1632
#endif
    {
      sys_sem_signal(op_completed_sem);
 8005e3c:	f105 000c 	add.w	r0, r5, #12
 8005e40:	f7fa ffa5 	bl	8000d8e <sys_sem_signal>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1640
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 8005e44:	2000      	movs	r0, #0
 8005e46:	e026      	b.n	8005e96 <lwip_netconn_do_writemore+0x1a6>
 8005e48:	461d      	mov	r5, r3
 8005e4a:	e7a7      	b.n	8005d9c <lwip_netconn_do_writemore+0xac>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1565
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8005e4c:	6863      	ldr	r3, [r4, #4]
 8005e4e:	f640 3269 	movw	r2, #2921	; 0xb69
 8005e52:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
 8005e56:	4291      	cmp	r1, r2
 8005e58:	d903      	bls.n	8005e62 <lwip_netconn_do_writemore+0x172>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1565 (discriminator 1)
 8005e5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d9c1      	bls.n	8005de6 <lwip_netconn_do_writemore+0xf6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1569
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8005e62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d0be      	beq.n	8005de6 <lwip_netconn_do_writemore+0xf6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1569 (discriminator 1)
 8005e68:	462a      	mov	r2, r5
 8005e6a:	2103      	movs	r1, #3
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	4798      	blx	r3
 8005e70:	e7b9      	b.n	8005de6 <lwip_netconn_do_writemore+0xf6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1591
    } else if (err == ERR_MEM) {
 8005e72:	1c72      	adds	r2, r6, #1
 8005e74:	d108      	bne.n	8005e88 <lwip_netconn_do_writemore+0x198>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1598
      err_t out_err = tcp_output(conn->pcb.tcp);
 8005e76:	6860      	ldr	r0, [r4, #4]
 8005e78:	f002 fdbc 	bl	80089f4 <tcp_output>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1599
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8005e7c:	f110 0f0c 	cmn.w	r0, #12
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1598
      err_t out_err = tcp_output(conn->pcb.tcp);
 8005e80:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1599
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8005e82:	db01      	blt.n	8005e88 <lwip_netconn_do_writemore+0x198>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1599 (discriminator 1)
 8005e84:	1d03      	adds	r3, r0, #4
 8005e86:	d103      	bne.n	8005e90 <lwip_netconn_do_writemore+0x1a0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1616
      conn->current_msg->msg.w.len = 0;
 8005e88:	6a23      	ldr	r3, [r4, #32]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	60da      	str	r2, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1619
  if (write_finished) {
 8005e8e:	e7c2      	b.n	8005e16 <lwip_netconn_do_writemore+0x126>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1606
      } else if (dontblock) {
 8005e90:	b91f      	cbnz	r7, 8005e9a <lwip_netconn_do_writemore+0x1aa>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1637
    return ERR_MEM;
 8005e92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1641
}
 8005e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1610
        conn->current_msg->msg.w.len = 0;
 8005e9a:	6a23      	ldr	r3, [r4, #32]
 8005e9c:	2200      	movs	r2, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1608
        err = ERR_WOULDBLOCK;
 8005e9e:	f06f 0606 	mvn.w	r6, #6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1610
        conn->current_msg->msg.w.len = 0;
 8005ea2:	60da      	str	r2, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1619
  if (write_finished) {
 8005ea4:	e7b7      	b.n	8005e16 <lwip_netconn_do_writemore+0x126>
 8005ea6:	2f00      	cmp	r7, #0
 8005ea8:	d1b5      	bne.n	8005e16 <lwip_netconn_do_writemore+0x126>
 8005eaa:	e7f2      	b.n	8005e92 <lwip_netconn_do_writemore+0x1a2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1640
  return ERR_OK;
 8005eac:	4640      	mov	r0, r8
 8005eae:	e7f2      	b.n	8005e96 <lwip_netconn_do_writemore+0x1a6>
 8005eb0:	0801f428 	.word	0x0801f428
 8005eb4:	0801f153 	.word	0x0801f153
 8005eb8:	0800e36a 	.word	0x0800e36a
 8005ebc:	0801f26f 	.word	0x0801f26f
 8005ec0:	0801f160 	.word	0x0801f160
 8005ec4:	0801f28c 	.word	0x0801f28c
 8005ec8:	0801f2a2 	.word	0x0801f2a2
 8005ecc:	0801f2d4 	.word	0x0801f2d4

08005ed0 <lwip_netconn_do_close_internal>:
lwip_netconn_do_close_internal():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:826
{
 8005ed0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed4:	468a      	mov	sl, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:835
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	b930      	cbnz	r0, 8005ee8 <lwip_netconn_do_close_internal+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:835 (discriminator 1)
 8005eda:	4b71      	ldr	r3, [pc, #452]	; (80060a0 <lwip_netconn_do_close_internal+0x1d0>)
 8005edc:	f240 3243 	movw	r2, #835	; 0x343
 8005ee0:	4970      	ldr	r1, [pc, #448]	; (80060a4 <lwip_netconn_do_close_internal+0x1d4>)
 8005ee2:	4871      	ldr	r0, [pc, #452]	; (80060a8 <lwip_netconn_do_close_internal+0x1d8>)
 8005ee4:	f007 f85a 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:836
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8005ee8:	7823      	ldrb	r3, [r4, #0]
 8005eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eee:	2b10      	cmp	r3, #16
 8005ef0:	d006      	beq.n	8005f00 <lwip_netconn_do_close_internal+0x30>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:836 (discriminator 1)
 8005ef2:	4b6b      	ldr	r3, [pc, #428]	; (80060a0 <lwip_netconn_do_close_internal+0x1d0>)
 8005ef4:	f44f 7251 	mov.w	r2, #836	; 0x344
 8005ef8:	496c      	ldr	r1, [pc, #432]	; (80060ac <lwip_netconn_do_close_internal+0x1dc>)
 8005efa:	486b      	ldr	r0, [pc, #428]	; (80060a8 <lwip_netconn_do_close_internal+0x1d8>)
 8005efc:	f007 f84e 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:837
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8005f00:	7863      	ldrb	r3, [r4, #1]
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	d006      	beq.n	8005f14 <lwip_netconn_do_close_internal+0x44>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:837 (discriminator 1)
 8005f06:	4b66      	ldr	r3, [pc, #408]	; (80060a0 <lwip_netconn_do_close_internal+0x1d0>)
 8005f08:	f240 3245 	movw	r2, #837	; 0x345
 8005f0c:	4968      	ldr	r1, [pc, #416]	; (80060b0 <lwip_netconn_do_close_internal+0x1e0>)
 8005f0e:	4866      	ldr	r0, [pc, #408]	; (80060a8 <lwip_netconn_do_close_internal+0x1d8>)
 8005f10:	f007 f844 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:838
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8005f14:	6863      	ldr	r3, [r4, #4]
 8005f16:	b933      	cbnz	r3, 8005f26 <lwip_netconn_do_close_internal+0x56>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:838 (discriminator 1)
 8005f18:	4b61      	ldr	r3, [pc, #388]	; (80060a0 <lwip_netconn_do_close_internal+0x1d0>)
 8005f1a:	f240 3246 	movw	r2, #838	; 0x346
 8005f1e:	4965      	ldr	r1, [pc, #404]	; (80060b4 <lwip_netconn_do_close_internal+0x1e4>)
 8005f20:	4861      	ldr	r0, [pc, #388]	; (80060a8 <lwip_netconn_do_close_internal+0x1d8>)
 8005f22:	f007 f83b 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:839
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8005f26:	6a23      	ldr	r3, [r4, #32]
 8005f28:	b933      	cbnz	r3, 8005f38 <lwip_netconn_do_close_internal+0x68>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:839 (discriminator 1)
 8005f2a:	4b5d      	ldr	r3, [pc, #372]	; (80060a0 <lwip_netconn_do_close_internal+0x1d0>)
 8005f2c:	f240 3247 	movw	r2, #839	; 0x347
 8005f30:	4961      	ldr	r1, [pc, #388]	; (80060b8 <lwip_netconn_do_close_internal+0x1e8>)
 8005f32:	485d      	ldr	r0, [pc, #372]	; (80060a8 <lwip_netconn_do_close_internal+0x1d8>)
 8005f34:	f007 f832 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:842
  shut = conn->current_msg->msg.sd.shut;
 8005f38:	6a23      	ldr	r3, [r4, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:841
  tpcb = conn->pcb.tcp;
 8005f3a:	6865      	ldr	r5, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:842
  shut = conn->current_msg->msg.sd.shut;
 8005f3c:	7a1b      	ldrb	r3, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:847
  if (shut == NETCONN_SHUT_RDWR) {
 8005f3e:	2b03      	cmp	r3, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:843
  shut_rx = shut & NETCONN_SHUT_RD;
 8005f40:	f003 0901 	and.w	r9, r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:844
  shut_tx = shut & NETCONN_SHUT_WR;
 8005f44:	f003 0802 	and.w	r8, r3, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:847
  if (shut == NETCONN_SHUT_RDWR) {
 8005f48:	d00f      	beq.n	8005f6a <lwip_netconn_do_close_internal+0x9a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:849
  } else if (shut_rx &&
 8005f4a:	f1b9 0f00 	cmp.w	r9, #0
 8005f4e:	d005      	beq.n	8005f5c <lwip_netconn_do_close_internal+0x8c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:850 (discriminator 1)
             ((tpcb->state == FIN_WAIT_1) ||
 8005f50:	7d2b      	ldrb	r3, [r5, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:849 (discriminator 1)
  } else if (shut_rx &&
 8005f52:	1f5a      	subs	r2, r3, #5
 8005f54:	2a01      	cmp	r2, #1
 8005f56:	d908      	bls.n	8005f6a <lwip_netconn_do_close_internal+0x9a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:851
              (tpcb->state == FIN_WAIT_2) ||
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d006      	beq.n	8005f6a <lwip_netconn_do_close_internal+0x9a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:854
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8005f5c:	f1b8 0f00 	cmp.w	r8, #0
 8005f60:	d016      	beq.n	8005f90 <lwip_netconn_do_close_internal+0xc0>
 8005f62:	7eaf      	ldrb	r7, [r5, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:854 (discriminator 1)
 8005f64:	f017 0710 	ands.w	r7, r7, #16
 8005f68:	d004      	beq.n	8005f74 <lwip_netconn_do_close_internal+0xa4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:862
    tcp_arg(tpcb, NULL);
 8005f6a:	2701      	movs	r7, #1
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	4628      	mov	r0, r5
 8005f70:	f003 f9b6 	bl	80092e0 <tcp_arg>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:864
  if (tpcb->state == LISTEN) {
 8005f74:	7d2b      	ldrb	r3, [r5, #20]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d10c      	bne.n	8005f94 <lwip_netconn_do_close_internal+0xc4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:865
    tcp_accept(tpcb, NULL);
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	f003 f9f7 	bl	8009370 <tcp_accept>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:881
  if (close) {
 8005f82:	bb27      	cbnz	r7, 8005fce <lwip_netconn_do_close_internal+0xfe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:914
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8005f84:	4642      	mov	r2, r8
 8005f86:	4649      	mov	r1, r9
 8005f88:	4628      	mov	r0, r5
 8005f8a:	f003 fd81 	bl	8009a90 <tcp_shutdown>
 8005f8e:	e021      	b.n	8005fd4 <lwip_netconn_do_close_internal+0x104>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:857
    close = 0;
 8005f90:	4647      	mov	r7, r8
 8005f92:	e7ef      	b.n	8005f74 <lwip_netconn_do_close_internal+0xa4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:868
    if (shut_rx) {
 8005f94:	f1b9 0f00 	cmp.w	r9, #0
 8005f98:	d007      	beq.n	8005faa <lwip_netconn_do_close_internal+0xda>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:869
      tcp_recv(tpcb, NULL);
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	f003 f9a3 	bl	80092e8 <tcp_recv>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:870
      tcp_accept(tpcb, NULL);
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	f003 f9e3 	bl	8009370 <tcp_accept>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:872
    if (shut_tx) {
 8005faa:	f1b8 0f00 	cmp.w	r8, #0
 8005fae:	d003      	beq.n	8005fb8 <lwip_netconn_do_close_internal+0xe8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:873
      tcp_sent(tpcb, NULL);
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	f003 f9ae 	bl	8009314 <tcp_sent>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:875
    if (close) {
 8005fb8:	2f00      	cmp	r7, #0
 8005fba:	d0e3      	beq.n	8005f84 <lwip_netconn_do_close_internal+0xb4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:876
      tcp_poll(tpcb, NULL, 0);
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	4611      	mov	r1, r2
 8005fc2:	f003 f9db 	bl	800937c <tcp_poll>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:877
      tcp_err(tpcb, NULL);
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	4628      	mov	r0, r5
 8005fca:	f003 f9b9 	bl	8009340 <tcp_err>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:911
      err = tcp_close(tpcb);
 8005fce:	4628      	mov	r0, r5
 8005fd0:	f003 fcbe 	bl	8009950 <tcp_close>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:914
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8005fd4:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:916
  if (err == ERR_OK) {
 8005fd6:	b160      	cbz	r0, 8005ff2 <lwip_netconn_do_close_internal+0x122>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:926
    if (err == ERR_MEM) {
 8005fd8:	1c43      	adds	r3, r0, #1
 8005fda:	d10a      	bne.n	8005ff2 <lwip_netconn_do_close_internal+0x122>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:947
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8005fdc:	6a23      	ldr	r3, [r4, #32]
 8005fde:	f893 b009 	ldrb.w	fp, [r3, #9]
 8005fe2:	f1bb 0f00 	cmp.w	fp, #0
 8005fe6:	d139      	bne.n	800605c <lwip_netconn_do_close_internal+0x18c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:950
        if (close) {
 8005fe8:	b11f      	cbz	r7, 8005ff2 <lwip_netconn_do_close_internal+0x122>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:953
          err = ERR_OK;
 8005fea:	465e      	mov	r6, fp
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:952
          tcp_abort(tpcb);
 8005fec:	4628      	mov	r0, r5
 8005fee:	f003 fde7 	bl	8009bc0 <tcp_abort>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:963
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005ff2:	6a23      	ldr	r3, [r4, #32]
 8005ff4:	681d      	ldr	r5, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:964
    conn->current_msg->err = err;
 8005ff6:	711e      	strb	r6, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:965
    conn->current_msg = NULL;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	6223      	str	r3, [r4, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:966
    conn->state = NETCONN_NONE;
 8005ffc:	7063      	strb	r3, [r4, #1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:967
    if (err == ERR_OK) {
 8005ffe:	b9ce      	cbnz	r6, 8006034 <lwip_netconn_do_close_internal+0x164>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:968
      if (close) {
 8006000:	b137      	cbz	r7, 8006010 <lwip_netconn_do_close_internal+0x140>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:973
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8006002:	6a63      	ldr	r3, [r4, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:970
        conn->pcb.tcp = NULL;
 8006004:	6066      	str	r6, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:973
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8006006:	b11b      	cbz	r3, 8006010 <lwip_netconn_do_close_internal+0x140>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:973 (discriminator 1)
 8006008:	4632      	mov	r2, r6
 800600a:	2104      	movs	r1, #4
 800600c:	4620      	mov	r0, r4
 800600e:	4798      	blx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:975 (discriminator 3)
      if (shut_rx) {
 8006010:	f1b9 0f00 	cmp.w	r9, #0
 8006014:	d005      	beq.n	8006022 <lwip_netconn_do_close_internal+0x152>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:976
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006016:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006018:	b11b      	cbz	r3, 8006022 <lwip_netconn_do_close_internal+0x152>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:976 (discriminator 1)
 800601a:	2200      	movs	r2, #0
 800601c:	4620      	mov	r0, r4
 800601e:	4611      	mov	r1, r2
 8006020:	4798      	blx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:978 (discriminator 3)
      if (shut_tx) {
 8006022:	f1b8 0f00 	cmp.w	r8, #0
 8006026:	d005      	beq.n	8006034 <lwip_netconn_do_close_internal+0x164>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:979
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8006028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800602a:	b11b      	cbz	r3, 8006034 <lwip_netconn_do_close_internal+0x164>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:979 (discriminator 1)
 800602c:	2200      	movs	r2, #0
 800602e:	2102      	movs	r1, #2
 8006030:	4620      	mov	r0, r4
 8006032:	4798      	blx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:982 (discriminator 3)
    NETCONN_SET_SAFE_ERR(conn, err);
 8006034:	f7fa feec 	bl	8000e10 <sys_arch_protect>
 8006038:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800603c:	330c      	adds	r3, #12
 800603e:	bfa8      	it	ge
 8006040:	7226      	strbge	r6, [r4, #8]
 8006042:	f7fa fef1 	bl	8000e28 <sys_arch_unprotect>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:984 (discriminator 3)
    if (delayed)
 8006046:	f1ba 0f00 	cmp.w	sl, #0
 800604a:	d026      	beq.n	800609a <lwip_netconn_do_close_internal+0x1ca>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:990
    return ERR_OK;
 800604c:	2600      	movs	r6, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:988
      sys_sem_signal(op_completed_sem);
 800604e:	f105 000c 	add.w	r0, r5, #12
 8006052:	f7fa fe9c 	bl	8000d8e <sys_sem_signal>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1009
}
 8006056:	4630      	mov	r0, r6
 8006058:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:995
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800605c:	7d2b      	ldrb	r3, [r5, #20]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d106      	bne.n	8006070 <lwip_netconn_do_close_internal+0x1a0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:995 (discriminator 1)
 8006062:	4b0f      	ldr	r3, [pc, #60]	; (80060a0 <lwip_netconn_do_close_internal+0x1d0>)
 8006064:	f240 32e3 	movw	r2, #995	; 0x3e3
 8006068:	4914      	ldr	r1, [pc, #80]	; (80060bc <lwip_netconn_do_close_internal+0x1ec>)
 800606a:	480f      	ldr	r0, [pc, #60]	; (80060a8 <lwip_netconn_do_close_internal+0x1d8>)
 800606c:	f006 ff96 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:996
    if (shut_tx) {
 8006070:	f1b8 0f00 	cmp.w	r8, #0
 8006074:	d003      	beq.n	800607e <lwip_netconn_do_close_internal+0x1ae>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:997
      tcp_sent(tpcb, sent_tcp);
 8006076:	4912      	ldr	r1, [pc, #72]	; (80060c0 <lwip_netconn_do_close_internal+0x1f0>)
 8006078:	4628      	mov	r0, r5
 800607a:	f003 f94b 	bl	8009314 <tcp_sent>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1000
    tcp_poll(tpcb, poll_tcp, 1);
 800607e:	2201      	movs	r2, #1
 8006080:	4628      	mov	r0, r5
 8006082:	4910      	ldr	r1, [pc, #64]	; (80060c4 <lwip_netconn_do_close_internal+0x1f4>)
 8006084:	f003 f97a 	bl	800937c <tcp_poll>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1001
    tcp_err(tpcb, err_tcp);
 8006088:	4628      	mov	r0, r5
 800608a:	490f      	ldr	r1, [pc, #60]	; (80060c8 <lwip_netconn_do_close_internal+0x1f8>)
 800608c:	f003 f958 	bl	8009340 <tcp_err>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1002
    tcp_arg(tpcb, conn);
 8006090:	4621      	mov	r1, r4
 8006092:	4628      	mov	r0, r5
 8006094:	f003 f924 	bl	80092e0 <tcp_arg>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1008
  return err;
 8006098:	e7dd      	b.n	8006056 <lwip_netconn_do_close_internal+0x186>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:990
    return ERR_OK;
 800609a:	4656      	mov	r6, sl
 800609c:	e7db      	b.n	8006056 <lwip_netconn_do_close_internal+0x186>
 800609e:	bf00      	nop
 80060a0:	0801f428 	.word	0x0801f428
 80060a4:	0801ef97 	.word	0x0801ef97
 80060a8:	0800e36a 	.word	0x0800e36a
 80060ac:	0801f1ad 	.word	0x0801f1ad
 80060b0:	0801f1cb 	.word	0x0801f1cb
 80060b4:	0801f1ef 	.word	0x0801f1ef
 80060b8:	0801f160 	.word	0x0801f160
 80060bc:	0801f202 	.word	0x0801f202
 80060c0:	0800620d 	.word	0x0800620d
 80060c4:	080060cd 	.word	0x080060cd
 80060c8:	08005bc9 	.word	0x08005bc9

080060cc <poll_tcp>:
poll_tcp():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:308
{
 80060cc:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:312
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80060ce:	4604      	mov	r4, r0
 80060d0:	b930      	cbnz	r0, 80060e0 <poll_tcp+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:312 (discriminator 1)
 80060d2:	4b1a      	ldr	r3, [pc, #104]	; (800613c <poll_tcp+0x70>)
 80060d4:	f44f 729c 	mov.w	r2, #312	; 0x138
 80060d8:	4919      	ldr	r1, [pc, #100]	; (8006140 <poll_tcp+0x74>)
 80060da:	481a      	ldr	r0, [pc, #104]	; (8006144 <poll_tcp+0x78>)
 80060dc:	f006 ff5e 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:314
  if (conn->state == NETCONN_WRITE) {
 80060e0:	7861      	ldrb	r1, [r4, #1]
 80060e2:	2901      	cmp	r1, #1
 80060e4:	d11c      	bne.n	8006120 <poll_tcp+0x54>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:315
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80060e6:	4620      	mov	r0, r4
 80060e8:	f7ff fe02 	bl	8005cf0 <lwip_netconn_do_writemore>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:327
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80060ec:	7e23      	ldrb	r3, [r4, #24]
 80060ee:	06da      	lsls	r2, r3, #27
 80060f0:	d514      	bpl.n	800611c <poll_tcp+0x50>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:330
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80060f2:	6862      	ldr	r2, [r4, #4]
 80060f4:	b192      	cbz	r2, 800611c <poll_tcp+0x50>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:330 (discriminator 1)
 80060f6:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
 80060fa:	f640 3169 	movw	r1, #2921	; 0xb69
 80060fe:	4288      	cmp	r0, r1
 8006100:	d90c      	bls.n	800611c <poll_tcp+0x50>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:330 (discriminator 2)
 8006102:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
 8006106:	2a04      	cmp	r2, #4
 8006108:	d808      	bhi.n	800611c <poll_tcp+0x50>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:332
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800610a:	f023 0310 	bic.w	r3, r3, #16
 800610e:	7623      	strb	r3, [r4, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:333
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8006110:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006112:	b11b      	cbz	r3, 800611c <poll_tcp+0x50>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:333 (discriminator 1)
 8006114:	2200      	movs	r2, #0
 8006116:	2102      	movs	r1, #2
 8006118:	4620      	mov	r0, r4
 800611a:	4798      	blx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:338 (discriminator 3)
}
 800611c:	2000      	movs	r0, #0
 800611e:	bd10      	pop	{r4, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:316
  } else if (conn->state == NETCONN_CLOSE) {
 8006120:	2904      	cmp	r1, #4
 8006122:	d1e3      	bne.n	80060ec <poll_tcp+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:318
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8006124:	6a22      	ldr	r2, [r4, #32]
 8006126:	b11a      	cbz	r2, 8006130 <poll_tcp+0x64>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:318 (discriminator 1)
 8006128:	7a53      	ldrb	r3, [r2, #9]
 800612a:	b10b      	cbz	r3, 8006130 <poll_tcp+0x64>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:319
      conn->current_msg->msg.sd.polls_left--;
 800612c:	3b01      	subs	r3, #1
 800612e:	7253      	strb	r3, [r2, #9]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:322
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8006130:	2101      	movs	r1, #1
 8006132:	4620      	mov	r0, r4
 8006134:	f7ff fecc 	bl	8005ed0 <lwip_netconn_do_close_internal>
 8006138:	e7d8      	b.n	80060ec <poll_tcp+0x20>
 800613a:	bf00      	nop
 800613c:	0801f428 	.word	0x0801f428
 8006140:	0801f153 	.word	0x0801f153
 8006144:	0800e36a 	.word	0x0800e36a

08006148 <recv_tcp>:
recv_tcp():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:244
{
 8006148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800614c:	4605      	mov	r5, r0
 800614e:	4616      	mov	r6, r2
 8006150:	4698      	mov	r8, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:249
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8006152:	460f      	mov	r7, r1
 8006154:	b929      	cbnz	r1, 8006162 <recv_tcp+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:249 (discriminator 1)
 8006156:	4b28      	ldr	r3, [pc, #160]	; (80061f8 <recv_tcp+0xb0>)
 8006158:	22f9      	movs	r2, #249	; 0xf9
 800615a:	4928      	ldr	r1, [pc, #160]	; (80061fc <recv_tcp+0xb4>)
 800615c:	4828      	ldr	r0, [pc, #160]	; (8006200 <recv_tcp+0xb8>)
 800615e:	f006 ff1d 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:250
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8006162:	bb9d      	cbnz	r5, 80061cc <recv_tcp+0x84>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:254 (discriminator 1)
    return ERR_VAL;
 8006164:	f06f 0405 	mvn.w	r4, #5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:250 (discriminator 1)
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8006168:	4b23      	ldr	r3, [pc, #140]	; (80061f8 <recv_tcp+0xb0>)
 800616a:	22fa      	movs	r2, #250	; 0xfa
 800616c:	4925      	ldr	r1, [pc, #148]	; (8006204 <recv_tcp+0xbc>)
 800616e:	4824      	ldr	r0, [pc, #144]	; (8006200 <recv_tcp+0xb8>)
 8006170:	f006 ff14 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:293
}
 8006174:	4620      	mov	r0, r4
 8006176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:261
      tcp_recved(pcb, p->tot_len);
 800617a:	4638      	mov	r0, r7
 800617c:	8931      	ldrh	r1, [r6, #8]
 800617e:	f003 f859 	bl	8009234 <tcp_recved>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:262
      pbuf_free(p);
 8006182:	4630      	mov	r0, r6
 8006184:	f004 fb7e 	bl	800a884 <pbuf_free>
 8006188:	e7f4      	b.n	8006174 <recv_tcp+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:271
  if (err != ERR_OK) {
 800618a:	f1b8 0f00 	cmp.w	r8, #0
 800618e:	d009      	beq.n	80061a4 <recv_tcp+0x5c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:272 (discriminator 1)
    NETCONN_SET_SAFE_ERR(conn, err);
 8006190:	f7fa fe3e 	bl	8000e10 <sys_arch_protect>
 8006194:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8006198:	330c      	adds	r3, #12
 800619a:	bfa8      	it	ge
 800619c:	f885 8008 	strbge.w	r8, [r5, #8]
 80061a0:	f7fa fe42 	bl	8000e28 <sys_arch_unprotect>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:275 (discriminator 6)
  if (p != NULL) {
 80061a4:	b16e      	cbz	r6, 80061c2 <recv_tcp+0x7a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:276
    len = p->tot_len;
 80061a6:	8937      	ldrh	r7, [r6, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:281
  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 80061a8:	4631      	mov	r1, r6
 80061aa:	4648      	mov	r0, r9
 80061ac:	f7fa fd78 	bl	8000ca0 <sys_mbox_trypost>
 80061b0:	4604      	mov	r4, r0
 80061b2:	b940      	cbnz	r0, 80061c6 <recv_tcp+0x7e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:289
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80061b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80061b6:	b1eb      	cbz	r3, 80061f4 <recv_tcp+0xac>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:289 (discriminator 1)
 80061b8:	4601      	mov	r1, r0
 80061ba:	463a      	mov	r2, r7
 80061bc:	4628      	mov	r0, r5
 80061be:	4798      	blx	r3
 80061c0:	e7d8      	b.n	8006174 <recv_tcp+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:278
    len = 0;
 80061c2:	4637      	mov	r7, r6
 80061c4:	e7f0      	b.n	80061a8 <recv_tcp+0x60>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:283
    return ERR_MEM;
 80061c6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80061ca:	e7d3      	b.n	8006174 <recv_tcp+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:256
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80061cc:	686b      	ldr	r3, [r5, #4]
 80061ce:	42bb      	cmp	r3, r7
 80061d0:	d006      	beq.n	80061e0 <recv_tcp+0x98>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:256 (discriminator 1)
 80061d2:	4b09      	ldr	r3, [pc, #36]	; (80061f8 <recv_tcp+0xb0>)
 80061d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061d8:	490b      	ldr	r1, [pc, #44]	; (8006208 <recv_tcp+0xc0>)
 80061da:	4809      	ldr	r0, [pc, #36]	; (8006200 <recv_tcp+0xb8>)
 80061dc:	f006 fede 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:258
  if (!sys_mbox_valid(&conn->recvmbox)) {
 80061e0:	f105 0910 	add.w	r9, r5, #16
 80061e4:	4648      	mov	r0, r9
 80061e6:	f7fa fd98 	bl	8000d1a <sys_mbox_valid>
 80061ea:	4604      	mov	r4, r0
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d1cc      	bne.n	800618a <recv_tcp+0x42>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:260
    if (p != NULL) {
 80061f0:	2e00      	cmp	r6, #0
 80061f2:	d1c2      	bne.n	800617a <recv_tcp+0x32>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:264
    return ERR_OK;
 80061f4:	2400      	movs	r4, #0
 80061f6:	e7bd      	b.n	8006174 <recv_tcp+0x2c>
 80061f8:	0801f428 	.word	0x0801f428
 80061fc:	0801f3c9 	.word	0x0801f3c9
 8006200:	0800e36a 	.word	0x0800e36a
 8006204:	0801f3eb 	.word	0x0801f3eb
 8006208:	0801f40a 	.word	0x0801f40a

0800620c <sent_tcp>:
sent_tcp():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:349
{
 800620c:	b538      	push	{r3, r4, r5, lr}
 800620e:	4615      	mov	r5, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:353
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006210:	4604      	mov	r4, r0
 8006212:	b970      	cbnz	r0, 8006232 <sent_tcp+0x26>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:353 (discriminator 1)
 8006214:	4b16      	ldr	r3, [pc, #88]	; (8006270 <sent_tcp+0x64>)
 8006216:	f240 1261 	movw	r2, #353	; 0x161
 800621a:	4916      	ldr	r1, [pc, #88]	; (8006274 <sent_tcp+0x68>)
 800621c:	4816      	ldr	r0, [pc, #88]	; (8006278 <sent_tcp+0x6c>)
 800621e:	f006 febd 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:372
}
 8006222:	2000      	movs	r0, #0
 8006224:	bd38      	pop	{r3, r4, r5, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:358
    } else if (conn->state == NETCONN_CLOSE) {
 8006226:	2904      	cmp	r1, #4
 8006228:	d108      	bne.n	800623c <sent_tcp+0x30>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:359
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800622a:	2101      	movs	r1, #1
 800622c:	f7ff fe50 	bl	8005ed0 <lwip_netconn_do_close_internal>
 8006230:	e004      	b.n	800623c <sent_tcp+0x30>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:356
    if (conn->state == NETCONN_WRITE) {
 8006232:	7841      	ldrb	r1, [r0, #1]
 8006234:	2901      	cmp	r1, #1
 8006236:	d1f6      	bne.n	8006226 <sent_tcp+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:357
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8006238:	f7ff fd5a 	bl	8005cf0 <lwip_netconn_do_writemore>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:364
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800623c:	6863      	ldr	r3, [r4, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d0ef      	beq.n	8006222 <sent_tcp+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:364 (discriminator 1)
 8006242:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
 8006246:	f640 3269 	movw	r2, #2921	; 0xb69
 800624a:	4291      	cmp	r1, r2
 800624c:	d9e9      	bls.n	8006222 <sent_tcp+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:364 (discriminator 2)
 800624e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006252:	2b04      	cmp	r3, #4
 8006254:	d8e5      	bhi.n	8006222 <sent_tcp+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:366
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8006256:	7e23      	ldrb	r3, [r4, #24]
 8006258:	f023 0310 	bic.w	r3, r3, #16
 800625c:	7623      	strb	r3, [r4, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:367
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800625e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0de      	beq.n	8006222 <sent_tcp+0x16>
 8006264:	462a      	mov	r2, r5
 8006266:	2102      	movs	r1, #2
 8006268:	4620      	mov	r0, r4
 800626a:	4798      	blx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:371
  return ERR_OK;
 800626c:	e7d9      	b.n	8006222 <sent_tcp+0x16>
 800626e:	bf00      	nop
 8006270:	0801f428 	.word	0x0801f428
 8006274:	0801f153 	.word	0x0801f153
 8006278:	0800e36a 	.word	0x0800e36a

0800627c <lwip_netconn_do_newconn>:
lwip_netconn_do_newconn():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:624
{
 800627c:	b538      	push	{r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:627
  msg->err = ERR_OK;
 800627e:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:628
  if (msg->conn->pcb.tcp == NULL) {
 8006280:	6805      	ldr	r5, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:624
{
 8006282:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:627
  msg->err = ERR_OK;
 8006284:	7103      	strb	r3, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:628
  if (msg->conn->pcb.tcp == NULL) {
 8006286:	6868      	ldr	r0, [r5, #4]
 8006288:	bb28      	cbnz	r0, 80062d6 <lwip_netconn_do_newconn+0x5a>
pcb_new():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:566
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 800628a:	782b      	ldrb	r3, [r5, #0]
 800628c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006290:	2b10      	cmp	r3, #16
 8006292:	d014      	beq.n	80062be <lwip_netconn_do_newconn+0x42>
 8006294:	2b20      	cmp	r3, #32
 8006296:	d11c      	bne.n	80062d2 <lwip_netconn_do_newconn+0x56>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:584
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8006298:	f003 ff64 	bl	800a164 <udp_new_ip_type>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:585
    if (msg->conn->pcb.udp != NULL) {
 800629c:	6822      	ldr	r2, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:584
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800629e:	6068      	str	r0, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:585
    if (msg->conn->pcb.udp != NULL) {
 80062a0:	6850      	ldr	r0, [r2, #4]
 80062a2:	b150      	cbz	r0, 80062ba <lwip_netconn_do_newconn+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:591
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80062a4:	7813      	ldrb	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:594
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80062a6:	4912      	ldr	r1, [pc, #72]	; (80062f0 <lwip_netconn_do_newconn+0x74>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:591
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80062a8:	2b22      	cmp	r3, #34	; 0x22
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:592
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80062aa:	bf04      	itt	eq
 80062ac:	2301      	moveq	r3, #1
 80062ae:	7403      	strbeq	r3, [r0, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:594
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80062b0:	f003 ff2e 	bl	800a110 <udp_recv>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:611
  if (msg->conn->pcb.ip == NULL) {
 80062b4:	6823      	ldr	r3, [r4, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	b96b      	cbnz	r3, 80062d6 <lwip_netconn_do_newconn+0x5a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:612
    msg->err = ERR_MEM;
 80062ba:	23ff      	movs	r3, #255	; 0xff
 80062bc:	e00a      	b.n	80062d4 <lwip_netconn_do_newconn+0x58>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:600
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80062be:	f003 fd3b 	bl	8009d38 <tcp_new_ip_type>
 80062c2:	6068      	str	r0, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:601
    if (msg->conn->pcb.tcp != NULL) {
 80062c4:	6820      	ldr	r0, [r4, #0]
 80062c6:	6843      	ldr	r3, [r0, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d0f6      	beq.n	80062ba <lwip_netconn_do_newconn+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:602
      setup_tcp(msg->conn);
 80062cc:	f7ff fc5a 	bl	8005b84 <setup_tcp>
 80062d0:	e7f0      	b.n	80062b4 <lwip_netconn_do_newconn+0x38>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:608
    msg->err = ERR_VAL;
 80062d2:	23fa      	movs	r3, #250	; 0xfa
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:612
    msg->err = ERR_MEM;
 80062d4:	7123      	strb	r3, [r4, #4]
lwip_netconn_do_newconn():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:635
  TCPIP_APIMSG_ACK(msg);
 80062d6:	f7fa fd9b 	bl	8000e10 <sys_arch_protect>
 80062da:	6823      	ldr	r3, [r4, #0]
 80062dc:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80062e0:	320c      	adds	r2, #12
 80062e2:	db01      	blt.n	80062e8 <lwip_netconn_do_newconn+0x6c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:635 (discriminator 3)
 80062e4:	7922      	ldrb	r2, [r4, #4]
 80062e6:	721a      	strb	r2, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:636 (discriminator 5)
}
 80062e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:635 (discriminator 5)
  TCPIP_APIMSG_ACK(msg);
 80062ec:	f7fa bd9c 	b.w	8000e28 <sys_arch_unprotect>
 80062f0:	08005ad5 	.word	0x08005ad5

080062f4 <netconn_alloc>:
netconn_alloc():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:649
{
 80062f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f6:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:653
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80062f8:	2007      	movs	r0, #7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:649
{
 80062fa:	460f      	mov	r7, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:653
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80062fc:	f005 ffb2 	bl	800c264 <memp_malloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:654
  if (conn == NULL) {
 8006300:	4604      	mov	r4, r0
 8006302:	b390      	cbz	r0, 800636a <netconn_alloc+0x76>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:659
  conn->type = t;
 8006304:	7005      	strb	r5, [r0, #0]
 8006306:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:658
  conn->last_err = ERR_OK;
 800630a:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:663
  switch(NETCONNTYPE_GROUP(t)) {
 800630c:	2d10      	cmp	r5, #16
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:658
  conn->last_err = ERR_OK;
 800630e:	7203      	strb	r3, [r0, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:660
  conn->pcb.tcp = NULL;
 8006310:	6043      	str	r3, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:663
  switch(NETCONNTYPE_GROUP(t)) {
 8006312:	d00e      	beq.n	8006332 <netconn_alloc+0x3e>
 8006314:	2d20      	cmp	r5, #32
 8006316:	d00c      	beq.n	8006332 <netconn_alloc+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:680 (discriminator 1)
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8006318:	4b15      	ldr	r3, [pc, #84]	; (8006370 <netconn_alloc+0x7c>)
 800631a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800631e:	4915      	ldr	r1, [pc, #84]	; (8006374 <netconn_alloc+0x80>)
 8006320:	4815      	ldr	r0, [pc, #84]	; (8006378 <netconn_alloc+0x84>)
 8006322:	f006 fe3b 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:723
  memp_free(MEMP_NETCONN, conn);
 8006326:	4621      	mov	r1, r4
 8006328:	2007      	movs	r0, #7
 800632a:	f005 ffcb 	bl	800c2c4 <memp_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:724
  return NULL;
 800632e:	2400      	movs	r4, #0
 8006330:	e01b      	b.n	800636a <netconn_alloc+0x76>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:684
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8006332:	f104 0610 	add.w	r6, r4, #16
 8006336:	2106      	movs	r1, #6
 8006338:	4630      	mov	r0, r6
 800633a:	f7fa fc97 	bl	8000c6c <sys_mbox_new>
 800633e:	4601      	mov	r1, r0
 8006340:	2800      	cmp	r0, #0
 8006342:	d1f0      	bne.n	8006326 <netconn_alloc+0x32>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:688
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8006344:	f104 000c 	add.w	r0, r4, #12
 8006348:	f7fa fcef 	bl	8000d2a <sys_sem_new>
 800634c:	4605      	mov	r5, r0
 800634e:	b118      	cbz	r0, 8006358 <netconn_alloc+0x64>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:689
    sys_mbox_free(&conn->recvmbox);
 8006350:	4630      	mov	r0, r6
 8006352:	f7fa fc9b 	bl	8000c8c <sys_mbox_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:690
    goto free_and_return;
 8006356:	e7e6      	b.n	8006326 <netconn_alloc+0x32>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:695
  sys_mbox_set_invalid(&conn->acceptmbox);
 8006358:	f104 0014 	add.w	r0, r4, #20
 800635c:	f7fa fce2 	bl	8000d24 <sys_mbox_set_invalid>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:697
  conn->state        = NETCONN_NONE;
 8006360:	7065      	strb	r5, [r4, #1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:705
  conn->write_offset = 0;
 8006362:	61e5      	str	r5, [r4, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:720
  conn->flags = 0;
 8006364:	7625      	strb	r5, [r4, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:704
  conn->current_msg  = NULL;
 8006366:	e9c4 5708 	strd	r5, r7, [r4, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:725
}
 800636a:	4620      	mov	r0, r4
 800636c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800636e:	bf00      	nop
 8006370:	0801f428 	.word	0x0801f428
 8006374:	0801f2ff 	.word	0x0801f2ff
 8006378:	0800e36a 	.word	0x0800e36a

0800637c <netconn_free>:
netconn_free():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:735
{
 800637c:	b538      	push	{r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:736
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800637e:	6843      	ldr	r3, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:735
{
 8006380:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:736
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8006382:	b133      	cbz	r3, 8006392 <netconn_free+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:736 (discriminator 1)
 8006384:	4b16      	ldr	r3, [pc, #88]	; (80063e0 <netconn_free+0x64>)
 8006386:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800638a:	4916      	ldr	r1, [pc, #88]	; (80063e4 <netconn_free+0x68>)
 800638c:	4816      	ldr	r0, [pc, #88]	; (80063e8 <netconn_free+0x6c>)
 800638e:	f006 fe05 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:737
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8006392:	f104 0010 	add.w	r0, r4, #16
 8006396:	f7fa fcc0 	bl	8000d1a <sys_mbox_valid>
 800639a:	b130      	cbz	r0, 80063aa <netconn_free+0x2e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:737 (discriminator 1)
 800639c:	4b10      	ldr	r3, [pc, #64]	; (80063e0 <netconn_free+0x64>)
 800639e:	f240 22e2 	movw	r2, #738	; 0x2e2
 80063a2:	4912      	ldr	r1, [pc, #72]	; (80063ec <netconn_free+0x70>)
 80063a4:	4810      	ldr	r0, [pc, #64]	; (80063e8 <netconn_free+0x6c>)
 80063a6:	f006 fdf9 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:740
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80063aa:	f104 0014 	add.w	r0, r4, #20
 80063ae:	f7fa fcb4 	bl	8000d1a <sys_mbox_valid>
 80063b2:	b130      	cbz	r0, 80063c2 <netconn_free+0x46>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:740 (discriminator 1)
 80063b4:	4b0a      	ldr	r3, [pc, #40]	; (80063e0 <netconn_free+0x64>)
 80063b6:	f240 22e5 	movw	r2, #741	; 0x2e5
 80063ba:	490d      	ldr	r1, [pc, #52]	; (80063f0 <netconn_free+0x74>)
 80063bc:	480a      	ldr	r0, [pc, #40]	; (80063e8 <netconn_free+0x6c>)
 80063be:	f006 fded 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:745
  sys_sem_free(&conn->op_completed);
 80063c2:	f104 050c 	add.w	r5, r4, #12
 80063c6:	4628      	mov	r0, r5
 80063c8:	f7fa fce4 	bl	8000d94 <sys_sem_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:746
  sys_sem_set_invalid(&conn->op_completed);
 80063cc:	4628      	mov	r0, r5
 80063ce:	f7fa fce9 	bl	8000da4 <sys_sem_set_invalid>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:749
  memp_free(MEMP_NETCONN, conn);
 80063d2:	4621      	mov	r1, r4
 80063d4:	2007      	movs	r0, #7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:750
}
 80063d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:749
  memp_free(MEMP_NETCONN, conn);
 80063da:	f005 bf73 	b.w	800c2c4 <memp_free>
 80063de:	bf00      	nop
 80063e0:	0801f428 	.word	0x0801f428
 80063e4:	0801f325 	.word	0x0801f325
 80063e8:	0800e36a 	.word	0x0800e36a
 80063ec:	0801f353 	.word	0x0801f353
 80063f0:	0801f38d 	.word	0x0801f38d

080063f4 <netconn_drain>:
netconn_drain():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:762
{
 80063f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:771
  if (sys_mbox_valid(&conn->recvmbox)) {
 80063f6:	f100 0510 	add.w	r5, r0, #16
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:762
{
 80063fa:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:771
  if (sys_mbox_valid(&conn->recvmbox)) {
 80063fc:	4628      	mov	r0, r5
 80063fe:	f7fa fc8c 	bl	8000d1a <sys_mbox_valid>
 8006402:	b158      	cbz	r0, 800641c <netconn_drain+0x28>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:772
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8006404:	a901      	add	r1, sp, #4
 8006406:	4628      	mov	r0, r5
 8006408:	f7fa fc76 	bl	8000cf8 <sys_arch_mbox_tryfetch>
 800640c:	3001      	adds	r0, #1
 800640e:	d119      	bne.n	8006444 <netconn_drain+0x50>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:789
    sys_mbox_free(&conn->recvmbox);
 8006410:	4628      	mov	r0, r5
 8006412:	f7fa fc3b 	bl	8000c8c <sys_mbox_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:790
    sys_mbox_set_invalid(&conn->recvmbox);
 8006416:	4628      	mov	r0, r5
 8006418:	f7fa fc84 	bl	8000d24 <sys_mbox_set_invalid>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:795
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800641c:	3414      	adds	r4, #20
 800641e:	4620      	mov	r0, r4
 8006420:	f7fa fc7b 	bl	8000d1a <sys_mbox_valid>
 8006424:	b160      	cbz	r0, 8006440 <netconn_drain+0x4c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:797
      if (mem != &netconn_aborted) {
 8006426:	4e1a      	ldr	r6, [pc, #104]	; (8006490 <netconn_drain+0x9c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:796
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8006428:	a901      	add	r1, sp, #4
 800642a:	4620      	mov	r0, r4
 800642c:	f7fa fc64 	bl	8000cf8 <sys_arch_mbox_tryfetch>
 8006430:	3001      	adds	r0, #1
 8006432:	d11c      	bne.n	800646e <netconn_drain+0x7a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:810
    sys_mbox_free(&conn->acceptmbox);
 8006434:	4620      	mov	r0, r4
 8006436:	f7fa fc29 	bl	8000c8c <sys_mbox_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:811
    sys_mbox_set_invalid(&conn->acceptmbox);
 800643a:	4620      	mov	r0, r4
 800643c:	f7fa fc72 	bl	8000d24 <sys_mbox_set_invalid>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:814
}
 8006440:	b002      	add	sp, #8
 8006442:	bd70      	pop	{r4, r5, r6, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:774
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8006444:	7823      	ldrb	r3, [r4, #0]
 8006446:	9e01      	ldr	r6, [sp, #4]
 8006448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800644c:	2b10      	cmp	r3, #16
 800644e:	d10a      	bne.n	8006466 <netconn_drain+0x72>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:775
        if (mem != NULL) {
 8006450:	2e00      	cmp	r6, #0
 8006452:	d0d7      	beq.n	8006404 <netconn_drain+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:778
          if (conn->pcb.tcp != NULL) {
 8006454:	6860      	ldr	r0, [r4, #4]
 8006456:	b110      	cbz	r0, 800645e <netconn_drain+0x6a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:779
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8006458:	8931      	ldrh	r1, [r6, #8]
 800645a:	f002 feeb 	bl	8009234 <tcp_recved>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:781
          pbuf_free(p);
 800645e:	4630      	mov	r0, r6
 8006460:	f004 fa10 	bl	800a884 <pbuf_free>
 8006464:	e7ce      	b.n	8006404 <netconn_drain+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:786
        netbuf_delete((struct netbuf *)mem);
 8006466:	4630      	mov	r0, r6
 8006468:	f7ff f898 	bl	800559c <netbuf_delete>
 800646c:	e7ca      	b.n	8006404 <netconn_drain+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:797
      if (mem != &netconn_aborted) {
 800646e:	9d01      	ldr	r5, [sp, #4]
 8006470:	42b5      	cmp	r5, r6
 8006472:	d0d9      	beq.n	8006428 <netconn_drain+0x34>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:802
        netconn_drain(newconn);
 8006474:	4628      	mov	r0, r5
 8006476:	f7ff ffbd 	bl	80063f4 <netconn_drain>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:803
        if (newconn->pcb.tcp != NULL) {
 800647a:	6868      	ldr	r0, [r5, #4]
 800647c:	b118      	cbz	r0, 8006486 <netconn_drain+0x92>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:804
          tcp_abort(newconn->pcb.tcp);
 800647e:	f003 fb9f 	bl	8009bc0 <tcp_abort>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:805
          newconn->pcb.tcp = NULL;
 8006482:	2300      	movs	r3, #0
 8006484:	606b      	str	r3, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:807
        netconn_free(newconn);
 8006486:	4628      	mov	r0, r5
 8006488:	f7ff ff78 	bl	800637c <netconn_free>
 800648c:	e7cc      	b.n	8006428 <netconn_drain+0x34>
 800648e:	bf00      	nop
 8006490:	200080ac 	.word	0x200080ac

08006494 <accept_function>:
accept_function():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:476
{
 8006494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006498:	460f      	mov	r7, r1
 800649a:	4690      	mov	r8, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:480
  if (conn == NULL) {
 800649c:	4605      	mov	r5, r0
 800649e:	b920      	cbnz	r0, 80064aa <accept_function+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:494 (discriminator 1)
    return ERR_VAL;
 80064a0:	f06f 0405 	mvn.w	r4, #5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:542
}
 80064a4:	4620      	mov	r0, r4
 80064a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:483
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 80064aa:	f100 0414 	add.w	r4, r0, #20
 80064ae:	4620      	mov	r0, r4
 80064b0:	f7fa fc33 	bl	8000d1a <sys_mbox_valid>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d0f3      	beq.n	80064a0 <accept_function+0xc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:488
  if (newpcb == NULL) {
 80064b8:	b96f      	cbnz	r7, 80064d6 <accept_function+0x42>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:490
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 80064ba:	492c      	ldr	r1, [pc, #176]	; (800656c <accept_function+0xd8>)
 80064bc:	4620      	mov	r0, r4
 80064be:	f7fa fbef 	bl	8000ca0 <sys_mbox_trypost>
 80064c2:	4602      	mov	r2, r0
 80064c4:	2800      	cmp	r0, #0
 80064c6:	d1eb      	bne.n	80064a0 <accept_function+0xc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:492
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80064c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d0e8      	beq.n	80064a0 <accept_function+0xc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:492 (discriminator 1)
 80064ce:	4601      	mov	r1, r0
 80064d0:	4628      	mov	r0, r5
 80064d2:	4798      	blx	r3
 80064d4:	e7e4      	b.n	80064a0 <accept_function+0xc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:501
  newconn = netconn_alloc(conn->type, conn->callback);
 80064d6:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80064d8:	7828      	ldrb	r0, [r5, #0]
 80064da:	f7ff ff0b 	bl	80062f4 <netconn_alloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:502
  if (newconn == NULL) {
 80064de:	4606      	mov	r6, r0
 80064e0:	b968      	cbnz	r0, 80064fe <accept_function+0x6a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:504
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 80064e2:	4922      	ldr	r1, [pc, #136]	; (800656c <accept_function+0xd8>)
 80064e4:	4620      	mov	r0, r4
 80064e6:	f7fa fbdb 	bl	8000ca0 <sys_mbox_trypost>
 80064ea:	4602      	mov	r2, r0
 80064ec:	b920      	cbnz	r0, 80064f8 <accept_function+0x64>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:506
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80064ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064f0:	b113      	cbz	r3, 80064f8 <accept_function+0x64>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:506 (discriminator 1)
 80064f2:	4601      	mov	r1, r0
 80064f4:	4628      	mov	r0, r5
 80064f6:	4798      	blx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:508
    return ERR_MEM;
 80064f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80064fc:	e7d2      	b.n	80064a4 <accept_function+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:510
  newconn->pcb.tcp = newpcb;
 80064fe:	6047      	str	r7, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:511
  setup_tcp(newconn);
 8006500:	f7ff fb40 	bl	8005b84 <setup_tcp>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:519
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8006504:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:514
  newconn->last_err = err;
 8006506:	f886 8008 	strb.w	r8, [r6, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:519
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800650a:	4631      	mov	r1, r6
 800650c:	f7fa fbc8 	bl	8000ca0 <sys_mbox_trypost>
 8006510:	4604      	mov	r4, r0
 8006512:	b318      	cbz	r0, 800655c <accept_function+0xc8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:523
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 8006514:	6874      	ldr	r4, [r6, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:524
    tcp_arg(pcb, NULL);
 8006516:	2100      	movs	r1, #0
 8006518:	4620      	mov	r0, r4
 800651a:	f002 fee1 	bl	80092e0 <tcp_arg>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:525
    tcp_recv(pcb, NULL);
 800651e:	4620      	mov	r0, r4
 8006520:	2100      	movs	r1, #0
 8006522:	f002 fee1 	bl	80092e8 <tcp_recv>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:526
    tcp_sent(pcb, NULL);
 8006526:	4620      	mov	r0, r4
 8006528:	2100      	movs	r1, #0
 800652a:	f002 fef3 	bl	8009314 <tcp_sent>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:527
    tcp_poll(pcb, NULL, 0);
 800652e:	2200      	movs	r2, #0
 8006530:	4620      	mov	r0, r4
 8006532:	4611      	mov	r1, r2
 8006534:	f002 ff22 	bl	800937c <tcp_poll>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:528
    tcp_err(pcb, NULL);
 8006538:	2100      	movs	r1, #0
 800653a:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:532
    sys_mbox_free(&newconn->recvmbox);
 800653c:	f106 0410 	add.w	r4, r6, #16
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:528
    tcp_err(pcb, NULL);
 8006540:	f002 fefe 	bl	8009340 <tcp_err>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:530
    newconn->pcb.tcp = NULL;
 8006544:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:532
    sys_mbox_free(&newconn->recvmbox);
 8006546:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:530
    newconn->pcb.tcp = NULL;
 8006548:	6073      	str	r3, [r6, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:532
    sys_mbox_free(&newconn->recvmbox);
 800654a:	f7fa fb9f 	bl	8000c8c <sys_mbox_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:533
    sys_mbox_set_invalid(&newconn->recvmbox);
 800654e:	4620      	mov	r0, r4
 8006550:	f7fa fbe8 	bl	8000d24 <sys_mbox_set_invalid>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:534
    netconn_free(newconn);
 8006554:	4630      	mov	r0, r6
 8006556:	f7ff ff11 	bl	800637c <netconn_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:535
    return ERR_MEM;
 800655a:	e7cd      	b.n	80064f8 <accept_function+0x64>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:538
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800655c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800655e:	2b00      	cmp	r3, #0
 8006560:	d0a0      	beq.n	80064a4 <accept_function+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:538 (discriminator 1)
 8006562:	4602      	mov	r2, r0
 8006564:	4601      	mov	r1, r0
 8006566:	4628      	mov	r0, r5
 8006568:	4798      	blx	r3
 800656a:	e79b      	b.n	80064a4 <accept_function+0x10>
 800656c:	200080ac 	.word	0x200080ac

08006570 <lwip_netconn_do_delconn>:
lwip_netconn_do_delconn():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1023
  enum netconn_state state = msg->conn->state;
 8006570:	6803      	ldr	r3, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1020
{
 8006572:	b570      	push	{r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1023
  enum netconn_state state = msg->conn->state;
 8006574:	785d      	ldrb	r5, [r3, #1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1020
{
 8006576:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1024
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8006578:	b16d      	cbz	r5, 8006596 <lwip_netconn_do_delconn+0x26>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1024 (discriminator 1)
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006580:	2b10      	cmp	r3, #16
 8006582:	d006      	beq.n	8006592 <lwip_netconn_do_delconn+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1024 (discriminator 2)
 8006584:	4b40      	ldr	r3, [pc, #256]	; (8006688 <lwip_netconn_do_delconn+0x118>)
 8006586:	f240 4201 	movw	r2, #1025	; 0x401
 800658a:	4940      	ldr	r1, [pc, #256]	; (800668c <lwip_netconn_do_delconn+0x11c>)
 800658c:	4840      	ldr	r0, [pc, #256]	; (8006690 <lwip_netconn_do_delconn+0x120>)
 800658e:	f006 fd05 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1044
  if (((state != NETCONN_NONE) &&
 8006592:	2d02      	cmp	r5, #2
 8006594:	d121      	bne.n	80065da <lwip_netconn_do_delconn+0x6a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1056
    msg->err = ERR_OK;
 8006596:	2500      	movs	r5, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1058
    netconn_drain(msg->conn);
 8006598:	6820      	ldr	r0, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1056
    msg->err = ERR_OK;
 800659a:	7125      	strb	r5, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1058
    netconn_drain(msg->conn);
 800659c:	f7ff ff2a 	bl	80063f4 <netconn_drain>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1060
    if (msg->conn->pcb.tcp != NULL) {
 80065a0:	6823      	ldr	r3, [r4, #0]
 80065a2:	6858      	ldr	r0, [r3, #4]
 80065a4:	b160      	cbz	r0, 80065c0 <lwip_netconn_do_delconn+0x50>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1062
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80065a6:	781a      	ldrb	r2, [r3, #0]
 80065a8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80065ac:	2a10      	cmp	r2, #16
 80065ae:	d032      	beq.n	8006616 <lwip_netconn_do_delconn+0xa6>
 80065b0:	2a20      	cmp	r2, #32
 80065b2:	d102      	bne.n	80065ba <lwip_netconn_do_delconn+0x4a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1070
        msg->conn->pcb.udp->recv_arg = NULL;
 80065b4:	61c5      	str	r5, [r0, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1071
        udp_remove(msg->conn->pcb.udp);
 80065b6:	f003 fdaf 	bl	800a118 <udp_remove>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1099
      msg->conn->pcb.tcp = NULL;
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	2200      	movs	r2, #0
 80065be:	605a      	str	r2, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1105
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80065c0:	6820      	ldr	r0, [r4, #0]
 80065c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80065c4:	b113      	cbz	r3, 80065cc <lwip_netconn_do_delconn+0x5c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1105 (discriminator 1)
 80065c6:	2200      	movs	r2, #0
 80065c8:	4611      	mov	r1, r2
 80065ca:	4798      	blx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1106 (discriminator 3)
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80065cc:	6820      	ldr	r0, [r4, #0]
 80065ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80065d0:	b15b      	cbz	r3, 80065ea <lwip_netconn_do_delconn+0x7a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1106 (discriminator 1)
 80065d2:	2200      	movs	r2, #0
 80065d4:	2102      	movs	r1, #2
 80065d6:	4798      	blx	r3
 80065d8:	e007      	b.n	80065ea <lwip_netconn_do_delconn+0x7a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1045
       (state != NETCONN_LISTEN) &&
 80065da:	2d03      	cmp	r5, #3
 80065dc:	d103      	bne.n	80065e6 <lwip_netconn_do_delconn+0x76>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1047
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	7e1b      	ldrb	r3, [r3, #24]
 80065e2:	075b      	lsls	r3, r3, #29
 80065e4:	d4d7      	bmi.n	8006596 <lwip_netconn_do_delconn+0x26>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1050
    msg->err = ERR_INPROGRESS;
 80065e6:	23fb      	movs	r3, #251	; 0xfb
 80065e8:	7123      	strb	r3, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1108 (discriminator 3)
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80065ea:	6820      	ldr	r0, [r4, #0]
 80065ec:	300c      	adds	r0, #12
 80065ee:	f7fa fbd4 	bl	8000d9a <sys_sem_valid>
 80065f2:	2800      	cmp	r0, #0
 80065f4:	d046      	beq.n	8006684 <lwip_netconn_do_delconn+0x114>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1109
    TCPIP_APIMSG_ACK(msg);
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d043      	beq.n	8006684 <lwip_netconn_do_delconn+0x114>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1109 (discriminator 1)
 80065fc:	f7fa fc08 	bl	8000e10 <sys_arch_protect>
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8006606:	320c      	adds	r2, #12
 8006608:	bfa4      	itt	ge
 800660a:	7922      	ldrbge	r2, [r4, #4]
 800660c:	721a      	strbge	r2, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1111 (discriminator 1)
}
 800660e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1109 (discriminator 1)
    TCPIP_APIMSG_ACK(msg);
 8006612:	f7fa bc09 	b.w	8000e28 <sys_arch_unprotect>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1076
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8006616:	6a1a      	ldr	r2, [r3, #32]
 8006618:	b90a      	cbnz	r2, 800661e <lwip_netconn_do_delconn+0xae>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1076 (discriminator 2)
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	b133      	cbz	r3, 800662c <lwip_netconn_do_delconn+0xbc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1076 (discriminator 3)
 800661e:	4b1a      	ldr	r3, [pc, #104]	; (8006688 <lwip_netconn_do_delconn+0x118>)
 8006620:	f240 4235 	movw	r2, #1077	; 0x435
 8006624:	491b      	ldr	r1, [pc, #108]	; (8006694 <lwip_netconn_do_delconn+0x124>)
 8006626:	481a      	ldr	r0, [pc, #104]	; (8006690 <lwip_netconn_do_delconn+0x120>)
 8006628:	f006 fcb8 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1078
        msg->conn->state = NETCONN_CLOSE;
 800662c:	6820      	ldr	r0, [r4, #0]
 800662e:	2304      	movs	r3, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1082
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8006630:	2100      	movs	r1, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1078
        msg->conn->state = NETCONN_CLOSE;
 8006632:	7043      	strb	r3, [r0, #1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1079
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8006634:	2303      	movs	r3, #3
 8006636:	7223      	strb	r3, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1080
        msg->conn->current_msg = msg;
 8006638:	6204      	str	r4, [r0, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1082
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800663a:	f7ff fc49 	bl	8005ed0 <lwip_netconn_do_close_internal>
 800663e:	b308      	cbz	r0, 8006684 <lwip_netconn_do_delconn+0x114>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1083
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8006640:	6823      	ldr	r3, [r4, #0]
 8006642:	785b      	ldrb	r3, [r3, #1]
 8006644:	2b04      	cmp	r3, #4
 8006646:	d006      	beq.n	8006656 <lwip_netconn_do_delconn+0xe6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1083 (discriminator 1)
 8006648:	4b0f      	ldr	r3, [pc, #60]	; (8006688 <lwip_netconn_do_delconn+0x118>)
 800664a:	f240 423b 	movw	r2, #1083	; 0x43b
 800664e:	4912      	ldr	r1, [pc, #72]	; (8006698 <lwip_netconn_do_delconn+0x128>)
 8006650:	480f      	ldr	r0, [pc, #60]	; (8006690 <lwip_netconn_do_delconn+0x120>)
 8006652:	f006 fca3 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1084
          UNLOCK_TCPIP_CORE();
 8006656:	4811      	ldr	r0, [pc, #68]	; (800669c <lwip_netconn_do_delconn+0x12c>)
 8006658:	f7fa fbc7 	bl	8000dea <sys_mutex_unlock>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1085
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800665c:	6820      	ldr	r0, [r4, #0]
 800665e:	2100      	movs	r1, #0
 8006660:	300c      	adds	r0, #12
 8006662:	f7fa fb79 	bl	8000d58 <sys_arch_sem_wait>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1086
          LOCK_TCPIP_CORE();
 8006666:	480d      	ldr	r0, [pc, #52]	; (800669c <lwip_netconn_do_delconn+0x12c>)
 8006668:	f7fa fbba 	bl	8000de0 <sys_mutex_lock>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1087
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	785b      	ldrb	r3, [r3, #1]
 8006670:	b143      	cbz	r3, 8006684 <lwip_netconn_do_delconn+0x114>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1087 (discriminator 1)
 8006672:	4b05      	ldr	r3, [pc, #20]	; (8006688 <lwip_netconn_do_delconn+0x118>)
 8006674:	f240 423f 	movw	r2, #1087	; 0x43f
 8006678:	4907      	ldr	r1, [pc, #28]	; (8006698 <lwip_netconn_do_delconn+0x128>)
 800667a:	4805      	ldr	r0, [pc, #20]	; (8006690 <lwip_netconn_do_delconn+0x120>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1111 (discriminator 1)
}
 800667c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1087 (discriminator 1)
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8006680:	f006 bc8c 	b.w	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1111
}
 8006684:	bd70      	pop	{r4, r5, r6, pc}
 8006686:	bf00      	nop
 8006688:	0801f428 	.word	0x0801f428
 800668c:	0801f225 	.word	0x0801f225
 8006690:	0800e36a 	.word	0x0800e36a
 8006694:	0801f239 	.word	0x0801f239
 8006698:	0801f254 	.word	0x0801f254
 800669c:	200080a8 	.word	0x200080a8

080066a0 <lwip_netconn_do_bind>:
lwip_netconn_do_bind():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1125
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80066a0:	6803      	ldr	r3, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1122
{
 80066a2:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1125
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80066a4:	f993 2008 	ldrsb.w	r2, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1122
{
 80066a8:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1125
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80066aa:	f112 0f0c 	cmn.w	r2, #12
 80066ae:	da0f      	bge.n	80066d0 <lwip_netconn_do_bind+0x30>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1126
    msg->err = msg->conn->last_err;
 80066b0:	7102      	strb	r2, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1151
  TCPIP_APIMSG_ACK(msg);
 80066b2:	6823      	ldr	r3, [r4, #0]
 80066b4:	b31b      	cbz	r3, 80066fe <lwip_netconn_do_bind+0x5e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1151 (discriminator 1)
 80066b6:	f7fa fbab 	bl	8000e10 <sys_arch_protect>
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80066c0:	320c      	adds	r2, #12
 80066c2:	bfa4      	itt	ge
 80066c4:	7922      	ldrbge	r2, [r4, #4]
 80066c6:	721a      	strbge	r2, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1152 (discriminator 1)
}
 80066c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1151 (discriminator 1)
  TCPIP_APIMSG_ACK(msg);
 80066cc:	f7fa bbac 	b.w	8000e28 <sys_arch_unprotect>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1128
    msg->err = ERR_VAL;
 80066d0:	22fa      	movs	r2, #250	; 0xfa
 80066d2:	7102      	strb	r2, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1129
    if (msg->conn->pcb.tcp != NULL) {
 80066d4:	6858      	ldr	r0, [r3, #4]
 80066d6:	2800      	cmp	r0, #0
 80066d8:	d0eb      	beq.n	80066b2 <lwip_netconn_do_bind+0x12>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1130
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066e0:	2b10      	cmp	r3, #16
 80066e2:	d007      	beq.n	80066f4 <lwip_netconn_do_bind+0x54>
 80066e4:	2b20      	cmp	r3, #32
 80066e6:	d1e4      	bne.n	80066b2 <lwip_netconn_do_bind+0x12>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1138
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80066e8:	89a2      	ldrh	r2, [r4, #12]
 80066ea:	68a1      	ldr	r1, [r4, #8]
 80066ec:	f003 fc12 	bl	8009f14 <udp_bind>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1143
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80066f0:	7120      	strb	r0, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1144
        break;
 80066f2:	e7de      	b.n	80066b2 <lwip_netconn_do_bind+0x12>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1143
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80066f4:	89a2      	ldrh	r2, [r4, #12]
 80066f6:	68a1      	ldr	r1, [r4, #8]
 80066f8:	f002 fcce 	bl	8009098 <tcp_bind>
 80066fc:	e7f8      	b.n	80066f0 <lwip_netconn_do_bind+0x50>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1152
}
 80066fe:	bd10      	pop	{r4, pc}

08006700 <lwip_netconn_do_listen>:
lwip_netconn_do_listen():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1311
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8006700:	6803      	ldr	r3, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1308
{
 8006702:	b537      	push	{r0, r1, r2, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1311
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8006704:	f993 2008 	ldrsb.w	r2, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1308
{
 8006708:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1311
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800670a:	f112 0f0c 	cmn.w	r2, #12
 800670e:	da0c      	bge.n	800672a <lwip_netconn_do_listen+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1312
    msg->err = msg->conn->last_err;
 8006710:	7102      	strb	r2, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1380
  TCPIP_APIMSG_ACK(msg);
 8006712:	f7fa fb7d 	bl	8000e10 <sys_arch_protect>
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800671c:	320c      	adds	r2, #12
 800671e:	db01      	blt.n	8006724 <lwip_netconn_do_listen+0x24>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1380 (discriminator 3)
 8006720:	7922      	ldrb	r2, [r4, #4]
 8006722:	721a      	strb	r2, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1380 (discriminator 5)
 8006724:	f7fa fb80 	bl	8000e28 <sys_arch_unprotect>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1381 (discriminator 5)
}
 8006728:	e01e      	b.n	8006768 <lwip_netconn_do_listen+0x68>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1314
    msg->err = ERR_CONN;
 800672a:	22f5      	movs	r2, #245	; 0xf5
 800672c:	7102      	strb	r2, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1315
    if (msg->conn->pcb.tcp != NULL) {
 800672e:	6858      	ldr	r0, [r3, #4]
 8006730:	2800      	cmp	r0, #0
 8006732:	d0ee      	beq.n	8006712 <lwip_netconn_do_listen+0x12>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1316
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8006734:	781a      	ldrb	r2, [r3, #0]
 8006736:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800673a:	2a10      	cmp	r2, #16
 800673c:	d14b      	bne.n	80067d6 <lwip_netconn_do_listen+0xd6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1317
        if (msg->conn->state == NETCONN_NONE) {
 800673e:	785b      	ldrb	r3, [r3, #1]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d144      	bne.n	80067ce <lwip_netconn_do_listen+0xce>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1319
          if (msg->conn->pcb.tcp->state != CLOSED) {
 8006744:	7d03      	ldrb	r3, [r0, #20]
 8006746:	b113      	cbz	r3, 800674e <lwip_netconn_do_listen+0x4e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1321
            msg->err = ERR_VAL;
 8006748:	23fa      	movs	r3, #250	; 0xfa
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1376
        msg->err = ERR_ARG;
 800674a:	7123      	strb	r3, [r4, #4]
 800674c:	e7e1      	b.n	8006712 <lwip_netconn_do_listen+0x12>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1342
            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800674e:	f10d 0207 	add.w	r2, sp, #7
 8006752:	21ff      	movs	r1, #255	; 0xff
 8006754:	f002 fcea 	bl	800912c <tcp_listen_with_backlog_and_err>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1344
            if (lpcb == NULL) {
 8006758:	4605      	mov	r5, r0
 800675a:	b938      	cbnz	r0, 800676c <lwip_netconn_do_listen+0x6c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1346
              msg->err = err;
 800675c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006760:	7123      	strb	r3, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1380
  TCPIP_APIMSG_ACK(msg);
 8006762:	6823      	ldr	r3, [r4, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1d4      	bne.n	8006712 <lwip_netconn_do_listen+0x12>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1381
}
 8006768:	b003      	add	sp, #12
 800676a:	bd30      	pop	{r4, r5, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1349
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800676c:	6820      	ldr	r0, [r4, #0]
 800676e:	3010      	adds	r0, #16
 8006770:	f7fa fad3 	bl	8000d1a <sys_mbox_valid>
 8006774:	b138      	cbz	r0, 8006786 <lwip_netconn_do_listen+0x86>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1351
                sys_mbox_free(&msg->conn->recvmbox);
 8006776:	6820      	ldr	r0, [r4, #0]
 8006778:	3010      	adds	r0, #16
 800677a:	f7fa fa87 	bl	8000c8c <sys_mbox_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1352
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 800677e:	6820      	ldr	r0, [r4, #0]
 8006780:	3010      	adds	r0, #16
 8006782:	f7fa facf 	bl	8000d24 <sys_mbox_set_invalid>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1354
              msg->err = ERR_OK;
 8006786:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1355
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8006788:	6820      	ldr	r0, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1354
              msg->err = ERR_OK;
 800678a:	7123      	strb	r3, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1355
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800678c:	3014      	adds	r0, #20
 800678e:	f7fa fac4 	bl	8000d1a <sys_mbox_valid>
 8006792:	b928      	cbnz	r0, 80067a0 <lwip_netconn_do_listen+0xa0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1356
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8006794:	6820      	ldr	r0, [r4, #0]
 8006796:	2106      	movs	r1, #6
 8006798:	3014      	adds	r0, #20
 800679a:	f7fa fa67 	bl	8000c6c <sys_mbox_new>
 800679e:	7120      	strb	r0, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1358
              if (msg->err == ERR_OK) {
 80067a0:	f994 3004 	ldrsb.w	r3, [r4, #4]
 80067a4:	b963      	cbnz	r3, 80067c0 <lwip_netconn_do_listen+0xc0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1359
                msg->conn->state = NETCONN_LISTEN;
 80067a6:	6821      	ldr	r1, [r4, #0]
 80067a8:	2302      	movs	r3, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1361
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80067aa:	4628      	mov	r0, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1359
                msg->conn->state = NETCONN_LISTEN;
 80067ac:	704b      	strb	r3, [r1, #1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1360
                msg->conn->pcb.tcp = lpcb;
 80067ae:	604d      	str	r5, [r1, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1361
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80067b0:	f002 fd96 	bl	80092e0 <tcp_arg>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1362
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	4909      	ldr	r1, [pc, #36]	; (80067dc <lwip_netconn_do_listen+0xdc>)
 80067b8:	6858      	ldr	r0, [r3, #4]
 80067ba:	f002 fdd9 	bl	8009370 <tcp_accept>
 80067be:	e7d0      	b.n	8006762 <lwip_netconn_do_listen+0x62>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1365
                tcp_close(lpcb);
 80067c0:	4628      	mov	r0, r5
 80067c2:	f003 f8c5 	bl	8009950 <tcp_close>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1366
                msg->conn->pcb.tcp = NULL;
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	2200      	movs	r2, #0
 80067ca:	605a      	str	r2, [r3, #4]
 80067cc:	e7c9      	b.n	8006762 <lwip_netconn_do_listen+0x62>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1370
        } else if (msg->conn->state == NETCONN_LISTEN) {
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d19f      	bne.n	8006712 <lwip_netconn_do_listen+0x12>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1372
          msg->err = ERR_OK;
 80067d2:	2300      	movs	r3, #0
 80067d4:	e7b9      	b.n	800674a <lwip_netconn_do_listen+0x4a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1376
        msg->err = ERR_ARG;
 80067d6:	23f0      	movs	r3, #240	; 0xf0
 80067d8:	e7b7      	b.n	800674a <lwip_netconn_do_listen+0x4a>
 80067da:	bf00      	nop
 80067dc:	08006495 	.word	0x08006495

080067e0 <lwip_netconn_do_recv>:
lwip_netconn_do_recv():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1447
{
 80067e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1450
  msg->err = ERR_OK;
 80067e2:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1447
{
 80067e4:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1450
  msg->err = ERR_OK;
 80067e6:	7103      	strb	r3, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1451
  if (msg->conn->pcb.tcp != NULL) {
 80067e8:	6803      	ldr	r3, [r0, #0]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	b952      	cbnz	r2, 8006804 <lwip_netconn_do_recv+0x24>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1461
  TCPIP_APIMSG_ACK(msg);
 80067ee:	f7fa fb0f 	bl	8000e10 <sys_arch_protect>
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80067f8:	320c      	adds	r2, #12
 80067fa:	da1a      	bge.n	8006832 <lwip_netconn_do_recv+0x52>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1462 (discriminator 5)
}
 80067fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1461 (discriminator 5)
  TCPIP_APIMSG_ACK(msg);
 8006800:	f7fa bb12 	b.w	8000e28 <sys_arch_unprotect>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1452
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800680a:	2b10      	cmp	r3, #16
 800680c:	d1ef      	bne.n	80067ee <lwip_netconn_do_recv+0xe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1453
      u32_t remaining = msg->msg.r.len;
 800680e:	6885      	ldr	r5, [r0, #8]
 8006810:	f64f 77ff 	movw	r7, #65535	; 0xffff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1455
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8006814:	42bd      	cmp	r5, r7
 8006816:	462e      	mov	r6, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1456
        tcp_recved(msg->conn->pcb.tcp, recved);
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	bf28      	it	cs
 800681c:	463e      	movcs	r6, r7
 800681e:	6858      	ldr	r0, [r3, #4]
 8006820:	b2b1      	uxth	r1, r6
 8006822:	f002 fd07 	bl	8009234 <tcp_recved>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1458
      } while (remaining != 0);
 8006826:	1bad      	subs	r5, r5, r6
 8006828:	d1f4      	bne.n	8006814 <lwip_netconn_do_recv+0x34>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1461
  TCPIP_APIMSG_ACK(msg);
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1de      	bne.n	80067ee <lwip_netconn_do_recv+0xe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1462
}
 8006830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1461 (discriminator 3)
  TCPIP_APIMSG_ACK(msg);
 8006832:	7922      	ldrb	r2, [r4, #4]
 8006834:	721a      	strb	r2, [r3, #8]
 8006836:	e7e1      	b.n	80067fc <lwip_netconn_do_recv+0x1c>

08006838 <lwip_netconn_do_write>:
lwip_netconn_do_write():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1655
void
lwip_netconn_do_write(void *m)
{
  struct api_msg *msg = (struct api_msg*)m;

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8006838:	6803      	ldr	r3, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1652
{
 800683a:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1655
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800683c:	f993 2008 	ldrsb.w	r2, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1652
{
 8006840:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1655
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8006842:	f112 0f0c 	cmn.w	r2, #12
 8006846:	da0d      	bge.n	8006864 <lwip_netconn_do_write+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1656
    msg->err = msg->conn->last_err;
 8006848:	7102      	strb	r2, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1697
    } else {
      msg->err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800684a:	f7fa fae1 	bl	8000e10 <sys_arch_protect>
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8006854:	320c      	adds	r2, #12
 8006856:	bfa4      	itt	ge
 8006858:	7922      	ldrbge	r2, [r4, #4]
 800685a:	721a      	strbge	r2, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1698
}
 800685c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1697
  TCPIP_APIMSG_ACK(msg);
 8006860:	f7fa bae2 	b.w	8000e28 <sys_arch_unprotect>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1658
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8006864:	781a      	ldrb	r2, [r3, #0]
 8006866:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800686a:	2a10      	cmp	r2, #16
 800686c:	d149      	bne.n	8006902 <lwip_netconn_do_write+0xca>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1660
      if (msg->conn->state != NETCONN_NONE) {
 800686e:	785a      	ldrb	r2, [r3, #1]
 8006870:	b112      	cbz	r2, 8006878 <lwip_netconn_do_write+0x40>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1662
        msg->err = ERR_INPROGRESS;
 8006872:	23fb      	movs	r3, #251	; 0xfb
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1693
      msg->err = ERR_VAL;
 8006874:	7123      	strb	r3, [r4, #4]
 8006876:	e7e8      	b.n	800684a <lwip_netconn_do_write+0x12>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1663
      } else if (msg->conn->pcb.tcp != NULL) {
 8006878:	685a      	ldr	r2, [r3, #4]
 800687a:	2a00      	cmp	r2, #0
 800687c:	d03f      	beq.n	80068fe <lwip_netconn_do_write+0xc6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1664
        msg->conn->state = NETCONN_WRITE;
 800687e:	2201      	movs	r2, #1
 8006880:	705a      	strb	r2, [r3, #1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1666
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8006882:	6a1a      	ldr	r2, [r3, #32]
 8006884:	b90a      	cbnz	r2, 800688a <lwip_netconn_do_write+0x52>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1666 (discriminator 2)
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	b133      	cbz	r3, 8006898 <lwip_netconn_do_write+0x60>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1666 (discriminator 3)
 800688a:	4b1f      	ldr	r3, [pc, #124]	; (8006908 <lwip_netconn_do_write+0xd0>)
 800688c:	f240 6283 	movw	r2, #1667	; 0x683
 8006890:	491e      	ldr	r1, [pc, #120]	; (800690c <lwip_netconn_do_write+0xd4>)
 8006892:	481f      	ldr	r0, [pc, #124]	; (8006910 <lwip_netconn_do_write+0xd8>)
 8006894:	f006 fb82 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1668
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8006898:	68e3      	ldr	r3, [r4, #12]
 800689a:	b933      	cbnz	r3, 80068aa <lwip_netconn_do_write+0x72>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1668 (discriminator 1)
 800689c:	4b1a      	ldr	r3, [pc, #104]	; (8006908 <lwip_netconn_do_write+0xd0>)
 800689e:	f240 6284 	movw	r2, #1668	; 0x684
 80068a2:	491c      	ldr	r1, [pc, #112]	; (8006914 <lwip_netconn_do_write+0xdc>)
 80068a4:	481a      	ldr	r0, [pc, #104]	; (8006910 <lwip_netconn_do_write+0xd8>)
 80068a6:	f006 fb79 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1669
        msg->conn->current_msg = msg;
 80068aa:	6820      	ldr	r0, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1670
        msg->conn->write_offset = 0;
 80068ac:	2100      	movs	r1, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1669
        msg->conn->current_msg = msg;
 80068ae:	6204      	str	r4, [r0, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1670
        msg->conn->write_offset = 0;
 80068b0:	61c1      	str	r1, [r0, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1672
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80068b2:	f7ff fa1d 	bl	8005cf0 <lwip_netconn_do_writemore>
 80068b6:	b330      	cbz	r0, 8006906 <lwip_netconn_do_write+0xce>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1673
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	785b      	ldrb	r3, [r3, #1]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d006      	beq.n	80068ce <lwip_netconn_do_write+0x96>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1673 (discriminator 1)
 80068c0:	4b11      	ldr	r3, [pc, #68]	; (8006908 <lwip_netconn_do_write+0xd0>)
 80068c2:	f240 6289 	movw	r2, #1673	; 0x689
 80068c6:	4914      	ldr	r1, [pc, #80]	; (8006918 <lwip_netconn_do_write+0xe0>)
 80068c8:	4811      	ldr	r0, [pc, #68]	; (8006910 <lwip_netconn_do_write+0xd8>)
 80068ca:	f006 fb67 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1674
          UNLOCK_TCPIP_CORE();
 80068ce:	4813      	ldr	r0, [pc, #76]	; (800691c <lwip_netconn_do_write+0xe4>)
 80068d0:	f7fa fa8b 	bl	8000dea <sys_mutex_unlock>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1675
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80068d4:	6820      	ldr	r0, [r4, #0]
 80068d6:	2100      	movs	r1, #0
 80068d8:	300c      	adds	r0, #12
 80068da:	f7fa fa3d 	bl	8000d58 <sys_arch_sem_wait>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1676
          LOCK_TCPIP_CORE();
 80068de:	480f      	ldr	r0, [pc, #60]	; (800691c <lwip_netconn_do_write+0xe4>)
 80068e0:	f7fa fa7e 	bl	8000de0 <sys_mutex_lock>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1677
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	785b      	ldrb	r3, [r3, #1]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d10c      	bne.n	8006906 <lwip_netconn_do_write+0xce>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1677 (discriminator 1)
 80068ec:	4b06      	ldr	r3, [pc, #24]	; (8006908 <lwip_netconn_do_write+0xd0>)
 80068ee:	f240 628d 	movw	r2, #1677	; 0x68d
 80068f2:	4909      	ldr	r1, [pc, #36]	; (8006918 <lwip_netconn_do_write+0xe0>)
 80068f4:	4806      	ldr	r0, [pc, #24]	; (8006910 <lwip_netconn_do_write+0xd8>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1698 (discriminator 1)
}
 80068f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1677 (discriminator 1)
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80068fa:	f006 bb4f 	b.w	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1686
        msg->err = ERR_CONN;
 80068fe:	23f5      	movs	r3, #245	; 0xf5
 8006900:	e7b8      	b.n	8006874 <lwip_netconn_do_write+0x3c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1693
      msg->err = ERR_VAL;
 8006902:	23fa      	movs	r3, #250	; 0xfa
 8006904:	e7b6      	b.n	8006874 <lwip_netconn_do_write+0x3c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1698
}
 8006906:	bd10      	pop	{r4, pc}
 8006908:	0801f428 	.word	0x0801f428
 800690c:	0801f239 	.word	0x0801f239
 8006910:	0800e36a 	.word	0x0800e36a
 8006914:	0801f25b 	.word	0x0801f25b
 8006918:	0801f254 	.word	0x0801f254
 800691c:	200080a8 	.word	0x200080a8

08006920 <lwip_netconn_do_close>:
lwip_netconn_do_close():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1775
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8006920:	b510      	push	{r4, lr}
 8006922:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1779
  struct api_msg *msg = (struct api_msg*)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8006924:	6800      	ldr	r0, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1782
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8006926:	6843      	ldr	r3, [r0, #4]
 8006928:	b163      	cbz	r3, 8006944 <lwip_netconn_do_close+0x24>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1782 (discriminator 1)
 800692a:	7803      	ldrb	r3, [r0, #0]
 800692c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006930:	2b10      	cmp	r3, #16
 8006932:	d107      	bne.n	8006944 <lwip_netconn_do_close+0x24>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1784
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8006934:	7a22      	ldrb	r2, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1779
  enum netconn_state state = msg->conn->state;
 8006936:	7843      	ldrb	r3, [r0, #1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1783
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8006938:	2a03      	cmp	r2, #3
 800693a:	d001      	beq.n	8006940 <lwip_netconn_do_close+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1784
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800693c:	2b02      	cmp	r3, #2
 800693e:	d001      	beq.n	8006944 <lwip_netconn_do_close+0x24>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1786
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8006940:	2b03      	cmp	r3, #3
 8006942:	d10e      	bne.n	8006962 <lwip_netconn_do_close+0x42>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1788
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8006944:	23f5      	movs	r3, #245	; 0xf5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1812
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8006946:	7123      	strb	r3, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1842
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
 8006948:	f7fa fa62 	bl	8000e10 <sys_arch_protect>
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8006952:	320c      	adds	r2, #12
 8006954:	bfa4      	itt	ge
 8006956:	7922      	ldrbge	r2, [r4, #4]
 8006958:	721a      	strbge	r2, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1843
}
 800695a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1842
  TCPIP_APIMSG_ACK(msg);
 800695e:	f7fa ba63 	b.w	8000e28 <sys_arch_unprotect>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1789
    } else if (state == NETCONN_WRITE) {
 8006962:	2b01      	cmp	r3, #1
 8006964:	d101      	bne.n	800696a <lwip_netconn_do_close+0x4a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1812
      msg->err = ERR_INPROGRESS;
 8006966:	23fb      	movs	r3, #251	; 0xfb
 8006968:	e7ed      	b.n	8006946 <lwip_netconn_do_close+0x26>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1815
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800696a:	07d3      	lsls	r3, r2, #31
 800696c:	d501      	bpl.n	8006972 <lwip_netconn_do_close+0x52>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1817
        netconn_drain(msg->conn);
 800696e:	f7ff fd41 	bl	80063f4 <netconn_drain>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1819
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	6a1a      	ldr	r2, [r3, #32]
 8006976:	b90a      	cbnz	r2, 800697c <lwip_netconn_do_close+0x5c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1819 (discriminator 2)
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	b133      	cbz	r3, 800698a <lwip_netconn_do_close+0x6a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1819 (discriminator 3)
 800697c:	4b18      	ldr	r3, [pc, #96]	; (80069e0 <lwip_netconn_do_close+0xc0>)
 800697e:	f240 721c 	movw	r2, #1820	; 0x71c
 8006982:	4918      	ldr	r1, [pc, #96]	; (80069e4 <lwip_netconn_do_close+0xc4>)
 8006984:	4818      	ldr	r0, [pc, #96]	; (80069e8 <lwip_netconn_do_close+0xc8>)
 8006986:	f006 fb09 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1821
      msg->conn->state = NETCONN_CLOSE;
 800698a:	6820      	ldr	r0, [r4, #0]
 800698c:	2304      	movs	r3, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1824
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800698e:	2100      	movs	r1, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1821
      msg->conn->state = NETCONN_CLOSE;
 8006990:	7043      	strb	r3, [r0, #1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1822
      msg->conn->current_msg = msg;
 8006992:	6204      	str	r4, [r0, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1824
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8006994:	f7ff fa9c 	bl	8005ed0 <lwip_netconn_do_close_internal>
 8006998:	b308      	cbz	r0, 80069de <lwip_netconn_do_close+0xbe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1825
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	785b      	ldrb	r3, [r3, #1]
 800699e:	2b04      	cmp	r3, #4
 80069a0:	d006      	beq.n	80069b0 <lwip_netconn_do_close+0x90>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1825 (discriminator 1)
 80069a2:	4b0f      	ldr	r3, [pc, #60]	; (80069e0 <lwip_netconn_do_close+0xc0>)
 80069a4:	f240 7221 	movw	r2, #1825	; 0x721
 80069a8:	4910      	ldr	r1, [pc, #64]	; (80069ec <lwip_netconn_do_close+0xcc>)
 80069aa:	480f      	ldr	r0, [pc, #60]	; (80069e8 <lwip_netconn_do_close+0xc8>)
 80069ac:	f006 faf6 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1826
        UNLOCK_TCPIP_CORE();
 80069b0:	480f      	ldr	r0, [pc, #60]	; (80069f0 <lwip_netconn_do_close+0xd0>)
 80069b2:	f7fa fa1a 	bl	8000dea <sys_mutex_unlock>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1827
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80069b6:	6820      	ldr	r0, [r4, #0]
 80069b8:	2100      	movs	r1, #0
 80069ba:	300c      	adds	r0, #12
 80069bc:	f7fa f9cc 	bl	8000d58 <sys_arch_sem_wait>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1828
        LOCK_TCPIP_CORE();
 80069c0:	480b      	ldr	r0, [pc, #44]	; (80069f0 <lwip_netconn_do_close+0xd0>)
 80069c2:	f7fa fa0d 	bl	8000de0 <sys_mutex_lock>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1829
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	785b      	ldrb	r3, [r3, #1]
 80069ca:	b143      	cbz	r3, 80069de <lwip_netconn_do_close+0xbe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1829 (discriminator 1)
 80069cc:	4b04      	ldr	r3, [pc, #16]	; (80069e0 <lwip_netconn_do_close+0xc0>)
 80069ce:	f240 7225 	movw	r2, #1829	; 0x725
 80069d2:	4906      	ldr	r1, [pc, #24]	; (80069ec <lwip_netconn_do_close+0xcc>)
 80069d4:	4804      	ldr	r0, [pc, #16]	; (80069e8 <lwip_netconn_do_close+0xc8>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1843 (discriminator 1)
}
 80069d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1829 (discriminator 1)
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80069da:	f006 badf 	b.w	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/api/api_msg.c:1843
}
 80069de:	bd10      	pop	{r4, pc}
 80069e0:	0801f428 	.word	0x0801f428
 80069e4:	0801f239 	.word	0x0801f239
 80069e8:	0800e36a 	.word	0x0800e36a
 80069ec:	0801f254 	.word	0x0801f254
 80069f0:	200080a8 	.word	0x200080a8

080069f4 <BSP_LED_Init>:
BSP_LED_Init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/STM32H7xx_Nucleo_144/stm32h7xx_nucleo_144.c:175
void BSP_LED_Init(Led_TypeDef Led)
{
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80069f4:	4b1a      	ldr	r3, [pc, #104]	; (8006a60 <BSP_LED_Init+0x6c>)
 80069f6:	2801      	cmp	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/STM32H7xx_Nucleo_144/stm32h7xx_nucleo_144.c:171
{
 80069f8:	b5f0      	push	{r4, r5, r6, r7, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/STM32H7xx_Nucleo_144/stm32h7xx_nucleo_144.c:175
  LEDx_GPIO_CLK_ENABLE(Led);
 80069fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/STM32H7xx_Nucleo_144/stm32h7xx_nucleo_144.c:171
{
 80069fe:	b089      	sub	sp, #36	; 0x24
 8006a00:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/STM32H7xx_Nucleo_144/stm32h7xx_nucleo_144.c:175
  LEDx_GPIO_CLK_ENABLE(Led);
 8006a02:	d121      	bne.n	8006a48 <BSP_LED_Init+0x54>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/STM32H7xx_Nucleo_144/stm32h7xx_nucleo_144.c:175 (discriminator 1)
 8006a04:	f042 0210 	orr.w	r2, r2, #16
 8006a08:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a10:	f003 0310 	and.w	r3, r3, #16
 8006a14:	9301      	str	r3, [sp, #4]
 8006a16:	9b01      	ldr	r3, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/STM32H7xx_Nucleo_144/stm32h7xx_nucleo_144.c:178

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8006a18:	4b12      	ldr	r3, [pc, #72]	; (8006a64 <BSP_LED_Init+0x70>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/STM32H7xx_Nucleo_144/stm32h7xx_nucleo_144.c:180
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a1a:	2700      	movs	r7, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/STM32H7xx_Nucleo_144/stm32h7xx_nucleo_144.c:183
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8006a1c:	4d12      	ldr	r5, [pc, #72]	; (8006a68 <BSP_LED_Init+0x74>)
 8006a1e:	a903      	add	r1, sp, #12
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/STM32H7xx_Nucleo_144/stm32h7xx_nucleo_144.c:178
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8006a20:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/STM32H7xx_Nucleo_144/stm32h7xx_nucleo_144.c:180
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a24:	2301      	movs	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/STM32H7xx_Nucleo_144/stm32h7xx_nucleo_144.c:183
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8006a26:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/STM32H7xx_Nucleo_144/stm32h7xx_nucleo_144.c:178
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8006a2a:	9603      	str	r6, [sp, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/STM32H7xx_Nucleo_144/stm32h7xx_nucleo_144.c:180
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a2c:	e9cd 3704 	strd	r3, r7, [sp, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/STM32H7xx_Nucleo_144/stm32h7xx_nucleo_144.c:181
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a30:	2303      	movs	r3, #3
 8006a32:	9306      	str	r3, [sp, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/STM32H7xx_Nucleo_144/stm32h7xx_nucleo_144.c:183
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8006a34:	f7fa ff2a 	bl	800188c <HAL_GPIO_Init>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/STM32H7xx_Nucleo_144/stm32h7xx_nucleo_144.c:184
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8006a38:	463a      	mov	r2, r7
 8006a3a:	4631      	mov	r1, r6
 8006a3c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8006a40:	f7fb f80e 	bl	8001a60 <HAL_GPIO_WritePin>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/STM32H7xx_Nucleo_144/stm32h7xx_nucleo_144.c:185
}
 8006a44:	b009      	add	sp, #36	; 0x24
 8006a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/STM32H7xx_Nucleo_144/stm32h7xx_nucleo_144.c:175 (discriminator 2)
  LEDx_GPIO_CLK_ENABLE(Led);
 8006a48:	f042 0202 	orr.w	r2, r2, #2
 8006a4c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a54:	f003 0302 	and.w	r3, r3, #2
 8006a58:	9302      	str	r3, [sp, #8]
 8006a5a:	9b02      	ldr	r3, [sp, #8]
 8006a5c:	e7dc      	b.n	8006a18 <BSP_LED_Init+0x24>
 8006a5e:	bf00      	nop
 8006a60:	58024400 	.word	0x58024400
 8006a64:	0801f4ec 	.word	0x0801f4ec
 8006a68:	2000000c 	.word	0x2000000c

08006a6c <BSP_LED_On>:
BSP_LED_On():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/STM32H7xx_Nucleo_144/stm32h7xx_nucleo_144.c:217
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8006a6c:	4b04      	ldr	r3, [pc, #16]	; (8006a80 <BSP_LED_On+0x14>)
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8006a74:	4b03      	ldr	r3, [pc, #12]	; (8006a84 <BSP_LED_On+0x18>)
 8006a76:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006a7a:	f7fa bff1 	b.w	8001a60 <HAL_GPIO_WritePin>
 8006a7e:	bf00      	nop
 8006a80:	0801f4ec 	.word	0x0801f4ec
 8006a84:	2000000c 	.word	0x2000000c

08006a88 <BSP_LED_Off>:
BSP_LED_Off():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/BSP/STM32H7xx_Nucleo_144/stm32h7xx_nucleo_144.c:231
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8006a88:	4b04      	ldr	r3, [pc, #16]	; (8006a9c <BSP_LED_Off+0x14>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8006a90:	4b03      	ldr	r3, [pc, #12]	; (8006aa0 <BSP_LED_Off+0x18>)
 8006a92:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006a96:	f7fa bfe3 	b.w	8001a60 <HAL_GPIO_WritePin>
 8006a9a:	bf00      	nop
 8006a9c:	0801f4ec 	.word	0x0801f4ec
 8006aa0:	2000000c 	.word	0x2000000c

08006aa4 <prvIsQueueEmpty>:
prvIsQueueEmpty():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2257
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006aa4:	b510      	push	{r4, lr}
 8006aa6:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2260
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006aa8:	f7f9 ff14 	bl	80008d4 <vPortEnterCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2262
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006aac:	6ba4      	ldr	r4, [r4, #56]	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2271
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8006aae:	f7f9 ff33 	bl	8000918 <vPortExitCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2274

	return xReturn;
}
 8006ab2:	fab4 f084 	clz	r0, r4
 8006ab6:	0940      	lsrs	r0, r0, #5
 8006ab8:	bd10      	pop	{r4, pc}

08006aba <prvCopyDataToQueue>:
prvCopyDataToQueue():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2040
{
 8006aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006abc:	4615      	mov	r5, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2048
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006abe:	6c02      	ldr	r2, [r0, #64]	; 0x40
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2040
{
 8006ac0:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2046
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ac2:	6b86      	ldr	r6, [r0, #56]	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2048
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ac4:	b952      	cbnz	r2, 8006adc <prvCopyDataToQueue+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2052
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ac6:	6807      	ldr	r7, [r0, #0]
 8006ac8:	bb47      	cbnz	r7, 8006b1c <prvCopyDataToQueue+0x62>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2055
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006aca:	6840      	ldr	r0, [r0, #4]
 8006acc:	f001 f9e8 	bl	8007ea0 <xTaskPriorityDisinherit>
 8006ad0:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2056
				pxQueue->pxMutexHolder = NULL;
 8006ad2:	6067      	str	r7, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2112
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ad4:	3601      	adds	r6, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2115
}
 8006ad6:	4628      	mov	r0, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2112
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ad8:	63a6      	str	r6, [r4, #56]	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2115
}
 8006ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2065
	else if( xPosition == queueSEND_TO_BACK )
 8006adc:	b965      	cbnz	r5, 8006af8 <prvCopyDataToQueue+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2067
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006ade:	6880      	ldr	r0, [r0, #8]
 8006ae0:	f006 fa46 	bl	800cf70 <memcpy>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2068
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006ae4:	68a3      	ldr	r3, [r4, #8]
 8006ae6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006ae8:	4413      	add	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2069
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006aea:	6862      	ldr	r2, [r4, #4]
 8006aec:	4293      	cmp	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2068
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006aee:	60a3      	str	r3, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2069
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006af0:	d3f0      	bcc.n	8006ad4 <prvCopyDataToQueue+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2071
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	60a3      	str	r3, [r4, #8]
 8006af6:	e7ed      	b.n	8006ad4 <prvCopyDataToQueue+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2080
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006af8:	68c0      	ldr	r0, [r0, #12]
 8006afa:	f006 fa39 	bl	800cf70 <memcpy>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2081
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006afe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b00:	68e2      	ldr	r2, [r4, #12]
 8006b02:	425b      	negs	r3, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2082
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b04:	6821      	ldr	r1, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2081
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006b06:	441a      	add	r2, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2082
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b08:	428a      	cmp	r2, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2081
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006b0a:	60e2      	str	r2, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2084
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006b0c:	bf3e      	ittt	cc
 8006b0e:	6862      	ldrcc	r2, [r4, #4]
 8006b10:	189b      	addcc	r3, r3, r2
 8006b12:	60e3      	strcc	r3, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2091
		if( xPosition == queueOVERWRITE )
 8006b14:	2d02      	cmp	r5, #2
 8006b16:	d101      	bne.n	8006b1c <prvCopyDataToQueue+0x62>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2093
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b18:	b116      	cbz	r6, 8006b20 <prvCopyDataToQueue+0x66>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2099
				--uxMessagesWaiting;
 8006b1a:	3e01      	subs	r6, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2041
BaseType_t xReturn = pdFALSE;
 8006b1c:	2500      	movs	r5, #0
 8006b1e:	e7d9      	b.n	8006ad4 <prvCopyDataToQueue+0x1a>
 8006b20:	4635      	mov	r5, r6
 8006b22:	e7d7      	b.n	8006ad4 <prvCopyDataToQueue+0x1a>

08006b24 <prvCopyDataFromQueue>:
prvCopyDataFromQueue():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2119
{
 8006b24:	4603      	mov	r3, r0
 8006b26:	4608      	mov	r0, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2120
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2119
{
 8006b2a:	b410      	push	{r4}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2120
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006b2c:	b162      	cbz	r2, 8006b48 <prvCopyDataFromQueue+0x24>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2122
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006b2e:	68d9      	ldr	r1, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2123
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006b30:	685c      	ldr	r4, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2122
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006b32:	4411      	add	r1, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2123
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006b34:	42a1      	cmp	r1, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2122
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006b36:	60d9      	str	r1, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2133
}
 8006b38:	f85d 4b04 	ldr.w	r4, [sp], #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2125
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006b3c:	bf24      	itt	cs
 8006b3e:	6819      	ldrcs	r1, [r3, #0]
 8006b40:	60d9      	strcs	r1, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2131
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006b42:	68d9      	ldr	r1, [r3, #12]
 8006b44:	f006 ba14 	b.w	800cf70 <memcpy>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2133
}
 8006b48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <prvUnlockQueue>:
prvUnlockQueue():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2137
{
 8006b4e:	b570      	push	{r4, r5, r6, lr}
 8006b50:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2144
	taskENTER_CRITICAL();
 8006b52:	f7f9 febf 	bl	80008d4 <vPortEnterCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2146
		int8_t cTxLock = pxQueue->cTxLock;
 8006b56:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2199
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b5a:	f104 0624 	add.w	r6, r4, #36	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2146
		int8_t cTxLock = pxQueue->cTxLock;
 8006b5e:	b26d      	sxtb	r5, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2149
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b60:	2d00      	cmp	r5, #0
 8006b62:	dc14      	bgt.n	8006b8e <prvUnlockQueue+0x40>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2220
		pxQueue->cTxLock = queueUNLOCKED;
 8006b64:	23ff      	movs	r3, #255	; 0xff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2233
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b66:	f104 0610 	add.w	r6, r4, #16
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2220
		pxQueue->cTxLock = queueUNLOCKED;
 8006b6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2222
	taskEXIT_CRITICAL();
 8006b6e:	f7f9 fed3 	bl	8000918 <vPortExitCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2225
	taskENTER_CRITICAL();
 8006b72:	f7f9 feaf 	bl	80008d4 <vPortEnterCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2227
		int8_t cRxLock = pxQueue->cRxLock;
 8006b76:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8006b7a:	b26d      	sxtb	r5, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2229
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b7c:	2d00      	cmp	r5, #0
 8006b7e:	dc12      	bgt.n	8006ba6 <prvUnlockQueue+0x58>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2250
		pxQueue->cRxLock = queueUNLOCKED;
 8006b80:	23ff      	movs	r3, #255	; 0xff
 8006b82:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2253
}
 8006b86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2252
	taskEXIT_CRITICAL();
 8006b8a:	f7f9 bec5 	b.w	8000918 <vPortExitCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2197
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d0e7      	beq.n	8006b64 <prvUnlockQueue+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2199
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b94:	4630      	mov	r0, r6
 8006b96:	f000 ffeb 	bl	8007b70 <xTaskRemoveFromEventList>
 8006b9a:	b108      	cbz	r0, 8006ba0 <prvUnlockQueue+0x52>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2203
						vTaskMissedYield();
 8006b9c:	f001 f870 	bl	8007c80 <vTaskMissedYield>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2217
			--cTxLock;
 8006ba0:	3d01      	subs	r5, #1
 8006ba2:	b26d      	sxtb	r5, r5
 8006ba4:	e7dc      	b.n	8006b60 <prvUnlockQueue+0x12>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2231
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ba6:	6923      	ldr	r3, [r4, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d0e9      	beq.n	8006b80 <prvUnlockQueue+0x32>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2233
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bac:	4630      	mov	r0, r6
 8006bae:	f000 ffdf 	bl	8007b70 <xTaskRemoveFromEventList>
 8006bb2:	b108      	cbz	r0, 8006bb8 <prvUnlockQueue+0x6a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2235
					vTaskMissedYield();
 8006bb4:	f001 f864 	bl	8007c80 <vTaskMissedYield>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2242
				--cRxLock;
 8006bb8:	3d01      	subs	r5, #1
 8006bba:	b26d      	sxtb	r5, r5
 8006bbc:	e7de      	b.n	8006b7c <prvUnlockQueue+0x2e>
	...

08006bc0 <xQueueGenericReset>:
xQueueGenericReset():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:248
{
 8006bc0:	b538      	push	{r3, r4, r5, lr}
 8006bc2:	460d      	mov	r5, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:251
	configASSERT( pxQueue );
 8006bc4:	4604      	mov	r4, r0
 8006bc6:	b940      	cbnz	r0, 8006bda <xQueueGenericReset+0x1a>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8006bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
xQueueGenericReset():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:251
 8006bd8:	e7fe      	b.n	8006bd8 <xQueueGenericReset+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:253 (discriminator 2)
	taskENTER_CRITICAL();
 8006bda:	f7f9 fe7b 	bl	80008d4 <vPortEnterCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:255 (discriminator 2)
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006bde:	6822      	ldr	r2, [r4, #0]
 8006be0:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:257 (discriminator 2)
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006be4:	60a2      	str	r2, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:255 (discriminator 2)
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006be6:	4343      	muls	r3, r0
 8006be8:	18d1      	adds	r1, r2, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:258 (discriminator 2)
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006bea:	1a1b      	subs	r3, r3, r0
 8006bec:	4413      	add	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:255 (discriminator 2)
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006bee:	6061      	str	r1, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:256 (discriminator 2)
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006bf0:	2100      	movs	r1, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:258 (discriminator 2)
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006bf2:	60e3      	str	r3, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:259 (discriminator 2)
		pxQueue->cRxLock = queueUNLOCKED;
 8006bf4:	23ff      	movs	r3, #255	; 0xff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:256 (discriminator 2)
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006bf6:	63a1      	str	r1, [r4, #56]	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:259 (discriminator 2)
		pxQueue->cRxLock = queueUNLOCKED;
 8006bf8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:260 (discriminator 2)
		pxQueue->cTxLock = queueUNLOCKED;
 8006bfc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:262 (discriminator 2)
		if( xNewQueue == pdFALSE )
 8006c00:	b995      	cbnz	r5, 8006c28 <xQueueGenericReset+0x68>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:269
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c02:	6923      	ldr	r3, [r4, #16]
 8006c04:	b163      	cbz	r3, 8006c20 <xQueueGenericReset+0x60>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:271
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c06:	f104 0010 	add.w	r0, r4, #16
 8006c0a:	f000 ffb1 	bl	8007b70 <xTaskRemoveFromEventList>
 8006c0e:	b138      	cbz	r0, 8006c20 <xQueueGenericReset+0x60>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:273
					queueYIELD_IF_USING_PREEMPTION();
 8006c10:	4b0a      	ldr	r3, [pc, #40]	; (8006c3c <xQueueGenericReset+0x7c>)
 8006c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c16:	601a      	str	r2, [r3, #0]
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	f3bf 8f6f 	isb	sy
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:292
	taskEXIT_CRITICAL();
 8006c20:	f7f9 fe7a 	bl	8000918 <vPortExitCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:297
}
 8006c24:	2001      	movs	r0, #1
 8006c26:	bd38      	pop	{r3, r4, r5, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:288
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c28:	f104 0010 	add.w	r0, r4, #16
 8006c2c:	f001 fa52 	bl	80080d4 <vListInitialise>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:289
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c30:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006c34:	f001 fa4e 	bl	80080d4 <vListInitialise>
 8006c38:	e7f2      	b.n	8006c20 <xQueueGenericReset+0x60>
 8006c3a:	bf00      	nop
 8006c3c:	e000ed04 	.word	0xe000ed04

08006c40 <xQueueGenericCreate>:
xQueueGenericCreate():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:359
	{
 8006c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c42:	460d      	mov	r5, r1
 8006c44:	4617      	mov	r7, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:364
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c46:	4606      	mov	r6, r0
 8006c48:	b940      	cbnz	r0, 8006c5c <xQueueGenericCreate+0x1c>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8006c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
xQueueGenericCreate():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:364 (discriminator 1)
 8006c5a:	e7fe      	b.n	8006c5a <xQueueGenericCreate+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:375
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c5c:	4348      	muls	r0, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:378
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006c5e:	3050      	adds	r0, #80	; 0x50
 8006c60:	f7f9 fbca 	bl	80003f8 <pvPortMalloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:380
		if( pxNewQueue != NULL )
 8006c64:	4604      	mov	r4, r0
 8006c66:	b158      	cbz	r0, 8006c80 <xQueueGenericCreate+0x40>
prvInitialiseNewQueue():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:414
	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c68:	b165      	cbz	r5, 8006c84 <xQueueGenericCreate+0x44>
xQueueGenericCreate():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:384
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006c6a:	f100 0350 	add.w	r3, r0, #80	; 0x50
prvInitialiseNewQueue():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:425
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c6e:	6023      	str	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:432
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c70:	2101      	movs	r1, #1
 8006c72:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:431
	pxNewQueue->uxItemSize = uxItemSize;
 8006c74:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:432
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c78:	f7ff ffa2 	bl	8006bc0 <xQueueGenericReset>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:436
		pxNewQueue->ucQueueType = ucQueueType;
 8006c7c:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
xQueueGenericCreate():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:403
	}
 8006c80:	4620      	mov	r0, r4
 8006c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
prvInitialiseNewQueue():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:414
	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c84:	4603      	mov	r3, r0
 8006c86:	e7f2      	b.n	8006c6e <xQueueGenericCreate+0x2e>

08006c88 <xQueueCreateCountingSemaphore>:
xQueueCreateCountingSemaphore():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:700
	{
 8006c88:	b510      	push	{r4, lr}
 8006c8a:	460c      	mov	r4, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:703
		configASSERT( uxMaxCount != 0 );
 8006c8c:	b940      	cbnz	r0, 8006ca0 <xQueueCreateCountingSemaphore+0x18>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8006c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
xQueueCreateCountingSemaphore():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:703 (discriminator 1)
 8006c9e:	e7fe      	b.n	8006c9e <xQueueCreateCountingSemaphore+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:704 (discriminator 2)
		configASSERT( uxInitialCount <= uxMaxCount );
 8006ca0:	4288      	cmp	r0, r1
 8006ca2:	d208      	bcs.n	8006cb6 <xQueueCreateCountingSemaphore+0x2e>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8006ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca8:	f383 8811 	msr	BASEPRI, r3
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	f3bf 8f4f 	dsb	sy
xQueueCreateCountingSemaphore():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:704 (discriminator 2)
 8006cb4:	e7fe      	b.n	8006cb4 <xQueueCreateCountingSemaphore+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:706 (discriminator 2)
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	2100      	movs	r1, #0
 8006cba:	f7ff ffc1 	bl	8006c40 <xQueueGenericCreate>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:708 (discriminator 2)
		if( xHandle != NULL )
 8006cbe:	b100      	cbz	r0, 8006cc2 <xQueueCreateCountingSemaphore+0x3a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:710
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006cc0:	6384      	str	r4, [r0, #56]	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:720
	}
 8006cc2:	bd10      	pop	{r4, pc}

08006cc4 <xQueueGenericSend>:
xQueueGenericSend():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:726
{
 8006cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc8:	4688      	mov	r8, r1
 8006cca:	9201      	str	r2, [sp, #4]
 8006ccc:	461f      	mov	r7, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:731
	configASSERT( pxQueue );
 8006cce:	4604      	mov	r4, r0
 8006cd0:	b940      	cbnz	r0, 8006ce4 <xQueueGenericSend+0x20>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8006cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd6:	f383 8811 	msr	BASEPRI, r3
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	f3bf 8f4f 	dsb	sy
xQueueGenericSend():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:731 (discriminator 1)
 8006ce2:	e7fe      	b.n	8006ce2 <xQueueGenericSend+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:732 (discriminator 2)
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ce4:	b951      	cbnz	r1, 8006cfc <xQueueGenericSend+0x38>
 8006ce6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006ce8:	b143      	cbz	r3, 8006cfc <xQueueGenericSend+0x38>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8006cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cee:	f383 8811 	msr	BASEPRI, r3
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	f3bf 8f4f 	dsb	sy
xQueueGenericSend():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:732 (discriminator 2)
 8006cfa:	e7fe      	b.n	8006cfa <xQueueGenericSend+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:733 (discriminator 8)
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cfc:	2f02      	cmp	r7, #2
 8006cfe:	d10b      	bne.n	8006d18 <xQueueGenericSend+0x54>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:733 (discriminator 2)
 8006d00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d008      	beq.n	8006d18 <xQueueGenericSend+0x54>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8006d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
xQueueGenericSend():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:733 (discriminator 3)
 8006d16:	e7fe      	b.n	8006d16 <xQueueGenericSend+0x52>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:736 (discriminator 8)
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d18:	f001 f860 	bl	8007ddc <xTaskGetSchedulerState>
 8006d1c:	4606      	mov	r6, r0
 8006d1e:	b950      	cbnz	r0, 8006d36 <xQueueGenericSend+0x72>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:736 (discriminator 2)
 8006d20:	9b01      	ldr	r3, [sp, #4]
 8006d22:	b14b      	cbz	r3, 8006d38 <xQueueGenericSend+0x74>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8006d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d28:	f383 8811 	msr	BASEPRI, r3
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f3bf 8f4f 	dsb	sy
xQueueGenericSend():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:736 (discriminator 4)
 8006d34:	e7fe      	b.n	8006d34 <xQueueGenericSend+0x70>
 8006d36:	2600      	movs	r6, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:876 (discriminator 8)
		prvLockQueue( pxQueue );
 8006d38:	f04f 0900 	mov.w	r9, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:900 (discriminator 8)
					portYIELD_WITHIN_API();
 8006d3c:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006e24 <xQueueGenericSend+0x160>
 8006d40:	e037      	b.n	8006db2 <xQueueGenericSend+0xee>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:845
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d42:	9d01      	ldr	r5, [sp, #4]
 8006d44:	b91d      	cbnz	r5, 8006d4e <xQueueGenericSend+0x8a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:849
					taskEXIT_CRITICAL();
 8006d46:	f7f9 fde7 	bl	8000918 <vPortExitCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:917
			return errQUEUE_FULL;
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	e050      	b.n	8006df0 <xQueueGenericSend+0x12c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:856
				else if( xEntryTimeSet == pdFALSE )
 8006d4e:	b916      	cbnz	r6, 8006d56 <xQueueGenericSend+0x92>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:860
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d50:	a802      	add	r0, sp, #8
 8006d52:	f000 ff4f 	bl	8007bf4 <vTaskInternalSetTimeOutState>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:870
		taskEXIT_CRITICAL();
 8006d56:	f7f9 fddf 	bl	8000918 <vPortExitCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:875
		vTaskSuspendAll();
 8006d5a:	f000 fd75 	bl	8007848 <vTaskSuspendAll>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:876
		prvLockQueue( pxQueue );
 8006d5e:	f7f9 fdb9 	bl	80008d4 <vPortEnterCritical>
 8006d62:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006d66:	2bff      	cmp	r3, #255	; 0xff
 8006d68:	d101      	bne.n	8006d6e <xQueueGenericSend+0xaa>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:876 (discriminator 1)
 8006d6a:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:876 (discriminator 3)
 8006d6e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006d72:	2bff      	cmp	r3, #255	; 0xff
 8006d74:	d101      	bne.n	8006d7a <xQueueGenericSend+0xb6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:876 (discriminator 4)
 8006d76:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:876 (discriminator 6)
 8006d7a:	f7f9 fdcd 	bl	8000918 <vPortExitCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:879 (discriminator 6)
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d7e:	a901      	add	r1, sp, #4
 8006d80:	a802      	add	r0, sp, #8
 8006d82:	f000 ff43 	bl	8007c0c <xTaskCheckForTimeOut>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	d146      	bne.n	8006e18 <xQueueGenericSend+0x154>
prvIsQueueFull():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2299

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d8a:	f7f9 fda3 	bl	80008d4 <vPortEnterCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2301
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d8e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006d90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d12f      	bne.n	8006df6 <xQueueGenericSend+0x132>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2310
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8006d96:	f7f9 fdbf 	bl	8000918 <vPortExitCritical>
xQueueGenericSend():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:884
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d9a:	9901      	ldr	r1, [sp, #4]
 8006d9c:	f104 0010 	add.w	r0, r4, #16
 8006da0:	f000 fece 	bl	8007b40 <vTaskPlaceOnEventList>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:891
				prvUnlockQueue( pxQueue );
 8006da4:	4620      	mov	r0, r4
 8006da6:	f7ff fed2 	bl	8006b4e <prvUnlockQueue>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:898
				if( xTaskResumeAll() == pdFALSE )
 8006daa:	f000 fdf5 	bl	8007998 <xTaskResumeAll>
 8006dae:	b350      	cbz	r0, 8006e06 <xQueueGenericSend+0x142>
 8006db0:	2601      	movs	r6, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:746 (discriminator 8)
		taskENTER_CRITICAL();
 8006db2:	f7f9 fd8f 	bl	80008d4 <vPortEnterCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:752 (discriminator 8)
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006db6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006db8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d301      	bcc.n	8006dc2 <xQueueGenericSend+0xfe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:752 (discriminator 1)
 8006dbe:	2f02      	cmp	r7, #2
 8006dc0:	d1bf      	bne.n	8006d42 <xQueueGenericSend+0x7e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:755
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006dc2:	463a      	mov	r2, r7
 8006dc4:	4641      	mov	r1, r8
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f7ff fe77 	bl	8006aba <prvCopyDataToQueue>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:810
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dce:	b11b      	cbz	r3, 8006dd8 <xQueueGenericSend+0x114>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:812
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dd0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006dd4:	f000 fecc 	bl	8007b70 <xTaskRemoveFromEventList>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:825
					else if( xYieldRequired != pdFALSE )
 8006dd8:	b138      	cbz	r0, 8006dea <xQueueGenericSend+0x126>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:831
						queueYIELD_IF_USING_PREEMPTION();
 8006dda:	4b12      	ldr	r3, [pc, #72]	; (8006e24 <xQueueGenericSend+0x160>)
 8006ddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de0:	601a      	str	r2, [r3, #0]
 8006de2:	f3bf 8f4f 	dsb	sy
 8006de6:	f3bf 8f6f 	isb	sy
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:840
				taskEXIT_CRITICAL();
 8006dea:	f7f9 fd95 	bl	8000918 <vPortExitCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:841
				return pdPASS;
 8006dee:	2001      	movs	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:920
}
 8006df0:	b004      	add	sp, #16
 8006df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
prvIsQueueFull():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2310
	taskEXIT_CRITICAL();
 8006df6:	f7f9 fd8f 	bl	8000918 <vPortExitCritical>
xQueueGenericSend():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:906
				prvUnlockQueue( pxQueue );
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	f7ff fea7 	bl	8006b4e <prvUnlockQueue>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:907
				( void ) xTaskResumeAll();
 8006e00:	f000 fdca 	bl	8007998 <xTaskResumeAll>
 8006e04:	e7d4      	b.n	8006db0 <xQueueGenericSend+0xec>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:900
					portYIELD_WITHIN_API();
 8006e06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e0a:	f8ca 3000 	str.w	r3, [sl]
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	e7cb      	b.n	8006db0 <xQueueGenericSend+0xec>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:913
			prvUnlockQueue( pxQueue );
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f7ff fe98 	bl	8006b4e <prvUnlockQueue>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:914
			( void ) xTaskResumeAll();
 8006e1e:	f000 fdbb 	bl	8007998 <xTaskResumeAll>
 8006e22:	e792      	b.n	8006d4a <xQueueGenericSend+0x86>
 8006e24:	e000ed04 	.word	0xe000ed04

08006e28 <xQueueCreateMutex>:
xQueueCreateMutex():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:483
	{
 8006e28:	b570      	push	{r4, r5, r6, lr}
 8006e2a:	4606      	mov	r6, r0
xQueueGenericCreate():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:378
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006e2c:	2050      	movs	r0, #80	; 0x50
 8006e2e:	f7f9 fae3 	bl	80003f8 <pvPortMalloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:380
		if( pxNewQueue != NULL )
 8006e32:	4604      	mov	r4, r0
 8006e34:	b188      	cbz	r0, 8006e5a <xQueueCreateMutex+0x32>
prvInitialiseNewQueue():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:431
	pxNewQueue->uxItemSize = uxItemSize;
 8006e36:	2500      	movs	r5, #0
 8006e38:	2101      	movs	r1, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:420
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e3a:	6020      	str	r0, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:431
	pxNewQueue->uxItemSize = uxItemSize;
 8006e3c:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:432
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e40:	f7ff febe 	bl	8006bc0 <xQueueGenericReset>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:436
		pxNewQueue->ucQueueType = ucQueueType;
 8006e44:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
prvInitialiseMutex():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:464
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8006e48:	60e5      	str	r5, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:469
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006e4a:	462b      	mov	r3, r5
 8006e4c:	462a      	mov	r2, r5
 8006e4e:	4629      	mov	r1, r5
 8006e50:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:461
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006e52:	e9c4 5500 	strd	r5, r5, [r4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:469
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006e56:	f7ff ff35 	bl	8006cc4 <xQueueGenericSend>
xQueueCreateMutex():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:491
	}
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	bd70      	pop	{r4, r5, r6, pc}

08006e5e <xQueueGenericSendFromISR>:
xQueueGenericSendFromISR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:924
{
 8006e5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e62:	4689      	mov	r9, r1
 8006e64:	4690      	mov	r8, r2
 8006e66:	461f      	mov	r7, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:929
	configASSERT( pxQueue );
 8006e68:	4604      	mov	r4, r0
 8006e6a:	b940      	cbnz	r0, 8006e7e <xQueueGenericSendFromISR+0x20>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8006e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e70:	f383 8811 	msr	BASEPRI, r3
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	f3bf 8f4f 	dsb	sy
xQueueGenericSendFromISR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:929 (discriminator 1)
 8006e7c:	e7fe      	b.n	8006e7c <xQueueGenericSendFromISR+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:930 (discriminator 2)
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e7e:	b951      	cbnz	r1, 8006e96 <xQueueGenericSendFromISR+0x38>
 8006e80:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006e82:	b143      	cbz	r3, 8006e96 <xQueueGenericSendFromISR+0x38>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8006e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e88:	f383 8811 	msr	BASEPRI, r3
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f3bf 8f4f 	dsb	sy
xQueueGenericSendFromISR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:930 (discriminator 2)
 8006e94:	e7fe      	b.n	8006e94 <xQueueGenericSendFromISR+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:931 (discriminator 8)
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e96:	2f02      	cmp	r7, #2
 8006e98:	d10b      	bne.n	8006eb2 <xQueueGenericSendFromISR+0x54>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:931 (discriminator 2)
 8006e9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d008      	beq.n	8006eb2 <xQueueGenericSendFromISR+0x54>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
xQueueGenericSendFromISR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:931 (discriminator 3)
 8006eb0:	e7fe      	b.n	8006eb0 <xQueueGenericSendFromISR+0x52>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:947 (discriminator 8)
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006eb2:	f7f9 fe29 	bl	8000b08 <vPortValidateInterruptPriority>
ulPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:211 (discriminator 8)
	__asm volatile
 8006eb6:	f3ef 8611 	mrs	r6, BASEPRI
 8006eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
xQueueGenericSendFromISR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:956 (discriminator 8)
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006eca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006ecc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d301      	bcc.n	8006ed6 <xQueueGenericSendFromISR+0x78>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:956 (discriminator 1)
 8006ed2:	2f02      	cmp	r7, #2
 8006ed4:	d122      	bne.n	8006f1c <xQueueGenericSendFromISR+0xbe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:958
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ed6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:967
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006eda:	463a      	mov	r2, r7
 8006edc:	4649      	mov	r1, r9
 8006ede:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:958
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ee0:	b26d      	sxtb	r5, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:967
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ee2:	f7ff fdea 	bl	8006aba <prvCopyDataToQueue>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:971
			if( cTxLock == queueUNLOCKED )
 8006ee6:	1c6b      	adds	r3, r5, #1
 8006ee8:	d113      	bne.n	8006f12 <xQueueGenericSendFromISR+0xb4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1026
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006eec:	b90b      	cbnz	r3, 8006ef2 <xQueueGenericSendFromISR+0x94>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1060
			xReturn = pdPASS;
 8006eee:	2001      	movs	r0, #1
 8006ef0:	e00b      	b.n	8006f0a <xQueueGenericSendFromISR+0xac>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1028
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ef2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006ef6:	f000 fe3b 	bl	8007b70 <xTaskRemoveFromEventList>
 8006efa:	2800      	cmp	r0, #0
 8006efc:	d0f7      	beq.n	8006eee <xQueueGenericSendFromISR+0x90>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1032
							if( pxHigherPriorityTaskWoken != NULL )
 8006efe:	f1b8 0f00 	cmp.w	r8, #0
 8006f02:	d0f4      	beq.n	8006eee <xQueueGenericSendFromISR+0x90>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1034
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f04:	2001      	movs	r0, #1
 8006f06:	f8c8 0000 	str.w	r0, [r8]
vPortSetBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:229
	__asm volatile
 8006f0a:	f386 8811 	msr	BASEPRI, r6
xQueueGenericSendFromISR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1071
}
 8006f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1057
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f12:	3501      	adds	r5, #1
 8006f14:	b26d      	sxtb	r5, r5
 8006f16:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8006f1a:	e7e8      	b.n	8006eee <xQueueGenericSendFromISR+0x90>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1065
			xReturn = errQUEUE_FULL;
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	e7f4      	b.n	8006f0a <xQueueGenericSendFromISR+0xac>

08006f20 <xQueueGiveFromISR>:
xQueueGiveFromISR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1075
{
 8006f20:	b570      	push	{r4, r5, r6, lr}
 8006f22:	460d      	mov	r5, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1086
	configASSERT( pxQueue );
 8006f24:	4604      	mov	r4, r0
 8006f26:	b940      	cbnz	r0, 8006f3a <xQueueGiveFromISR+0x1a>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
	__asm volatile
 8006f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
xQueueGiveFromISR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1086 (discriminator 1)
 8006f38:	e7fe      	b.n	8006f38 <xQueueGiveFromISR+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1090 (discriminator 2)
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f3a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006f3c:	b143      	cbz	r3, 8006f50 <xQueueGiveFromISR+0x30>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8006f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
xQueueGiveFromISR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1090 (discriminator 2)
 8006f4e:	e7fe      	b.n	8006f4e <xQueueGiveFromISR+0x2e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1095 (discriminator 2)
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006f50:	6803      	ldr	r3, [r0, #0]
 8006f52:	b953      	cbnz	r3, 8006f6a <xQueueGiveFromISR+0x4a>
 8006f54:	6843      	ldr	r3, [r0, #4]
 8006f56:	b143      	cbz	r3, 8006f6a <xQueueGiveFromISR+0x4a>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8006f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
xQueueGiveFromISR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1095 (discriminator 3)
 8006f68:	e7fe      	b.n	8006f68 <xQueueGiveFromISR+0x48>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1111 (discriminator 8)
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f6a:	f7f9 fdcd 	bl	8000b08 <vPortValidateInterruptPriority>
ulPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:211 (discriminator 8)
	__asm volatile
 8006f6e:	f3ef 8611 	mrs	r6, BASEPRI
 8006f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
xQueueGiveFromISR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1115 (discriminator 8)
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f82:	6ba2      	ldr	r2, [r4, #56]	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1120 (discriminator 8)
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006f84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d91c      	bls.n	8006fc4 <xQueueGiveFromISR+0xa4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1122
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f8a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1132
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f8e:	3201      	adds	r2, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1122
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f90:	b25b      	sxtb	r3, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1132
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f92:	63a2      	str	r2, [r4, #56]	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1136
			if( cTxLock == queueUNLOCKED )
 8006f94:	1c5a      	adds	r2, r3, #1
 8006f96:	d110      	bne.n	8006fba <xQueueGiveFromISR+0x9a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1191
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f9a:	b90b      	cbnz	r3, 8006fa0 <xQueueGiveFromISR+0x80>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1225
			xReturn = pdPASS;
 8006f9c:	2001      	movs	r0, #1
 8006f9e:	e009      	b.n	8006fb4 <xQueueGiveFromISR+0x94>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1193
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fa0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006fa4:	f000 fde4 	bl	8007b70 <xTaskRemoveFromEventList>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	d0f7      	beq.n	8006f9c <xQueueGiveFromISR+0x7c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1197
							if( pxHigherPriorityTaskWoken != NULL )
 8006fac:	2d00      	cmp	r5, #0
 8006fae:	d0f5      	beq.n	8006f9c <xQueueGiveFromISR+0x7c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1199
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006fb0:	2001      	movs	r0, #1
 8006fb2:	6028      	str	r0, [r5, #0]
vPortSetBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:229
	__asm volatile
 8006fb4:	f386 8811 	msr	BASEPRI, r6
xQueueGiveFromISR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1236
}
 8006fb8:	bd70      	pop	{r4, r5, r6, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1222
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006fba:	3301      	adds	r3, #1
 8006fbc:	b25b      	sxtb	r3, r3
 8006fbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fc2:	e7eb      	b.n	8006f9c <xQueueGiveFromISR+0x7c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1230
			xReturn = errQUEUE_FULL;
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	e7f5      	b.n	8006fb4 <xQueueGiveFromISR+0x94>

08006fc8 <xQueueReceive>:
xQueueReceive():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1240
{
 8006fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006fcc:	b085      	sub	sp, #20
 8006fce:	460f      	mov	r7, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1246
	configASSERT( ( pxQueue ) );
 8006fd0:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1240
{
 8006fd2:	9201      	str	r2, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1246
	configASSERT( ( pxQueue ) );
 8006fd4:	b940      	cbnz	r0, 8006fe8 <xQueueReceive+0x20>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
	__asm volatile
 8006fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
xQueueReceive():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1246 (discriminator 1)
 8006fe6:	e7fe      	b.n	8006fe6 <xQueueReceive+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1250 (discriminator 2)
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fe8:	b951      	cbnz	r1, 8007000 <xQueueReceive+0x38>
 8006fea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006fec:	b143      	cbz	r3, 8007000 <xQueueReceive+0x38>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8006fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
xQueueReceive():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1250 (discriminator 2)
 8006ffe:	e7fe      	b.n	8006ffe <xQueueReceive+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1255 (discriminator 8)
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007000:	f000 feec 	bl	8007ddc <xTaskGetSchedulerState>
 8007004:	4606      	mov	r6, r0
 8007006:	b950      	cbnz	r0, 800701e <xQueueReceive+0x56>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1255 (discriminator 2)
 8007008:	9b01      	ldr	r3, [sp, #4]
 800700a:	b14b      	cbz	r3, 8007020 <xQueueReceive+0x58>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 800700c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007010:	f383 8811 	msr	BASEPRI, r3
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	f3bf 8f4f 	dsb	sy
xQueueReceive():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1255 (discriminator 3)
 800701c:	e7fe      	b.n	800701c <xQueueReceive+0x54>
 800701e:	2600      	movs	r6, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1330 (discriminator 8)
		prvLockQueue( pxQueue );
 8007020:	f04f 0800 	mov.w	r8, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1344 (discriminator 8)
					portYIELD_WITHIN_API();
 8007024:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8007104 <xQueueReceive+0x13c>
 8007028:	e03b      	b.n	80070a2 <xQueueReceive+0xda>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1302
				if( xTicksToWait == ( TickType_t ) 0 )
 800702a:	9d01      	ldr	r5, [sp, #4]
 800702c:	b91d      	cbnz	r5, 8007036 <xQueueReceive+0x6e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1306
					taskEXIT_CRITICAL();
 800702e:	f7f9 fc73 	bl	8000918 <vPortExitCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1369
				return errQUEUE_EMPTY;
 8007032:	2000      	movs	r0, #0
 8007034:	e052      	b.n	80070dc <xQueueReceive+0x114>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1310
				else if( xEntryTimeSet == pdFALSE )
 8007036:	b916      	cbnz	r6, 800703e <xQueueReceive+0x76>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1314
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007038:	a802      	add	r0, sp, #8
 800703a:	f000 fddb 	bl	8007bf4 <vTaskInternalSetTimeOutState>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1324
		taskEXIT_CRITICAL();
 800703e:	f7f9 fc6b 	bl	8000918 <vPortExitCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1329
		vTaskSuspendAll();
 8007042:	f000 fc01 	bl	8007848 <vTaskSuspendAll>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1330
		prvLockQueue( pxQueue );
 8007046:	f7f9 fc45 	bl	80008d4 <vPortEnterCritical>
 800704a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800704e:	2bff      	cmp	r3, #255	; 0xff
 8007050:	d101      	bne.n	8007056 <xQueueReceive+0x8e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1330 (discriminator 1)
 8007052:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1330 (discriminator 3)
 8007056:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800705a:	2bff      	cmp	r3, #255	; 0xff
 800705c:	d101      	bne.n	8007062 <xQueueReceive+0x9a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1330 (discriminator 4)
 800705e:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1330 (discriminator 6)
 8007062:	f7f9 fc59 	bl	8000918 <vPortExitCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1333 (discriminator 6)
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007066:	a901      	add	r1, sp, #4
 8007068:	a802      	add	r0, sp, #8
 800706a:	f000 fdcf 	bl	8007c0c <xTaskCheckForTimeOut>
 800706e:	2800      	cmp	r0, #0
 8007070:	d13d      	bne.n	80070ee <xQueueReceive+0x126>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1337
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007072:	4620      	mov	r0, r4
 8007074:	f7ff fd16 	bl	8006aa4 <prvIsQueueEmpty>
 8007078:	b398      	cbz	r0, 80070e2 <xQueueReceive+0x11a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1340
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800707a:	9901      	ldr	r1, [sp, #4]
 800707c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007080:	f000 fd5e 	bl	8007b40 <vTaskPlaceOnEventList>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1341
				prvUnlockQueue( pxQueue );
 8007084:	4620      	mov	r0, r4
 8007086:	f7ff fd62 	bl	8006b4e <prvUnlockQueue>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1342
				if( xTaskResumeAll() == pdFALSE )
 800708a:	f000 fc85 	bl	8007998 <xTaskResumeAll>
 800708e:	b938      	cbnz	r0, 80070a0 <xQueueReceive+0xd8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1344
					portYIELD_WITHIN_API();
 8007090:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007094:	f8c9 3000 	str.w	r3, [r9]
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	2601      	movs	r6, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1265 (discriminator 8)
		taskENTER_CRITICAL();
 80070a2:	f7f9 fc17 	bl	80008d4 <vPortEnterCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1267 (discriminator 8)
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070a6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1271 (discriminator 8)
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070a8:	2d00      	cmp	r5, #0
 80070aa:	d0be      	beq.n	800702a <xQueueReceive+0x62>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1276
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070ac:	3d01      	subs	r5, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1274
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070ae:	4639      	mov	r1, r7
 80070b0:	4620      	mov	r0, r4
 80070b2:	f7ff fd37 	bl	8006b24 <prvCopyDataFromQueue>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1276
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070b6:	63a5      	str	r5, [r4, #56]	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1281
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070b8:	6923      	ldr	r3, [r4, #16]
 80070ba:	b163      	cbz	r3, 80070d6 <xQueueReceive+0x10e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1283
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070bc:	f104 0010 	add.w	r0, r4, #16
 80070c0:	f000 fd56 	bl	8007b70 <xTaskRemoveFromEventList>
 80070c4:	b138      	cbz	r0, 80070d6 <xQueueReceive+0x10e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1285
						queueYIELD_IF_USING_PREEMPTION();
 80070c6:	4b0f      	ldr	r3, [pc, #60]	; (8007104 <xQueueReceive+0x13c>)
 80070c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	f3bf 8f6f 	isb	sy
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1297
				taskEXIT_CRITICAL();
 80070d6:	f7f9 fc1f 	bl	8000918 <vPortExitCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1298
				return pdPASS;
 80070da:	2001      	movs	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1377
}
 80070dc:	b005      	add	sp, #20
 80070de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1355
				prvUnlockQueue( pxQueue );
 80070e2:	4620      	mov	r0, r4
 80070e4:	f7ff fd33 	bl	8006b4e <prvUnlockQueue>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1356
				( void ) xTaskResumeAll();
 80070e8:	f000 fc56 	bl	8007998 <xTaskResumeAll>
 80070ec:	e7d8      	b.n	80070a0 <xQueueReceive+0xd8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1363
			prvUnlockQueue( pxQueue );
 80070ee:	4620      	mov	r0, r4
 80070f0:	f7ff fd2d 	bl	8006b4e <prvUnlockQueue>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1364
			( void ) xTaskResumeAll();
 80070f4:	f000 fc50 	bl	8007998 <xTaskResumeAll>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1366
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070f8:	4620      	mov	r0, r4
 80070fa:	f7ff fcd3 	bl	8006aa4 <prvIsQueueEmpty>
 80070fe:	2800      	cmp	r0, #0
 8007100:	d0ce      	beq.n	80070a0 <xQueueReceive+0xd8>
 8007102:	e796      	b.n	8007032 <xQueueReceive+0x6a>
 8007104:	e000ed04 	.word	0xe000ed04

08007108 <xQueueSemaphoreTake>:
xQueueSemaphoreTake():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1381
{
 8007108:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1391
	configASSERT( ( pxQueue ) );
 800710c:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1381
{
 800710e:	9101      	str	r1, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1391
	configASSERT( ( pxQueue ) );
 8007110:	b940      	cbnz	r0, 8007124 <xQueueSemaphoreTake+0x1c>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8007112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
xQueueSemaphoreTake():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1391 (discriminator 1)
 8007122:	e7fe      	b.n	8007122 <xQueueSemaphoreTake+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1395 (discriminator 2)
	configASSERT( pxQueue->uxItemSize == 0 );
 8007124:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8007126:	b145      	cbz	r5, 800713a <xQueueSemaphoreTake+0x32>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8007128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
xQueueSemaphoreTake():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1395 (discriminator 2)
 8007138:	e7fe      	b.n	8007138 <xQueueSemaphoreTake+0x30>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1400 (discriminator 2)
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800713a:	f000 fe4f 	bl	8007ddc <xTaskGetSchedulerState>
 800713e:	4606      	mov	r6, r0
 8007140:	b950      	cbnz	r0, 8007158 <xQueueSemaphoreTake+0x50>
 8007142:	9b01      	ldr	r3, [sp, #4]
 8007144:	b16b      	cbz	r3, 8007162 <xQueueSemaphoreTake+0x5a>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8007146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714a:	f383 8811 	msr	BASEPRI, r3
 800714e:	f3bf 8f6f 	isb	sy
 8007152:	f3bf 8f4f 	dsb	sy
xQueueSemaphoreTake():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1400 (discriminator 3)
 8007156:	e7fe      	b.n	8007156 <xQueueSemaphoreTake+0x4e>
 8007158:	462e      	mov	r6, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1502 (discriminator 8)
		prvLockQueue( pxQueue );
 800715a:	2700      	movs	r7, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1536 (discriminator 8)
					portYIELD_WITHIN_API();
 800715c:	f8df 812c 	ldr.w	r8, [pc, #300]	; 800728c <xQueueSemaphoreTake+0x184>
 8007160:	e051      	b.n	8007206 <xQueueSemaphoreTake+0xfe>
 8007162:	4605      	mov	r5, r0
 8007164:	e7f9      	b.n	800715a <xQueueSemaphoreTake+0x52>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1465
				if( xTicksToWait == ( TickType_t ) 0 )
 8007166:	9b01      	ldr	r3, [sp, #4]
 8007168:	b963      	cbnz	r3, 8007184 <xQueueSemaphoreTake+0x7c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1472
						configASSERT( xInheritanceOccurred == pdFALSE );
 800716a:	b145      	cbz	r5, 800717e <xQueueSemaphoreTake+0x76>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 800716c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007170:	f383 8811 	msr	BASEPRI, r3
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	f3bf 8f4f 	dsb	sy
xQueueSemaphoreTake():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1472 (discriminator 4)
 800717c:	e7fe      	b.n	800717c <xQueueSemaphoreTake+0x74>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1478 (discriminator 2)
					taskEXIT_CRITICAL();
 800717e:	f7f9 fbcb 	bl	8000918 <vPortExitCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1480 (discriminator 2)
					return errQUEUE_EMPTY;
 8007182:	e05e      	b.n	8007242 <xQueueSemaphoreTake+0x13a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1482
				else if( xEntryTimeSet == pdFALSE )
 8007184:	b916      	cbnz	r6, 800718c <xQueueSemaphoreTake+0x84>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1486
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007186:	a802      	add	r0, sp, #8
 8007188:	f000 fd34 	bl	8007bf4 <vTaskInternalSetTimeOutState>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1496
		taskEXIT_CRITICAL();
 800718c:	f7f9 fbc4 	bl	8000918 <vPortExitCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1501
		vTaskSuspendAll();
 8007190:	f000 fb5a 	bl	8007848 <vTaskSuspendAll>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1502
		prvLockQueue( pxQueue );
 8007194:	f7f9 fb9e 	bl	80008d4 <vPortEnterCritical>
 8007198:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800719c:	2bff      	cmp	r3, #255	; 0xff
 800719e:	d101      	bne.n	80071a4 <xQueueSemaphoreTake+0x9c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1502 (discriminator 1)
 80071a0:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1502 (discriminator 3)
 80071a4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80071a8:	2bff      	cmp	r3, #255	; 0xff
 80071aa:	d101      	bne.n	80071b0 <xQueueSemaphoreTake+0xa8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1502 (discriminator 4)
 80071ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1502 (discriminator 6)
 80071b0:	f7f9 fbb2 	bl	8000918 <vPortExitCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1505 (discriminator 6)
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071b4:	a901      	add	r1, sp, #4
 80071b6:	a802      	add	r0, sp, #8
 80071b8:	f000 fd28 	bl	8007c0c <xTaskCheckForTimeOut>
 80071bc:	2800      	cmp	r0, #0
 80071be:	d14a      	bne.n	8007256 <xQueueSemaphoreTake+0x14e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1511
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071c0:	4620      	mov	r0, r4
 80071c2:	f7ff fc6f 	bl	8006aa4 <prvIsQueueEmpty>
 80071c6:	2800      	cmp	r0, #0
 80071c8:	d03f      	beq.n	800724a <xQueueSemaphoreTake+0x142>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1517
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	b93b      	cbnz	r3, 80071de <xQueueSemaphoreTake+0xd6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1519
						taskENTER_CRITICAL();
 80071ce:	f7f9 fb81 	bl	80008d4 <vPortEnterCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1521
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80071d2:	6860      	ldr	r0, [r4, #4]
 80071d4:	f000 fe12 	bl	8007dfc <xTaskPriorityInherit>
 80071d8:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1523
						taskEXIT_CRITICAL();
 80071da:	f7f9 fb9d 	bl	8000918 <vPortExitCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1532
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80071de:	9901      	ldr	r1, [sp, #4]
 80071e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80071e4:	f000 fcac 	bl	8007b40 <vTaskPlaceOnEventList>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1533
				prvUnlockQueue( pxQueue );
 80071e8:	4620      	mov	r0, r4
 80071ea:	f7ff fcb0 	bl	8006b4e <prvUnlockQueue>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1534
				if( xTaskResumeAll() == pdFALSE )
 80071ee:	f000 fbd3 	bl	8007998 <xTaskResumeAll>
 80071f2:	b938      	cbnz	r0, 8007204 <xQueueSemaphoreTake+0xfc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1536
					portYIELD_WITHIN_API();
 80071f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80071f8:	f8c8 3000 	str.w	r3, [r8]
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	2601      	movs	r6, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1411 (discriminator 8)
		taskENTER_CRITICAL();
 8007206:	f7f9 fb65 	bl	80008d4 <vPortEnterCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1415 (discriminator 8)
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800720a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1419 (discriminator 8)
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0aa      	beq.n	8007166 <xQueueSemaphoreTake+0x5e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1425
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007210:	3b01      	subs	r3, #1
 8007212:	63a3      	str	r3, [r4, #56]	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1429
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007214:	6823      	ldr	r3, [r4, #0]
 8007216:	b913      	cbnz	r3, 800721e <xQueueSemaphoreTake+0x116>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1433
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007218:	f000 ff50 	bl	80080bc <pvTaskIncrementMutexHeldCount>
 800721c:	6060      	str	r0, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1444
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800721e:	6923      	ldr	r3, [r4, #16]
 8007220:	b163      	cbz	r3, 800723c <xQueueSemaphoreTake+0x134>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1446
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007222:	f104 0010 	add.w	r0, r4, #16
 8007226:	f000 fca3 	bl	8007b70 <xTaskRemoveFromEventList>
 800722a:	b138      	cbz	r0, 800723c <xQueueSemaphoreTake+0x134>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1448
						queueYIELD_IF_USING_PREEMPTION();
 800722c:	4b17      	ldr	r3, [pc, #92]	; (800728c <xQueueSemaphoreTake+0x184>)
 800722e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	f3bf 8f6f 	isb	sy
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1461
				return pdPASS;
 800723c:	2501      	movs	r5, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1460
				taskEXIT_CRITICAL();
 800723e:	f7f9 fb6b 	bl	8000918 <vPortExitCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1596
}
 8007242:	4628      	mov	r0, r5
 8007244:	b004      	add	sp, #16
 8007246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1547
				prvUnlockQueue( pxQueue );
 800724a:	4620      	mov	r0, r4
 800724c:	f7ff fc7f 	bl	8006b4e <prvUnlockQueue>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1548
				( void ) xTaskResumeAll();
 8007250:	f000 fba2 	bl	8007998 <xTaskResumeAll>
 8007254:	e7d6      	b.n	8007204 <xQueueSemaphoreTake+0xfc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1554
			prvUnlockQueue( pxQueue );
 8007256:	4620      	mov	r0, r4
 8007258:	f7ff fc79 	bl	8006b4e <prvUnlockQueue>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1555
			( void ) xTaskResumeAll();
 800725c:	f000 fb9c 	bl	8007998 <xTaskResumeAll>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1561
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007260:	4620      	mov	r0, r4
 8007262:	f7ff fc1f 	bl	8006aa4 <prvIsQueueEmpty>
 8007266:	2800      	cmp	r0, #0
 8007268:	d0cc      	beq.n	8007204 <xQueueSemaphoreTake+0xfc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1568
					if( xInheritanceOccurred != pdFALSE )
 800726a:	2d00      	cmp	r5, #0
 800726c:	d0e9      	beq.n	8007242 <xQueueSemaphoreTake+0x13a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1570
						taskENTER_CRITICAL();
 800726e:	f7f9 fb31 	bl	80008d4 <vPortEnterCritical>
prvGetDisinheritPriorityAfterTimeout():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2024
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007272:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007274:	b119      	cbz	r1, 800727e <xQueueSemaphoreTake+0x176>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2026
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007276:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007278:	6819      	ldr	r1, [r3, #0]
 800727a:	f1c1 0107 	rsb	r1, r1, #7
xQueueSemaphoreTake():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1580
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800727e:	6860      	ldr	r0, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1588
				return errQUEUE_EMPTY;
 8007280:	2500      	movs	r5, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1580
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8007282:	f000 fe5d 	bl	8007f40 <vTaskPriorityDisinheritAfterTimeout>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1582
						taskEXIT_CRITICAL();
 8007286:	f7f9 fb47 	bl	8000918 <vPortExitCritical>
 800728a:	e7da      	b.n	8007242 <xQueueSemaphoreTake+0x13a>
 800728c:	e000ed04 	.word	0xe000ed04

08007290 <xQueueReceiveFromISR>:
xQueueReceiveFromISR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1750
{
 8007290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007294:	4689      	mov	r9, r1
 8007296:	4690      	mov	r8, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1755
	configASSERT( pxQueue );
 8007298:	4605      	mov	r5, r0
 800729a:	b940      	cbnz	r0, 80072ae <xQueueReceiveFromISR+0x1e>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 800729c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a0:	f383 8811 	msr	BASEPRI, r3
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	f3bf 8f4f 	dsb	sy
xQueueReceiveFromISR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1755 (discriminator 1)
 80072ac:	e7fe      	b.n	80072ac <xQueueReceiveFromISR+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1756 (discriminator 2)
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072ae:	b951      	cbnz	r1, 80072c6 <xQueueReceiveFromISR+0x36>
 80072b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80072b2:	b143      	cbz	r3, 80072c6 <xQueueReceiveFromISR+0x36>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 80072b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b8:	f383 8811 	msr	BASEPRI, r3
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f3bf 8f4f 	dsb	sy
xQueueReceiveFromISR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1756 (discriminator 2)
 80072c4:	e7fe      	b.n	80072c4 <xQueueReceiveFromISR+0x34>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1772 (discriminator 8)
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072c6:	f7f9 fc1f 	bl	8000b08 <vPortValidateInterruptPriority>
ulPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:211 (discriminator 8)
	__asm volatile
 80072ca:	f3ef 8711 	mrs	r7, BASEPRI
 80072ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d2:	f383 8811 	msr	BASEPRI, r3
 80072d6:	f3bf 8f6f 	isb	sy
 80072da:	f3bf 8f4f 	dsb	sy
xQueueReceiveFromISR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1776 (discriminator 8)
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072de:	6bac      	ldr	r4, [r5, #56]	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1779 (discriminator 8)
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072e0:	b31c      	cbz	r4, 800732a <xQueueReceiveFromISR+0x9a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1781
			const int8_t cRxLock = pxQueue->cRxLock;
 80072e2:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1785
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80072e6:	4649      	mov	r1, r9
 80072e8:	4628      	mov	r0, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1786
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80072ea:	3c01      	subs	r4, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1781
			const int8_t cRxLock = pxQueue->cRxLock;
 80072ec:	b276      	sxtb	r6, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1785
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80072ee:	f7ff fc19 	bl	8006b24 <prvCopyDataFromQueue>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1786
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80072f2:	63ac      	str	r4, [r5, #56]	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1792
			if( cRxLock == queueUNLOCKED )
 80072f4:	1c73      	adds	r3, r6, #1
 80072f6:	d113      	bne.n	8007320 <xQueueReceiveFromISR+0x90>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1794
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072f8:	692b      	ldr	r3, [r5, #16]
 80072fa:	b90b      	cbnz	r3, 8007300 <xQueueReceiveFromISR+0x70>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1826
			xReturn = pdPASS;
 80072fc:	2001      	movs	r0, #1
 80072fe:	e00b      	b.n	8007318 <xQueueReceiveFromISR+0x88>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1796
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007300:	f105 0010 	add.w	r0, r5, #16
 8007304:	f000 fc34 	bl	8007b70 <xTaskRemoveFromEventList>
 8007308:	2800      	cmp	r0, #0
 800730a:	d0f7      	beq.n	80072fc <xQueueReceiveFromISR+0x6c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1800
						if( pxHigherPriorityTaskWoken != NULL )
 800730c:	f1b8 0f00 	cmp.w	r8, #0
 8007310:	d0f4      	beq.n	80072fc <xQueueReceiveFromISR+0x6c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1802
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007312:	2001      	movs	r0, #1
 8007314:	f8c8 0000 	str.w	r0, [r8]
vPortSetBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:229
	__asm volatile
 8007318:	f387 8811 	msr	BASEPRI, r7
xQueueReceiveFromISR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1837
}
 800731c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1823
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007320:	3601      	adds	r6, #1
 8007322:	b276      	sxtb	r6, r6
 8007324:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8007328:	e7e8      	b.n	80072fc <xQueueReceiveFromISR+0x6c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1830
			xReturn = pdFAIL;
 800732a:	4620      	mov	r0, r4
 800732c:	e7f4      	b.n	8007318 <xQueueReceiveFromISR+0x88>

0800732e <uxQueueMessagesWaiting>:
uxQueueMessagesWaiting():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1895
{
 800732e:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1898
	configASSERT( xQueue );
 8007330:	4604      	mov	r4, r0
 8007332:	b940      	cbnz	r0, 8007346 <uxQueueMessagesWaiting+0x18>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
	__asm volatile
 8007334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007338:	f383 8811 	msr	BASEPRI, r3
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	f3bf 8f4f 	dsb	sy
uxQueueMessagesWaiting():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1898 (discriminator 1)
 8007344:	e7fe      	b.n	8007344 <uxQueueMessagesWaiting+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1900 (discriminator 2)
	taskENTER_CRITICAL();
 8007346:	f7f9 fac5 	bl	80008d4 <vPortEnterCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1902 (discriminator 2)
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800734a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1904 (discriminator 2)
	taskEXIT_CRITICAL();
 800734c:	f7f9 fae4 	bl	8000918 <vPortExitCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1907 (discriminator 2)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007350:	4620      	mov	r0, r4
 8007352:	bd10      	pop	{r4, pc}

08007354 <uxQueueMessagesWaitingFromISR>:
uxQueueMessagesWaitingFromISR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1932
	configASSERT( xQueue );
 8007354:	b940      	cbnz	r0, 8007368 <uxQueueMessagesWaitingFromISR+0x14>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8007356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
uxQueueMessagesWaitingFromISR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1932 (discriminator 1)
 8007366:	e7fe      	b.n	8007366 <uxQueueMessagesWaitingFromISR+0x12>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1934 (discriminator 2)
	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007368:	6b80      	ldr	r0, [r0, #56]	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1937 (discriminator 2)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800736a:	4770      	bx	lr

0800736c <vQueueUnregisterQueue>:
vQueueUnregisterQueue():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2674
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800736c:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2676
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800736e:	4909      	ldr	r1, [pc, #36]	; (8007394 <vQueueUnregisterQueue+0x28>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2669
	{
 8007370:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2676
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007372:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8007376:	00dc      	lsls	r4, r3, #3
 8007378:	4282      	cmp	r2, r0
 800737a:	d106      	bne.n	800738a <vQueueUnregisterQueue+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2679
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800737c:	4a06      	ldr	r2, [pc, #24]	; (8007398 <vQueueUnregisterQueue+0x2c>)
 800737e:	2100      	movs	r1, #0
 8007380:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2684

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007384:	4422      	add	r2, r4
 8007386:	6051      	str	r1, [r2, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2693
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007388:	bd10      	pop	{r4, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:2674 (discriminator 2)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800738a:	3301      	adds	r3, #1
 800738c:	2b08      	cmp	r3, #8
 800738e:	d1f0      	bne.n	8007372 <vQueueUnregisterQueue+0x6>
 8007390:	e7fa      	b.n	8007388 <vQueueUnregisterQueue+0x1c>
 8007392:	bf00      	nop
 8007394:	200080b4 	.word	0x200080b4
 8007398:	200080b0 	.word	0x200080b0

0800739c <vQueueDelete>:
vQueueDelete():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1941
{
 800739c:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1944
	configASSERT( pxQueue );
 800739e:	b940      	cbnz	r0, 80073b2 <vQueueDelete+0x16>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 80073a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
vQueueDelete():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1944 (discriminator 1)
 80073b0:	e7fe      	b.n	80073b0 <vQueueDelete+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1949 (discriminator 2)
		vQueueUnregisterQueue( pxQueue );
 80073b2:	f7ff ffdb 	bl	800736c <vQueueUnregisterQueue>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1979 (discriminator 2)
}
 80073b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/queue.c:1957 (discriminator 2)
		vPortFree( pxQueue );
 80073ba:	f7f9 b8a7 	b.w	800050c <vPortFree>
	...

080073c0 <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3728

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073c0:	4a06      	ldr	r2, [pc, #24]	; (80073dc <prvResetNextTaskUnblockTime+0x1c>)
 80073c2:	6813      	ldr	r3, [r2, #0]
 80073c4:	6819      	ldr	r1, [r3, #0]
 80073c6:	4b06      	ldr	r3, [pc, #24]	; (80073e0 <prvResetNextTaskUnblockTime+0x20>)
 80073c8:	b919      	cbnz	r1, 80073d2 <prvResetNextTaskUnblockTime+0x12>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3734
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80073ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3743
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073ce:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3745
	}
}
 80073d0:	4770      	bx	lr
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3742
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80073d2:	6812      	ldr	r2, [r2, #0]
 80073d4:	68d2      	ldr	r2, [r2, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3743
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073d6:	68d2      	ldr	r2, [r2, #12]
 80073d8:	6852      	ldr	r2, [r2, #4]
 80073da:	e7f8      	b.n	80073ce <prvResetNextTaskUnblockTime+0xe>
 80073dc:	20007eb4 	.word	0x20007eb4
 80073e0:	20007f8c 	.word	0x20007f8c

080073e4 <prvAddCurrentTaskToDelayedList.isra.2>:
prvAddCurrentTaskToDelayedList():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4906

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 80073e4:	b570      	push	{r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4909
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073e6:	4b15      	ldr	r3, [pc, #84]	; (800743c <prvAddCurrentTaskToDelayedList.isra.2+0x58>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4906
static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 80073e8:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4922
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073ea:	4e15      	ldr	r6, [pc, #84]	; (8007440 <prvAddCurrentTaskToDelayedList.isra.2+0x5c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4909
const TickType_t xConstTickCount = xTickCount;
 80073ec:	681c      	ldr	r4, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4922
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073ee:	6830      	ldr	r0, [r6, #0]
 80073f0:	3004      	adds	r0, #4
 80073f2:	f000 fea0 	bl	8008136 <uxListRemove>
 80073f6:	4633      	mov	r3, r6
 80073f8:	b940      	cbnz	r0, 800740c <prvAddCurrentTaskToDelayedList.isra.2+0x28>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4926
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80073fa:	6831      	ldr	r1, [r6, #0]
 80073fc:	4811      	ldr	r0, [pc, #68]	; (8007444 <prvAddCurrentTaskToDelayedList.isra.2+0x60>)
 80073fe:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8007400:	2101      	movs	r1, #1
 8007402:	6802      	ldr	r2, [r0, #0]
 8007404:	40b1      	lsls	r1, r6
 8007406:	ea22 0201 	bic.w	r2, r2, r1
 800740a:	6002      	str	r2, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4983
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 800740c:	1964      	adds	r4, r4, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4986

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	6054      	str	r4, [r2, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4988

		if( xTimeToWake < xConstTickCount )
 8007412:	d307      	bcc.n	8007424 <prvAddCurrentTaskToDelayedList.isra.2+0x40>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4991
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007414:	4a0c      	ldr	r2, [pc, #48]	; (8007448 <prvAddCurrentTaskToDelayedList.isra.2+0x64>)
 8007416:	6810      	ldr	r0, [r2, #0]
 8007418:	6819      	ldr	r1, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:5015

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800741a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4991
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800741e:	3104      	adds	r1, #4
 8007420:	f000 be72 	b.w	8008108 <vListInsert>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4996
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007424:	4a09      	ldr	r2, [pc, #36]	; (800744c <prvAddCurrentTaskToDelayedList.isra.2+0x68>)
 8007426:	6810      	ldr	r0, [r2, #0]
 8007428:	6819      	ldr	r1, [r3, #0]
 800742a:	3104      	adds	r1, #4
 800742c:	f000 fe6c 	bl	8008108 <vListInsert>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:5001
			if( xTimeToWake < xNextTaskUnblockTime )
 8007430:	4b07      	ldr	r3, [pc, #28]	; (8007450 <prvAddCurrentTaskToDelayedList.isra.2+0x6c>)
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	4294      	cmp	r4, r2
 8007436:	d200      	bcs.n	800743a <prvAddCurrentTaskToDelayedList.isra.2+0x56>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:5003
				xNextTaskUnblockTime = xTimeToWake;
 8007438:	601c      	str	r4, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:5015
}
 800743a:	bd70      	pop	{r4, r5, r6, pc}
 800743c:	20007fc0 	.word	0x20007fc0
 8007440:	20007eb0 	.word	0x20007eb0
 8007444:	20007f5c 	.word	0x20007f5c
 8007448:	20007eb8 	.word	0x20007eb8
 800744c:	20007eb4 	.word	0x20007eb4
 8007450:	20007f8c 	.word	0x20007f8c

08007454 <prvIdleTask>:
prvIdleTask():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3219
{
 8007454:	b580      	push	{r7, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3260
				taskYIELD();
 8007456:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80074bc <prvIdleTask+0x68>
prvCheckTasksWaitingTermination():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3477
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800745a:	4f14      	ldr	r7, [pc, #80]	; (80074ac <prvIdleTask+0x58>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3473
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800745c:	4c14      	ldr	r4, [pc, #80]	; (80074b0 <prvIdleTask+0x5c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3479
				--uxCurrentNumberOfTasks;
 800745e:	4e15      	ldr	r6, [pc, #84]	; (80074b4 <prvIdleTask+0x60>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3473
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007460:	6823      	ldr	r3, [r4, #0]
 8007462:	b963      	cbnz	r3, 800747e <prvIdleTask+0x2a>
prvIdleTask():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3258
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007464:	4b14      	ldr	r3, [pc, #80]	; (80074b8 <prvIdleTask+0x64>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d9f8      	bls.n	800745e <prvIdleTask+0xa>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3260
				taskYIELD();
 800746c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007470:	f8c8 3000 	str.w	r3, [r8]
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	e7ee      	b.n	800745c <prvIdleTask+0x8>
prvCheckTasksWaitingTermination():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3475
			taskENTER_CRITICAL();
 800747e:	f7f9 fa29 	bl	80008d4 <vPortEnterCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3477
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	68dd      	ldr	r5, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3478
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007486:	1d28      	adds	r0, r5, #4
 8007488:	f000 fe55 	bl	8008136 <uxListRemove>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3479
				--uxCurrentNumberOfTasks;
 800748c:	6833      	ldr	r3, [r6, #0]
 800748e:	3b01      	subs	r3, #1
 8007490:	6033      	str	r3, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3480
				--uxDeletedTasksWaitingCleanUp;
 8007492:	6823      	ldr	r3, [r4, #0]
 8007494:	3b01      	subs	r3, #1
 8007496:	6023      	str	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3482
			taskEXIT_CRITICAL();
 8007498:	f7f9 fa3e 	bl	8000918 <vPortExitCritical>
prvDeleteTCB():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3689
			vPortFree( pxTCB->pxStack );
 800749c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800749e:	f7f9 f835 	bl	800050c <vPortFree>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3690
			vPortFree( pxTCB );
 80074a2:	4628      	mov	r0, r5
 80074a4:	f7f9 f832 	bl	800050c <vPortFree>
 80074a8:	e7da      	b.n	8007460 <prvIdleTask+0xc>
 80074aa:	bf00      	nop
 80074ac:	20007fac 	.word	0x20007fac
 80074b0:	20007f4c 	.word	0x20007f4c
 80074b4:	20007f48 	.word	0x20007f48
 80074b8:	20007ebc 	.word	0x20007ebc
 80074bc:	e000ed04 	.word	0xe000ed04

080074c0 <xTaskCreate>:
xTaskCreate():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:732
	{
 80074c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:766
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074c4:	0096      	lsls	r6, r2, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:732
	{
 80074c6:	4681      	mov	r9, r0
 80074c8:	460d      	mov	r5, r1
 80074ca:	469a      	mov	sl, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:766
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074cc:	4630      	mov	r0, r6
 80074ce:	f7f8 ff93 	bl	80003f8 <pvPortMalloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:768
			if( pxStack != NULL )
 80074d2:	4607      	mov	r7, r0
 80074d4:	2800      	cmp	r0, #0
 80074d6:	f000 80a7 	beq.w	8007628 <xTaskCreate+0x168>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:771
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80074da:	205c      	movs	r0, #92	; 0x5c
 80074dc:	f7f8 ff8c 	bl	80003f8 <pvPortMalloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:773
				if( pxNewTCB != NULL )
 80074e0:	4604      	mov	r4, r0
 80074e2:	2800      	cmp	r0, #0
 80074e4:	f000 809d 	beq.w	8007622 <xTaskCreate+0x162>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:776
					pxNewTCB->pxStack = pxStack;
 80074e8:	6307      	str	r7, [r0, #48]	; 0x30
prvInitialiseNewTask():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:847
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80074ea:	4632      	mov	r2, r6
 80074ec:	21a5      	movs	r1, #165	; 0xa5
 80074ee:	4638      	mov	r0, r7
 80074f0:	f005 fd4c 	bl	800cf8c <memset>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:857
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80074f4:	1e6b      	subs	r3, r5, #1
 80074f6:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:885
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074fa:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80074fe:	350f      	adds	r5, #15
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:887
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007500:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8007504:	f802 1b01 	strb.w	r1, [r2], #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:892
		if( pcName[ x ] == 0x00 )
 8007508:	b109      	cbz	r1, 800750e <xTaskCreate+0x4e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:885
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800750a:	42ab      	cmp	r3, r5
 800750c:	d1f8      	bne.n	8007500 <xTaskCreate+0x40>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:904
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800750e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007510:	f04f 0800 	mov.w	r8, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:925
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007514:	1d27      	adds	r7, r4, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:857
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007516:	3e04      	subs	r6, #4
 8007518:	2d06      	cmp	r5, #6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:904
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800751a:	f884 8043 	strb.w	r8, [r4, #67]	; 0x43
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:925
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800751e:	4638      	mov	r0, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:857
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007520:	445e      	add	r6, fp
 8007522:	bf28      	it	cs
 8007524:	2506      	movcs	r5, #6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:917
	pxNewTCB->uxPriority = uxPriority;
 8007526:	62e5      	str	r5, [r4, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:921
		pxNewTCB->uxMutexesHeld = 0;
 8007528:	e9c4 5813 	strd	r5, r8, [r4, #76]	; 0x4c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:933
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800752c:	f1c5 0507 	rsb	r5, r5, #7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:925
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007530:	f000 fddb 	bl	80080ea <vListInitialiseItem>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:926
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007534:	f104 0018 	add.w	r0, r4, #24
 8007538:	f000 fdd7 	bl	80080ea <vListInitialiseItem>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:976
		pxNewTCB->ulNotifiedValue = 0;
 800753c:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:930
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007540:	6124      	str	r4, [r4, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1004
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007542:	4652      	mov	r2, sl
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:933
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007544:	61a5      	str	r5, [r4, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1004
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007546:	4649      	mov	r1, r9
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:934
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007548:	6264      	str	r4, [r4, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1004
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800754a:	f026 0007 	bic.w	r0, r6, #7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:977
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800754e:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1004
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007552:	f7f9 f997 	bl	8000884 <pxPortInitialiseStack>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1008
	if( ( void * ) pxCreatedTask != NULL )
 8007556:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1004
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007558:	6020      	str	r0, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1008
	if( ( void * ) pxCreatedTask != NULL )
 800755a:	b103      	cbz	r3, 800755e <xTaskCreate+0x9e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1012
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800755c:	601c      	str	r4, [r3, #0]
prvAddNewTaskToReadyList():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1025
	taskENTER_CRITICAL();
 800755e:	f7f9 f9b9 	bl	80008d4 <vPortEnterCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1027
		uxCurrentNumberOfTasks++;
 8007562:	4b38      	ldr	r3, [pc, #224]	; (8007644 <xTaskCreate+0x184>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1028
		if( pxCurrentTCB == NULL )
 8007564:	4e38      	ldr	r6, [pc, #224]	; (8007648 <xTaskCreate+0x188>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1027
		uxCurrentNumberOfTasks++;
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8007688 <xTaskCreate+0x1c8>
 800756c:	3201      	adds	r2, #1
 800756e:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1028
		if( pxCurrentTCB == NULL )
 8007570:	6832      	ldr	r2, [r6, #0]
 8007572:	2a00      	cmp	r2, #0
 8007574:	d15b      	bne.n	800762e <xTaskCreate+0x16e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1032
			pxCurrentTCB = pxNewTCB;
 8007576:	6034      	str	r4, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1034
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d128      	bne.n	80075d0 <xTaskCreate+0x110>
prvInitialiseTaskLists():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3436
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800757e:	4833      	ldr	r0, [pc, #204]	; (800764c <xTaskCreate+0x18c>)
 8007580:	f000 fda8 	bl	80080d4 <vListInitialise>
 8007584:	4832      	ldr	r0, [pc, #200]	; (8007650 <xTaskCreate+0x190>)
 8007586:	f000 fda5 	bl	80080d4 <vListInitialise>
 800758a:	4832      	ldr	r0, [pc, #200]	; (8007654 <xTaskCreate+0x194>)
 800758c:	f000 fda2 	bl	80080d4 <vListInitialise>
 8007590:	4831      	ldr	r0, [pc, #196]	; (8007658 <xTaskCreate+0x198>)
 8007592:	f000 fd9f 	bl	80080d4 <vListInitialise>
 8007596:	4831      	ldr	r0, [pc, #196]	; (800765c <xTaskCreate+0x19c>)
 8007598:	f000 fd9c 	bl	80080d4 <vListInitialise>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3439
	vListInitialise( &xDelayedTaskList1 );
 800759c:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 800768c <xTaskCreate+0x1cc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3436
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075a0:	482f      	ldr	r0, [pc, #188]	; (8007660 <xTaskCreate+0x1a0>)
 80075a2:	f000 fd97 	bl	80080d4 <vListInitialise>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3440
	vListInitialise( &xDelayedTaskList2 );
 80075a6:	4d2f      	ldr	r5, [pc, #188]	; (8007664 <xTaskCreate+0x1a4>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3436
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075a8:	482f      	ldr	r0, [pc, #188]	; (8007668 <xTaskCreate+0x1a8>)
 80075aa:	f000 fd93 	bl	80080d4 <vListInitialise>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3439
	vListInitialise( &xDelayedTaskList1 );
 80075ae:	4648      	mov	r0, r9
 80075b0:	f000 fd90 	bl	80080d4 <vListInitialise>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3440
	vListInitialise( &xDelayedTaskList2 );
 80075b4:	4628      	mov	r0, r5
 80075b6:	f000 fd8d 	bl	80080d4 <vListInitialise>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3441
	vListInitialise( &xPendingReadyList );
 80075ba:	482c      	ldr	r0, [pc, #176]	; (800766c <xTaskCreate+0x1ac>)
 80075bc:	f000 fd8a 	bl	80080d4 <vListInitialise>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3445
		vListInitialise( &xTasksWaitingTermination );
 80075c0:	482b      	ldr	r0, [pc, #172]	; (8007670 <xTaskCreate+0x1b0>)
 80075c2:	f000 fd87 	bl	80080d4 <vListInitialise>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3457
	pxDelayedTaskList = &xDelayedTaskList1;
 80075c6:	4b2b      	ldr	r3, [pc, #172]	; (8007674 <xTaskCreate+0x1b4>)
 80075c8:	f8c3 9000 	str.w	r9, [r3]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3458
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80075cc:	4b2a      	ldr	r3, [pc, #168]	; (8007678 <xTaskCreate+0x1b8>)
 80075ce:	601d      	str	r5, [r3, #0]
prvAddNewTaskToReadyList():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1068
		uxTaskNumber++;
 80075d0:	4a2a      	ldr	r2, [pc, #168]	; (800767c <xTaskCreate+0x1bc>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1078
		prvAddTaskToReadyList( pxNewTCB );
 80075d2:	2501      	movs	r5, #1
 80075d4:	492a      	ldr	r1, [pc, #168]	; (8007680 <xTaskCreate+0x1c0>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1068
		uxTaskNumber++;
 80075d6:	6813      	ldr	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1078
		prvAddTaskToReadyList( pxNewTCB );
 80075d8:	6808      	ldr	r0, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1068
		uxTaskNumber++;
 80075da:	3301      	adds	r3, #1
 80075dc:	6013      	str	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1078
		prvAddTaskToReadyList( pxNewTCB );
 80075de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1073
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80075e0:	6463      	str	r3, [r4, #68]	; 0x44
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1078
		prvAddTaskToReadyList( pxNewTCB );
 80075e2:	fa05 f302 	lsl.w	r3, r5, r2
 80075e6:	4303      	orrs	r3, r0
 80075e8:	2014      	movs	r0, #20
 80075ea:	600b      	str	r3, [r1, #0]
 80075ec:	4639      	mov	r1, r7
 80075ee:	4b17      	ldr	r3, [pc, #92]	; (800764c <xTaskCreate+0x18c>)
 80075f0:	fb00 3002 	mla	r0, r0, r2, r3
 80075f4:	f000 fd7c 	bl	80080f0 <vListInsertEnd>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1082
	taskEXIT_CRITICAL();
 80075f8:	f7f9 f98e 	bl	8000918 <vPortExitCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1084
	if( xSchedulerRunning != pdFALSE )
 80075fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007600:	b163      	cbz	r3, 800761c <xTaskCreate+0x15c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1088
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007602:	6833      	ldr	r3, [r6, #0]
 8007604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007606:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007608:	429a      	cmp	r2, r3
 800760a:	d207      	bcs.n	800761c <xTaskCreate+0x15c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1090
			taskYIELD_IF_USING_PREEMPTION();
 800760c:	4b1d      	ldr	r3, [pc, #116]	; (8007684 <xTaskCreate+0x1c4>)
 800760e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	f3bf 8f4f 	dsb	sy
 8007618:	f3bf 8f6f 	isb	sy
xTaskCreate():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:812
	}
 800761c:	4628      	mov	r0, r5
 800761e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:782
					vPortFree( pxStack );
 8007622:	4638      	mov	r0, r7
 8007624:	f7f8 ff72 	bl	800050c <vPortFree>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:808
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007628:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800762c:	e7f6      	b.n	800761c <xTaskCreate+0x15c>
prvAddNewTaskToReadyList():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1051
			if( xSchedulerRunning == pdFALSE )
 800762e:	f8d8 3000 	ldr.w	r3, [r8]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1cc      	bne.n	80075d0 <xTaskCreate+0x110>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1053
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007636:	6833      	ldr	r3, [r6, #0]
 8007638:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763c:	429a      	cmp	r2, r3
 800763e:	d3c7      	bcc.n	80075d0 <xTaskCreate+0x110>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1055
					pxCurrentTCB = pxNewTCB;
 8007640:	6034      	str	r4, [r6, #0]
 8007642:	e7c5      	b.n	80075d0 <xTaskCreate+0x110>
 8007644:	20007f48 	.word	0x20007f48
 8007648:	20007eb0 	.word	0x20007eb0
 800764c:	20007ebc 	.word	0x20007ebc
 8007650:	20007ed0 	.word	0x20007ed0
 8007654:	20007ee4 	.word	0x20007ee4
 8007658:	20007ef8 	.word	0x20007ef8
 800765c:	20007f0c 	.word	0x20007f0c
 8007660:	20007f20 	.word	0x20007f20
 8007664:	20007f74 	.word	0x20007f74
 8007668:	20007f34 	.word	0x20007f34
 800766c:	20007f94 	.word	0x20007f94
 8007670:	20007fac 	.word	0x20007fac
 8007674:	20007eb4 	.word	0x20007eb4
 8007678:	20007eb8 	.word	0x20007eb8
 800767c:	20007f58 	.word	0x20007f58
 8007680:	20007f5c 	.word	0x20007f5c
 8007684:	e000ed04 	.word	0xe000ed04
 8007688:	20007fa8 	.word	0x20007fa8
 800768c:	20007f60 	.word	0x20007f60

08007690 <vTaskDelete>:
vTaskDelete():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1107
	{
 8007690:	b570      	push	{r4, r5, r6, lr}
 8007692:	4604      	mov	r4, r0
 8007694:	4d2a      	ldr	r5, [pc, #168]	; (8007740 <vTaskDelete+0xb0>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1110
		taskENTER_CRITICAL();
 8007696:	f7f9 f91d 	bl	80008d4 <vPortEnterCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1114
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800769a:	b904      	cbnz	r4, 800769e <vTaskDelete+0xe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1114 (discriminator 1)
 800769c:	682c      	ldr	r4, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1117 (discriminator 4)
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800769e:	1d26      	adds	r6, r4, #4
 80076a0:	4630      	mov	r0, r6
 80076a2:	f000 fd48 	bl	8008136 <uxListRemove>
 80076a6:	b960      	cbnz	r0, 80076c2 <vTaskDelete+0x32>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1119
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80076a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80076aa:	2114      	movs	r1, #20
 80076ac:	4b25      	ldr	r3, [pc, #148]	; (8007744 <vTaskDelete+0xb4>)
 80076ae:	4341      	muls	r1, r0
 80076b0:	585b      	ldr	r3, [r3, r1]
 80076b2:	b933      	cbnz	r3, 80076c2 <vTaskDelete+0x32>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1119 (discriminator 1)
 80076b4:	4924      	ldr	r1, [pc, #144]	; (8007748 <vTaskDelete+0xb8>)
 80076b6:	2201      	movs	r2, #1
 80076b8:	680b      	ldr	r3, [r1, #0]
 80076ba:	4082      	lsls	r2, r0
 80076bc:	ea23 0302 	bic.w	r3, r3, r2
 80076c0:	600b      	str	r3, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1127
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80076c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80076c4:	b11b      	cbz	r3, 80076ce <vTaskDelete+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1129
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076c6:	f104 0018 	add.w	r0, r4, #24
 80076ca:	f000 fd34 	bl	8008136 <uxListRemove>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1140
			uxTaskNumber++;
 80076ce:	4a1f      	ldr	r2, [pc, #124]	; (800774c <vTaskDelete+0xbc>)
 80076d0:	6813      	ldr	r3, [r2, #0]
 80076d2:	3301      	adds	r3, #1
 80076d4:	6013      	str	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1142
			if( pxTCB == pxCurrentTCB )
 80076d6:	682b      	ldr	r3, [r5, #0]
 80076d8:	42a3      	cmp	r3, r4
 80076da:	d11b      	bne.n	8007714 <vTaskDelete+0x84>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1149
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80076dc:	4631      	mov	r1, r6
 80076de:	481c      	ldr	r0, [pc, #112]	; (8007750 <vTaskDelete+0xc0>)
 80076e0:	f000 fd06 	bl	80080f0 <vListInsertEnd>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1154
				++uxDeletedTasksWaitingCleanUp;
 80076e4:	4a1b      	ldr	r2, [pc, #108]	; (8007754 <vTaskDelete+0xc4>)
 80076e6:	6813      	ldr	r3, [r2, #0]
 80076e8:	3301      	adds	r3, #1
 80076ea:	6013      	str	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1175
		taskEXIT_CRITICAL();
 80076ec:	f7f9 f914 	bl	8000918 <vPortExitCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1179
		if( xSchedulerRunning != pdFALSE )
 80076f0:	4b19      	ldr	r3, [pc, #100]	; (8007758 <vTaskDelete+0xc8>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	b31b      	cbz	r3, 800773e <vTaskDelete+0xae>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1181
			if( pxTCB == pxCurrentTCB )
 80076f6:	682b      	ldr	r3, [r5, #0]
 80076f8:	42a3      	cmp	r3, r4
 80076fa:	d120      	bne.n	800773e <vTaskDelete+0xae>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1183
				configASSERT( uxSchedulerSuspended == 0 );
 80076fc:	4b17      	ldr	r3, [pc, #92]	; (800775c <vTaskDelete+0xcc>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	b1ab      	cbz	r3, 800772e <vTaskDelete+0x9e>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8007702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007706:	f383 8811 	msr	BASEPRI, r3
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	f3bf 8f4f 	dsb	sy
vTaskDelete():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1183 (discriminator 1)
 8007712:	e7fe      	b.n	8007712 <vTaskDelete+0x82>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1165
				--uxCurrentNumberOfTasks;
 8007714:	4a12      	ldr	r2, [pc, #72]	; (8007760 <vTaskDelete+0xd0>)
prvDeleteTCB():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3689
			vPortFree( pxTCB->pxStack );
 8007716:	6b20      	ldr	r0, [r4, #48]	; 0x30
vTaskDelete():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1165
				--uxCurrentNumberOfTasks;
 8007718:	6813      	ldr	r3, [r2, #0]
 800771a:	3b01      	subs	r3, #1
 800771c:	6013      	str	r3, [r2, #0]
prvDeleteTCB():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3689
			vPortFree( pxTCB->pxStack );
 800771e:	f7f8 fef5 	bl	800050c <vPortFree>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3690
			vPortFree( pxTCB );
 8007722:	4620      	mov	r0, r4
 8007724:	f7f8 fef2 	bl	800050c <vPortFree>
vTaskDelete():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1170
				prvResetNextTaskUnblockTime();
 8007728:	f7ff fe4a 	bl	80073c0 <prvResetNextTaskUnblockTime>
 800772c:	e7de      	b.n	80076ec <vTaskDelete+0x5c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1184 (discriminator 2)
				portYIELD_WITHIN_API();
 800772e:	4b0d      	ldr	r3, [pc, #52]	; (8007764 <vTaskDelete+0xd4>)
 8007730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007734:	601a      	str	r2, [r3, #0]
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	f3bf 8f6f 	isb	sy
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1191
	}
 800773e:	bd70      	pop	{r4, r5, r6, pc}
 8007740:	20007eb0 	.word	0x20007eb0
 8007744:	20007ebc 	.word	0x20007ebc
 8007748:	20007f5c 	.word	0x20007f5c
 800774c:	20007f58 	.word	0x20007f58
 8007750:	20007fac 	.word	0x20007fac
 8007754:	20007f4c 	.word	0x20007f4c
 8007758:	20007fa8 	.word	0x20007fa8
 800775c:	20007f54 	.word	0x20007f54
 8007760:	20007f48 	.word	0x20007f48
 8007764:	e000ed04 	.word	0xe000ed04

08007768 <eTaskGetState>:
eTaskGetState():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1328
	{
 8007768:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1333
		configASSERT( pxTCB );
 800776a:	4604      	mov	r4, r0
 800776c:	b940      	cbnz	r0, 8007780 <eTaskGetState+0x18>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 800776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
eTaskGetState():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1333
 800777e:	e7fe      	b.n	800777e <eTaskGetState+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1335 (discriminator 2)
		if( pxTCB == pxCurrentTCB )
 8007780:	4b0f      	ldr	r3, [pc, #60]	; (80077c0 <eTaskGetState+0x58>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4283      	cmp	r3, r0
 8007786:	d014      	beq.n	80077b2 <eTaskGetState+0x4a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1342
			taskENTER_CRITICAL();
 8007788:	f7f9 f8a4 	bl	80008d4 <vPortEnterCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1344
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800778c:	6964      	ldr	r4, [r4, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1346
			taskEXIT_CRITICAL();
 800778e:	f7f9 f8c3 	bl	8000918 <vPortExitCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1348
			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 8007792:	4b0c      	ldr	r3, [pc, #48]	; (80077c4 <eTaskGetState+0x5c>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	42a3      	cmp	r3, r4
 8007798:	d00d      	beq.n	80077b6 <eTaskGetState+0x4e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1348 (discriminator 1)
 800779a:	4b0b      	ldr	r3, [pc, #44]	; (80077c8 <eTaskGetState+0x60>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	42a3      	cmp	r3, r4
 80077a0:	d009      	beq.n	80077b6 <eTaskGetState+0x4e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1373
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80077a2:	4b0a      	ldr	r3, [pc, #40]	; (80077cc <eTaskGetState+0x64>)
 80077a4:	429c      	cmp	r4, r3
 80077a6:	d008      	beq.n	80077ba <eTaskGetState+0x52>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1386 (discriminator 1)
				eReturn = eReady;
 80077a8:	2c00      	cmp	r4, #0
 80077aa:	bf0c      	ite	eq
 80077ac:	2004      	moveq	r0, #4
 80077ae:	2001      	movne	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1391
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80077b0:	bd10      	pop	{r4, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1338
			eReturn = eRunning;
 80077b2:	2000      	movs	r0, #0
 80077b4:	e7fc      	b.n	80077b0 <eTaskGetState+0x48>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1352
				eReturn = eBlocked;
 80077b6:	2002      	movs	r0, #2
 80077b8:	e7fa      	b.n	80077b0 <eTaskGetState+0x48>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1378
					eReturn = eDeleted;
 80077ba:	2004      	movs	r0, #4
 80077bc:	e7f8      	b.n	80077b0 <eTaskGetState+0x48>
 80077be:	bf00      	nop
 80077c0:	20007eb0 	.word	0x20007eb0
 80077c4:	20007eb4 	.word	0x20007eb4
 80077c8:	20007eb8 	.word	0x20007eb8
 80077cc:	20007fac 	.word	0x20007fac

080077d0 <vTaskStartScheduler>:
vTaskStartScheduler():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1896
{
 80077d0:	b513      	push	{r0, r1, r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1929
		xReturn = xTaskCreate(	prvIdleTask,
 80077d2:	4b17      	ldr	r3, [pc, #92]	; (8007830 <vTaskStartScheduler+0x60>)
 80077d4:	2400      	movs	r4, #0
 80077d6:	2280      	movs	r2, #128	; 0x80
 80077d8:	4916      	ldr	r1, [pc, #88]	; (8007834 <vTaskStartScheduler+0x64>)
 80077da:	9301      	str	r3, [sp, #4]
 80077dc:	4623      	mov	r3, r4
 80077de:	9400      	str	r4, [sp, #0]
 80077e0:	4815      	ldr	r0, [pc, #84]	; (8007838 <vTaskStartScheduler+0x68>)
 80077e2:	f7ff fe6d 	bl	80074c0 <xTaskCreate>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1951
	if( xReturn == pdPASS )
 80077e6:	2801      	cmp	r0, #1
 80077e8:	d114      	bne.n	8007814 <vTaskStartScheduler+0x44>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 80077ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
vTaskStartScheduler():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1977
		xNextTaskUnblockTime = portMAX_DELAY;
 80077fa:	4b10      	ldr	r3, [pc, #64]	; (800783c <vTaskStartScheduler+0x6c>)
 80077fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007800:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1978
		xSchedulerRunning = pdTRUE;
 8007802:	4b0f      	ldr	r3, [pc, #60]	; (8007840 <vTaskStartScheduler+0x70>)
 8007804:	6018      	str	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1979
		xTickCount = ( TickType_t ) 0U;
 8007806:	4b0f      	ldr	r3, [pc, #60]	; (8007844 <vTaskStartScheduler+0x74>)
 8007808:	601c      	str	r4, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2012
}
 800780a:	b002      	add	sp, #8
 800780c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1991
		if( xPortStartScheduler() != pdFALSE )
 8007810:	f7f9 b8f8 	b.w	8000a04 <xPortStartScheduler>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2006
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007814:	3001      	adds	r0, #1
 8007816:	d108      	bne.n	800782a <vTaskStartScheduler+0x5a>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8007818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781c:	f383 8811 	msr	BASEPRI, r3
 8007820:	f3bf 8f6f 	isb	sy
 8007824:	f3bf 8f4f 	dsb	sy
vTaskStartScheduler():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2006 (discriminator 2)
 8007828:	e7fe      	b.n	8007828 <vTaskStartScheduler+0x58>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2012
}
 800782a:	b002      	add	sp, #8
 800782c:	bd10      	pop	{r4, pc}
 800782e:	bf00      	nop
 8007830:	20007f88 	.word	0x20007f88
 8007834:	0801f506 	.word	0x0801f506
 8007838:	08007455 	.word	0x08007455
 800783c:	20007f8c 	.word	0x20007f8c
 8007840:	20007fa8 	.word	0x20007fa8
 8007844:	20007fc0 	.word	0x20007fc0

08007848 <vTaskSuspendAll>:
vTaskSuspendAll():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2032
	++uxSchedulerSuspended;
 8007848:	4a02      	ldr	r2, [pc, #8]	; (8007854 <vTaskSuspendAll+0xc>)
 800784a:	6813      	ldr	r3, [r2, #0]
 800784c:	3301      	adds	r3, #1
 800784e:	6013      	str	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2033
}
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	20007f54 	.word	0x20007f54

08007858 <xTaskGetTickCount>:
xTaskGetTickCount():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2216
		xTicks = xTickCount;
 8007858:	4b01      	ldr	r3, [pc, #4]	; (8007860 <xTaskGetTickCount+0x8>)
 800785a:	6818      	ldr	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2221
}
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	20007fc0 	.word	0x20007fc0

08007864 <xTaskGetTickCountFromISR>:
xTaskGetTickCountFromISR():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2225
{
 8007864:	b508      	push	{r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2243
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007866:	f7f9 f94f 	bl	8000b08 <vPortValidateInterruptPriority>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2247
		xReturn = xTickCount;
 800786a:	4b01      	ldr	r3, [pc, #4]	; (8007870 <xTaskGetTickCountFromISR+0xc>)
 800786c:	6818      	ldr	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2252
}
 800786e:	bd08      	pop	{r3, pc}
 8007870:	20007fc0 	.word	0x20007fc0

08007874 <xTaskIncrementTick>:
xTaskIncrementTick():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2584
{
 8007874:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2593
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007878:	4b3c      	ldr	r3, [pc, #240]	; (800796c <xTaskIncrementTick+0xf8>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d16e      	bne.n	800795e <xTaskIncrementTick+0xea>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2597
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007880:	4b3b      	ldr	r3, [pc, #236]	; (8007970 <xTaskIncrementTick+0xfc>)
 8007882:	681c      	ldr	r4, [r3, #0]
 8007884:	3401      	adds	r4, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2601
		xTickCount = xConstTickCount;
 8007886:	601c      	str	r4, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2603
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007888:	b9bc      	cbnz	r4, 80078ba <xTaskIncrementTick+0x46>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2605
			taskSWITCH_DELAYED_LISTS();
 800788a:	4b3a      	ldr	r3, [pc, #232]	; (8007974 <xTaskIncrementTick+0x100>)
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	6812      	ldr	r2, [r2, #0]
 8007890:	b142      	cbz	r2, 80078a4 <xTaskIncrementTick+0x30>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8007892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
xTaskIncrementTick():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2605 (discriminator 1)
 80078a2:	e7fe      	b.n	80078a2 <xTaskIncrementTick+0x2e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2605 (discriminator 2)
 80078a4:	4a34      	ldr	r2, [pc, #208]	; (8007978 <xTaskIncrementTick+0x104>)
 80078a6:	6819      	ldr	r1, [r3, #0]
 80078a8:	6810      	ldr	r0, [r2, #0]
 80078aa:	6018      	str	r0, [r3, #0]
 80078ac:	6011      	str	r1, [r2, #0]
 80078ae:	4a33      	ldr	r2, [pc, #204]	; (800797c <xTaskIncrementTick+0x108>)
 80078b0:	6813      	ldr	r3, [r2, #0]
 80078b2:	3301      	adds	r3, #1
 80078b4:	6013      	str	r3, [r2, #0]
 80078b6:	f7ff fd83 	bl	80073c0 <prvResetNextTaskUnblockTime>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2616
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078ba:	4d31      	ldr	r5, [pc, #196]	; (8007980 <xTaskIncrementTick+0x10c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2587
BaseType_t xSwitchRequired = pdFALSE;
 80078bc:	f04f 0b00 	mov.w	fp, #0
 80078c0:	4f30      	ldr	r7, [pc, #192]	; (8007984 <xTaskIncrementTick+0x110>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2616
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078c2:	682b      	ldr	r3, [r5, #0]
 80078c4:	42a3      	cmp	r3, r4
 80078c6:	d911      	bls.n	80078ec <xTaskIncrementTick+0x78>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2699
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80078c8:	683a      	ldr	r2, [r7, #0]
 80078ca:	4b2f      	ldr	r3, [pc, #188]	; (8007988 <xTaskIncrementTick+0x114>)
 80078cc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80078ce:	2214      	movs	r2, #20
 80078d0:	434a      	muls	r2, r1
 80078d2:	589a      	ldr	r2, [r3, r2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2701
				xSwitchRequired = pdTRUE;
 80078d4:	2a02      	cmp	r2, #2
 80078d6:	bf28      	it	cs
 80078d8:	f04f 0b01 	movcs.w	fp, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2740
		if( xYieldPending != pdFALSE )
 80078dc:	4a2b      	ldr	r2, [pc, #172]	; (800798c <xTaskIncrementTick+0x118>)
 80078de:	6812      	ldr	r2, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2742
			xSwitchRequired = pdTRUE;
 80078e0:	2a00      	cmp	r2, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2752
}
 80078e2:	bf0c      	ite	eq
 80078e4:	4658      	moveq	r0, fp
 80078e6:	2001      	movne	r0, #1
 80078e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2620
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078ec:	f8df a084 	ldr.w	sl, [pc, #132]	; 8007974 <xTaskIncrementTick+0x100>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2670
					prvAddTaskToReadyList( pxTCB );
 80078f0:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8007994 <xTaskIncrementTick+0x120>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2620
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078f4:	f8da 2000 	ldr.w	r2, [sl]
 80078f8:	6812      	ldr	r2, [r2, #0]
 80078fa:	b91a      	cbnz	r2, 8007904 <xTaskIncrementTick+0x90>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2627
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007900:	602a      	str	r2, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2628
					break;
 8007902:	e7e1      	b.n	80078c8 <xTaskIncrementTick+0x54>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2636
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007904:	f8da 2000 	ldr.w	r2, [sl]
 8007908:	68d2      	ldr	r2, [r2, #12]
 800790a:	68d6      	ldr	r6, [r2, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2637
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800790c:	6871      	ldr	r1, [r6, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2639
					if( xConstTickCount < xItemValue )
 800790e:	428c      	cmp	r4, r1
 8007910:	d201      	bcs.n	8007916 <xTaskIncrementTick+0xa2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2646
						xNextTaskUnblockTime = xItemValue;
 8007912:	6029      	str	r1, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2647
						break;
 8007914:	e7d8      	b.n	80078c8 <xTaskIncrementTick+0x54>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2655
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007916:	f106 0804 	add.w	r8, r6, #4
 800791a:	4640      	mov	r0, r8
 800791c:	f000 fc0b 	bl	8008136 <uxListRemove>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2659
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007920:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8007922:	b119      	cbz	r1, 800792c <xTaskIncrementTick+0xb8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2661
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007924:	f106 0018 	add.w	r0, r6, #24
 8007928:	f000 fc05 	bl	8008136 <uxListRemove>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2670
					prvAddTaskToReadyList( pxTCB );
 800792c:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800792e:	2201      	movs	r2, #1
 8007930:	f8d9 3000 	ldr.w	r3, [r9]
 8007934:	f04f 0c14 	mov.w	ip, #20
 8007938:	fa02 f100 	lsl.w	r1, r2, r0
 800793c:	4319      	orrs	r1, r3
 800793e:	4b12      	ldr	r3, [pc, #72]	; (8007988 <xTaskIncrementTick+0x114>)
 8007940:	f8c9 1000 	str.w	r1, [r9]
 8007944:	4641      	mov	r1, r8
 8007946:	fb0c 3000 	mla	r0, ip, r0, r3
 800794a:	f000 fbd1 	bl	80080f0 <vListInsertEnd>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2680
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800794e:	6838      	ldr	r0, [r7, #0]
 8007950:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8007952:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2682
							xSwitchRequired = pdTRUE;
 8007954:	4291      	cmp	r1, r2
 8007956:	bf28      	it	cs
 8007958:	f04f 0b01 	movcs.w	fp, #1
 800795c:	e7ca      	b.n	80078f4 <xTaskIncrementTick+0x80>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2727
		++uxPendedTicks;
 800795e:	4a0c      	ldr	r2, [pc, #48]	; (8007990 <xTaskIncrementTick+0x11c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2587
BaseType_t xSwitchRequired = pdFALSE;
 8007960:	f04f 0b00 	mov.w	fp, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2727
		++uxPendedTicks;
 8007964:	6813      	ldr	r3, [r2, #0]
 8007966:	3301      	adds	r3, #1
 8007968:	6013      	str	r3, [r2, #0]
 800796a:	e7b7      	b.n	80078dc <xTaskIncrementTick+0x68>
 800796c:	20007f54 	.word	0x20007f54
 8007970:	20007fc0 	.word	0x20007fc0
 8007974:	20007eb4 	.word	0x20007eb4
 8007978:	20007eb8 	.word	0x20007eb8
 800797c:	20007f90 	.word	0x20007f90
 8007980:	20007f8c 	.word	0x20007f8c
 8007984:	20007eb0 	.word	0x20007eb0
 8007988:	20007ebc 	.word	0x20007ebc
 800798c:	20007fc4 	.word	0x20007fc4
 8007990:	20007f50 	.word	0x20007f50
 8007994:	20007f5c 	.word	0x20007f5c

08007998 <xTaskResumeAll>:
xTaskResumeAll():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2100
{
 8007998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2106
	configASSERT( uxSchedulerSuspended );
 800799c:	4c30      	ldr	r4, [pc, #192]	; (8007a60 <xTaskResumeAll+0xc8>)
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	b943      	cbnz	r3, 80079b4 <xTaskResumeAll+0x1c>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 80079a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a6:	f383 8811 	msr	BASEPRI, r3
 80079aa:	f3bf 8f6f 	isb	sy
 80079ae:	f3bf 8f4f 	dsb	sy
xTaskResumeAll():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2106 (discriminator 1)
 80079b2:	e7fe      	b.n	80079b2 <xTaskResumeAll+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2113
	taskENTER_CRITICAL();
 80079b4:	f7f8 ff8e 	bl	80008d4 <vPortEnterCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2115
		--uxSchedulerSuspended;
 80079b8:	6823      	ldr	r3, [r4, #0]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	6023      	str	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2117
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079be:	6824      	ldr	r4, [r4, #0]
 80079c0:	b12c      	cbz	r4, 80079ce <xTaskResumeAll+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2102
BaseType_t xAlreadyYielded = pdFALSE;
 80079c2:	2400      	movs	r4, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2203
	taskEXIT_CRITICAL();
 80079c4:	f7f8 ffa8 	bl	8000918 <vPortExitCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2206
}
 80079c8:	4620      	mov	r0, r4
 80079ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2119
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079ce:	4b25      	ldr	r3, [pc, #148]	; (8007a64 <xTaskResumeAll+0xcc>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d0f5      	beq.n	80079c2 <xTaskResumeAll+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2123
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079d6:	4d24      	ldr	r5, [pc, #144]	; (8007a68 <xTaskResumeAll+0xd0>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2128
					prvAddTaskToReadyList( pxTCB );
 80079d8:	4e24      	ldr	r6, [pc, #144]	; (8007a6c <xTaskResumeAll+0xd4>)
 80079da:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8007a80 <xTaskResumeAll+0xe8>
 80079de:	e01f      	b.n	8007a20 <xTaskResumeAll+0x88>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2125
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80079e0:	68eb      	ldr	r3, [r5, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2128
					prvAddTaskToReadyList( pxTCB );
 80079e2:	2701      	movs	r7, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2125
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80079e4:	68dc      	ldr	r4, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2127
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079e6:	f104 0904 	add.w	r9, r4, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2126
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079ea:	f104 0018 	add.w	r0, r4, #24
 80079ee:	f000 fba2 	bl	8008136 <uxListRemove>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2127
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079f2:	4648      	mov	r0, r9
 80079f4:	f000 fb9f 	bl	8008136 <uxListRemove>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2128
					prvAddTaskToReadyList( pxTCB );
 80079f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80079fa:	6831      	ldr	r1, [r6, #0]
 80079fc:	2014      	movs	r0, #20
 80079fe:	fa07 f302 	lsl.w	r3, r7, r2
 8007a02:	fb00 8002 	mla	r0, r0, r2, r8
 8007a06:	430b      	orrs	r3, r1
 8007a08:	4649      	mov	r1, r9
 8007a0a:	6033      	str	r3, [r6, #0]
 8007a0c:	f000 fb70 	bl	80080f0 <vListInsertEnd>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2132
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a10:	4b17      	ldr	r3, [pc, #92]	; (8007a70 <xTaskResumeAll+0xd8>)
 8007a12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d301      	bcc.n	8007a20 <xTaskResumeAll+0x88>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2134
						xYieldPending = pdTRUE;
 8007a1c:	4b15      	ldr	r3, [pc, #84]	; (8007a74 <xTaskResumeAll+0xdc>)
 8007a1e:	601f      	str	r7, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2123
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a20:	682b      	ldr	r3, [r5, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1dc      	bne.n	80079e0 <xTaskResumeAll+0x48>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2142
				if( pxTCB != NULL )
 8007a26:	b10c      	cbz	r4, 8007a2c <xTaskResumeAll+0x94>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2150
					prvResetNextTaskUnblockTime();
 8007a28:	f7ff fcca 	bl	80073c0 <prvResetNextTaskUnblockTime>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2158
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007a2c:	4d12      	ldr	r5, [pc, #72]	; (8007a78 <xTaskResumeAll+0xe0>)
 8007a2e:	682c      	ldr	r4, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2160
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007a30:	b144      	cbz	r4, 8007a44 <xTaskResumeAll+0xac>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2166
								xYieldPending = pdTRUE;
 8007a32:	4e10      	ldr	r6, [pc, #64]	; (8007a74 <xTaskResumeAll+0xdc>)
 8007a34:	2701      	movs	r7, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2164
							if( xTaskIncrementTick() != pdFALSE )
 8007a36:	f7ff ff1d 	bl	8007874 <xTaskIncrementTick>
 8007a3a:	b100      	cbz	r0, 8007a3e <xTaskResumeAll+0xa6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2166
								xYieldPending = pdTRUE;
 8007a3c:	6037      	str	r7, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2173
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007a3e:	3c01      	subs	r4, #1
 8007a40:	d1f9      	bne.n	8007a36 <xTaskResumeAll+0x9e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2175
						uxPendedTicks = 0;
 8007a42:	602c      	str	r4, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2183
				if( xYieldPending != pdFALSE )
 8007a44:	4b0b      	ldr	r3, [pc, #44]	; (8007a74 <xTaskResumeAll+0xdc>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d0ba      	beq.n	80079c2 <xTaskResumeAll+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2190
					taskYIELD_IF_USING_PREEMPTION();
 8007a4c:	4b0b      	ldr	r3, [pc, #44]	; (8007a7c <xTaskResumeAll+0xe4>)
 8007a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	f3bf 8f6f 	isb	sy
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2187
						xAlreadyYielded = pdTRUE;
 8007a5c:	2401      	movs	r4, #1
 8007a5e:	e7b1      	b.n	80079c4 <xTaskResumeAll+0x2c>
 8007a60:	20007f54 	.word	0x20007f54
 8007a64:	20007f48 	.word	0x20007f48
 8007a68:	20007f94 	.word	0x20007f94
 8007a6c:	20007f5c 	.word	0x20007f5c
 8007a70:	20007eb0 	.word	0x20007eb0
 8007a74:	20007fc4 	.word	0x20007fc4
 8007a78:	20007f50 	.word	0x20007f50
 8007a7c:	e000ed04 	.word	0xe000ed04
 8007a80:	20007ebc 	.word	0x20007ebc

08007a84 <vTaskDelay>:
vTaskDelay():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1283
	{
 8007a84:	b508      	push	{r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1287
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a86:	b940      	cbnz	r0, 8007a9a <vTaskDelay+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1314
			portYIELD_WITHIN_API();
 8007a88:	4b0e      	ldr	r3, [pc, #56]	; (8007ac4 <vTaskDelay+0x40>)
 8007a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a8e:	601a      	str	r2, [r3, #0]
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	f3bf 8f6f 	isb	sy
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1320
	}
 8007a98:	bd08      	pop	{r3, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1289
			configASSERT( uxSchedulerSuspended == 0 );
 8007a9a:	4b0b      	ldr	r3, [pc, #44]	; (8007ac8 <vTaskDelay+0x44>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	b143      	cbz	r3, 8007ab2 <vTaskDelay+0x2e>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8007aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
vTaskDelay():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1289 (discriminator 1)
 8007ab0:	e7fe      	b.n	8007ab0 <vTaskDelay+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1290 (discriminator 2)
			vTaskSuspendAll();
 8007ab2:	f7ff fec9 	bl	8007848 <vTaskSuspendAll>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1301 (discriminator 2)
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ab6:	f7ff fc95 	bl	80073e4 <prvAddCurrentTaskToDelayedList.isra.2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1303 (discriminator 2)
			xAlreadyYielded = xTaskResumeAll();
 8007aba:	f7ff ff6d 	bl	8007998 <xTaskResumeAll>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:1312 (discriminator 2)
		if( xAlreadyYielded == pdFALSE )
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	d0e2      	beq.n	8007a88 <vTaskDelay+0x4>
 8007ac2:	e7e9      	b.n	8007a98 <vTaskDelay+0x14>
 8007ac4:	e000ed04 	.word	0xe000ed04
 8007ac8:	20007f54 	.word	0x20007f54

08007acc <vTaskSwitchContext>:
vTaskSwitchContext():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2847
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007acc:	4b17      	ldr	r3, [pc, #92]	; (8007b2c <vTaskSwitchContext+0x60>)
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	4b17      	ldr	r3, [pc, #92]	; (8007b30 <vTaskSwitchContext+0x64>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2846
{
 8007ad2:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2847
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ad4:	b112      	cbz	r2, 8007adc <vTaskSwitchContext+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2851
		xYieldPending = pdTRUE;
 8007ad6:	2201      	movs	r2, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2890 (discriminator 6)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007ad8:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2901 (discriminator 6)
}
 8007ada:	bd10      	pop	{r4, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2855
		xYieldPending = pdFALSE;
 8007adc:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2890
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007ade:	4b15      	ldr	r3, [pc, #84]	; (8007b34 <vTaskSwitchContext+0x68>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
ucPortCountLeadingZeros():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:134
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007ae2:	fab3 f383 	clz	r3, r3
 8007ae6:	b2db      	uxtb	r3, r3
vTaskSwitchContext():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2890
 8007ae8:	2214      	movs	r2, #20
 8007aea:	4913      	ldr	r1, [pc, #76]	; (8007b38 <vTaskSwitchContext+0x6c>)
 8007aec:	f1c3 031f 	rsb	r3, r3, #31
 8007af0:	435a      	muls	r2, r3
 8007af2:	588c      	ldr	r4, [r1, r2]
 8007af4:	1888      	adds	r0, r1, r2
 8007af6:	b944      	cbnz	r4, 8007b0a <vTaskSwitchContext+0x3e>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
	__asm volatile
 8007af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afc:	f383 8811 	msr	BASEPRI, r3
 8007b00:	f3bf 8f6f 	isb	sy
 8007b04:	f3bf 8f4f 	dsb	sy
vTaskSwitchContext():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2890 (discriminator 1)
 8007b08:	e7fe      	b.n	8007b08 <vTaskSwitchContext+0x3c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2890 (discriminator 2)
 8007b0a:	6844      	ldr	r4, [r0, #4]
 8007b0c:	3208      	adds	r2, #8
 8007b0e:	6864      	ldr	r4, [r4, #4]
 8007b10:	440a      	add	r2, r1
 8007b12:	4294      	cmp	r4, r2
 8007b14:	6044      	str	r4, [r0, #4]
 8007b16:	bf04      	itt	eq
 8007b18:	6862      	ldreq	r2, [r4, #4]
 8007b1a:	6042      	streq	r2, [r0, #4]
 8007b1c:	2214      	movs	r2, #20
 8007b1e:	fb02 1303 	mla	r3, r2, r3, r1
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	68da      	ldr	r2, [r3, #12]
 8007b26:	4b05      	ldr	r3, [pc, #20]	; (8007b3c <vTaskSwitchContext+0x70>)
 8007b28:	e7d6      	b.n	8007ad8 <vTaskSwitchContext+0xc>
 8007b2a:	bf00      	nop
 8007b2c:	20007f54 	.word	0x20007f54
 8007b30:	20007fc4 	.word	0x20007fc4
 8007b34:	20007f5c 	.word	0x20007f5c
 8007b38:	20007ebc 	.word	0x20007ebc
 8007b3c:	20007eb0 	.word	0x20007eb0

08007b40 <vTaskPlaceOnEventList>:
vTaskPlaceOnEventList():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2905
{
 8007b40:	b510      	push	{r4, lr}
 8007b42:	460c      	mov	r4, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2906
	configASSERT( pxEventList );
 8007b44:	b940      	cbnz	r0, 8007b58 <vTaskPlaceOnEventList+0x18>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8007b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4a:	f383 8811 	msr	BASEPRI, r3
 8007b4e:	f3bf 8f6f 	isb	sy
 8007b52:	f3bf 8f4f 	dsb	sy
vTaskPlaceOnEventList():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2906 (discriminator 1)
 8007b56:	e7fe      	b.n	8007b56 <vTaskPlaceOnEventList+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2915 (discriminator 2)
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b58:	4b04      	ldr	r3, [pc, #16]	; (8007b6c <vTaskPlaceOnEventList+0x2c>)
 8007b5a:	6819      	ldr	r1, [r3, #0]
 8007b5c:	3118      	adds	r1, #24
 8007b5e:	f000 fad3 	bl	8008108 <vListInsert>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2917 (discriminator 2)
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b62:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2918 (discriminator 2)
}
 8007b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2917 (discriminator 2)
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b68:	f7ff bc3c 	b.w	80073e4 <prvAddCurrentTaskToDelayedList.isra.2>
 8007b6c:	20007eb0 	.word	0x20007eb0

08007b70 <xTaskRemoveFromEventList>:
xTaskRemoveFromEventList():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2979
{
 8007b70:	b538      	push	{r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2996
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007b72:	68c3      	ldr	r3, [r0, #12]
 8007b74:	68dc      	ldr	r4, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2997
	configASSERT( pxUnblockedTCB );
 8007b76:	b944      	cbnz	r4, 8007b8a <xTaskRemoveFromEventList+0x1a>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8007b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7c:	f383 8811 	msr	BASEPRI, r3
 8007b80:	f3bf 8f6f 	isb	sy
 8007b84:	f3bf 8f4f 	dsb	sy
xTaskRemoveFromEventList():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2997 (discriminator 1)
 8007b88:	e7fe      	b.n	8007b88 <xTaskRemoveFromEventList+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2998 (discriminator 2)
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b8a:	f104 0518 	add.w	r5, r4, #24
 8007b8e:	4628      	mov	r0, r5
 8007b90:	f000 fad1 	bl	8008136 <uxListRemove>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3000 (discriminator 2)
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b94:	4b11      	ldr	r3, [pc, #68]	; (8007bdc <xTaskRemoveFromEventList+0x6c>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	b9db      	cbnz	r3, 8007bd2 <xTaskRemoveFromEventList+0x62>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3002
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b9a:	1d25      	adds	r5, r4, #4
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	f000 faca 	bl	8008136 <uxListRemove>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3003
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ba2:	490f      	ldr	r1, [pc, #60]	; (8007be0 <xTaskRemoveFromEventList+0x70>)
 8007ba4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	6808      	ldr	r0, [r1, #0]
 8007baa:	4093      	lsls	r3, r2
 8007bac:	4303      	orrs	r3, r0
 8007bae:	2014      	movs	r0, #20
 8007bb0:	600b      	str	r3, [r1, #0]
 8007bb2:	4629      	mov	r1, r5
 8007bb4:	4b0b      	ldr	r3, [pc, #44]	; (8007be4 <xTaskRemoveFromEventList+0x74>)
 8007bb6:	fb00 3002 	mla	r0, r0, r2, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3009
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007bba:	f000 fa99 	bl	80080f0 <vListInsertEnd>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3012
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007bbe:	4b0a      	ldr	r3, [pc, #40]	; (8007be8 <xTaskRemoveFromEventList+0x78>)
 8007bc0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d906      	bls.n	8007bd8 <xTaskRemoveFromEventList+0x68>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3021
		xYieldPending = pdTRUE;
 8007bca:	2001      	movs	r0, #1
 8007bcc:	4b07      	ldr	r3, [pc, #28]	; (8007bec <xTaskRemoveFromEventList+0x7c>)
 8007bce:	6018      	str	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3043
}
 8007bd0:	bd38      	pop	{r3, r4, r5, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3009
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007bd2:	4629      	mov	r1, r5
 8007bd4:	4806      	ldr	r0, [pc, #24]	; (8007bf0 <xTaskRemoveFromEventList+0x80>)
 8007bd6:	e7f0      	b.n	8007bba <xTaskRemoveFromEventList+0x4a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3025
		xReturn = pdFALSE;
 8007bd8:	2000      	movs	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3042
	return xReturn;
 8007bda:	e7f9      	b.n	8007bd0 <xTaskRemoveFromEventList+0x60>
 8007bdc:	20007f54 	.word	0x20007f54
 8007be0:	20007f5c 	.word	0x20007f5c
 8007be4:	20007ebc 	.word	0x20007ebc
 8007be8:	20007eb0 	.word	0x20007eb0
 8007bec:	20007fc4 	.word	0x20007fc4
 8007bf0:	20007f94 	.word	0x20007f94

08007bf4 <vTaskInternalSetTimeOutState>:
vTaskInternalSetTimeOutState():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3095
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007bf4:	4b03      	ldr	r3, [pc, #12]	; (8007c04 <vTaskInternalSetTimeOutState+0x10>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6003      	str	r3, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3096
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007bfa:	4b03      	ldr	r3, [pc, #12]	; (8007c08 <vTaskInternalSetTimeOutState+0x14>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6043      	str	r3, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3097
}
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	20007f90 	.word	0x20007f90
 8007c08:	20007fc0 	.word	0x20007fc0

08007c0c <xTaskCheckForTimeOut>:
xTaskCheckForTimeOut():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3101
{
 8007c0c:	b538      	push	{r3, r4, r5, lr}
 8007c0e:	460c      	mov	r4, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3104
	configASSERT( pxTimeOut );
 8007c10:	4605      	mov	r5, r0
 8007c12:	b940      	cbnz	r0, 8007c26 <xTaskCheckForTimeOut+0x1a>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8007c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
xTaskCheckForTimeOut():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3104 (discriminator 1)
 8007c24:	e7fe      	b.n	8007c24 <xTaskCheckForTimeOut+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3105 (discriminator 2)
	configASSERT( pxTicksToWait );
 8007c26:	b941      	cbnz	r1, 8007c3a <xTaskCheckForTimeOut+0x2e>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8007c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
xTaskCheckForTimeOut():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3105 (discriminator 2)
 8007c38:	e7fe      	b.n	8007c38 <xTaskCheckForTimeOut+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3107 (discriminator 2)
	taskENTER_CRITICAL();
 8007c3a:	f7f8 fe4b 	bl	80008d4 <vPortEnterCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3110 (discriminator 2)
		const TickType_t xConstTickCount = xTickCount;
 8007c3e:	4b0e      	ldr	r3, [pc, #56]	; (8007c78 <xTaskCheckForTimeOut+0x6c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3135 (discriminator 2)
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c40:	6828      	ldr	r0, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3110 (discriminator 2)
		const TickType_t xConstTickCount = xTickCount;
 8007c42:	6819      	ldr	r1, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3135 (discriminator 2)
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c44:	4b0d      	ldr	r3, [pc, #52]	; (8007c7c <xTaskCheckForTimeOut+0x70>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3111 (discriminator 2)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c46:	686a      	ldr	r2, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3135 (discriminator 2)
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4298      	cmp	r0, r3
 8007c4c:	d001      	beq.n	8007c52 <xTaskCheckForTimeOut+0x46>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3135 (discriminator 1)
 8007c4e:	428a      	cmp	r2, r1
 8007c50:	d910      	bls.n	8007c74 <xTaskCheckForTimeOut+0x68>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3144
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c52:	6823      	ldr	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3111
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c54:	1a88      	subs	r0, r1, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3144
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c56:	4283      	cmp	r3, r0
 8007c58:	d90a      	bls.n	8007c70 <xTaskCheckForTimeOut+0x64>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3147
			*pxTicksToWait -= xElapsedTime;
 8007c5a:	1a5b      	subs	r3, r3, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3148
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c5c:	4628      	mov	r0, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3147
			*pxTicksToWait -= xElapsedTime;
 8007c5e:	4413      	add	r3, r2
 8007c60:	6023      	str	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3149
			xReturn = pdFALSE;
 8007c62:	2400      	movs	r4, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3148
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c64:	f7ff ffc6 	bl	8007bf4 <vTaskInternalSetTimeOutState>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3157
	taskEXIT_CRITICAL();
 8007c68:	f7f8 fe56 	bl	8000918 <vPortExitCritical>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3160
}
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	bd38      	pop	{r3, r4, r5, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3153
			*pxTicksToWait = 0;
 8007c70:	2300      	movs	r3, #0
 8007c72:	6023      	str	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3142
			xReturn = pdTRUE;
 8007c74:	2401      	movs	r4, #1
 8007c76:	e7f7      	b.n	8007c68 <xTaskCheckForTimeOut+0x5c>
 8007c78:	20007fc0 	.word	0x20007fc0
 8007c7c:	20007f90 	.word	0x20007f90

08007c80 <vTaskMissedYield>:
vTaskMissedYield():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3165
	xYieldPending = pdTRUE;
 8007c80:	4b01      	ldr	r3, [pc, #4]	; (8007c88 <vTaskMissedYield+0x8>)
 8007c82:	2201      	movs	r2, #1
 8007c84:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3166
}
 8007c86:	4770      	bx	lr
 8007c88:	20007fc4 	.word	0x20007fc4

08007c8c <vTaskGetInfo>:
vTaskGetInfo():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3494
	{
 8007c8c:	b570      	push	{r4, r5, r6, lr}
 8007c8e:	460c      	mov	r4, r1
 8007c90:	4616      	mov	r6, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3498
		pxTCB = prvGetTCBFromHandle( xTask );
 8007c92:	4605      	mov	r5, r0
 8007c94:	b908      	cbnz	r0, 8007c9a <vTaskGetInfo+0xe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3498 (discriminator 1)
 8007c96:	4a15      	ldr	r2, [pc, #84]	; (8007cec <vTaskGetInfo+0x60>)
 8007c98:	6815      	ldr	r5, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3501 (discriminator 4)
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8007c9a:	f105 0234 	add.w	r2, r5, #52	; 0x34
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3529 (discriminator 4)
		if( eState != eInvalid )
 8007c9e:	2b05      	cmp	r3, #5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3500 (discriminator 4)
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8007ca0:	6025      	str	r5, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3501 (discriminator 4)
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8007ca2:	6062      	str	r2, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3502 (discriminator 4)
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8007ca4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8007ca6:	6122      	str	r2, [r4, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3503 (discriminator 4)
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8007ca8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8007caa:	61e2      	str	r2, [r4, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3504 (discriminator 4)
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8007cac:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8007cae:	60a2      	str	r2, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3508 (discriminator 4)
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8007cb0:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8007cb2:	6162      	str	r2, [r4, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3522 (discriminator 4)
			pxTaskStatus->ulRunTimeCounter = 0;
 8007cb4:	f04f 0200 	mov.w	r2, #0
 8007cb8:	61a2      	str	r2, [r4, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3529 (discriminator 4)
		if( eState != eInvalid )
 8007cba:	d00e      	beq.n	8007cda <vTaskGetInfo+0x4e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3531
			if( pxTCB == pxCurrentTCB )
 8007cbc:	490b      	ldr	r1, [pc, #44]	; (8007cec <vTaskGetInfo+0x60>)
 8007cbe:	6809      	ldr	r1, [r1, #0]
 8007cc0:	42a9      	cmp	r1, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3533
				pxTaskStatus->eCurrentState = eRunning;
 8007cc2:	bf0c      	ite	eq
 8007cc4:	7322      	strbeq	r2, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3537
				pxTaskStatus->eCurrentState = eState;
 8007cc6:	7323      	strbne	r3, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3566
		if( xGetFreeStackSpace != pdFALSE )
 8007cc8:	b176      	cbz	r6, 8007ce8 <vTaskGetInfo+0x5c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3574
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8007cca:	6b29      	ldr	r1, [r5, #48]	; 0x30
prvTaskCheckFreeStackSpace():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3624
	uint32_t ulCount = 0U;
 8007ccc:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3626
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007cce:	5cca      	ldrb	r2, [r1, r3]
 8007cd0:	2aa5      	cmp	r2, #165	; 0xa5
 8007cd2:	d007      	beq.n	8007ce4 <vTaskGetInfo+0x58>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3632
		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8007cd4:	089b      	lsrs	r3, r3, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3634
		return ( uint16_t ) ulCount;
 8007cd6:	8423      	strh	r3, [r4, #32]
vTaskGetInfo():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3582
	}
 8007cd8:	bd70      	pop	{r4, r5, r6, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3561
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8007cda:	4628      	mov	r0, r5
 8007cdc:	f7ff fd44 	bl	8007768 <eTaskGetState>
 8007ce0:	7320      	strb	r0, [r4, #12]
 8007ce2:	e7f1      	b.n	8007cc8 <vTaskGetInfo+0x3c>
prvTaskCheckFreeStackSpace():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3629
			ulCount++;
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	e7f2      	b.n	8007cce <vTaskGetInfo+0x42>
vTaskGetInfo():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3580
			pxTaskStatus->usStackHighWaterMark = 0;
 8007ce8:	8426      	strh	r6, [r4, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3582
	}
 8007cea:	e7f5      	b.n	8007cd8 <vTaskGetInfo+0x4c>
 8007cec:	20007eb0 	.word	0x20007eb0

08007cf0 <prvListTasksWithinSingleList>:
prvListTasksWithinSingleList():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3590
	{
 8007cf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3594
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8007cf4:	680d      	ldr	r5, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3590
	{
 8007cf6:	4681      	mov	r9, r0
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	4693      	mov	fp, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3594
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8007cfc:	b30d      	cbz	r5, 8007d42 <prvListTasksWithinSingleList+0x52>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3596
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8007cfe:	684b      	ldr	r3, [r1, #4]
 8007d00:	f101 0608 	add.w	r6, r1, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3592
	UBaseType_t uxTask = 0;
 8007d04:	2500      	movs	r5, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3605
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8007d06:	f04f 0a24 	mov.w	sl, #36	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3596
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	42b3      	cmp	r3, r6
 8007d0e:	604b      	str	r3, [r1, #4]
 8007d10:	bf04      	itt	eq
 8007d12:	68cb      	ldreq	r3, [r1, #12]
 8007d14:	604b      	streq	r3, [r1, #4]
 8007d16:	684b      	ldr	r3, [r1, #4]
 8007d18:	f8d3 800c 	ldr.w	r8, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3604
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8007d1c:	6863      	ldr	r3, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3605
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8007d1e:	fb0a 9105 	mla	r1, sl, r5, r9
 8007d22:	2201      	movs	r2, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3606
				uxTask++;
 8007d24:	3501      	adds	r5, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3604
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	429e      	cmp	r6, r3
 8007d2a:	6063      	str	r3, [r4, #4]
 8007d2c:	bf04      	itt	eq
 8007d2e:	6873      	ldreq	r3, [r6, #4]
 8007d30:	6063      	streq	r3, [r4, #4]
 8007d32:	6863      	ldr	r3, [r4, #4]
 8007d34:	68df      	ldr	r7, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3605
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8007d36:	465b      	mov	r3, fp
 8007d38:	4638      	mov	r0, r7
 8007d3a:	f7ff ffa7 	bl	8007c8c <vTaskGetInfo>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3607
			} while( pxNextTCB != pxFirstTCB );
 8007d3e:	45b8      	cmp	r8, r7
 8007d40:	d1ec      	bne.n	8007d1c <prvListTasksWithinSingleList+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3615
	}
 8007d42:	4628      	mov	r0, r5
 8007d44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007d48 <uxTaskGetSystemState>:
uxTaskGetSystemState():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2404
	{
 8007d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d4c:	4606      	mov	r6, r0
 8007d4e:	4690      	mov	r8, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2407
		vTaskSuspendAll();
 8007d50:	f7ff fd7a 	bl	8007848 <vTaskSuspendAll>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2410
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8007d54:	4b1c      	ldr	r3, [pc, #112]	; (8007dc8 <uxTaskGetSystemState+0x80>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	428b      	cmp	r3, r1
 8007d5a:	d832      	bhi.n	8007dc2 <uxTaskGetSystemState+0x7a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2405
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8007d5c:	2507      	movs	r5, #7
 8007d5e:	2400      	movs	r4, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2417
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8007d60:	f04f 0a14 	mov.w	sl, #20
 8007d64:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8007dd8 <uxTaskGetSystemState+0x90>
 8007d68:	2724      	movs	r7, #36	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2416 (discriminator 1)
					uxQueue--;
 8007d6a:	3d01      	subs	r5, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2417 (discriminator 1)
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8007d6c:	fb07 6004 	mla	r0, r7, r4, r6
 8007d70:	2201      	movs	r2, #1
 8007d72:	fb0a 9105 	mla	r1, sl, r5, r9
 8007d76:	f7ff ffbb 	bl	8007cf0 <prvListTasksWithinSingleList>
 8007d7a:	4404      	add	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2419 (discriminator 1)
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d7c:	2d00      	cmp	r5, #0
 8007d7e:	d1f4      	bne.n	8007d6a <uxTaskGetSystemState+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2423
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8007d80:	4b12      	ldr	r3, [pc, #72]	; (8007dcc <uxTaskGetSystemState+0x84>)
 8007d82:	2202      	movs	r2, #2
 8007d84:	fb07 6004 	mla	r0, r7, r4, r6
 8007d88:	6819      	ldr	r1, [r3, #0]
 8007d8a:	f7ff ffb1 	bl	8007cf0 <prvListTasksWithinSingleList>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2424
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8007d8e:	4b10      	ldr	r3, [pc, #64]	; (8007dd0 <uxTaskGetSystemState+0x88>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2423
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8007d90:	4404      	add	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2424
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8007d92:	2202      	movs	r2, #2
 8007d94:	6819      	ldr	r1, [r3, #0]
 8007d96:	fb07 6004 	mla	r0, r7, r4, r6
 8007d9a:	f7ff ffa9 	bl	8007cf0 <prvListTasksWithinSingleList>
 8007d9e:	4404      	add	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2430
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8007da0:	2204      	movs	r2, #4
 8007da2:	490c      	ldr	r1, [pc, #48]	; (8007dd4 <uxTaskGetSystemState+0x8c>)
 8007da4:	fb07 6004 	mla	r0, r7, r4, r6
 8007da8:	f7ff ffa2 	bl	8007cf0 <prvListTasksWithinSingleList>
 8007dac:	4404      	add	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2455
					if( pulTotalRunTime != NULL )
 8007dae:	f1b8 0f00 	cmp.w	r8, #0
 8007db2:	d001      	beq.n	8007db8 <uxTaskGetSystemState+0x70>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2457
						*pulTotalRunTime = 0;
 8007db4:	f8c8 5000 	str.w	r5, [r8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2467
		( void ) xTaskResumeAll();
 8007db8:	f7ff fdee 	bl	8007998 <xTaskResumeAll>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2470
	}
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:2405
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8007dc2:	2400      	movs	r4, #0
 8007dc4:	e7f8      	b.n	8007db8 <uxTaskGetSystemState+0x70>
 8007dc6:	bf00      	nop
 8007dc8:	20007f48 	.word	0x20007f48
 8007dcc:	20007eb4 	.word	0x20007eb4
 8007dd0:	20007eb8 	.word	0x20007eb8
 8007dd4:	20007fac 	.word	0x20007fac
 8007dd8:	20007ebc 	.word	0x20007ebc

08007ddc <xTaskGetSchedulerState>:
xTaskGetSchedulerState():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3771
		if( xSchedulerRunning == pdFALSE )
 8007ddc:	4b05      	ldr	r3, [pc, #20]	; (8007df4 <xTaskGetSchedulerState+0x18>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	b133      	cbz	r3, 8007df0 <xTaskGetSchedulerState+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3777
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007de2:	4b05      	ldr	r3, [pc, #20]	; (8007df8 <xTaskGetSchedulerState+0x1c>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3783
				xReturn = taskSCHEDULER_SUSPENDED;
 8007de8:	bf0c      	ite	eq
 8007dea:	2002      	moveq	r0, #2
 8007dec:	2000      	movne	r0, #0
 8007dee:	4770      	bx	lr
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3773
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007df0:	2001      	movs	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3788
	}
 8007df2:	4770      	bx	lr
 8007df4:	20007fa8 	.word	0x20007fa8
 8007df8:	20007f54 	.word	0x20007f54

08007dfc <xTaskPriorityInherit>:
xTaskPriorityInherit():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3796
	{
 8007dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3803
		if( pxMutexHolder != NULL )
 8007e00:	4604      	mov	r4, r0
 8007e02:	b358      	cbz	r0, 8007e5c <xTaskPriorityInherit+0x60>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3808
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007e04:	4a23      	ldr	r2, [pc, #140]	; (8007e94 <xTaskPriorityInherit+0x98>)
 8007e06:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007e08:	6811      	ldr	r1, [r2, #0]
 8007e0a:	4617      	mov	r7, r2
 8007e0c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8007e0e:	428b      	cmp	r3, r1
 8007e10:	d238      	bcs.n	8007e84 <xTaskPriorityInherit+0x88>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3813
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007e12:	6982      	ldr	r2, [r0, #24]
 8007e14:	2a00      	cmp	r2, #0
 8007e16:	db04      	blt.n	8007e22 <xTaskPriorityInherit+0x26>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3815
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007e1c:	f1c2 0207 	rsb	r2, r2, #7
 8007e20:	6182      	str	r2, [r0, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3824
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007e22:	4d1d      	ldr	r5, [pc, #116]	; (8007e98 <xTaskPriorityInherit+0x9c>)
 8007e24:	2614      	movs	r6, #20
 8007e26:	6962      	ldr	r2, [r4, #20]
 8007e28:	fb06 5303 	mla	r3, r6, r3, r5
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d117      	bne.n	8007e60 <xTaskPriorityInherit+0x64>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3826
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e30:	f104 0804 	add.w	r8, r4, #4
 8007e34:	4640      	mov	r0, r8
 8007e36:	f000 f97e 	bl	8008136 <uxListRemove>
 8007e3a:	4b18      	ldr	r3, [pc, #96]	; (8007e9c <xTaskPriorityInherit+0xa0>)
 8007e3c:	b1b0      	cbz	r0, 8007e6c <xTaskPriorityInherit+0x70>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3836
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e3e:	683a      	ldr	r2, [r7, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3837
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007e40:	6819      	ldr	r1, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3836
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e42:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007e44:	62e2      	str	r2, [r4, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3837
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007e46:	2401      	movs	r4, #1
 8007e48:	fa04 f002 	lsl.w	r0, r4, r2
 8007e4c:	4308      	orrs	r0, r1
 8007e4e:	4641      	mov	r1, r8
 8007e50:	6018      	str	r0, [r3, #0]
 8007e52:	2014      	movs	r0, #20
 8007e54:	fb00 5002 	mla	r0, r0, r2, r5
 8007e58:	f000 f94a 	bl	80080f0 <vListInsertEnd>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3798
	BaseType_t xReturn = pdFALSE;
 8007e5c:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3874
		return xReturn;
 8007e5e:	e003      	b.n	8007e68 <xTaskPriorityInherit+0x6c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3842
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e60:	683b      	ldr	r3, [r7, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3848
				xReturn = pdTRUE;
 8007e62:	2001      	movs	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3842
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e66:	62e3      	str	r3, [r4, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3875
	}
 8007e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3828
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007e6c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007e6e:	4346      	muls	r6, r0
 8007e70:	59aa      	ldr	r2, [r5, r6]
 8007e72:	2a00      	cmp	r2, #0
 8007e74:	d1e3      	bne.n	8007e3e <xTaskPriorityInherit+0x42>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3828 (discriminator 1)
 8007e76:	2101      	movs	r1, #1
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	4081      	lsls	r1, r0
 8007e7c:	ea22 0201 	bic.w	r2, r2, r1
 8007e80:	601a      	str	r2, [r3, #0]
 8007e82:	e7dc      	b.n	8007e3e <xTaskPriorityInherit+0x42>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3852
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007e84:	6813      	ldr	r3, [r2, #0]
 8007e86:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8007e88:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8007e8a:	42a0      	cmp	r0, r4
 8007e8c:	bf2c      	ite	cs
 8007e8e:	2000      	movcs	r0, #0
 8007e90:	2001      	movcc	r0, #1
 8007e92:	e7e9      	b.n	8007e68 <xTaskPriorityInherit+0x6c>
 8007e94:	20007eb0 	.word	0x20007eb0
 8007e98:	20007ebc 	.word	0x20007ebc
 8007e9c:	20007f5c 	.word	0x20007f5c

08007ea0 <xTaskPriorityDisinherit>:
xTaskPriorityDisinherit():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3883
	{
 8007ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3887
		if( pxMutexHolder != NULL )
 8007ea2:	4604      	mov	r4, r0
 8007ea4:	b908      	cbnz	r0, 8007eaa <xTaskPriorityDisinherit+0xa>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3885
	BaseType_t xReturn = pdFALSE;
 8007ea6:	2000      	movs	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3955
	}
 8007ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3893
			configASSERT( pxTCB == pxCurrentTCB );
 8007eaa:	4b22      	ldr	r3, [pc, #136]	; (8007f34 <xTaskPriorityDisinherit+0x94>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4283      	cmp	r3, r0
 8007eb0:	d008      	beq.n	8007ec4 <xTaskPriorityDisinherit+0x24>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8007eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb6:	f383 8811 	msr	BASEPRI, r3
 8007eba:	f3bf 8f6f 	isb	sy
 8007ebe:	f3bf 8f4f 	dsb	sy
xTaskPriorityDisinherit():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3893 (discriminator 1)
 8007ec2:	e7fe      	b.n	8007ec2 <xTaskPriorityDisinherit+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3894 (discriminator 2)
			configASSERT( pxTCB->uxMutexesHeld );
 8007ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ec6:	b943      	cbnz	r3, 8007eda <xTaskPriorityDisinherit+0x3a>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8007ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
xTaskPriorityDisinherit():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3894 (discriminator 2)
 8007ed8:	e7fe      	b.n	8007ed8 <xTaskPriorityDisinherit+0x38>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3899 (discriminator 2)
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007eda:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3895 (discriminator 2)
			( pxTCB->uxMutexesHeld )--;
 8007edc:	3b01      	subs	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3899 (discriminator 2)
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ede:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3895 (discriminator 2)
			( pxTCB->uxMutexesHeld )--;
 8007ee0:	6503      	str	r3, [r0, #80]	; 0x50
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3899 (discriminator 2)
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ee2:	4291      	cmp	r1, r2
 8007ee4:	d0df      	beq.n	8007ea6 <xTaskPriorityDisinherit+0x6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3902
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1dd      	bne.n	8007ea6 <xTaskPriorityDisinherit+0x6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3909
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007eea:	1d05      	adds	r5, r0, #4
 8007eec:	4e12      	ldr	r6, [pc, #72]	; (8007f38 <xTaskPriorityDisinherit+0x98>)
 8007eee:	4628      	mov	r0, r5
 8007ef0:	f000 f921 	bl	8008136 <uxListRemove>
 8007ef4:	4a11      	ldr	r2, [pc, #68]	; (8007f3c <xTaskPriorityDisinherit+0x9c>)
 8007ef6:	b950      	cbnz	r0, 8007f0e <xTaskPriorityDisinherit+0x6e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3911
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007ef8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007efa:	2114      	movs	r1, #20
 8007efc:	4379      	muls	r1, r7
 8007efe:	5873      	ldr	r3, [r6, r1]
 8007f00:	b92b      	cbnz	r3, 8007f0e <xTaskPriorityDisinherit+0x6e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3911 (discriminator 1)
 8007f02:	2001      	movs	r0, #1
 8007f04:	6813      	ldr	r3, [r2, #0]
 8007f06:	40b8      	lsls	r0, r7
 8007f08:	ea23 0300 	bic.w	r3, r3, r0
 8007f0c:	6013      	str	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3921
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f0e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3926
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f10:	f1c3 0107 	rsb	r1, r3, #7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3921
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f14:	62e3      	str	r3, [r4, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3926
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f16:	61a1      	str	r1, [r4, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3927
					prvAddTaskToReadyList( pxTCB );
 8007f18:	2401      	movs	r4, #1
 8007f1a:	6811      	ldr	r1, [r2, #0]
 8007f1c:	fa04 f003 	lsl.w	r0, r4, r3
 8007f20:	4308      	orrs	r0, r1
 8007f22:	4629      	mov	r1, r5
 8007f24:	6010      	str	r0, [r2, #0]
 8007f26:	2014      	movs	r0, #20
 8007f28:	fb00 6003 	mla	r0, r0, r3, r6
 8007f2c:	f000 f8e0 	bl	80080f0 <vListInsertEnd>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3937
					xReturn = pdTRUE;
 8007f30:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3954
		return xReturn;
 8007f32:	e7b9      	b.n	8007ea8 <xTaskPriorityDisinherit+0x8>
 8007f34:	20007eb0 	.word	0x20007eb0
 8007f38:	20007ebc 	.word	0x20007ebc
 8007f3c:	20007f5c 	.word	0x20007f5c

08007f40 <vTaskPriorityDisinheritAfterTimeout>:
vTaskPriorityDisinheritAfterTimeout():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3963
	{
 8007f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3968
		if( pxMutexHolder != NULL )
 8007f42:	4604      	mov	r4, r0
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d04b      	beq.n	8007fe0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3972
			configASSERT( pxTCB->uxMutexesHeld );
 8007f48:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007f4a:	b942      	cbnz	r2, 8007f5e <vTaskPriorityDisinheritAfterTimeout+0x1e>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8007f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f50:	f383 8811 	msr	BASEPRI, r3
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	f3bf 8f4f 	dsb	sy
vTaskPriorityDisinheritAfterTimeout():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3972 (discriminator 1)
 8007f5c:	e7fe      	b.n	8007f5c <vTaskPriorityDisinheritAfterTimeout+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3978 (discriminator 2)
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007f5e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007f60:	4299      	cmp	r1, r3
 8007f62:	bf38      	it	cc
 8007f64:	4619      	movcc	r1, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3988 (discriminator 2)
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007f66:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007f68:	428b      	cmp	r3, r1
 8007f6a:	d039      	beq.n	8007fe0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3994
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007f6c:	2a01      	cmp	r2, #1
 8007f6e:	d137      	bne.n	8007fe0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3999
					configASSERT( pxTCB != pxCurrentTCB );
 8007f70:	4a1c      	ldr	r2, [pc, #112]	; (8007fe4 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8007f72:	6812      	ldr	r2, [r2, #0]
 8007f74:	4282      	cmp	r2, r0
 8007f76:	d108      	bne.n	8007f8a <vTaskPriorityDisinheritAfterTimeout+0x4a>
vPortRaiseBASEPRI():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h:195
 8007f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7c:	f383 8811 	msr	BASEPRI, r3
 8007f80:	f3bf 8f6f 	isb	sy
 8007f84:	f3bf 8f4f 	dsb	sy
vTaskPriorityDisinheritAfterTimeout():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:3999 (discriminator 2)
 8007f88:	e7fe      	b.n	8007f88 <vTaskPriorityDisinheritAfterTimeout+0x48>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4010 (discriminator 2)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f8a:	6982      	ldr	r2, [r0, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4025 (discriminator 2)
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007f8c:	2614      	movs	r6, #20
 8007f8e:	4d16      	ldr	r5, [pc, #88]	; (8007fe8 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4010 (discriminator 2)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f90:	2a00      	cmp	r2, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4006 (discriminator 2)
					pxTCB->uxPriority = uxPriorityToUse;
 8007f92:	62c1      	str	r1, [r0, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4025 (discriminator 2)
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007f94:	fb06 5303 	mla	r3, r6, r3, r5
 8007f98:	6942      	ldr	r2, [r0, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4012 (discriminator 2)
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f9a:	bfa4      	itt	ge
 8007f9c:	f1c1 0107 	rsbge	r1, r1, #7
 8007fa0:	6181      	strge	r1, [r0, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4025 (discriminator 2)
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d11c      	bne.n	8007fe0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4027
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fa6:	1d07      	adds	r7, r0, #4
 8007fa8:	4638      	mov	r0, r7
 8007faa:	f000 f8c4 	bl	8008136 <uxListRemove>
 8007fae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007fb0:	4c0e      	ldr	r4, [pc, #56]	; (8007fec <vTaskPriorityDisinheritAfterTimeout+0xac>)
 8007fb2:	b940      	cbnz	r0, 8007fc6 <vTaskPriorityDisinheritAfterTimeout+0x86>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4029
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007fb4:	4356      	muls	r6, r2
 8007fb6:	59ab      	ldr	r3, [r5, r6]
 8007fb8:	b92b      	cbnz	r3, 8007fc6 <vTaskPriorityDisinheritAfterTimeout+0x86>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4029 (discriminator 1)
 8007fba:	2101      	movs	r1, #1
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	4091      	lsls	r1, r2
 8007fc0:	ea23 0301 	bic.w	r3, r3, r1
 8007fc4:	6023      	str	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4036
						prvAddTaskToReadyList( pxTCB );
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	6821      	ldr	r1, [r4, #0]
 8007fca:	2014      	movs	r0, #20
 8007fcc:	4093      	lsls	r3, r2
 8007fce:	fb00 5002 	mla	r0, r0, r2, r5
 8007fd2:	430b      	orrs	r3, r1
 8007fd4:	4639      	mov	r1, r7
 8007fd6:	6023      	str	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4057
	}
 8007fd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4036
						prvAddTaskToReadyList( pxTCB );
 8007fdc:	f000 b888 	b.w	80080f0 <vListInsertEnd>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4057
	}
 8007fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	20007eb0 	.word	0x20007eb0
 8007fe8:	20007ebc 	.word	0x20007ebc
 8007fec:	20007f5c 	.word	0x20007f5c

08007ff0 <vTaskList>:
vTaskList():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4154
	{
 8007ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4189
		uxArraySize = uxCurrentNumberOfTasks;
 8007ff4:	4b2e      	ldr	r3, [pc, #184]	; (80080b0 <vTaskList+0xc0>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4185
		*pcWriteBuffer = 0x00;
 8007ff6:	2500      	movs	r5, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4154
	{
 8007ff8:	4607      	mov	r7, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4194
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8007ffa:	2424      	movs	r4, #36	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4189
		uxArraySize = uxCurrentNumberOfTasks;
 8007ffc:	681a      	ldr	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4185
		*pcWriteBuffer = 0x00;
 8007ffe:	7005      	strb	r5, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4189
		uxArraySize = uxCurrentNumberOfTasks;
 8008000:	9202      	str	r2, [sp, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4194
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8008002:	6818      	ldr	r0, [r3, #0]
 8008004:	4360      	muls	r0, r4
 8008006:	f7f8 f9f7 	bl	80003f8 <pvPortMalloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4196
		if( pxTaskStatusArray != NULL )
 800800a:	4606      	mov	r6, r0
 800800c:	2800      	cmp	r0, #0
 800800e:	d04b      	beq.n	80080a8 <vTaskList+0xb8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4199
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8008010:	46a0      	mov	r8, r4
 8008012:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80080b8 <vTaskList+0xc8>
 8008016:	9902      	ldr	r1, [sp, #8]
 8008018:	462a      	mov	r2, r5
 800801a:	f7ff fe95 	bl	8007d48 <uxTaskGetSystemState>
 800801e:	9002      	str	r0, [sp, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4202
			for( x = 0; x < uxArraySize; x++ )
 8008020:	9503      	str	r5, [sp, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4202 (discriminator 1)
 8008022:	9a03      	ldr	r2, [sp, #12]
 8008024:	9b02      	ldr	r3, [sp, #8]
 8008026:	429a      	cmp	r2, r3
 8008028:	d305      	bcc.n	8008036 <vTaskList+0x46>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4238
			vPortFree( pxTaskStatusArray );
 800802a:	4630      	mov	r0, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4244
	}
 800802c:	b004      	add	sp, #16
 800802e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4238
			vPortFree( pxTaskStatusArray );
 8008032:	f7f8 ba6b 	b.w	800050c <vPortFree>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4204
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8008036:	9b03      	ldr	r3, [sp, #12]
prvWriteNameToBuffer():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4132
		strcpy( pcBuffer, pcTaskName );
 8008038:	4638      	mov	r0, r7
vTaskList():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4204
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800803a:	fb04 6303 	mla	r3, r4, r3, r6
 800803e:	7b1b      	ldrb	r3, [r3, #12]
 8008040:	2b04      	cmp	r3, #4
 8008042:	bf94      	ite	ls
 8008044:	f819 a003 	ldrbls.w	sl, [r9, r3]
 8008048:	f04f 0a00 	movhi.w	sl, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4229
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800804c:	9b03      	ldr	r3, [sp, #12]
 800804e:	fb08 6303 	mla	r3, r8, r3, r6
prvWriteNameToBuffer():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4132
		strcpy( pcBuffer, pcTaskName );
 8008052:	6859      	ldr	r1, [r3, #4]
 8008054:	f005 f81e 	bl	800d094 <strcpy>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4136
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8008058:	4638      	mov	r0, r7
 800805a:	f7f8 f94b 	bl	80002f4 <strlen>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4138
			pcBuffer[ x ] = ' ';
 800805e:	2220      	movs	r2, #32
 8008060:	183d      	adds	r5, r7, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4136
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8008062:	1beb      	subs	r3, r5, r7
 8008064:	2b0e      	cmp	r3, #14
 8008066:	d91c      	bls.n	80080a2 <vTaskList+0xb2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4142
		pcBuffer[ x ] = 0x00;
 8008068:	2300      	movs	r3, #0
vTaskList():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4232
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800806a:	4628      	mov	r0, r5
prvWriteNameToBuffer():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4142
		pcBuffer[ x ] = 0x00;
 800806c:	702b      	strb	r3, [r5, #0]
vTaskList():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4232
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800806e:	9b03      	ldr	r3, [sp, #12]
 8008070:	9a03      	ldr	r2, [sp, #12]
 8008072:	9903      	ldr	r1, [sp, #12]
 8008074:	fb04 6303 	mla	r3, r4, r3, r6
 8008078:	fb04 6202 	mla	r2, r4, r2, r6
 800807c:	fb04 6101 	mla	r1, r4, r1, r6
 8008080:	6889      	ldr	r1, [r1, #8]
 8008082:	9101      	str	r1, [sp, #4]
 8008084:	8c12      	ldrh	r2, [r2, #32]
 8008086:	490b      	ldr	r1, [pc, #44]	; (80080b4 <vTaskList+0xc4>)
 8008088:	9200      	str	r2, [sp, #0]
 800808a:	4652      	mov	r2, sl
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	f004 ffd1 	bl	800d034 <siprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4233
				pcWriteBuffer += strlen( pcWriteBuffer );
 8008092:	4628      	mov	r0, r5
 8008094:	f7f8 f92e 	bl	80002f4 <strlen>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4202
			for( x = 0; x < uxArraySize; x++ )
 8008098:	9b03      	ldr	r3, [sp, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4233
				pcWriteBuffer += strlen( pcWriteBuffer );
 800809a:	182f      	adds	r7, r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4202
			for( x = 0; x < uxArraySize; x++ )
 800809c:	3301      	adds	r3, #1
 800809e:	9303      	str	r3, [sp, #12]
 80080a0:	e7bf      	b.n	8008022 <vTaskList+0x32>
prvWriteNameToBuffer():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4138
			pcBuffer[ x ] = ' ';
 80080a2:	f805 2b01 	strb.w	r2, [r5], #1
 80080a6:	e7dc      	b.n	8008062 <vTaskList+0x72>
vTaskList():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4244
	}
 80080a8:	b004      	add	sp, #16
 80080aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ae:	bf00      	nop
 80080b0:	20007f48 	.word	0x20007f48
 80080b4:	0801f4f7 	.word	0x0801f4f7
 80080b8:	0801f4f2 	.word	0x0801f4f2

080080bc <pvTaskIncrementMutexHeldCount>:
pvTaskIncrementMutexHeldCount():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4396
		if( pxCurrentTCB != NULL )
 80080bc:	4b04      	ldr	r3, [pc, #16]	; (80080d0 <pvTaskIncrementMutexHeldCount+0x14>)
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	b11a      	cbz	r2, 80080ca <pvTaskIncrementMutexHeldCount+0xe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4398
			( pxCurrentTCB->uxMutexesHeld )++;
 80080c2:	6819      	ldr	r1, [r3, #0]
 80080c4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80080c6:	3201      	adds	r2, #1
 80080c8:	650a      	str	r2, [r1, #80]	; 0x50
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4401
		return pxCurrentTCB;
 80080ca:	6818      	ldr	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/tasks.c:4402
	}
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	20007eb0 	.word	0x20007eb0

080080d4 <vListInitialise>:
vListInitialise():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:42
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080d4:	f100 0308 	add.w	r3, r0, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:46

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80080d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:42
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080dc:	6043      	str	r3, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:51

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080de:	6103      	str	r3, [r0, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:50
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:53

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80080e4:	2300      	movs	r3, #0
 80080e6:	6003      	str	r3, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:59

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80080e8:	4770      	bx	lr

080080ea <vListInitialiseItem>:
vListInitialiseItem():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:65
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80080ea:	2300      	movs	r3, #0
 80080ec:	6103      	str	r3, [r0, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:71

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80080ee:	4770      	bx	lr

080080f0 <vListInsertEnd>:
vListInsertEnd():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:76
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80080f0:	6843      	ldr	r3, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:88

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80080f2:	689a      	ldr	r2, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:87
	pxNewListItem->pxNext = pxIndex;
 80080f4:	604b      	str	r3, [r1, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:88
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80080f6:	608a      	str	r2, [r1, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:93

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80080f8:	689a      	ldr	r2, [r3, #8]
 80080fa:	6051      	str	r1, [r2, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:94
	pxIndex->pxPrevious = pxNewListItem;
 80080fc:	6099      	str	r1, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:99

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80080fe:	6803      	ldr	r3, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:97
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008100:	6108      	str	r0, [r1, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:99
	( pxList->uxNumberOfItems )++;
 8008102:	3301      	adds	r3, #1
 8008104:	6003      	str	r3, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:100
}
 8008106:	4770      	bx	lr

08008108 <vListInsert>:
vListInsert():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:106
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008108:	680a      	ldr	r2, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:122
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800810a:	1c53      	adds	r3, r2, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:104
{
 800810c:	b530      	push	{r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:122
	if( xValueOfInsertion == portMAX_DELAY )
 800810e:	d10a      	bne.n	8008126 <vListInsert+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:124
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008110:	6903      	ldr	r3, [r0, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:157
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008112:	685a      	ldr	r2, [r3, #4]
 8008114:	604a      	str	r2, [r1, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:158
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008116:	6091      	str	r1, [r2, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:159
	pxNewListItem->pxPrevious = pxIterator;
 8008118:	608b      	str	r3, [r1, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:160
	pxIterator->pxNext = pxNewListItem;
 800811a:	6059      	str	r1, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:166

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800811c:	6803      	ldr	r3, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:164
	pxNewListItem->pvContainer = ( void * ) pxList;
 800811e:	6108      	str	r0, [r1, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:166
	( pxList->uxNumberOfItems )++;
 8008120:	3301      	adds	r3, #1
 8008122:	6003      	str	r3, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:167
}
 8008124:	bd30      	pop	{r4, r5, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:150
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008126:	f100 0308 	add.w	r3, r0, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:150 (discriminator 1)
 800812a:	685c      	ldr	r4, [r3, #4]
 800812c:	6825      	ldr	r5, [r4, #0]
 800812e:	4295      	cmp	r5, r2
 8008130:	d8ef      	bhi.n	8008112 <vListInsert+0xa>
 8008132:	4623      	mov	r3, r4
 8008134:	e7f9      	b.n	800812a <vListInsert+0x22>

08008136 <uxListRemove>:
uxListRemove():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:174

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008136:	6903      	ldr	r3, [r0, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:176

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008138:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800813c:	608a      	str	r2, [r1, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:177
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800813e:	6051      	str	r1, [r2, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:183

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008140:	6859      	ldr	r1, [r3, #4]
 8008142:	4281      	cmp	r1, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:185
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008144:	bf08      	it	eq
 8008146:	605a      	streq	r2, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:192
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008148:	2200      	movs	r2, #0
 800814a:	6102      	str	r2, [r0, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:193
	( pxList->uxNumberOfItems )--;
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	3a01      	subs	r2, #1
 8008150:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:195

	return pxList->uxNumberOfItems;
 8008152:	6818      	ldr	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/FreeRTOS/Source/list.c:196
}
 8008154:	4770      	bx	lr
	...

08008158 <tcp_pbuf_prealloc>:
tcp_pbuf_prealloc():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:236
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8008158:	b570      	push	{r4, r5, r6, lr}
 800815a:	460c      	mov	r4, r1
 800815c:	461e      	mov	r6, r3
 800815e:	f89d 1018 	ldrb.w	r1, [sp, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:247
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8008162:	4294      	cmp	r4, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:236
{
 8008164:	9b04      	ldr	r3, [sp, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:247
  if (length < max_length) {
 8008166:	d228      	bcs.n	80081ba <tcp_pbuf_prealloc+0x62>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:259
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8008168:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800816c:	07ad      	lsls	r5, r5, #30
 800816e:	d407      	bmi.n	8008180 <tcp_pbuf_prealloc+0x28>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:259 (discriminator 1)
 8008170:	7e9d      	ldrb	r5, [r3, #26]
 8008172:	066d      	lsls	r5, r5, #25
 8008174:	d421      	bmi.n	80081ba <tcp_pbuf_prealloc+0x62>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:260
        (!(pcb->flags & TF_NODELAY) &&
 8008176:	b119      	cbz	r1, 8008180 <tcp_pbuf_prealloc+0x28>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:261
         (!first_seg ||
 8008178:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800817a:	b909      	cbnz	r1, 8008180 <tcp_pbuf_prealloc+0x28>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:262
          pcb->unsent != NULL ||
 800817c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800817e:	b1e3      	cbz	r3, 80081ba <tcp_pbuf_prealloc+0x62>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:264
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8008180:	f204 53b7 	addw	r3, r4, #1463	; 0x5b7
 8008184:	f023 0103 	bic.w	r1, r3, #3
 8008188:	4291      	cmp	r1, r2
 800818a:	bf28      	it	cs
 800818c:	4611      	movcs	r1, r2
 800818e:	b289      	uxth	r1, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:268
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8008190:	2200      	movs	r2, #0
 8008192:	f002 fbdf 	bl	800a954 <pbuf_alloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:269
  if (p == NULL) {
 8008196:	4605      	mov	r5, r0
 8008198:	b168      	cbz	r0, 80081b6 <tcp_pbuf_prealloc+0x5e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:272
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800819a:	6803      	ldr	r3, [r0, #0]
 800819c:	b133      	cbz	r3, 80081ac <tcp_pbuf_prealloc+0x54>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:272 (discriminator 1)
 800819e:	4b08      	ldr	r3, [pc, #32]	; (80081c0 <tcp_pbuf_prealloc+0x68>)
 80081a0:	f44f 7288 	mov.w	r2, #272	; 0x110
 80081a4:	4907      	ldr	r1, [pc, #28]	; (80081c4 <tcp_pbuf_prealloc+0x6c>)
 80081a6:	4808      	ldr	r0, [pc, #32]	; (80081c8 <tcp_pbuf_prealloc+0x70>)
 80081a8:	f004 fef8 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:273
  *oversize = p->len - length;
 80081ac:	896b      	ldrh	r3, [r5, #10]
 80081ae:	1b1b      	subs	r3, r3, r4
 80081b0:	8033      	strh	r3, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:275
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80081b2:	812c      	strh	r4, [r5, #8]
 80081b4:	816c      	strh	r4, [r5, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:277
  return p;
}
 80081b6:	4628      	mov	r0, r5
 80081b8:	bd70      	pop	{r4, r5, r6, pc}
 80081ba:	4621      	mov	r1, r4
 80081bc:	e7e8      	b.n	8008190 <tcp_pbuf_prealloc+0x38>
 80081be:	bf00      	nop
 80081c0:	0801f683 	.word	0x0801f683
 80081c4:	0801f6e8 	.word	0x0801f6e8
 80081c8:	0800e36a 	.word	0x0800e36a

080081cc <tcp_create_segment>:
tcp_create_segment():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:174
{
 80081cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d0:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
 80081d4:	4681      	mov	r9, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:178
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80081d6:	2003      	movs	r0, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:174
{
 80081d8:	460e      	mov	r6, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:176
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80081da:	ea4f 078b 	mov.w	r7, fp, lsl #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:174
{
 80081de:	4690      	mov	r8, r2
 80081e0:	469a      	mov	sl, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:178
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80081e2:	f004 f83f 	bl	800c264 <memp_malloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:176
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80081e6:	b2fd      	uxtb	r5, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:178
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80081e8:	4604      	mov	r4, r0
 80081ea:	b928      	cbnz	r0, 80081f8 <tcp_create_segment+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:180
    pbuf_free(p);
 80081ec:	4630      	mov	r0, r6
 80081ee:	f002 fb49 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:215
}
 80081f2:	4620      	mov	r0, r4
 80081f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:184
  seg->next = NULL;
 80081f8:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:183
  seg->flags = optflags;
 80081fa:	f880 b00a 	strb.w	fp, [r0, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:186
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80081fe:	b2bf      	uxth	r7, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:185
  seg->p = p;
 8008200:	e9c0 3600 	strd	r3, r6, [r0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:186
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8008204:	8933      	ldrh	r3, [r6, #8]
 8008206:	42bb      	cmp	r3, r7
 8008208:	d205      	bcs.n	8008216 <tcp_create_segment+0x4a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:186 (discriminator 1)
 800820a:	4b1b      	ldr	r3, [pc, #108]	; (8008278 <tcp_create_segment+0xac>)
 800820c:	22ba      	movs	r2, #186	; 0xba
 800820e:	491b      	ldr	r1, [pc, #108]	; (800827c <tcp_create_segment+0xb0>)
 8008210:	481b      	ldr	r0, [pc, #108]	; (8008280 <tcp_create_segment+0xb4>)
 8008212:	f004 fec3 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:187
  seg->len = p->tot_len - optlen;
 8008216:	8933      	ldrh	r3, [r6, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:200
  if (pbuf_header(p, TCP_HLEN)) {
 8008218:	2114      	movs	r1, #20
 800821a:	4630      	mov	r0, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:187
  seg->len = p->tot_len - optlen;
 800821c:	1bdf      	subs	r7, r3, r7
 800821e:	8127      	strh	r7, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:200
  if (pbuf_header(p, TCP_HLEN)) {
 8008220:	f002 fb2a 	bl	800a878 <pbuf_header>
 8008224:	4607      	mov	r7, r0
 8008226:	b120      	cbz	r0, 8008232 <tcp_create_segment+0x66>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:203
    tcp_seg_free(seg);
 8008228:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:204
    return NULL;
 800822a:	2400      	movs	r4, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:203
    tcp_seg_free(seg);
 800822c:	f001 f842 	bl	80092b4 <tcp_seg_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:204
    return NULL;
 8008230:	e7df      	b.n	80081f2 <tcp_create_segment+0x26>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:206
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8008232:	6863      	ldr	r3, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:207
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8008234:	f8b9 0016 	ldrh.w	r0, [r9, #22]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:206
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8008238:	685e      	ldr	r6, [r3, #4]
 800823a:	60e6      	str	r6, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:207
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800823c:	f002 fa98 	bl	800a770 <lwip_htons>
 8008240:	8030      	strh	r0, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:208
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8008242:	68e6      	ldr	r6, [r4, #12]
 8008244:	f8b9 0018 	ldrh.w	r0, [r9, #24]
 8008248:	f002 fa92 	bl	800a770 <lwip_htons>
 800824c:	8070      	strh	r0, [r6, #2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:209
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800824e:	68e6      	ldr	r6, [r4, #12]
 8008250:	4650      	mov	r0, sl
 8008252:	f002 fa90 	bl	800a776 <lwip_htonl>
 8008256:	6070      	str	r0, [r6, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:211
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8008258:	02a8      	lsls	r0, r5, #10
 800825a:	68e6      	ldr	r6, [r4, #12]
 800825c:	f500 40a0 	add.w	r0, r0, #20480	; 0x5000
 8008260:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8008264:	ea40 0008 	orr.w	r0, r0, r8
 8008268:	f002 fa82 	bl	800a770 <lwip_htons>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:213
  seg->tcphdr->urgp = 0;
 800826c:	68e3      	ldr	r3, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:211
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800826e:	81b0      	strh	r0, [r6, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:213
  seg->tcphdr->urgp = 0;
 8008270:	749f      	strb	r7, [r3, #18]
 8008272:	74df      	strb	r7, [r3, #19]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:214
  return seg;
 8008274:	e7bd      	b.n	80081f2 <tcp_create_segment+0x26>
 8008276:	bf00      	nop
 8008278:	0801f683 	.word	0x0801f683
 800827c:	0801f50b 	.word	0x0801f50b
 8008280:	0800e36a 	.word	0x0800e36a

08008284 <tcp_output_alloc_header.constprop.0>:
tcp_output_alloc_header():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:112
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8008284:	3114      	adds	r1, #20
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:108
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8008286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:112
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8008288:	b289      	uxth	r1, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:108
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800828a:	4605      	mov	r5, r0
 800828c:	4617      	mov	r7, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:112
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800828e:	2001      	movs	r0, #1
 8008290:	2200      	movs	r2, #0
 8008292:	f002 fb5f 	bl	800a954 <pbuf_alloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:113
  if (p != NULL) {
 8008296:	4606      	mov	r6, r0
 8008298:	b340      	cbz	r0, 80082ec <tcp_output_alloc_header.constprop.0+0x68>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:114
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800829a:	8943      	ldrh	r3, [r0, #10]
 800829c:	2b13      	cmp	r3, #19
 800829e:	d805      	bhi.n	80082ac <tcp_output_alloc_header.constprop.0+0x28>
 80082a0:	4b13      	ldr	r3, [pc, #76]	; (80082f0 <tcp_output_alloc_header.constprop.0+0x6c>)
 80082a2:	2273      	movs	r2, #115	; 0x73
 80082a4:	4913      	ldr	r1, [pc, #76]	; (80082f4 <tcp_output_alloc_header.constprop.0+0x70>)
 80082a6:	4814      	ldr	r0, [pc, #80]	; (80082f8 <tcp_output_alloc_header.constprop.0+0x74>)
 80082a8:	f004 fe78 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:116
    tcphdr = (struct tcp_hdr *)p->payload;
 80082ac:	6874      	ldr	r4, [r6, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:117
    tcphdr->src = lwip_htons(pcb->local_port);
 80082ae:	8ae8      	ldrh	r0, [r5, #22]
 80082b0:	f002 fa5e 	bl	800a770 <lwip_htons>
 80082b4:	8020      	strh	r0, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:118
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80082b6:	8b28      	ldrh	r0, [r5, #24]
 80082b8:	f002 fa5a 	bl	800a770 <lwip_htons>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:119
    tcphdr->seqno = seqno_be;
 80082bc:	6067      	str	r7, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:118
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80082be:	8060      	strh	r0, [r4, #2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:120
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80082c0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80082c2:	f002 fa58 	bl	800a776 <lwip_htonl>
 80082c6:	60a0      	str	r0, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:121
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 80082c8:	f245 0010 	movw	r0, #20496	; 0x5010
 80082cc:	f002 fa50 	bl	800a770 <lwip_htons>
 80082d0:	81a0      	strh	r0, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:122
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80082d2:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 80082d4:	f002 fa4c 	bl	800a770 <lwip_htons>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:123
    tcphdr->chksum = 0;
 80082d8:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:127
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80082da:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:123
    tcphdr->chksum = 0;
 80082dc:	7423      	strb	r3, [r4, #16]
 80082de:	7463      	strb	r3, [r4, #17]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:124
    tcphdr->urgp = 0;
 80082e0:	74a3      	strb	r3, [r4, #18]
 80082e2:	74e3      	strb	r3, [r4, #19]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:127
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80082e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:122
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80082e6:	81e0      	strh	r0, [r4, #14]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:127
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80082e8:	4413      	add	r3, r2
 80082ea:	62eb      	str	r3, [r5, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:130
}
 80082ec:	4630      	mov	r0, r6
 80082ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082f0:	0801f683 	.word	0x0801f683
 80082f4:	0801f655 	.word	0x0801f655
 80082f8:	0800e36a 	.word	0x0800e36a

080082fc <tcp_write>:
tcp_write():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:369
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80082fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008300:	b091      	sub	sp, #68	; 0x44
 8008302:	4604      	mov	r4, r0
 8008304:	930a      	str	r3, [sp, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:377
  u16_t pos = 0; /* position in 'arg' data */
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8008306:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:369
{
 8008308:	9205      	str	r2, [sp, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:377
  u16_t oversize = 0;
 800830a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:391
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800830e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8008312:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8008314:	085b      	lsrs	r3, r3, #1
 8008316:	4293      	cmp	r3, r2
 8008318:	bf28      	it	cs
 800831a:	4613      	movcs	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:392
  mss_local = mss_local ? mss_local : pcb->mss;
 800831c:	2b00      	cmp	r3, #0
 800831e:	bf08      	it	eq
 8008320:	4613      	moveq	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:401
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8008322:	e9cd 3107 	strd	r3, r1, [sp, #28]
 8008326:	b959      	cbnz	r1, 8008340 <tcp_write+0x44>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:401 (discriminator 1)
 8008328:	4ba5      	ldr	r3, [pc, #660]	; (80085c0 <tcp_write+0x2c4>)
 800832a:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800832e:	49a5      	ldr	r1, [pc, #660]	; (80085c4 <tcp_write+0x2c8>)
 8008330:	48a5      	ldr	r0, [pc, #660]	; (80085c8 <tcp_write+0x2cc>)
 8008332:	f004 fe33 	bl	800cf9c <iprintf>
 8008336:	f06f 000f 	mvn.w	r0, #15
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:774
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
}
 800833a:	b011      	add	sp, #68	; 0x44
 800833c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
tcp_write_checks():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:310
  if ((pcb->state != ESTABLISHED) &&
 8008340:	7d23      	ldrb	r3, [r4, #20]
 8008342:	2b07      	cmp	r3, #7
 8008344:	d003      	beq.n	800834e <tcp_write+0x52>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:311
      (pcb->state != CLOSE_WAIT) &&
 8008346:	3b02      	subs	r3, #2
 8008348:	2b02      	cmp	r3, #2
 800834a:	f200 825a 	bhi.w	8008802 <tcp_write+0x506>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:316
  } else if (len == 0) {
 800834e:	9b05      	ldr	r3, [sp, #20]
 8008350:	b1e3      	cbz	r3, 800838c <tcp_write+0x90>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:321
  if (len > pcb->snd_buf) {
 8008352:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8008356:	9a05      	ldr	r2, [sp, #20]
 8008358:	4293      	cmp	r3, r2
 800835a:	d206      	bcs.n	800836a <tcp_write+0x6e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:324
    pcb->flags |= TF_NAGLEMEMERR;
 800835c:	7ea3      	ldrb	r3, [r4, #26]
 800835e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008362:	76a3      	strb	r3, [r4, #26]
tcp_write():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:773
  return ERR_MEM;
 8008364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008368:	e7e7      	b.n	800833a <tcp_write+0x3e>
tcp_write_checks():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:333
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800836a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800836e:	2a07      	cmp	r2, #7
 8008370:	d8f4      	bhi.n	800835c <tcp_write+0x60>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:340
  if (pcb->snd_queuelen != 0) {
 8008372:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008374:	2a00      	cmp	r2, #0
 8008376:	d060      	beq.n	800843a <tcp_write+0x13e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:341
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8008378:	b943      	cbnz	r3, 800838c <tcp_write+0x90>
 800837a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800837c:	b933      	cbnz	r3, 800838c <tcp_write+0x90>
 800837e:	4b90      	ldr	r3, [pc, #576]	; (80085c0 <tcp_write+0x2c4>)
 8008380:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8008384:	4991      	ldr	r1, [pc, #580]	; (80085cc <tcp_write+0x2d0>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:344
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8008386:	4890      	ldr	r0, [pc, #576]	; (80085c8 <tcp_write+0x2cc>)
 8008388:	f004 fe08 	bl	800cf9c <iprintf>
tcp_write():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:408
  queuelen = pcb->snd_queuelen;
 800838c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:445
  if (pcb->unsent != NULL) {
 8008390:	f8d4 b068 	ldr.w	fp, [r4, #104]	; 0x68
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:408
  queuelen = pcb->snd_queuelen;
 8008394:	9306      	str	r3, [sp, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:445
  if (pcb->unsent != NULL) {
 8008396:	f1bb 0f00 	cmp.w	fp, #0
 800839a:	f000 80c6 	beq.w	800852a <tcp_write+0x22e>
 800839e:	465d      	mov	r5, fp
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:450 (discriminator 1)
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80083a0:	f8d5 9000 	ldr.w	r9, [r5]
 80083a4:	f1b9 0f00 	cmp.w	r9, #0
 80083a8:	d150      	bne.n	800844c <tcp_write+0x150>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:454
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 80083aa:	7aae      	ldrb	r6, [r5, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:455
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80083ac:	892b      	ldrh	r3, [r5, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:454
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 80083ae:	00b6      	lsls	r6, r6, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:455
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80083b0:	9a07      	ldr	r2, [sp, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:454
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 80083b2:	f006 0604 	and.w	r6, r6, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:455
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80083b6:	4433      	add	r3, r6
 80083b8:	429a      	cmp	r2, r3
 80083ba:	da06      	bge.n	80083ca <tcp_write+0xce>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:455 (discriminator 1)
 80083bc:	4b80      	ldr	r3, [pc, #512]	; (80085c0 <tcp_write+0x2c4>)
 80083be:	f240 12c7 	movw	r2, #455	; 0x1c7
 80083c2:	4983      	ldr	r1, [pc, #524]	; (80085d0 <tcp_write+0x2d4>)
 80083c4:	4880      	ldr	r0, [pc, #512]	; (80085c8 <tcp_write+0x2cc>)
 80083c6:	f004 fde9 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:456
    space = mss_local - (last_unsent->len + unsent_optlen);
 80083ca:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 80083ce:	9b07      	ldr	r3, [sp, #28]
 80083d0:	eba3 0a0a 	sub.w	sl, r3, sl
 80083d4:	ebaa 0a06 	sub.w	sl, sl, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:471
    oversize = pcb->unsent_oversize;
 80083d8:	f8b4 6064 	ldrh.w	r6, [r4, #100]	; 0x64
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:456
    space = mss_local - (last_unsent->len + unsent_optlen);
 80083dc:	fa1f fa8a 	uxth.w	sl, sl
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:471
    oversize = pcb->unsent_oversize;
 80083e0:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:472
    if (oversize > 0) {
 80083e4:	2e00      	cmp	r6, #0
 80083e6:	d033      	beq.n	8008450 <tcp_write+0x154>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:473
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80083e8:	4556      	cmp	r6, sl
 80083ea:	d906      	bls.n	80083fa <tcp_write+0xfe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:473 (discriminator 1)
 80083ec:	4b74      	ldr	r3, [pc, #464]	; (80085c0 <tcp_write+0x2c4>)
 80083ee:	f240 12d9 	movw	r2, #473	; 0x1d9
 80083f2:	4978      	ldr	r1, [pc, #480]	; (80085d4 <tcp_write+0x2d8>)
 80083f4:	4874      	ldr	r0, [pc, #464]	; (80085c8 <tcp_write+0x2cc>)
 80083f6:	f004 fdd1 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:475
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80083fa:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80083fe:	9a05      	ldr	r2, [sp, #20]
 8008400:	429a      	cmp	r2, r3
 8008402:	bf28      	it	cs
 8008404:	461a      	movcs	r2, r3
 8008406:	4552      	cmp	r2, sl
 8008408:	4616      	mov	r6, r2
 800840a:	bf28      	it	cs
 800840c:	4656      	movcs	r6, sl
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:477
      oversize -= oversize_used;
 800840e:	1b9b      	subs	r3, r3, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:478
      space -= oversize_used;
 8008410:	ebaa 0a06 	sub.w	sl, sl, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:477
      oversize -= oversize_used;
 8008414:	b29b      	uxth	r3, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:478
      space -= oversize_used;
 8008416:	fa1f fa8a 	uxth.w	sl, sl
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:477
      oversize -= oversize_used;
 800841a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:481
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800841e:	b153      	cbz	r3, 8008436 <tcp_write+0x13a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:481 (discriminator 1)
 8008420:	9b05      	ldr	r3, [sp, #20]
 8008422:	42b3      	cmp	r3, r6
 8008424:	f000 817b 	beq.w	800871e <tcp_write+0x422>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:481 (discriminator 2)
 8008428:	4b65      	ldr	r3, [pc, #404]	; (80085c0 <tcp_write+0x2c4>)
 800842a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800842e:	496a      	ldr	r1, [pc, #424]	; (80085d8 <tcp_write+0x2dc>)
 8008430:	4865      	ldr	r0, [pc, #404]	; (80085c8 <tcp_write+0x2cc>)
 8008432:	f004 fdb3 	bl	800cf9c <iprintf>
 8008436:	46ab      	mov	fp, r5
 8008438:	e00b      	b.n	8008452 <tcp_write+0x156>
tcp_write_checks():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:344
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800843a:	b913      	cbnz	r3, 8008442 <tcp_write+0x146>
 800843c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800843e:	2b00      	cmp	r3, #0
 8008440:	d0a4      	beq.n	800838c <tcp_write+0x90>
 8008442:	4b5f      	ldr	r3, [pc, #380]	; (80085c0 <tcp_write+0x2c4>)
 8008444:	f240 1259 	movw	r2, #345	; 0x159
 8008448:	4964      	ldr	r1, [pc, #400]	; (80085dc <tcp_write+0x2e0>)
 800844a:	e79c      	b.n	8008386 <tcp_write+0x8a>
tcp_write():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:344
 800844c:	464d      	mov	r5, r9
 800844e:	e7a7      	b.n	80083a0 <tcp_write+0xa4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:371
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8008450:	46b3      	mov	fp, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:495
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8008452:	9b05      	ldr	r3, [sp, #20]
 8008454:	429e      	cmp	r6, r3
 8008456:	f080 8166 	bcs.w	8008726 <tcp_write+0x42a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:495 (discriminator 1)
 800845a:	f1ba 0f00 	cmp.w	sl, #0
 800845e:	f000 8156 	beq.w	800870e <tcp_write+0x412>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:495 (discriminator 2)
 8008462:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8008466:	f1b8 0f00 	cmp.w	r8, #0
 800846a:	f000 8151 	beq.w	8008710 <tcp_write+0x414>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:496
      u16_t seglen = LWIP_MIN(space, len - pos);
 800846e:	eba3 0806 	sub.w	r8, r3, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:502
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:496
      u16_t seglen = LWIP_MIN(space, len - pos);
 8008474:	45d0      	cmp	r8, sl
 8008476:	bfa8      	it	ge
 8008478:	46d0      	movge	r8, sl
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:502
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800847a:	07db      	lsls	r3, r3, #31
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:496
      u16_t seglen = LWIP_MIN(space, len - pos);
 800847c:	fa1f f788 	uxth.w	r7, r8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:502
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008480:	d52b      	bpl.n	80084da <tcp_write+0x1de>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:504
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8008482:	2301      	movs	r3, #1
 8008484:	4652      	mov	r2, sl
 8008486:	4639      	mov	r1, r7
 8008488:	2004      	movs	r0, #4
 800848a:	9302      	str	r3, [sp, #8]
 800848c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800848e:	e9cd 4300 	strd	r4, r3, [sp]
 8008492:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8008496:	f7ff fe5f 	bl	8008158 <tcp_pbuf_prealloc>
 800849a:	4682      	mov	sl, r0
 800849c:	2800      	cmp	r0, #0
 800849e:	f000 81ad 	beq.w	80087fc <tcp_write+0x500>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:513
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80084a2:	9b08      	ldr	r3, [sp, #32]
 80084a4:	463a      	mov	r2, r7
 80084a6:	6840      	ldr	r0, [r0, #4]
 80084a8:	1999      	adds	r1, r3, r6
 80084aa:	f004 fd61 	bl	800cf70 <memcpy>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:517
        queuelen += pbuf_clen(concat_p);
 80084ae:	4650      	mov	r0, sl
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:534
          queuelen += pbuf_clen(concat_p);
 80084b0:	f002 fb92 	bl	800abd8 <pbuf_clen>
 80084b4:	9b06      	ldr	r3, [sp, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:383
  u16_t extendlen = 0;
 80084b6:	f04f 0800 	mov.w	r8, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:534
          queuelen += pbuf_clen(concat_p);
 80084ba:	4403      	add	r3, r0
 80084bc:	b29b      	uxth	r3, r3
 80084be:	9306      	str	r3, [sp, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:544
      pos += seglen;
 80084c0:	4437      	add	r7, r6
 80084c2:	46ab      	mov	fp, r5
 80084c4:	46d1      	mov	r9, sl
 80084c6:	b2bf      	uxth	r7, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:569
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80084c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:370
  struct pbuf *concat_p = NULL;
 80084ca:	f04f 0a00 	mov.w	sl, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:569
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80084ce:	f003 0301 	and.w	r3, r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:370
  struct pbuf *concat_p = NULL;
 80084d2:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:569
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80084d6:	930c      	str	r3, [sp, #48]	; 0x30
 80084d8:	e0ef      	b.n	80086ba <tcp_write+0x3be>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:522
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80084da:	686b      	ldr	r3, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:522 (discriminator 1)
 80084dc:	f8d3 a000 	ldr.w	sl, [r3]
 80084e0:	f1ba 0f00 	cmp.w	sl, #0
 80084e4:	d112      	bne.n	800850c <tcp_write+0x210>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:523
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80084e6:	7b1a      	ldrb	r2, [r3, #12]
 80084e8:	2a01      	cmp	r2, #1
 80084ea:	d111      	bne.n	8008510 <tcp_write+0x214>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:523 (discriminator 1)
 80084ec:	895a      	ldrh	r2, [r3, #10]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	4413      	add	r3, r2
 80084f2:	9a08      	ldr	r2, [sp, #32]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d10b      	bne.n	8008510 <tcp_write+0x214>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:524
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80084f8:	b136      	cbz	r6, 8008508 <tcp_write+0x20c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:524 (discriminator 1)
 80084fa:	4b31      	ldr	r3, [pc, #196]	; (80085c0 <tcp_write+0x2c4>)
 80084fc:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8008500:	4937      	ldr	r1, [pc, #220]	; (80085e0 <tcp_write+0x2e4>)
 8008502:	4831      	ldr	r0, [pc, #196]	; (80085c8 <tcp_write+0x2cc>)
 8008504:	f004 fd4a 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:525
          extendlen = seglen;
 8008508:	46b8      	mov	r8, r7
 800850a:	e7d9      	b.n	80084c0 <tcp_write+0x1c4>
 800850c:	4653      	mov	r3, sl
 800850e:	e7e5      	b.n	80084dc <tcp_write+0x1e0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:527
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8008510:	2201      	movs	r2, #1
 8008512:	4639      	mov	r1, r7
 8008514:	2004      	movs	r0, #4
 8008516:	f002 fa1d 	bl	800a954 <pbuf_alloc>
 800851a:	4682      	mov	sl, r0
 800851c:	2800      	cmp	r0, #0
 800851e:	f000 816d 	beq.w	80087fc <tcp_write+0x500>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:533
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8008522:	9b08      	ldr	r3, [sp, #32]
 8008524:	4433      	add	r3, r6
 8008526:	6043      	str	r3, [r0, #4]
 8008528:	e7c2      	b.n	80084b0 <tcp_write+0x1b4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:548
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800852a:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
 800852e:	2f00      	cmp	r7, #0
 8008530:	f000 80f0 	beq.w	8008714 <tcp_write+0x418>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:548 (discriminator 1)
 8008534:	4b22      	ldr	r3, [pc, #136]	; (80085c0 <tcp_write+0x2c4>)
 8008536:	f240 2225 	movw	r2, #549	; 0x225
 800853a:	492a      	ldr	r1, [pc, #168]	; (80085e4 <tcp_write+0x2e8>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:371 (discriminator 1)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800853c:	465d      	mov	r5, fp
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:548 (discriminator 1)
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800853e:	4822      	ldr	r0, [pc, #136]	; (80085c8 <tcp_write+0x2cc>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:370 (discriminator 1)
  struct pbuf *concat_p = NULL;
 8008540:	46d9      	mov	r9, fp
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:548 (discriminator 1)
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8008542:	f004 fd2b 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:383 (discriminator 1)
  u16_t extendlen = 0;
 8008546:	46d8      	mov	r8, fp
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:378 (discriminator 1)
  u16_t oversize_used = 0;
 8008548:	465e      	mov	r6, fp
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:372 (discriminator 1)
  u16_t pos = 0; /* position in 'arg' data */
 800854a:	465f      	mov	r7, fp
 800854c:	e7bc      	b.n	80084c8 <tcp_write+0x1cc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:561
    u16_t left = len - pos;
 800854e:	9b05      	ldr	r3, [sp, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:563
    u16_t seglen = LWIP_MIN(left, max_len);
 8008550:	9a07      	ldr	r2, [sp, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:561
    u16_t left = len - pos;
 8008552:	1bdb      	subs	r3, r3, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:563
    u16_t seglen = LWIP_MIN(left, max_len);
 8008554:	b29b      	uxth	r3, r3
 8008556:	4293      	cmp	r3, r2
 8008558:	bf28      	it	cs
 800855a:	4613      	movcs	r3, r2
 800855c:	b29b      	uxth	r3, r3
 800855e:	9309      	str	r3, [sp, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:569
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008562:	2b00      	cmp	r3, #0
 8008564:	d042      	beq.n	80085ec <tcp_write+0x2f0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:572
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8008566:	faba f38a 	clz	r3, sl
 800856a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800856c:	2000      	movs	r0, #0
 800856e:	095b      	lsrs	r3, r3, #5
 8008570:	9302      	str	r3, [sp, #8]
 8008572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008574:	e9cd 4300 	strd	r4, r3, [sp]
 8008578:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800857c:	f7ff fdec 	bl	8008158 <tcp_pbuf_prealloc>
 8008580:	4683      	mov	fp, r0
 8008582:	2800      	cmp	r0, #0
 8008584:	d051      	beq.n	800862a <tcp_write+0x32e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:576
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8008586:	8943      	ldrh	r3, [r0, #10]
 8008588:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800858a:	4293      	cmp	r3, r2
 800858c:	d206      	bcs.n	800859c <tcp_write+0x2a0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:576 (discriminator 1)
 800858e:	4b0c      	ldr	r3, [pc, #48]	; (80085c0 <tcp_write+0x2c4>)
 8008590:	f240 2241 	movw	r2, #577	; 0x241
 8008594:	4914      	ldr	r1, [pc, #80]	; (80085e8 <tcp_write+0x2ec>)
 8008596:	480c      	ldr	r0, [pc, #48]	; (80085c8 <tcp_write+0x2cc>)
 8008598:	f004 fd00 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:578
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800859c:	f8db 0004 	ldr.w	r0, [fp, #4]
 80085a0:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80085a4:	19d9      	adds	r1, r3, r7
 80085a6:	f004 fce3 	bl	800cf70 <memcpy>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:616
    queuelen += pbuf_clen(p);
 80085aa:	4658      	mov	r0, fp
 80085ac:	f002 fb14 	bl	800abd8 <pbuf_clen>
 80085b0:	9b06      	ldr	r3, [sp, #24]
 80085b2:	4403      	add	r3, r0
 80085b4:	b29b      	uxth	r3, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:621
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80085b6:	2b08      	cmp	r3, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:616
    queuelen += pbuf_clen(p);
 80085b8:	9306      	str	r3, [sp, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:621
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80085ba:	d95f      	bls.n	800867c <tcp_write+0x380>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:624
      pbuf_free(p);
 80085bc:	4658      	mov	r0, fp
 80085be:	e032      	b.n	8008626 <tcp_write+0x32a>
 80085c0:	0801f683 	.word	0x0801f683
 80085c4:	0801f6fc 	.word	0x0801f6fc
 80085c8:	0800e36a 	.word	0x0800e36a
 80085cc:	0801f72d 	.word	0x0801f72d
 80085d0:	0801f799 	.word	0x0801f799
 80085d4:	0801f7b0 	.word	0x0801f7b0
 80085d8:	0801f7d0 	.word	0x0801f7d0
 80085dc:	0801f767 	.word	0x0801f767
 80085e0:	0801f7ee 	.word	0x0801f7ee
 80085e4:	0801f817 	.word	0x0801f817
 80085e8:	0801f846 	.word	0x0801f846
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:587
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80085ec:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80085f0:	b133      	cbz	r3, 8008600 <tcp_write+0x304>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:587 (discriminator 1)
 80085f2:	4b85      	ldr	r3, [pc, #532]	; (8008808 <tcp_write+0x50c>)
 80085f4:	f240 224b 	movw	r2, #587	; 0x24b
 80085f8:	4984      	ldr	r1, [pc, #528]	; (800880c <tcp_write+0x510>)
 80085fa:	4885      	ldr	r0, [pc, #532]	; (8008810 <tcp_write+0x514>)
 80085fc:	f004 fcce 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:589
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8008600:	2201      	movs	r2, #1
 8008602:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008604:	2000      	movs	r0, #0
 8008606:	f002 f9a5 	bl	800a954 <pbuf_alloc>
 800860a:	b170      	cbz	r0, 800862a <tcp_write+0x32e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:602
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800860c:	9a08      	ldr	r2, [sp, #32]
 800860e:	900d      	str	r0, [sp, #52]	; 0x34
 8008610:	443a      	add	r2, r7
 8008612:	6042      	str	r2, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:605
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008614:	2200      	movs	r2, #0
 8008616:	4611      	mov	r1, r2
 8008618:	4610      	mov	r0, r2
 800861a:	f002 f99b 	bl	800a954 <pbuf_alloc>
 800861e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008620:	4683      	mov	fp, r0
 8008622:	bb38      	cbnz	r0, 8008674 <tcp_write+0x378>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:608
        pbuf_free(p2);
 8008624:	4618      	mov	r0, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:624
      pbuf_free(p);
 8008626:	f002 f92d 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:759
  pcb->flags |= TF_NAGLEMEMERR;
 800862a:	7ea3      	ldrb	r3, [r4, #26]
 800862c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008630:	76a3      	strb	r3, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:762
  if (concat_p != NULL) {
 8008632:	f1b9 0f00 	cmp.w	r9, #0
 8008636:	d002      	beq.n	800863e <tcp_write+0x342>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:763
    pbuf_free(concat_p);
 8008638:	4648      	mov	r0, r9
 800863a:	f002 f923 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:765
  if (queue != NULL) {
 800863e:	f1ba 0f00 	cmp.w	sl, #0
 8008642:	d002      	beq.n	800864a <tcp_write+0x34e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:766
    tcp_segs_free(queue);
 8008644:	4650      	mov	r0, sl
 8008646:	f000 fe43 	bl	80092d0 <tcp_segs_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:768
  if (pcb->snd_queuelen != 0) {
 800864a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800864e:	2b00      	cmp	r3, #0
 8008650:	f43f ae88 	beq.w	8008364 <tcp_write+0x68>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:769
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8008654:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008656:	2b00      	cmp	r3, #0
 8008658:	f47f ae84 	bne.w	8008364 <tcp_write+0x68>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:769 (discriminator 1)
 800865c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800865e:	2b00      	cmp	r3, #0
 8008660:	f47f ae80 	bne.w	8008364 <tcp_write+0x68>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:769 (discriminator 2)
 8008664:	4b68      	ldr	r3, [pc, #416]	; (8008808 <tcp_write+0x50c>)
 8008666:	f240 3202 	movw	r2, #770	; 0x302
 800866a:	496a      	ldr	r1, [pc, #424]	; (8008814 <tcp_write+0x518>)
 800866c:	4868      	ldr	r0, [pc, #416]	; (8008810 <tcp_write+0x514>)
 800866e:	f004 fc95 	bl	800cf9c <iprintf>
 8008672:	e677      	b.n	8008364 <tcp_write+0x68>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:613
      pbuf_cat(p/*header*/, p2/*data*/);
 8008674:	4619      	mov	r1, r3
 8008676:	f002 fad3 	bl	800ac20 <pbuf_cat>
 800867a:	e796      	b.n	80085aa <tcp_write+0x2ae>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:628
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800867c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800867e:	2200      	movs	r2, #0
 8008680:	4659      	mov	r1, fp
 8008682:	4620      	mov	r0, r4
 8008684:	9200      	str	r2, [sp, #0]
 8008686:	443b      	add	r3, r7
 8008688:	f7ff fda0 	bl	80081cc <tcp_create_segment>
 800868c:	4683      	mov	fp, r0
 800868e:	2800      	cmp	r0, #0
 8008690:	d0cb      	beq.n	800862a <tcp_write+0x32e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:641
    if (queue == NULL) {
 8008692:	f1ba 0f00 	cmp.w	sl, #0
 8008696:	d038      	beq.n	800870a <tcp_write+0x40e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:645
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8008698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800869a:	b933      	cbnz	r3, 80086aa <tcp_write+0x3ae>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:645 (discriminator 1)
 800869c:	4b5a      	ldr	r3, [pc, #360]	; (8008808 <tcp_write+0x50c>)
 800869e:	f240 2285 	movw	r2, #645	; 0x285
 80086a2:	495d      	ldr	r1, [pc, #372]	; (8008818 <tcp_write+0x51c>)
 80086a4:	485a      	ldr	r0, [pc, #360]	; (8008810 <tcp_write+0x514>)
 80086a6:	f004 fc79 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:646
      prev_seg->next = seg;
 80086aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086ac:	f8c3 b000 	str.w	fp, [r3]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:655
    pos += seglen;
 80086b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086b2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80086b6:	441f      	add	r7, r3
 80086b8:	b2bf      	uxth	r7, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:559
  while (pos < len) {
 80086ba:	9b05      	ldr	r3, [sp, #20]
 80086bc:	429f      	cmp	r7, r3
 80086be:	f4ff af46 	bcc.w	800854e <tcp_write+0x252>
 80086c2:	464f      	mov	r7, r9
 80086c4:	46d1      	mov	r9, sl
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:673
  if (oversize_used > 0) {
 80086c6:	b13e      	cbz	r6, 80086d8 <tcp_write+0x3dc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:676
    for (p = last_unsent->p; p; p = p->next) {
 80086c8:	f8d5 a004 	ldr.w	sl, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:676 (discriminator 1)
 80086cc:	f1ba 0f00 	cmp.w	sl, #0
 80086d0:	d12b      	bne.n	800872a <tcp_write+0x42e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:683
    last_unsent->len += oversize_used;
 80086d2:	892b      	ldrh	r3, [r5, #8]
 80086d4:	441e      	add	r6, r3
 80086d6:	812e      	strh	r6, [r5, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:690
  pcb->unsent_oversize = oversize;
 80086d8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80086dc:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:697
  if (concat_p != NULL) {
 80086e0:	2f00      	cmp	r7, #0
 80086e2:	d03b      	beq.n	800875c <tcp_write+0x460>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:698
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80086e4:	b935      	cbnz	r5, 80086f4 <tcp_write+0x3f8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:698 (discriminator 1)
 80086e6:	4b48      	ldr	r3, [pc, #288]	; (8008808 <tcp_write+0x50c>)
 80086e8:	f240 22bb 	movw	r2, #699	; 0x2bb
 80086ec:	494b      	ldr	r1, [pc, #300]	; (800881c <tcp_write+0x520>)
 80086ee:	4848      	ldr	r0, [pc, #288]	; (8008810 <tcp_write+0x514>)
 80086f0:	f004 fc54 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:700
    pbuf_cat(last_unsent->p, concat_p);
 80086f4:	4639      	mov	r1, r7
 80086f6:	6868      	ldr	r0, [r5, #4]
 80086f8:	f002 fa92 	bl	800ac20 <pbuf_cat>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:701
    last_unsent->len += concat_p->tot_len;
 80086fc:	892b      	ldrh	r3, [r5, #8]
 80086fe:	893a      	ldrh	r2, [r7, #8]
 8008700:	4413      	add	r3, r2
 8008702:	812b      	strh	r3, [r5, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:735
    last_unsent->next = queue;
 8008704:	f8c5 9000 	str.w	r9, [r5]
 8008708:	e04a      	b.n	80087a0 <tcp_write+0x4a4>
 800870a:	4682      	mov	sl, r0
 800870c:	e7d0      	b.n	80086b0 <tcp_write+0x3b4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:383
  u16_t extendlen = 0;
 800870e:	46d0      	mov	r8, sl
 8008710:	4637      	mov	r7, r6
 8008712:	e6d9      	b.n	80084c8 <tcp_write+0x1cc>
 8008714:	46b8      	mov	r8, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:378
  u16_t oversize_used = 0;
 8008716:	463e      	mov	r6, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:371
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8008718:	463d      	mov	r5, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:370
  struct pbuf *concat_p = NULL;
 800871a:	46b9      	mov	r9, r7
 800871c:	e6d4      	b.n	80084c8 <tcp_write+0x1cc>
 800871e:	2700      	movs	r7, #0
 8008720:	46ab      	mov	fp, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:383
  u16_t extendlen = 0;
 8008722:	46b8      	mov	r8, r7
 8008724:	e7cf      	b.n	80086c6 <tcp_write+0x3ca>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:370
  struct pbuf *concat_p = NULL;
 8008726:	2700      	movs	r7, #0
 8008728:	e7fb      	b.n	8008722 <tcp_write+0x426>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:677
      p->tot_len += oversize_used;
 800872a:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 800872e:	4433      	add	r3, r6
 8008730:	f8aa 3008 	strh.w	r3, [sl, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:678
      if (p->next == NULL) {
 8008734:	f8da 3000 	ldr.w	r3, [sl]
 8008738:	b96b      	cbnz	r3, 8008756 <tcp_write+0x45a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:679
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800873a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800873e:	4632      	mov	r2, r6
 8008740:	f8ba 000a 	ldrh.w	r0, [sl, #10]
 8008744:	9908      	ldr	r1, [sp, #32]
 8008746:	4418      	add	r0, r3
 8008748:	f004 fc12 	bl	800cf70 <memcpy>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:680
        p->len += oversize_used;
 800874c:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8008750:	4433      	add	r3, r6
 8008752:	f8aa 300a 	strh.w	r3, [sl, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:676 (discriminator 2)
    for (p = last_unsent->p; p; p = p->next) {
 8008756:	f8da a000 	ldr.w	sl, [sl]
 800875a:	e7b7      	b.n	80086cc <tcp_write+0x3d0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:702
  } else if (extendlen > 0) {
 800875c:	f1b8 0f00 	cmp.w	r8, #0
 8008760:	d01a      	beq.n	8008798 <tcp_write+0x49c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:704
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8008762:	b10d      	cbz	r5, 8008768 <tcp_write+0x46c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:704 (discriminator 2)
 8008764:	686b      	ldr	r3, [r5, #4]
 8008766:	b933      	cbnz	r3, 8008776 <tcp_write+0x47a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:704 (discriminator 3)
 8008768:	4b27      	ldr	r3, [pc, #156]	; (8008808 <tcp_write+0x50c>)
 800876a:	f240 22c1 	movw	r2, #705	; 0x2c1
 800876e:	492c      	ldr	r1, [pc, #176]	; (8008820 <tcp_write+0x524>)
 8008770:	4827      	ldr	r0, [pc, #156]	; (8008810 <tcp_write+0x514>)
 8008772:	f004 fc13 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:706
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8008776:	686b      	ldr	r3, [r5, #4]
 8008778:	891a      	ldrh	r2, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:706 (discriminator 1)
 800877a:	6819      	ldr	r1, [r3, #0]
 800877c:	4442      	add	r2, r8
 800877e:	b292      	uxth	r2, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:707 (discriminator 1)
      p->tot_len += extendlen;
 8008780:	811a      	strh	r2, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:706 (discriminator 1)
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8008782:	b939      	cbnz	r1, 8008794 <tcp_write+0x498>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:710
    p->len += extendlen;
 8008784:	895a      	ldrh	r2, [r3, #10]
 8008786:	4442      	add	r2, r8
 8008788:	815a      	strh	r2, [r3, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:711
    last_unsent->len += extendlen;
 800878a:	892b      	ldrh	r3, [r5, #8]
 800878c:	4498      	add	r8, r3
 800878e:	f8a5 8008 	strh.w	r8, [r5, #8]
 8008792:	e7b7      	b.n	8008704 <tcp_write+0x408>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:707 (discriminator 3)
      p->tot_len += extendlen;
 8008794:	460b      	mov	r3, r1
 8008796:	e7ef      	b.n	8008778 <tcp_write+0x47c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:732
  if (last_unsent == NULL) {
 8008798:	2d00      	cmp	r5, #0
 800879a:	d1b3      	bne.n	8008704 <tcp_write+0x408>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:733
    pcb->unsent = queue;
 800879c:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:741
  pcb->snd_lbb += len;
 80087a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087a2:	9a05      	ldr	r2, [sp, #20]
 80087a4:	4413      	add	r3, r2
 80087a6:	65a3      	str	r3, [r4, #88]	; 0x58
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:742
  pcb->snd_buf -= len;
 80087a8:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80087ac:	1a9b      	subs	r3, r3, r2
 80087ae:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:743
  pcb->snd_queuelen = queuelen;
 80087b2:	9b06      	ldr	r3, [sp, #24]
 80087b4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:747
  if (pcb->snd_queuelen != 0) {
 80087b8:	b153      	cbz	r3, 80087d0 <tcp_write+0x4d4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:748
    LWIP_ASSERT("tcp_write: valid queue length",
 80087ba:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80087bc:	b943      	cbnz	r3, 80087d0 <tcp_write+0x4d4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:748 (discriminator 1)
 80087be:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80087c0:	b933      	cbnz	r3, 80087d0 <tcp_write+0x4d4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:748 (discriminator 2)
 80087c2:	4b11      	ldr	r3, [pc, #68]	; (8008808 <tcp_write+0x50c>)
 80087c4:	f240 22ed 	movw	r2, #749	; 0x2ed
 80087c8:	4912      	ldr	r1, [pc, #72]	; (8008814 <tcp_write+0x518>)
 80087ca:	4811      	ldr	r0, [pc, #68]	; (8008810 <tcp_write+0x514>)
 80087cc:	f004 fbe6 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:753
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 80087d0:	f1bb 0f00 	cmp.w	fp, #0
 80087d4:	d010      	beq.n	80087f8 <tcp_write+0x4fc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:753 (discriminator 1)
 80087d6:	f8db 000c 	ldr.w	r0, [fp, #12]
 80087da:	2800      	cmp	r0, #0
 80087dc:	f43f adad 	beq.w	800833a <tcp_write+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:753 (discriminator 2)
 80087e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087e2:	f013 0402 	ands.w	r4, r3, #2
 80087e6:	d107      	bne.n	80087f8 <tcp_write+0x4fc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:754
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80087e8:	8985      	ldrh	r5, [r0, #12]
 80087ea:	2008      	movs	r0, #8
 80087ec:	f001 ffc0 	bl	800a770 <lwip_htons>
 80087f0:	f8db 300c 	ldr.w	r3, [fp, #12]
 80087f4:	4328      	orrs	r0, r5
 80087f6:	8198      	strh	r0, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:757
  return ERR_OK;
 80087f8:	2000      	movs	r0, #0
 80087fa:	e59e      	b.n	800833a <tcp_write+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:371
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80087fc:	f04f 0a00 	mov.w	sl, #0
 8008800:	e713      	b.n	800862a <tcp_write+0x32e>
tcp_write_checks():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:315
    return ERR_CONN;
 8008802:	f06f 000a 	mvn.w	r0, #10
 8008806:	e598      	b.n	800833a <tcp_write+0x3e>
 8008808:	0801f683 	.word	0x0801f683
 800880c:	0801f884 	.word	0x0801f884
 8008810:	0800e36a 	.word	0x0800e36a
 8008814:	0801f910 	.word	0x0801f910
 8008818:	0801f892 	.word	0x0801f892
 800881c:	0801f8a3 	.word	0x0801f8a3
 8008820:	0801f8db 	.word	0x0801f8db

08008824 <tcp_enqueue_flags>:
tcp_enqueue_flags():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:786
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8008824:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:794
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8008828:	f011 0803 	ands.w	r8, r1, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:786
{
 800882c:	4604      	mov	r4, r0
 800882e:	460e      	mov	r6, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:794
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8008830:	d106      	bne.n	8008840 <tcp_enqueue_flags+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:794 (discriminator 1)
 8008832:	4b3d      	ldr	r3, [pc, #244]	; (8008928 <tcp_enqueue_flags+0x104>)
 8008834:	f240 321b 	movw	r2, #795	; 0x31b
 8008838:	493c      	ldr	r1, [pc, #240]	; (800892c <tcp_enqueue_flags+0x108>)
 800883a:	483d      	ldr	r0, [pc, #244]	; (8008930 <tcp_enqueue_flags+0x10c>)
 800883c:	f004 fbae 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:798
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8008840:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008844:	2b07      	cmp	r3, #7
 8008846:	d90a      	bls.n	800885e <tcp_enqueue_flags+0x3a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:798 (discriminator 1)
 8008848:	07f1      	lsls	r1, r6, #31
 800884a:	d408      	bmi.n	800885e <tcp_enqueue_flags+0x3a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:837
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
 800884c:	7ea3      	ldrb	r3, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:839
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800884e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:837
    pcb->flags |= TF_NAGLEMEMERR;
 8008852:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008856:	76a3      	strb	r3, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:881
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 8008858:	b003      	add	sp, #12
 800885a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:807
  if (flags & TCP_SYN) {
 800885e:	f3c6 0740 	ubfx	r7, r6, #1, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:827
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008862:	2200      	movs	r2, #0
 8008864:	ea4f 0987 	mov.w	r9, r7, lsl #2
 8008868:	4610      	mov	r0, r2
 800886a:	4649      	mov	r1, r9
 800886c:	f002 f872 	bl	800a954 <pbuf_alloc>
 8008870:	4605      	mov	r5, r0
 8008872:	2800      	cmp	r0, #0
 8008874:	d0ea      	beq.n	800884c <tcp_enqueue_flags+0x28>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:832
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8008876:	8943      	ldrh	r3, [r0, #10]
 8008878:	454b      	cmp	r3, r9
 800887a:	d206      	bcs.n	800888a <tcp_enqueue_flags+0x66>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:832 (discriminator 1)
 800887c:	4b2a      	ldr	r3, [pc, #168]	; (8008928 <tcp_enqueue_flags+0x104>)
 800887e:	f240 3241 	movw	r2, #833	; 0x341
 8008882:	492c      	ldr	r1, [pc, #176]	; (8008934 <tcp_enqueue_flags+0x110>)
 8008884:	482a      	ldr	r0, [pc, #168]	; (8008930 <tcp_enqueue_flags+0x10c>)
 8008886:	f004 fb89 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:836
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800888a:	9700      	str	r7, [sp, #0]
 800888c:	4629      	mov	r1, r5
 800888e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008890:	4632      	mov	r2, r6
 8008892:	4620      	mov	r0, r4
 8008894:	f7ff fc9a 	bl	80081cc <tcp_create_segment>
 8008898:	4605      	mov	r5, r0
 800889a:	2800      	cmp	r0, #0
 800889c:	d0d6      	beq.n	800884c <tcp_enqueue_flags+0x28>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:841
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800889e:	68c3      	ldr	r3, [r0, #12]
 80088a0:	079a      	lsls	r2, r3, #30
 80088a2:	d006      	beq.n	80088b2 <tcp_enqueue_flags+0x8e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:841 (discriminator 1)
 80088a4:	4b20      	ldr	r3, [pc, #128]	; (8008928 <tcp_enqueue_flags+0x104>)
 80088a6:	f240 3249 	movw	r2, #841	; 0x349
 80088aa:	4923      	ldr	r1, [pc, #140]	; (8008938 <tcp_enqueue_flags+0x114>)
 80088ac:	4820      	ldr	r0, [pc, #128]	; (8008930 <tcp_enqueue_flags+0x10c>)
 80088ae:	f004 fb75 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:842
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80088b2:	892b      	ldrh	r3, [r5, #8]
 80088b4:	b133      	cbz	r3, 80088c4 <tcp_enqueue_flags+0xa0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:842 (discriminator 1)
 80088b6:	4b1c      	ldr	r3, [pc, #112]	; (8008928 <tcp_enqueue_flags+0x104>)
 80088b8:	f240 324a 	movw	r2, #842	; 0x34a
 80088bc:	491f      	ldr	r1, [pc, #124]	; (800893c <tcp_enqueue_flags+0x118>)
 80088be:	481c      	ldr	r0, [pc, #112]	; (8008930 <tcp_enqueue_flags+0x10c>)
 80088c0:	f004 fb6c 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:851
  if (pcb->unsent == NULL) {
 80088c4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80088c6:	bb4b      	cbnz	r3, 800891c <tcp_enqueue_flags+0xf8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:852
    pcb->unsent = seg;
 80088c8:	66a5      	str	r5, [r4, #104]	; 0x68
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:860
  pcb->unsent_oversize = 0;
 80088ca:	2300      	movs	r3, #0
 80088cc:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:864
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80088d0:	f1b8 0f00 	cmp.w	r8, #0
 80088d4:	d002      	beq.n	80088dc <tcp_enqueue_flags+0xb8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:865
    pcb->snd_lbb++;
 80088d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088d8:	3301      	adds	r3, #1
 80088da:	65a3      	str	r3, [r4, #88]	; 0x58
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:868
  if (flags & TCP_FIN) {
 80088dc:	07f3      	lsls	r3, r6, #31
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:869
    pcb->flags |= TF_FIN;
 80088de:	bf42      	ittt	mi
 80088e0:	7ea3      	ldrbmi	r3, [r4, #26]
 80088e2:	f043 0320 	orrmi.w	r3, r3, #32
 80088e6:	76a3      	strbmi	r3, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:873
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80088e8:	6868      	ldr	r0, [r5, #4]
 80088ea:	f002 f975 	bl	800abd8 <pbuf_clen>
 80088ee:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80088f2:	4418      	add	r0, r3
 80088f4:	b280      	uxth	r0, r0
 80088f6:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:875
  if (pcb->snd_queuelen != 0) {
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d0ac      	beq.n	8008858 <tcp_enqueue_flags+0x34>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:876
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80088fe:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008900:	b948      	cbnz	r0, 8008916 <tcp_enqueue_flags+0xf2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:876 (discriminator 1)
 8008902:	6ea4      	ldr	r4, [r4, #104]	; 0x68
 8008904:	2c00      	cmp	r4, #0
 8008906:	d1a7      	bne.n	8008858 <tcp_enqueue_flags+0x34>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:876 (discriminator 2)
 8008908:	4b07      	ldr	r3, [pc, #28]	; (8008928 <tcp_enqueue_flags+0x104>)
 800890a:	f240 326d 	movw	r2, #877	; 0x36d
 800890e:	490c      	ldr	r1, [pc, #48]	; (8008940 <tcp_enqueue_flags+0x11c>)
 8008910:	4807      	ldr	r0, [pc, #28]	; (8008930 <tcp_enqueue_flags+0x10c>)
 8008912:	f004 fb43 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:880
  return ERR_OK;
 8008916:	2000      	movs	r0, #0
 8008918:	e79e      	b.n	8008858 <tcp_enqueue_flags+0x34>
 800891a:	4613      	mov	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:855 (discriminator 1)
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	2a00      	cmp	r2, #0
 8008920:	d1fb      	bne.n	800891a <tcp_enqueue_flags+0xf6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:856
    useg->next = seg;
 8008922:	601d      	str	r5, [r3, #0]
 8008924:	e7d1      	b.n	80088ca <tcp_enqueue_flags+0xa6>
 8008926:	bf00      	nop
 8008928:	0801f683 	.word	0x0801f683
 800892c:	0801f520 	.word	0x0801f520
 8008930:	0800e36a 	.word	0x0800e36a
 8008934:	0801f575 	.word	0x0801f575
 8008938:	0801f5ae 	.word	0x0801f5ae
 800893c:	0801f5c6 	.word	0x0801f5c6
 8008940:	0801f5f0 	.word	0x0801f5f0

08008944 <tcp_send_fin>:
tcp_send_fin():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:140
{
 8008944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:142
  if (pcb->unsent != NULL) {
 8008946:	6e84      	ldr	r4, [r0, #104]	; 0x68
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:140
{
 8008948:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:142
  if (pcb->unsent != NULL) {
 800894a:	b934      	cbnz	r4, 800895a <tcp_send_fin+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:155
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800894c:	4628      	mov	r0, r5
 800894e:	2101      	movs	r1, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:156
}
 8008950:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:155
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8008954:	f7ff bf66 	b.w	8008824 <tcp_enqueue_flags>
 8008958:	461c      	mov	r4, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:144 (discriminator 1)
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800895a:	6823      	ldr	r3, [r4, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1fb      	bne.n	8008958 <tcp_send_fin+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:147
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8008960:	68e3      	ldr	r3, [r4, #12]
 8008962:	8998      	ldrh	r0, [r3, #12]
 8008964:	f001 ff04 	bl	800a770 <lwip_htons>
 8008968:	f010 0707 	ands.w	r7, r0, #7
 800896c:	d1ee      	bne.n	800894c <tcp_send_fin+0x8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:149
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800896e:	68e3      	ldr	r3, [r4, #12]
 8008970:	2001      	movs	r0, #1
 8008972:	899e      	ldrh	r6, [r3, #12]
 8008974:	f001 fefc 	bl	800a770 <lwip_htons>
 8008978:	68e3      	ldr	r3, [r4, #12]
 800897a:	4330      	orrs	r0, r6
 800897c:	8198      	strh	r0, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:156
}
 800897e:	4638      	mov	r0, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:150
      pcb->flags |= TF_FIN;
 8008980:	7eab      	ldrb	r3, [r5, #26]
 8008982:	f043 0320 	orr.w	r3, r3, #32
 8008986:	76ab      	strb	r3, [r5, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:156
}
 8008988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800898a <tcp_send_empty_ack>:
tcp_send_empty_ack():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:919
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800898a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800898c:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:934
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800898e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008990:	f001 fef1 	bl	800a776 <lwip_htonl>
 8008994:	2100      	movs	r1, #0
 8008996:	4602      	mov	r2, r0
 8008998:	4620      	mov	r0, r4
 800899a:	f7ff fc73 	bl	8008284 <tcp_output_alloc_header.constprop.0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:935
  if (p == NULL) {
 800899e:	4606      	mov	r6, r0
 80089a0:	b940      	cbnz	r0, 80089b4 <tcp_send_empty_ack+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:937
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80089a2:	7ea3      	ldrb	r3, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:939
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80089a4:	f06f 0501 	mvn.w	r5, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:937
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80089a8:	f043 0303 	orr.w	r3, r3, #3
 80089ac:	76a3      	strb	r3, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:982
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 80089ae:	4628      	mov	r0, r5
 80089b0:	b004      	add	sp, #16
 80089b2:	bd70      	pop	{r4, r5, r6, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:956
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80089b4:	1d25      	adds	r5, r4, #4
 80089b6:	4628      	mov	r0, r5
 80089b8:	f7fa fa9c 	bl	8002ef4 <ip4_route>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:957
  if (netif == NULL) {
 80089bc:	b1a0      	cbz	r0, 80089e8 <tcp_send_empty_ack+0x5e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:967
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 80089be:	2306      	movs	r3, #6
 80089c0:	9002      	str	r0, [sp, #8]
 80089c2:	462a      	mov	r2, r5
 80089c4:	4621      	mov	r1, r4
 80089c6:	9301      	str	r3, [sp, #4]
 80089c8:	4630      	mov	r0, r6
 80089ca:	7a63      	ldrb	r3, [r4, #9]
 80089cc:	9300      	str	r3, [sp, #0]
 80089ce:	7aa3      	ldrb	r3, [r4, #10]
 80089d0:	f7fa fc02 	bl	80031d8 <ip4_output_if>
 80089d4:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:971
  pbuf_free(p);
 80089d6:	4630      	mov	r0, r6
 80089d8:	f001 ff54 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:973
  if (err != ERR_OK) {
 80089dc:	7ea3      	ldrb	r3, [r4, #26]
 80089de:	b135      	cbz	r5, 80089ee <tcp_send_empty_ack+0x64>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:975
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80089e0:	f043 0303 	orr.w	r3, r3, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:978
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80089e4:	76a3      	strb	r3, [r4, #26]
 80089e6:	e7e2      	b.n	80089ae <tcp_send_empty_ack+0x24>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:958
    err = ERR_RTE;
 80089e8:	f06f 0503 	mvn.w	r5, #3
 80089ec:	e7f3      	b.n	80089d6 <tcp_send_empty_ack+0x4c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:978
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80089ee:	f023 0303 	bic.w	r3, r3, #3
 80089f2:	e7f7      	b.n	80089e4 <tcp_send_empty_ack+0x5a>

080089f4 <tcp_output>:
tcp_output():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1004
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80089f4:	7d03      	ldrb	r3, [r0, #20]
 80089f6:	2b01      	cmp	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:994
{
 80089f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089fc:	4604      	mov	r4, r0
 80089fe:	b087      	sub	sp, #28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1004
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8008a00:	d106      	bne.n	8008a10 <tcp_output+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1004 (discriminator 1)
 8008a02:	4ba4      	ldr	r3, [pc, #656]	; (8008c94 <tcp_output+0x2a0>)
 8008a04:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8008a08:	49a3      	ldr	r1, [pc, #652]	; (8008c98 <tcp_output+0x2a4>)
 8008a0a:	48a4      	ldr	r0, [pc, #656]	; (8008c9c <tcp_output+0x2a8>)
 8008a0c:	f004 fac6 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1011

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8008a10:	4ba3      	ldr	r3, [pc, #652]	; (8008ca0 <tcp_output+0x2ac>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	42a3      	cmp	r3, r4
 8008a16:	d04e      	beq.n	8008ab6 <tcp_output+0xc2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1015
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8008a18:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8008a1c:	f8b4 6048 	ldrh.w	r6, [r4, #72]	; 0x48
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1017

  seg = pcb->unsent;
 8008a20:	6ea5      	ldr	r5, [r4, #104]	; 0x68
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1015
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8008a22:	429e      	cmp	r6, r3
 8008a24:	bf28      	it	cs
 8008a26:	461e      	movcs	r6, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1025
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8008a28:	7ea3      	ldrb	r3, [r4, #26]
 8008a2a:	0799      	lsls	r1, r3, #30
 8008a2c:	d510      	bpl.n	8008a50 <tcp_output+0x5c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1025 (discriminator 1)
 8008a2e:	b92d      	cbnz	r5, 8008a3c <tcp_output+0x48>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1028
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 8008a30:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1179
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 8008a32:	b007      	add	sp, #28
 8008a34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1028
     return tcp_send_empty_ack(pcb);
 8008a38:	f7ff bfa7 	b.w	800898a <tcp_send_empty_ack>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1027
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8008a3c:	68eb      	ldr	r3, [r5, #12]
 8008a3e:	6858      	ldr	r0, [r3, #4]
 8008a40:	f001 fe99 	bl	800a776 <lwip_htonl>
 8008a44:	892b      	ldrh	r3, [r5, #8]
 8008a46:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008a48:	1a9b      	subs	r3, r3, r2
 8008a4a:	4418      	add	r0, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1026
     (seg == NULL ||
 8008a4c:	42b0      	cmp	r0, r6
 8008a4e:	d8ef      	bhi.n	8008a30 <tcp_output+0x3c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1032
  useg = pcb->unacked;
 8008a50:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1033
  if (useg != NULL) {
 8008a52:	2f00      	cmp	r7, #0
 8008a54:	d132      	bne.n	8008abc <tcp_output+0xc8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1037
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008a56:	f104 0804 	add.w	r8, r4, #4
 8008a5a:	4640      	mov	r0, r8
 8008a5c:	f7fa fa4a 	bl	8002ef4 <ip4_route>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1038
  if (netif == NULL) {
 8008a60:	4681      	mov	r9, r0
 8008a62:	2800      	cmp	r0, #0
 8008a64:	f000 813a 	beq.w	8008cdc <tcp_output+0x2e8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1043
  if (ip_addr_isany(&pcb->local_ip)) {
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	b90b      	cbnz	r3, 8008a70 <tcp_output+0x7c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1048 (discriminator 1)
    ip_addr_copy(pcb->local_ip, *local_ip);
 8008a6c:	6843      	ldr	r3, [r0, #4]
 8008a6e:	6023      	str	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1080
  if (seg != NULL &&
 8008a70:	b1cd      	cbz	r5, 8008aa6 <tcp_output+0xb2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1081 (discriminator 1)
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8008a72:	68eb      	ldr	r3, [r5, #12]
 8008a74:	6858      	ldr	r0, [r3, #4]
 8008a76:	f001 fe7e 	bl	800a776 <lwip_htonl>
 8008a7a:	892b      	ldrh	r3, [r5, #8]
 8008a7c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008a7e:	1a9b      	subs	r3, r3, r2
 8008a80:	4418      	add	r0, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1080 (discriminator 1)
  if (seg != NULL &&
 8008a82:	42b0      	cmp	r0, r6
 8008a84:	d96d      	bls.n	8008b62 <tcp_output+0x16e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1081
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8008a86:	2e00      	cmp	r6, #0
 8008a88:	d06b      	beq.n	8008b62 <tcp_output+0x16e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1082
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8008a8a:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8008a8e:	42b3      	cmp	r3, r6
 8008a90:	d167      	bne.n	8008b62 <tcp_output+0x16e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1082 (discriminator 1)
 8008a92:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d164      	bne.n	8008b62 <tcp_output+0x16e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1084
    if (pcb->persist_backoff == 0) {
 8008a98:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8008a9c:	b91b      	cbnz	r3, 8008aa6 <tcp_output+0xb2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1085
      pcb->persist_cnt = 0;
 8008a9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008aa2:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1171
  if (pcb->unsent == NULL) {
 8008aa6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008aa8:	b90b      	cbnz	r3, 8008aae <tcp_output+0xba>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1173
    pcb->unsent_oversize = 0;
 8008aaa:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1177
  pcb->flags &= ~TF_NAGLEMEMERR;
 8008aae:	7ea3      	ldrb	r3, [r4, #26]
 8008ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ab4:	76a3      	strb	r3, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1012
    return ERR_OK;
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	e0e8      	b.n	8008c8c <tcp_output+0x298>
 8008aba:	461f      	mov	r7, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1034 (discriminator 1)
    for (; useg->next != NULL; useg = useg->next);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1fb      	bne.n	8008aba <tcp_output+0xc6>
 8008ac2:	e7c8      	b.n	8008a56 <tcp_output+0x62>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1128
    pcb->unsent = seg->next;
 8008ac4:	682b      	ldr	r3, [r5, #0]
 8008ac6:	66a3      	str	r3, [r4, #104]	; 0x68
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1129
    if (pcb->state != SYN_SENT) {
 8008ac8:	7d23      	ldrb	r3, [r4, #20]
 8008aca:	2b02      	cmp	r3, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1130
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008acc:	bf1e      	ittt	ne
 8008ace:	7ea3      	ldrbne	r3, [r4, #26]
 8008ad0:	f023 0303 	bicne.w	r3, r3, #3
 8008ad4:	76a3      	strbne	r3, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1132
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8008ad6:	68eb      	ldr	r3, [r5, #12]
 8008ad8:	6858      	ldr	r0, [r3, #4]
 8008ada:	f001 fe4c 	bl	800a776 <lwip_htonl>
 8008ade:	68e9      	ldr	r1, [r5, #12]
 8008ae0:	4683      	mov	fp, r0
 8008ae2:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8008ae6:	8988      	ldrh	r0, [r1, #12]
 8008ae8:	f001 fe42 	bl	800a770 <lwip_htons>
 8008aec:	f010 0003 	ands.w	r0, r0, #3
 8008af0:	eb0b 030a 	add.w	r3, fp, sl
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1137
    if (TCP_TCPLEN(seg) > 0) {
 8008af4:	68ea      	ldr	r2, [r5, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1132
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8008af6:	bf18      	it	ne
 8008af8:	2001      	movne	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1137
    if (TCP_TCPLEN(seg) > 0) {
 8008afa:	f8b5 a008 	ldrh.w	sl, [r5, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1132
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8008afe:	4418      	add	r0, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1133
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8008b00:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008b02:	1a1b      	subs	r3, r3, r0
 8008b04:	2b00      	cmp	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1134
      pcb->snd_nxt = snd_nxt;
 8008b06:	bfb8      	it	lt
 8008b08:	64e0      	strlt	r0, [r4, #76]	; 0x4c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1137
    if (TCP_TCPLEN(seg) > 0) {
 8008b0a:	8990      	ldrh	r0, [r2, #12]
 8008b0c:	f001 fe30 	bl	800a770 <lwip_htons>
 8008b10:	f010 0003 	ands.w	r0, r0, #3
 8008b14:	bf18      	it	ne
 8008b16:	2001      	movne	r0, #1
 8008b18:	eb10 0f0a 	cmn.w	r0, sl
 8008b1c:	f000 80da 	beq.w	8008cd4 <tcp_output+0x2e0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1138
      seg->next = NULL;
 8008b20:	2300      	movs	r3, #0
 8008b22:	602b      	str	r3, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1140
      if (pcb->unacked == NULL) {
 8008b24:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008b26:	b913      	cbnz	r3, 8008b2e <tcp_output+0x13a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1141
        pcb->unacked = seg;
 8008b28:	66e5      	str	r5, [r4, #108]	; 0x6c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1159
          useg->next = seg;
 8008b2a:	462f      	mov	r7, r5
 8008b2c:	e016      	b.n	8008b5c <tcp_output+0x168>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1148
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8008b2e:	68eb      	ldr	r3, [r5, #12]
 8008b30:	6858      	ldr	r0, [r3, #4]
 8008b32:	f001 fe20 	bl	800a776 <lwip_htonl>
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	4682      	mov	sl, r0
 8008b3a:	6850      	ldr	r0, [r2, #4]
 8008b3c:	f001 fe1b 	bl	800a776 <lwip_htonl>
 8008b40:	ebaa 0000 	sub.w	r0, sl, r0
 8008b44:	2800      	cmp	r0, #0
 8008b46:	f280 80c3 	bge.w	8008cd0 <tcp_output+0x2dc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1150
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8008b4a:	f104 036c 	add.w	r3, r4, #108	; 0x6c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1151
          while (*cur_seg &&
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	2a00      	cmp	r2, #0
 8008b52:	f040 80ab 	bne.w	8008cac <tcp_output+0x2b8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1155
          seg->next = (*cur_seg);
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	602a      	str	r2, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1156
          (*cur_seg) = seg;
 8008b5a:	601d      	str	r5, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1167
    seg = pcb->unsent;
 8008b5c:	6ea5      	ldr	r5, [r4, #104]	; 0x68
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1091
  while (seg != NULL &&
 8008b5e:	2d00      	cmp	r5, #0
 8008b60:	d0a1      	beq.n	8008aa6 <tcp_output+0xb2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1092 (discriminator 1)
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8008b62:	68eb      	ldr	r3, [r5, #12]
 8008b64:	6858      	ldr	r0, [r3, #4]
 8008b66:	f001 fe06 	bl	800a776 <lwip_htonl>
 8008b6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008b6c:	1ac0      	subs	r0, r0, r3
 8008b6e:	892b      	ldrh	r3, [r5, #8]
 8008b70:	4418      	add	r0, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1091 (discriminator 1)
  while (seg != NULL &&
 8008b72:	42b0      	cmp	r0, r6
 8008b74:	d897      	bhi.n	8008aa6 <tcp_output+0xb2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1093
    LWIP_ASSERT("RST not expected here!",
 8008b76:	68eb      	ldr	r3, [r5, #12]
 8008b78:	8998      	ldrh	r0, [r3, #12]
 8008b7a:	f001 fdf9 	bl	800a770 <lwip_htons>
 8008b7e:	0742      	lsls	r2, r0, #29
 8008b80:	d506      	bpl.n	8008b90 <tcp_output+0x19c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1093 (discriminator 1)
 8008b82:	4b44      	ldr	r3, [pc, #272]	; (8008c94 <tcp_output+0x2a0>)
 8008b84:	f240 4246 	movw	r2, #1094	; 0x446
 8008b88:	4946      	ldr	r1, [pc, #280]	; (8008ca4 <tcp_output+0x2b0>)
 8008b8a:	4844      	ldr	r0, [pc, #272]	; (8008c9c <tcp_output+0x2a8>)
 8008b8c:	f004 fa06 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1102
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8008b90:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008b92:	b1b3      	cbz	r3, 8008bc2 <tcp_output+0x1ce>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1102 (discriminator 2)
 8008b94:	7ea2      	ldrb	r2, [r4, #26]
 8008b96:	f012 0f44 	tst.w	r2, #68	; 0x44
 8008b9a:	d112      	bne.n	8008bc2 <tcp_output+0x1ce>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1102 (discriminator 4)
 8008b9c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008b9e:	b12b      	cbz	r3, 8008bac <tcp_output+0x1b8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1102 (discriminator 5)
 8008ba0:	6819      	ldr	r1, [r3, #0]
 8008ba2:	b971      	cbnz	r1, 8008bc2 <tcp_output+0x1ce>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1102 (discriminator 8)
 8008ba4:	8919      	ldrh	r1, [r3, #8]
 8008ba6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8008ba8:	4299      	cmp	r1, r3
 8008baa:	d20a      	bcs.n	8008bc2 <tcp_output+0x1ce>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1102 (discriminator 10)
 8008bac:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8008bb0:	b13b      	cbz	r3, 8008bc2 <tcp_output+0x1ce>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1102 (discriminator 12)
 8008bb2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008bb6:	2b07      	cmp	r3, #7
 8008bb8:	d803      	bhi.n	8008bc2 <tcp_output+0x1ce>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1102
 8008bba:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 8008bbe:	f43f af72 	beq.w	8008aa6 <tcp_output+0xb2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1115
    if (pcb->state != SYN_SENT) {
 8008bc2:	7d23      	ldrb	r3, [r4, #20]
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d009      	beq.n	8008bdc <tcp_output+0x1e8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1116
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8008bc8:	68eb      	ldr	r3, [r5, #12]
 8008bca:	2010      	movs	r0, #16
 8008bcc:	f8b3 a00c 	ldrh.w	sl, [r3, #12]
 8008bd0:	f001 fdce 	bl	800a770 <lwip_htons>
 8008bd4:	68ea      	ldr	r2, [r5, #12]
 8008bd6:	ea4a 0000 	orr.w	r0, sl, r0
 8008bda:	8190      	strh	r0, [r2, #12]
tcp_output_segment():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1195
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8008bdc:	686b      	ldr	r3, [r5, #4]
 8008bde:	89db      	ldrh	r3, [r3, #14]
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	f47f af6f 	bne.w	8008ac4 <tcp_output+0xd0>
 8008be6:	f8d5 a00c 	ldr.w	sl, [r5, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1204
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8008bea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008bec:	f001 fdc3 	bl	800a776 <lwip_htonl>
 8008bf0:	f8ca 0008 	str.w	r0, [sl, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1215
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008bf4:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8008bf6:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8008bfa:	f001 fdb9 	bl	800a770 <lwip_htons>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1218
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008bfe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1215
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008c02:	f8aa 000e 	strh.w	r0, [sl, #14]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1218
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008c06:	4413      	add	r3, r2
 8008c08:	62e3      	str	r3, [r4, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1224

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8008c0a:	7aab      	ldrb	r3, [r5, #10]
 8008c0c:	07db      	lsls	r3, r3, #31
 8008c0e:	d50c      	bpl.n	8008c2a <tcp_output+0x236>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1223
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8008c10:	f8d5 a00c 	ldr.w	sl, [r5, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1227
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8008c14:	4641      	mov	r1, r8
 8008c16:	f240 50b4 	movw	r0, #1460	; 0x5b4
 8008c1a:	f001 f89d 	bl	8009d58 <tcp_eff_send_mss_impl>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1231
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8008c1e:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8008c22:	f001 fda8 	bl	800a776 <lwip_htonl>
 8008c26:	f8ca 0014 	str.w	r0, [sl, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1251
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8008c2a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8008c2e:	2b00      	cmp	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1252
    pcb->rtime = 0;
 8008c30:	bfbc      	itt	lt
 8008c32:	2300      	movlt	r3, #0
 8008c34:	8623      	strhlt	r3, [r4, #48]	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1255
  }

  if (pcb->rttest == 0) {
 8008c36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c38:	b93b      	cbnz	r3, 8008c4a <tcp_output+0x256>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1256
    pcb->rttest = tcp_ticks;
 8008c3a:	4a1b      	ldr	r2, [pc, #108]	; (8008ca8 <tcp_output+0x2b4>)
 8008c3c:	68eb      	ldr	r3, [r5, #12]
 8008c3e:	6812      	ldr	r2, [r2, #0]
 8008c40:	6362      	str	r2, [r4, #52]	; 0x34
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1257
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8008c42:	6858      	ldr	r0, [r3, #4]
 8008c44:	f001 fd97 	bl	800a776 <lwip_htonl>
 8008c48:	63a0      	str	r0, [r4, #56]	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1265
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8008c4a:	6868      	ldr	r0, [r5, #4]
 8008c4c:	68ea      	ldr	r2, [r5, #12]
 8008c4e:	6843      	ldr	r3, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1271
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8008c50:	8941      	ldrh	r1, [r0, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1265
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8008c52:	1ad3      	subs	r3, r2, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1274
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;
 8008c54:	6042      	str	r2, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1265
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8008c56:	b29b      	uxth	r3, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1271
  seg->p->len -= len;
 8008c58:	1ac9      	subs	r1, r1, r3
 8008c5a:	8141      	strh	r1, [r0, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1272
  seg->p->tot_len -= len;
 8008c5c:	8901      	ldrh	r1, [r0, #8]
 8008c5e:	1acb      	subs	r3, r1, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1317
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8008c60:	4621      	mov	r1, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1272
  seg->p->tot_len -= len;
 8008c62:	8103      	strh	r3, [r0, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1276
  seg->tcphdr->chksum = 0;
 8008c64:	2300      	movs	r3, #0
 8008c66:	7413      	strb	r3, [r2, #16]
 8008c68:	7453      	strb	r3, [r2, #17]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1317
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8008c6a:	2306      	movs	r3, #6
 8008c6c:	f8cd 9008 	str.w	r9, [sp, #8]
 8008c70:	4642      	mov	r2, r8
 8008c72:	9301      	str	r3, [sp, #4]
 8008c74:	7a63      	ldrb	r3, [r4, #9]
 8008c76:	9300      	str	r3, [sp, #0]
 8008c78:	7aa3      	ldrb	r3, [r4, #10]
 8008c7a:	f7fa faad 	bl	80031d8 <ip4_output_if>
tcp_output():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1123
    if (err != ERR_OK) {
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	f43f af20 	beq.w	8008ac4 <tcp_output+0xd0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1125
      pcb->flags |= TF_NAGLEMEMERR;
 8008c84:	7ea3      	ldrb	r3, [r4, #26]
 8008c86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c8a:	76a3      	strb	r3, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1179
}
 8008c8c:	b007      	add	sp, #28
 8008c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c92:	bf00      	nop
 8008c94:	0801f683 	.word	0x0801f683
 8008c98:	0801f618 	.word	0x0801f618
 8008c9c:	0800e36a 	.word	0x0800e36a
 8008ca0:	20008114 	.word	0x20008114
 8008ca4:	0801f63e 	.word	0x0801f63e
 8008ca8:	200080f8 	.word	0x200080f8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1152 (discriminator 1)
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8008cac:	68d2      	ldr	r2, [r2, #12]
 8008cae:	9305      	str	r3, [sp, #20]
 8008cb0:	6850      	ldr	r0, [r2, #4]
 8008cb2:	f001 fd60 	bl	800a776 <lwip_htonl>
 8008cb6:	68e9      	ldr	r1, [r5, #12]
 8008cb8:	4682      	mov	sl, r0
 8008cba:	6848      	ldr	r0, [r1, #4]
 8008cbc:	f001 fd5b 	bl	800a776 <lwip_htonl>
 8008cc0:	ebaa 0000 	sub.w	r0, sl, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1151 (discriminator 1)
          while (*cur_seg &&
 8008cc4:	9b05      	ldr	r3, [sp, #20]
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	f6bf af45 	bge.w	8008b56 <tcp_output+0x162>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1153
              cur_seg = &((*cur_seg)->next );
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	e73e      	b.n	8008b4e <tcp_output+0x15a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1159
          useg->next = seg;
 8008cd0:	603d      	str	r5, [r7, #0]
 8008cd2:	e72a      	b.n	8008b2a <tcp_output+0x136>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1165
      tcp_seg_free(seg);
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	f000 faed 	bl	80092b4 <tcp_seg_free>
 8008cda:	e73f      	b.n	8008b5c <tcp_output+0x168>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1039
    return ERR_RTE;
 8008cdc:	f06f 0003 	mvn.w	r0, #3
 8008ce0:	e7d4      	b.n	8008c8c <tcp_output+0x298>
 8008ce2:	bf00      	nop

08008ce4 <tcp_rst>:
tcp_rst():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1347
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8008ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce8:	b085      	sub	sp, #20
 8008cea:	4681      	mov	r9, r0
 8008cec:	460e      	mov	r6, r1
 8008cee:	4690      	mov	r8, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1351
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8008cf0:	2114      	movs	r1, #20
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	2001      	movs	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1347
{
 8008cf6:	461f      	mov	r7, r3
 8008cf8:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 8008cfc:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1351
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8008d00:	f001 fe28 	bl	800a954 <pbuf_alloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1352
  if (p == NULL) {
 8008d04:	4605      	mov	r5, r0
 8008d06:	2800      	cmp	r0, #0
 8008d08:	d03c      	beq.n	8008d84 <tcp_rst+0xa0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1356
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8008d0a:	8943      	ldrh	r3, [r0, #10]
 8008d0c:	2b13      	cmp	r3, #19
 8008d0e:	d806      	bhi.n	8008d1e <tcp_rst+0x3a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1356 (discriminator 1)
 8008d10:	4b1e      	ldr	r3, [pc, #120]	; (8008d8c <tcp_rst+0xa8>)
 8008d12:	f240 524d 	movw	r2, #1357	; 0x54d
 8008d16:	491e      	ldr	r1, [pc, #120]	; (8008d90 <tcp_rst+0xac>)
 8008d18:	481e      	ldr	r0, [pc, #120]	; (8008d94 <tcp_rst+0xb0>)
 8008d1a:	f004 f93f 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1359
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8008d1e:	686c      	ldr	r4, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1360
  tcphdr->src = lwip_htons(local_port);
 8008d20:	4658      	mov	r0, fp
 8008d22:	f001 fd25 	bl	800a770 <lwip_htons>
 8008d26:	8020      	strh	r0, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1361
  tcphdr->dest = lwip_htons(remote_port);
 8008d28:	4650      	mov	r0, sl
 8008d2a:	f001 fd21 	bl	800a770 <lwip_htons>
 8008d2e:	8060      	strh	r0, [r4, #2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1362
  tcphdr->seqno = lwip_htonl(seqno);
 8008d30:	4648      	mov	r0, r9
 8008d32:	f001 fd20 	bl	800a776 <lwip_htonl>
 8008d36:	6060      	str	r0, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1363
  tcphdr->ackno = lwip_htonl(ackno);
 8008d38:	4630      	mov	r0, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1368
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8008d3a:	2600      	movs	r6, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1363
  tcphdr->ackno = lwip_htonl(ackno);
 8008d3c:	f001 fd1b 	bl	800a776 <lwip_htonl>
 8008d40:	60a0      	str	r0, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1364
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8008d42:	f245 0014 	movw	r0, #20500	; 0x5014
 8008d46:	f001 fd13 	bl	800a770 <lwip_htons>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1368
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8008d4a:	230b      	movs	r3, #11
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1364
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8008d4c:	81a0      	strh	r0, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1376
  tcphdr->urgp = 0;

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8008d4e:	4638      	mov	r0, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1368
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8008d50:	73a3      	strb	r3, [r4, #14]
 8008d52:	2368      	movs	r3, #104	; 0x68
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1370
  tcphdr->chksum = 0;
 8008d54:	7426      	strb	r6, [r4, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1368
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8008d56:	73e3      	strb	r3, [r4, #15]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1370
  tcphdr->chksum = 0;
 8008d58:	7466      	strb	r6, [r4, #17]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1371
  tcphdr->urgp = 0;
 8008d5a:	74a6      	strb	r6, [r4, #18]
 8008d5c:	74e6      	strb	r6, [r4, #19]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1376
  netif = ip_route(local_ip, remote_ip);
 8008d5e:	f7fa f8c9 	bl	8002ef4 <ip4_route>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1377
  if (netif != NULL) {
 8008d62:	b148      	cbz	r0, 8008d78 <tcp_rst+0x94>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1385
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8008d64:	2306      	movs	r3, #6
 8008d66:	9002      	str	r0, [sp, #8]
 8008d68:	463a      	mov	r2, r7
 8008d6a:	4641      	mov	r1, r8
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	e9cd 6300 	strd	r6, r3, [sp]
 8008d72:	23ff      	movs	r3, #255	; 0xff
 8008d74:	f7fa fa30 	bl	80031d8 <ip4_output_if>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1387
  }
  pbuf_free(p);
 8008d78:	4628      	mov	r0, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1389
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8008d7a:	b005      	add	sp, #20
 8008d7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1387
  pbuf_free(p);
 8008d80:	f001 bd80 	b.w	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1389
}
 8008d84:	b005      	add	sp, #20
 8008d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d8a:	bf00      	nop
 8008d8c:	0801f683 	.word	0x0801f683
 8008d90:	0801f655 	.word	0x0801f655
 8008d94:	0800e36a 	.word	0x0800e36a

08008d98 <tcp_rexmit_rto>:
tcp_rexmit_rto():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1403
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8008d98:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1400
{
 8008d9a:	b410      	push	{r4}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1403
  if (pcb->unacked == NULL) {
 8008d9c:	b1aa      	cbz	r2, 8008dca <tcp_rexmit_rto+0x32>
 8008d9e:	4611      	mov	r1, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1408 (discriminator 1)
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8008da0:	680b      	ldr	r3, [r1, #0]
 8008da2:	b983      	cbnz	r3, 8008dc6 <tcp_rexmit_rto+0x2e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1410
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8008da4:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8008da6:	600c      	str	r4, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1420
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8008da8:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1423

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8008dac:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8008db0:	2bff      	cmp	r3, #255	; 0xff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1424
    ++pcb->nrtx;
 8008db2:	bf1c      	itt	ne
 8008db4:	3301      	addne	r3, #1
 8008db6:	f880 3042 	strbne.w	r3, [r0, #66]	; 0x42
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1428
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8008dba:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1432

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 8008dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1428
  pcb->rttest = 0;
 8008dc0:	6343      	str	r3, [r0, #52]	; 0x34
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1431
  tcp_output(pcb);
 8008dc2:	f7ff be17 	b.w	80089f4 <tcp_output>
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	e7ea      	b.n	8008da0 <tcp_rexmit_rto+0x8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1432
}
 8008dca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <tcp_rexmit>:
tcp_rexmit():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1443
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8008dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1447
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8008dd2:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1443
{
 8008dd4:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1447
  if (pcb->unacked == NULL) {
 8008dd6:	b1ad      	cbz	r5, 8008e04 <tcp_rexmit+0x34>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1454
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 8008dd8:	682b      	ldr	r3, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1456

  cur_seg = &(pcb->unsent);
 8008dda:	f100 0668 	add.w	r6, r0, #104	; 0x68
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1454
  pcb->unacked = seg->next;
 8008dde:	66c3      	str	r3, [r0, #108]	; 0x6c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1457
  while (*cur_seg &&
 8008de0:	6833      	ldr	r3, [r6, #0]
 8008de2:	b983      	cbnz	r3, 8008e06 <tcp_rexmit+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1461
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 8008de4:	6833      	ldr	r3, [r6, #0]
 8008de6:	602b      	str	r3, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1462
  *cur_seg = seg;
 8008de8:	6035      	str	r5, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1464
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8008dea:	682b      	ldr	r3, [r5, #0]
 8008dec:	b90b      	cbnz	r3, 8008df2 <tcp_rexmit+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1466
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8008dee:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1470
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8008df2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8008df6:	2bff      	cmp	r3, #255	; 0xff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1471
    ++pcb->nrtx;
 8008df8:	bf1c      	itt	ne
 8008dfa:	3301      	addne	r3, #1
 8008dfc:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1475
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8008e00:	2300      	movs	r3, #0
 8008e02:	6363      	str	r3, [r4, #52]	; 0x34
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1481

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8008e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1458 (discriminator 1)
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	6858      	ldr	r0, [r3, #4]
 8008e0a:	f001 fcb4 	bl	800a776 <lwip_htonl>
 8008e0e:	68eb      	ldr	r3, [r5, #12]
 8008e10:	4607      	mov	r7, r0
 8008e12:	6858      	ldr	r0, [r3, #4]
 8008e14:	f001 fcaf 	bl	800a776 <lwip_htonl>
 8008e18:	1a38      	subs	r0, r7, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1457 (discriminator 1)
  while (*cur_seg &&
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	dae2      	bge.n	8008de4 <tcp_rexmit+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1459
      cur_seg = &((*cur_seg)->next );
 8008e1e:	6836      	ldr	r6, [r6, #0]
 8008e20:	e7de      	b.n	8008de0 <tcp_rexmit+0x10>

08008e22 <tcp_rexmit_fast>:
tcp_rexmit_fast():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1491
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8008e22:	b538      	push	{r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1492
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8008e24:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1491
{
 8008e26:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1492
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8008e28:	b1eb      	cbz	r3, 8008e66 <tcp_rexmit_fast+0x44>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1492 (discriminator 1)
 8008e2a:	7e85      	ldrb	r5, [r0, #26]
 8008e2c:	f015 0504 	ands.w	r5, r5, #4
 8008e30:	d119      	bne.n	8008e66 <tcp_rexmit_fast+0x44>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1499
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8008e32:	f7ff ffcd 	bl	8008dd0 <tcp_rexmit>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1503

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8008e36:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8008e3a:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1518

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
    pcb->flags |= TF_INFR;

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8008e3e:	8625      	strh	r5, [r4, #48]	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1503
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8008e40:	4293      	cmp	r3, r2
 8008e42:	bf28      	it	cs
 8008e44:	4613      	movcs	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1506
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8008e46:	8e62      	ldrh	r2, [r4, #50]	; 0x32
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1503
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8008e48:	105b      	asrs	r3, r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1506
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8008e4a:	0051      	lsls	r1, r2, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1511
      pcb->ssthresh = 2*pcb->mss;
 8008e4c:	428b      	cmp	r3, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1514
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8008e4e:	440a      	add	r2, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1511
      pcb->ssthresh = 2*pcb->mss;
 8008e50:	bf38      	it	cc
 8008e52:	460b      	movcc	r3, r1
 8008e54:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1514
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8008e58:	4413      	add	r3, r2
 8008e5a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1515
    pcb->flags |= TF_INFR;
 8008e5e:	7ea3      	ldrb	r3, [r4, #26]
 8008e60:	f043 0304 	orr.w	r3, r3, #4
 8008e64:	76a3      	strb	r3, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1520
  }
}
 8008e66:	bd38      	pop	{r3, r4, r5, pc}

08008e68 <tcp_keepalive>:
tcp_keepalive():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1533
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8008e68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008e6a:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1545
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8008e6c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008e6e:	3801      	subs	r0, #1
 8008e70:	f001 fc81 	bl	800a776 <lwip_htonl>
 8008e74:	2100      	movs	r1, #0
 8008e76:	4602      	mov	r2, r0
 8008e78:	4620      	mov	r0, r4
 8008e7a:	f7ff fa03 	bl	8008284 <tcp_output_alloc_header.constprop.0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1546
  if (p == NULL) {
 8008e7e:	4605      	mov	r5, r0
 8008e80:	b1c8      	cbz	r0, 8008eb6 <tcp_keepalive+0x4e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1551
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008e82:	1d26      	adds	r6, r4, #4
 8008e84:	4630      	mov	r0, r6
 8008e86:	f7fa f835 	bl	8002ef4 <ip4_route>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1552
  if (netif == NULL) {
 8008e8a:	b188      	cbz	r0, 8008eb0 <tcp_keepalive+0x48>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1566
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	2206      	movs	r2, #6
 8008e90:	9002      	str	r0, [sp, #8]
 8008e92:	4621      	mov	r1, r4
 8008e94:	4628      	mov	r0, r5
 8008e96:	e9cd 3200 	strd	r3, r2, [sp]
 8008e9a:	4632      	mov	r2, r6
 8008e9c:	7aa3      	ldrb	r3, [r4, #10]
 8008e9e:	f7fa f99b 	bl	80031d8 <ip4_output_if>
 8008ea2:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1569
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	f001 fced 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1574

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8008eaa:	4620      	mov	r0, r4
 8008eac:	b004      	add	sp, #16
 8008eae:	bd70      	pop	{r4, r5, r6, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1553
    err = ERR_RTE;
 8008eb0:	f06f 0403 	mvn.w	r4, #3
 8008eb4:	e7f6      	b.n	8008ea4 <tcp_keepalive+0x3c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1549
    return ERR_MEM;
 8008eb6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008eba:	e7f6      	b.n	8008eaa <tcp_keepalive+0x42>

08008ebc <tcp_zero_window_probe>:
tcp_zero_window_probe():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1587
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8008ebc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1606
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8008ec0:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1587
{
 8008ec2:	4606      	mov	r6, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1608

  if (seg == NULL) {
 8008ec4:	b914      	cbnz	r4, 8008ecc <tcp_zero_window_probe+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1609
    seg = pcb->unsent;
 8008ec6:	6e84      	ldr	r4, [r0, #104]	; 0x68
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1611
  }
  if (seg == NULL) {
 8008ec8:	2c00      	cmp	r4, #0
 8008eca:	d041      	beq.n	8008f50 <tcp_zero_window_probe+0x94>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1616
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8008ecc:	68e3      	ldr	r3, [r4, #12]
 8008ece:	8998      	ldrh	r0, [r3, #12]
 8008ed0:	f001 fc4e 	bl	800a770 <lwip_htons>
 8008ed4:	f010 0501 	ands.w	r5, r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1620
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8008ed8:	68e3      	ldr	r3, [r4, #12]
 8008eda:	4630      	mov	r0, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1616
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8008edc:	bf18      	it	ne
 8008ede:	8925      	ldrhne	r5, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1620
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8008ee0:	685a      	ldr	r2, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1616
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8008ee2:	bf1c      	itt	ne
 8008ee4:	fab5 f585 	clzne	r5, r5
 8008ee8:	096d      	lsrne	r5, r5, #5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1620
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8008eea:	f085 0101 	eor.w	r1, r5, #1
 8008eee:	f7ff f9c9 	bl	8008284 <tcp_output_alloc_header.constprop.0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1621
  if (p == NULL) {
 8008ef2:	4607      	mov	r7, r0
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d03d      	beq.n	8008f74 <tcp_zero_window_probe+0xb8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1625
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8008ef8:	f8d0 8004 	ldr.w	r8, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1627

  if (is_fin) {
 8008efc:	b365      	cbz	r5, 8008f58 <tcp_zero_window_probe+0x9c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1629
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8008efe:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 8008f02:	2011      	movs	r0, #17
 8008f04:	f001 fc34 	bl	800a770 <lwip_htons>
 8008f08:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8008f0c:	b2ad      	uxth	r5, r5
 8008f0e:	4328      	orrs	r0, r5
 8008f10:	f8a8 000c 	strh.w	r0, [r8, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1640
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8008f14:	68e3      	ldr	r3, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1645
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008f16:	1d34      	adds	r4, r6, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1640
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8008f18:	6858      	ldr	r0, [r3, #4]
 8008f1a:	f001 fc2c 	bl	800a776 <lwip_htonl>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1641
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8008f1e:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1640
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8008f20:	3001      	adds	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1641
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8008f22:	1a1b      	subs	r3, r3, r0
 8008f24:	2b00      	cmp	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1642
    pcb->snd_nxt = snd_nxt;
 8008f26:	bfb8      	it	lt
 8008f28:	64f0      	strlt	r0, [r6, #76]	; 0x4c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1645
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f7f9 ffe2 	bl	8002ef4 <ip4_route>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1646
  if (netif == NULL) {
 8008f30:	b1e8      	cbz	r0, 8008f6e <tcp_zero_window_probe+0xb2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1659
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8008f32:	2300      	movs	r3, #0
 8008f34:	2206      	movs	r2, #6
 8008f36:	9002      	str	r0, [sp, #8]
 8008f38:	4631      	mov	r1, r6
 8008f3a:	4638      	mov	r0, r7
 8008f3c:	e9cd 3200 	strd	r3, r2, [sp]
 8008f40:	4622      	mov	r2, r4
 8008f42:	7ab3      	ldrb	r3, [r6, #10]
 8008f44:	f7fa f948 	bl	80031d8 <ip4_output_if>
 8008f48:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1664
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8008f4a:	4638      	mov	r0, r7
 8008f4c:	f001 fc9a 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1670

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8008f50:	4620      	mov	r0, r4
 8008f52:	b004      	add	sp, #16
 8008f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1636
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8008f58:	6860      	ldr	r0, [r4, #4]
 8008f5a:	f108 0114 	add.w	r1, r8, #20
 8008f5e:	8922      	ldrh	r2, [r4, #8]
 8008f60:	8903      	ldrh	r3, [r0, #8]
 8008f62:	1a9b      	subs	r3, r3, r2
 8008f64:	2201      	movs	r2, #1
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	f001 ff24 	bl	800adb4 <pbuf_copy_partial>
 8008f6c:	e7d2      	b.n	8008f14 <tcp_zero_window_probe+0x58>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1647
    err = ERR_RTE;
 8008f6e:	f06f 0403 	mvn.w	r4, #3
 8008f72:	e7ea      	b.n	8008f4a <tcp_zero_window_probe+0x8e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_out.c:1623
    return ERR_MEM;
 8008f74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008f78:	e7ea      	b.n	8008f50 <tcp_zero_window_probe+0x94>

08008f7a <lwip_standard_chksum>:
lwip_standard_chksum():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/inet_chksum.c:134
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8008f7a:	b513      	push	{r0, r1, r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/inet_chksum.c:137
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8008f7c:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/inet_chksum.c:142
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8008f7e:	f010 0401 	ands.w	r4, r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/inet_chksum.c:137
  u16_t t = 0;
 8008f82:	f8ad 3006 	strh.w	r3, [sp, #6]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/inet_chksum.c:142
  if (odd && len > 0) {
 8008f86:	d007      	beq.n	8008f98 <lwip_standard_chksum+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/inet_chksum.c:142 (discriminator 1)
 8008f88:	4299      	cmp	r1, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/inet_chksum.c:143 (discriminator 1)
    ((u8_t *)&t)[1] = *pb++;
 8008f8a:	bfc2      	ittt	gt
 8008f8c:	f810 3b01 	ldrbgt.w	r3, [r0], #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/inet_chksum.c:144 (discriminator 1)
    len--;
 8008f90:	f101 31ff 	addgt.w	r1, r1, #4294967295	; 0xffffffff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/inet_chksum.c:143 (discriminator 1)
    ((u8_t *)&t)[1] = *pb++;
 8008f94:	f88d 3007 	strbgt.w	r3, [sp, #7]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/inet_chksum.c:138
  u32_t sum = 0;
 8008f98:	2200      	movs	r2, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/inet_chksum.c:149
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8008f9a:	2901      	cmp	r1, #1
 8008f9c:	dc15      	bgt.n	8008fca <lwip_standard_chksum+0x50>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/inet_chksum.c:156
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8008f9e:	bf04      	itt	eq
 8008fa0:	7803      	ldrbeq	r3, [r0, #0]
 8008fa2:	f88d 3006 	strbeq.w	r3, [sp, #6]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/inet_chksum.c:160
  }

  /* Add end bytes */
  sum += t;
 8008fa6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008faa:	4413      	add	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/inet_chksum.c:164

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8008fac:	b298      	uxth	r0, r3
 8008fae:	eb00 4313 	add.w	r3, r0, r3, lsr #16
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/inet_chksum.c:165
  sum = FOLD_U32T(sum);
 8008fb2:	b298      	uxth	r0, r3
 8008fb4:	eb00 4013 	add.w	r0, r0, r3, lsr #16
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/inet_chksum.c:168

  /* Swap if alignment was odd */
  if (odd) {
 8008fb8:	b124      	cbz	r4, 8008fc4 <lwip_standard_chksum+0x4a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/inet_chksum.c:169
    sum = SWAP_BYTES_IN_WORD(sum);
 8008fba:	0203      	lsls	r3, r0, #8
 8008fbc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	4318      	orrs	r0, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/inet_chksum.c:173
  }

  return (u16_t)sum;
}
 8008fc4:	b280      	uxth	r0, r0
 8008fc6:	b002      	add	sp, #8
 8008fc8:	bd10      	pop	{r4, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/inet_chksum.c:150
    sum += *ps++;
 8008fca:	f830 3b02 	ldrh.w	r3, [r0], #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/inet_chksum.c:151
    len -= 2;
 8008fce:	3902      	subs	r1, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/inet_chksum.c:150
    sum += *ps++;
 8008fd0:	441a      	add	r2, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/inet_chksum.c:151
    len -= 2;
 8008fd2:	e7e2      	b.n	8008f9a <lwip_standard_chksum+0x20>

08008fd4 <inet_chksum>:
inet_chksum():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/inet_chksum.c:556
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8008fd4:	b508      	push	{r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/inet_chksum.c:557
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8008fd6:	f7ff ffd0 	bl	8008f7a <lwip_standard_chksum>
 8008fda:	43c0      	mvns	r0, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/inet_chksum.c:558
}
 8008fdc:	b280      	uxth	r0, r0
 8008fde:	bd08      	pop	{r3, pc}

08008fe0 <tcp_new_port>:
tcp_new_port():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:841
 */
static u16_t
tcp_new_port(void)
{
  u8_t i;
  u16_t n = 0;
 8008fe0:	4a12      	ldr	r2, [pc, #72]	; (800902c <tcp_new_port+0x4c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:839
{
 8008fe2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008fe6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fe8:	8813      	ldrh	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:845
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8008fea:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8008fee:	42b3      	cmp	r3, r6
 8008ff0:	4d0f      	ldr	r5, [pc, #60]	; (8009030 <tcp_new_port+0x50>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:846
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008ff2:	f04f 0104 	mov.w	r1, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:845
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8008ff6:	bf16      	itet	ne
 8008ff8:	3301      	addne	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:846
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008ffa:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:845
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8008ffe:	b29b      	uxthne	r3, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:850
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009000:	f855 4b04 	ldr.w	r4, [r5], #4
 8009004:	6824      	ldr	r4, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:850 (discriminator 1)
 8009006:	b934      	cbnz	r4, 8009016 <tcp_new_port+0x36>
 8009008:	3901      	subs	r1, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:849 (discriminator 2)
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800900a:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800900e:	d1f7      	bne.n	8009000 <tcp_new_port+0x20>
 8009010:	8013      	strh	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:859
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8009012:	4618      	mov	r0, r3
 8009014:	e007      	b.n	8009026 <tcp_new_port+0x46>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:851
      if (pcb->local_port == tcp_port) {
 8009016:	8ae7      	ldrh	r7, [r4, #22]
 8009018:	429f      	cmp	r7, r3
 800901a:	d105      	bne.n	8009028 <tcp_new_port+0x48>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:852
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800901c:	3801      	subs	r0, #1
 800901e:	b280      	uxth	r0, r0
 8009020:	2800      	cmp	r0, #0
 8009022:	d1e4      	bne.n	8008fee <tcp_new_port+0xe>
 8009024:	8013      	strh	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:860
}
 8009026:	bdf0      	pop	{r4, r5, r6, r7, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:850 (discriminator 2)
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009028:	68e4      	ldr	r4, [r4, #12]
 800902a:	e7ec      	b.n	8009006 <tcp_new_port+0x26>
 800902c:	2000001c 	.word	0x2000001c
 8009030:	0801fa64 	.word	0x0801fa64

08009034 <tcp_close_shutdown_fin>:
tcp_close_shutdown_fin():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:331
{
 8009034:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:333
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009036:	4604      	mov	r4, r0
 8009038:	b930      	cbnz	r0, 8009048 <tcp_close_shutdown_fin+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:333 (discriminator 1)
 800903a:	4b13      	ldr	r3, [pc, #76]	; (8009088 <tcp_close_shutdown_fin+0x54>)
 800903c:	f240 124d 	movw	r2, #333	; 0x14d
 8009040:	4912      	ldr	r1, [pc, #72]	; (800908c <tcp_close_shutdown_fin+0x58>)
 8009042:	4813      	ldr	r0, [pc, #76]	; (8009090 <tcp_close_shutdown_fin+0x5c>)
 8009044:	f003 ffaa 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:335
  switch (pcb->state) {
 8009048:	7d23      	ldrb	r3, [r4, #20]
 800904a:	2b04      	cmp	r3, #4
 800904c:	d003      	beq.n	8009056 <tcp_close_shutdown_fin+0x22>
 800904e:	2b07      	cmp	r3, #7
 8009050:	d00c      	beq.n	800906c <tcp_close_shutdown_fin+0x38>
 8009052:	2b03      	cmp	r3, #3
 8009054:	d108      	bne.n	8009068 <tcp_close_shutdown_fin+0x34>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:337
    err = tcp_send_fin(pcb);
 8009056:	4620      	mov	r0, r4
 8009058:	f7ff fc74 	bl	8008944 <tcp_send_fin>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:338
    if (err == ERR_OK) {
 800905c:	b960      	cbnz	r0, 8009078 <tcp_close_shutdown_fin+0x44>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:341
      pcb->state = FIN_WAIT_1;
 800905e:	2305      	movs	r3, #5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:355
      pcb->state = LAST_ACK;
 8009060:	7523      	strb	r3, [r4, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:369
    tcp_output(pcb);
 8009062:	4620      	mov	r0, r4
 8009064:	f7ff fcc6 	bl	80089f4 <tcp_output>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:360
    return ERR_OK;
 8009068:	2000      	movs	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:381
}
 800906a:	bd10      	pop	{r4, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:352
    err = tcp_send_fin(pcb);
 800906c:	4620      	mov	r0, r4
 800906e:	f7ff fc69 	bl	8008944 <tcp_send_fin>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:353
    if (err == ERR_OK) {
 8009072:	b908      	cbnz	r0, 8009078 <tcp_close_shutdown_fin+0x44>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:355
      pcb->state = LAST_ACK;
 8009074:	2309      	movs	r3, #9
 8009076:	e7f3      	b.n	8009060 <tcp_close_shutdown_fin+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:370
  } else if (err == ERR_MEM) {
 8009078:	1c43      	adds	r3, r0, #1
 800907a:	d1f6      	bne.n	800906a <tcp_close_shutdown_fin+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:372
    pcb->flags |= TF_CLOSEPEND;
 800907c:	7ea3      	ldrb	r3, [r4, #26]
 800907e:	f043 0308 	orr.w	r3, r3, #8
 8009082:	76a3      	strb	r3, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:378
    return ERR_OK;
 8009084:	e7f0      	b.n	8009068 <tcp_close_shutdown_fin+0x34>
 8009086:	bf00      	nop
 8009088:	0801f9ad 	.word	0x0801f9ad
 800908c:	0801fa0e 	.word	0x0801fa0e
 8009090:	0800e36a 	.word	0x0800e36a

08009094 <tcp_init>:
tcp_init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:150
}
 8009094:	4770      	bx	lr
	...

08009098 <tcp_bind>:
tcp_bind():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:563
{
 8009098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:571
    ipaddr = IP4_ADDR_ANY;
 800909a:	4d1e      	ldr	r5, [pc, #120]	; (8009114 <tcp_bind+0x7c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:576
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800909c:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:571
    ipaddr = IP4_ADDR_ANY;
 800909e:	2900      	cmp	r1, #0
 80090a0:	bf18      	it	ne
 80090a2:	460d      	movne	r5, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:576
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80090a4:	b140      	cbz	r0, 80090b8 <tcp_bind+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:580
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80090a6:	7d03      	ldrb	r3, [r0, #20]
 80090a8:	b14b      	cbz	r3, 80090be <tcp_bind+0x26>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:580 (discriminator 1)
 80090aa:	4b1b      	ldr	r3, [pc, #108]	; (8009118 <tcp_bind+0x80>)
 80090ac:	f44f 7211 	mov.w	r2, #580	; 0x244
 80090b0:	491a      	ldr	r1, [pc, #104]	; (800911c <tcp_bind+0x84>)
 80090b2:	481b      	ldr	r0, [pc, #108]	; (8009120 <tcp_bind+0x88>)
 80090b4:	f003 ff72 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:577
    return ERR_VAL;
 80090b8:	f06f 0005 	mvn.w	r0, #5
 80090bc:	e01a      	b.n	80090f4 <tcp_bind+0x5c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:593
  if (port == 0) {
 80090be:	b932      	cbnz	r2, 80090ce <tcp_bind+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:594
    port = tcp_new_port();
 80090c0:	f7ff ff8e 	bl	8008fe0 <tcp_new_port>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:595
    if (port == 0) {
 80090c4:	4602      	mov	r2, r0
 80090c6:	b950      	cbnz	r0, 80090de <tcp_bind+0x46>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:596
      return ERR_BUF;
 80090c8:	f06f 0001 	mvn.w	r0, #1
 80090cc:	e012      	b.n	80090f4 <tcp_bind+0x5c>
 80090ce:	4915      	ldr	r1, [pc, #84]	; (8009124 <tcp_bind+0x8c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:601
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80090d0:	f851 0b04 	ldr.w	r0, [r1], #4
 80090d4:	6800      	ldr	r0, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:601 (discriminator 1)
 80090d6:	b970      	cbnz	r0, 80090f6 <tcp_bind+0x5e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:600 (discriminator 2)
    for (i = 0; i < max_pcb_list; i++) {
 80090d8:	3301      	adds	r3, #1
 80090da:	2b04      	cmp	r3, #4
 80090dc:	d1f8      	bne.n	80090d0 <tcp_bind+0x38>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:624
  if (!ip_addr_isany(ipaddr)) {
 80090de:	682b      	ldr	r3, [r5, #0]
 80090e0:	b103      	cbz	r3, 80090e4 <tcp_bind+0x4c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:625 (discriminator 4)
    ip_addr_set(&pcb->local_ip, ipaddr);
 80090e2:	6023      	str	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:628
  TCP_REG(&tcp_bound_pcbs, pcb);
 80090e4:	4b10      	ldr	r3, [pc, #64]	; (8009128 <tcp_bind+0x90>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:627
  pcb->local_port = port;
 80090e6:	82e2      	strh	r2, [r4, #22]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:628
  TCP_REG(&tcp_bound_pcbs, pcb);
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	601c      	str	r4, [r3, #0]
 80090ec:	60e2      	str	r2, [r4, #12]
 80090ee:	f001 fef9 	bl	800aee4 <tcp_timer_needed>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:630
  return ERR_OK;
 80090f2:	2000      	movs	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:631
}
 80090f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:602
        if (cpcb->local_port == port) {
 80090f6:	8ac6      	ldrh	r6, [r0, #22]
 80090f8:	4296      	cmp	r6, r2
 80090fa:	d105      	bne.n	8009108 <tcp_bind+0x70>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:613
                (ip_addr_isany(&cpcb->local_ip) ||
 80090fc:	6807      	ldr	r7, [r0, #0]
 80090fe:	b12f      	cbz	r7, 800910c <tcp_bind+0x74>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:614
                ip_addr_isany(ipaddr) ||
 8009100:	682e      	ldr	r6, [r5, #0]
 8009102:	b11e      	cbz	r6, 800910c <tcp_bind+0x74>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:612
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009104:	42b7      	cmp	r7, r6
 8009106:	d001      	beq.n	800910c <tcp_bind+0x74>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:601 (discriminator 2)
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009108:	68c0      	ldr	r0, [r0, #12]
 800910a:	e7e4      	b.n	80090d6 <tcp_bind+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:616
              return ERR_USE;
 800910c:	f06f 0007 	mvn.w	r0, #7
 8009110:	e7f0      	b.n	80090f4 <tcp_bind+0x5c>
 8009112:	bf00      	nop
 8009114:	0801e8dc 	.word	0x0801e8dc
 8009118:	0801f9ad 	.word	0x0801f9ad
 800911c:	0801f96c 	.word	0x0801f96c
 8009120:	0800e36a 	.word	0x0800e36a
 8009124:	0801fa64 	.word	0x0801fa64
 8009128:	20008100 	.word	0x20008100

0800912c <tcp_listen_with_backlog_and_err>:
tcp_listen_with_backlog_and_err():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:692
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800912c:	7d03      	ldrb	r3, [r0, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:687
{
 800912e:	b570      	push	{r4, r5, r6, lr}
 8009130:	4605      	mov	r5, r0
 8009132:	4616      	mov	r6, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:692
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8009134:	b16b      	cbz	r3, 8009152 <tcp_listen_with_backlog_and_err+0x26>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:692 (discriminator 1)
 8009136:	4b23      	ldr	r3, [pc, #140]	; (80091c4 <tcp_listen_with_backlog_and_err+0x98>)
 8009138:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 800913c:	4922      	ldr	r1, [pc, #136]	; (80091c8 <tcp_listen_with_backlog_and_err+0x9c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:688 (discriminator 1)
  struct tcp_pcb_listen *lpcb = NULL;
 800913e:	2400      	movs	r4, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:692 (discriminator 1)
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8009140:	4822      	ldr	r0, [pc, #136]	; (80091cc <tcp_listen_with_backlog_and_err+0xa0>)
 8009142:	f003 ff2b 	bl	800cf9c <iprintf>
 8009146:	f06f 030e 	mvn.w	r3, #14
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:746
  if (err != NULL) {
 800914a:	b106      	cbz	r6, 800914e <tcp_listen_with_backlog_and_err+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:747
    *err = res;
 800914c:	7033      	strb	r3, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:750
}
 800914e:	4620      	mov	r0, r4
 8009150:	bd70      	pop	{r4, r5, r6, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:716
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8009152:	2002      	movs	r0, #2
 8009154:	f003 f886 	bl	800c264 <memp_malloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:717
  if (lpcb == NULL) {
 8009158:	4604      	mov	r4, r0
 800915a:	2800      	cmp	r0, #0
 800915c:	d02f      	beq.n	80091be <tcp_listen_with_backlog_and_err+0x92>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:721
  lpcb->callback_arg = pcb->callback_arg;
 800915e:	692b      	ldr	r3, [r5, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:723
  lpcb->state = LISTEN;
 8009160:	2201      	movs	r2, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:721
  lpcb->callback_arg = pcb->callback_arg;
 8009162:	6103      	str	r3, [r0, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:722
  lpcb->local_port = pcb->local_port;
 8009164:	8aeb      	ldrh	r3, [r5, #22]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:723
  lpcb->state = LISTEN;
 8009166:	7502      	strb	r2, [r0, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:722
  lpcb->local_port = pcb->local_port;
 8009168:	82c3      	strh	r3, [r0, #22]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:724
  lpcb->prio = pcb->prio;
 800916a:	7d6a      	ldrb	r2, [r5, #21]
 800916c:	7542      	strb	r2, [r0, #21]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:725
  lpcb->so_options = pcb->so_options;
 800916e:	7a2a      	ldrb	r2, [r5, #8]
 8009170:	7202      	strb	r2, [r0, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:726
  lpcb->ttl = pcb->ttl;
 8009172:	7aaa      	ldrb	r2, [r5, #10]
 8009174:	7282      	strb	r2, [r0, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:727
  lpcb->tos = pcb->tos;
 8009176:	7a6a      	ldrb	r2, [r5, #9]
 8009178:	7242      	strb	r2, [r0, #9]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:731
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800917a:	682a      	ldr	r2, [r5, #0]
 800917c:	6002      	str	r2, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:732
  if (pcb->local_port != 0) {
 800917e:	b13b      	cbz	r3, 8009190 <tcp_listen_with_backlog_and_err+0x64>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:733
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8009180:	4a13      	ldr	r2, [pc, #76]	; (80091d0 <tcp_listen_with_backlog_and_err+0xa4>)
 8009182:	6813      	ldr	r3, [r2, #0]
 8009184:	42ab      	cmp	r3, r5
 8009186:	d112      	bne.n	80091ae <tcp_listen_with_backlog_and_err+0x82>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:733 (discriminator 1)
 8009188:	68eb      	ldr	r3, [r5, #12]
 800918a:	6013      	str	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:733 (discriminator 10)
 800918c:	2300      	movs	r3, #0
 800918e:	60eb      	str	r3, [r5, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:735
  memp_free(MEMP_TCP_PCB, pcb);
 8009190:	4629      	mov	r1, r5
 8009192:	2001      	movs	r0, #1
 8009194:	f003 f896 	bl	800c2c4 <memp_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:737
  lpcb->accept = tcp_accept_null;
 8009198:	4b0e      	ldr	r3, [pc, #56]	; (80091d4 <tcp_listen_with_backlog_and_err+0xa8>)
 800919a:	61a3      	str	r3, [r4, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:743
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800919c:	4b0e      	ldr	r3, [pc, #56]	; (80091d8 <tcp_listen_with_backlog_and_err+0xac>)
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	601c      	str	r4, [r3, #0]
 80091a2:	60e2      	str	r2, [r4, #12]
 80091a4:	f001 fe9e 	bl	800aee4 <tcp_timer_needed>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:744
  res = ERR_OK;
 80091a8:	2300      	movs	r3, #0
 80091aa:	e7ce      	b.n	800914a <tcp_listen_with_backlog_and_err+0x1e>
 80091ac:	4613      	mov	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:733 (discriminator 8)
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d0ec      	beq.n	800918c <tcp_listen_with_backlog_and_err+0x60>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:733 (discriminator 9)
 80091b2:	68da      	ldr	r2, [r3, #12]
 80091b4:	42aa      	cmp	r2, r5
 80091b6:	d1f9      	bne.n	80091ac <tcp_listen_with_backlog_and_err+0x80>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:733 (discriminator 5)
 80091b8:	68ea      	ldr	r2, [r5, #12]
 80091ba:	60da      	str	r2, [r3, #12]
 80091bc:	e7e6      	b.n	800918c <tcp_listen_with_backlog_and_err+0x60>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:718
    res = ERR_MEM;
 80091be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091c2:	e7c2      	b.n	800914a <tcp_listen_with_backlog_and_err+0x1e>
 80091c4:	0801f9ad 	.word	0x0801f9ad
 80091c8:	0801fa40 	.word	0x0801fa40
 80091cc:	0800e36a 	.word	0x0800e36a
 80091d0:	20008100 	.word	0x20008100
 80091d4:	08009bc7 	.word	0x08009bc7
 80091d8:	200080fc 	.word	0x200080fc

080091dc <tcp_update_rcv_ann_wnd>:
tcp_update_rcv_ann_wnd():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:760
{
 80091dc:	b570      	push	{r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:761
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80091de:	8d01      	ldrh	r1, [r0, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:760
{
 80091e0:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:763
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80091e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80091e4:	f240 56b4 	movw	r6, #1460	; 0x5b4
 80091e8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:761
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80091ea:	6a45      	ldr	r5, [r0, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:763
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80091ec:	1ac8      	subs	r0, r1, r3
 80091ee:	42b2      	cmp	r2, r6
 80091f0:	4428      	add	r0, r5
 80091f2:	bf94      	ite	ls
 80091f4:	1a82      	subls	r2, r0, r2
 80091f6:	1b82      	subhi	r2, r0, r6
 80091f8:	2a00      	cmp	r2, #0
 80091fa:	db01      	blt.n	8009200 <tcp_update_rcv_ann_wnd+0x24>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:765
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80091fc:	8561      	strh	r1, [r4, #42]	; 0x2a
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:782
}
 80091fe:	bd70      	pop	{r4, r5, r6, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:768
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009200:	1aea      	subs	r2, r5, r3
 8009202:	2a00      	cmp	r2, #0
 8009204:	dd02      	ble.n	800920c <tcp_update_rcv_ann_wnd+0x30>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:771
      pcb->rcv_ann_wnd = 0;
 8009206:	2000      	movs	r0, #0
 8009208:	8560      	strh	r0, [r4, #42]	; 0x2a
 800920a:	e7f8      	b.n	80091fe <tcp_update_rcv_ann_wnd+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:774
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800920c:	1b5d      	subs	r5, r3, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:776
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800920e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8009212:	d306      	bcc.n	8009222 <tcp_update_rcv_ann_wnd+0x46>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:776 (discriminator 1)
 8009214:	4b04      	ldr	r3, [pc, #16]	; (8009228 <tcp_update_rcv_ann_wnd+0x4c>)
 8009216:	f44f 7242 	mov.w	r2, #776	; 0x308
 800921a:	4904      	ldr	r1, [pc, #16]	; (800922c <tcp_update_rcv_ann_wnd+0x50>)
 800921c:	4804      	ldr	r0, [pc, #16]	; (8009230 <tcp_update_rcv_ann_wnd+0x54>)
 800921e:	f003 febd 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:778
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009222:	8565      	strh	r5, [r4, #42]	; 0x2a
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:780
    return 0;
 8009224:	2000      	movs	r0, #0
 8009226:	e7ea      	b.n	80091fe <tcp_update_rcv_ann_wnd+0x22>
 8009228:	0801f9ad 	.word	0x0801f9ad
 800922c:	0801fcb1 	.word	0x0801fcb1
 8009230:	0800e36a 	.word	0x0800e36a

08009234 <tcp_recved>:
tcp_recved():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:795
{
 8009234:	b538      	push	{r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:799
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009236:	7d03      	ldrb	r3, [r0, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:795
{
 8009238:	4604      	mov	r4, r0
 800923a:	460d      	mov	r5, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:799
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800923c:	2b01      	cmp	r3, #1
 800923e:	d106      	bne.n	800924e <tcp_recved+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:799 (discriminator 1)
 8009240:	4b18      	ldr	r3, [pc, #96]	; (80092a4 <tcp_recved+0x70>)
 8009242:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009246:	4918      	ldr	r1, [pc, #96]	; (80092a8 <tcp_recved+0x74>)
 8009248:	4818      	ldr	r0, [pc, #96]	; (80092ac <tcp_recved+0x78>)
 800924a:	f003 fea7 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:802
  pcb->rcv_wnd += len;
 800924e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:803
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8009250:	f640 3368 	movw	r3, #2920	; 0xb68
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:802
  pcb->rcv_wnd += len;
 8009254:	4429      	add	r1, r5
 8009256:	b289      	uxth	r1, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:803
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8009258:	4299      	cmp	r1, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:802
  pcb->rcv_wnd += len;
 800925a:	8521      	strh	r1, [r4, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:803
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800925c:	d912      	bls.n	8009284 <tcp_recved+0x50>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:804
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800925e:	f640 3368 	movw	r3, #2920	; 0xb68
 8009262:	8523      	strh	r3, [r4, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:817
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009264:	4620      	mov	r0, r4
 8009266:	f7ff ffb9 	bl	80091dc <tcp_update_rcv_ann_wnd>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:823
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800926a:	f240 23d9 	movw	r3, #729	; 0x2d9
 800926e:	4298      	cmp	r0, r3
 8009270:	dd17      	ble.n	80092a2 <tcp_recved+0x6e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:824
    tcp_ack_now(pcb);
 8009272:	7ea3      	ldrb	r3, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:825
    tcp_output(pcb);
 8009274:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:824
    tcp_ack_now(pcb);
 8009276:	f043 0302 	orr.w	r3, r3, #2
 800927a:	76a3      	strb	r3, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:830
}
 800927c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:825
    tcp_output(pcb);
 8009280:	f7ff bbb8 	b.w	80089f4 <tcp_output>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:805
  } else if (pcb->rcv_wnd == 0) {
 8009284:	2900      	cmp	r1, #0
 8009286:	d1ed      	bne.n	8009264 <tcp_recved+0x30>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:807
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8009288:	7d23      	ldrb	r3, [r4, #20]
 800928a:	2b07      	cmp	r3, #7
 800928c:	d0e7      	beq.n	800925e <tcp_recved+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:807 (discriminator 1)
 800928e:	2b09      	cmp	r3, #9
 8009290:	d0e5      	beq.n	800925e <tcp_recved+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:813 (discriminator 1)
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8009292:	4b04      	ldr	r3, [pc, #16]	; (80092a4 <tcp_recved+0x70>)
 8009294:	f240 322d 	movw	r2, #813	; 0x32d
 8009298:	4905      	ldr	r1, [pc, #20]	; (80092b0 <tcp_recved+0x7c>)
 800929a:	4804      	ldr	r0, [pc, #16]	; (80092ac <tcp_recved+0x78>)
 800929c:	f003 fe7e 	bl	800cf9c <iprintf>
 80092a0:	e7e0      	b.n	8009264 <tcp_recved+0x30>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:830
}
 80092a2:	bd38      	pop	{r3, r4, r5, pc}
 80092a4:	0801f9ad 	.word	0x0801f9ad
 80092a8:	0801faf1 	.word	0x0801faf1
 80092ac:	0800e36a 	.word	0x0800e36a
 80092b0:	0801fb17 	.word	0x0801fb17

080092b4 <tcp_seg_free>:
tcp_seg_free():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1391
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80092b4:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1392
  if (seg != NULL) {
 80092b6:	4604      	mov	r4, r0
 80092b8:	b148      	cbz	r0, 80092ce <tcp_seg_free+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1393
    if (seg->p != NULL) {
 80092ba:	6840      	ldr	r0, [r0, #4]
 80092bc:	b108      	cbz	r0, 80092c2 <tcp_seg_free+0xe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1394
      pbuf_free(seg->p);
 80092be:	f001 fae1 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1399
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80092c2:	4621      	mov	r1, r4
 80092c4:	2003      	movs	r0, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1401
  }
}
 80092c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1399
    memp_free(MEMP_TCP_SEG, seg);
 80092ca:	f002 bffb 	b.w	800c2c4 <memp_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1401
}
 80092ce:	bd10      	pop	{r4, pc}

080092d0 <tcp_segs_free>:
tcp_segs_free():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1376
{
 80092d0:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1377
  while (seg != NULL) {
 80092d2:	b900      	cbnz	r0, 80092d6 <tcp_segs_free+0x6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1382
}
 80092d4:	bd10      	pop	{r4, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1378
    struct tcp_seg *next = seg->next;
 80092d6:	6804      	ldr	r4, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1379
    tcp_seg_free(seg);
 80092d8:	f7ff ffec 	bl	80092b4 <tcp_seg_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1380
    seg = next;
 80092dc:	4620      	mov	r0, r4
 80092de:	e7f8      	b.n	80092d2 <tcp_segs_free+0x2>

080092e0 <tcp_arg>:
tcp_arg():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1705
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80092e0:	b100      	cbz	r0, 80092e4 <tcp_arg+0x4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1706
    pcb->callback_arg = arg;
 80092e2:	6101      	str	r1, [r0, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1708
  }
}
 80092e4:	4770      	bx	lr
	...

080092e8 <tcp_recv>:
tcp_recv():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1721
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80092e8:	b538      	push	{r3, r4, r5, lr}
 80092ea:	460d      	mov	r5, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1722
  if (pcb != NULL) {
 80092ec:	4604      	mov	r4, r0
 80092ee:	b150      	cbz	r0, 8009306 <tcp_recv+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1723
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80092f0:	7d03      	ldrb	r3, [r0, #20]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d106      	bne.n	8009304 <tcp_recv+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1723 (discriminator 1)
 80092f6:	4b04      	ldr	r3, [pc, #16]	; (8009308 <tcp_recv+0x20>)
 80092f8:	f240 62bb 	movw	r2, #1723	; 0x6bb
 80092fc:	4903      	ldr	r1, [pc, #12]	; (800930c <tcp_recv+0x24>)
 80092fe:	4804      	ldr	r0, [pc, #16]	; (8009310 <tcp_recv+0x28>)
 8009300:	f003 fe4c 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1724
    pcb->recv = recv;
 8009304:	67e5      	str	r5, [r4, #124]	; 0x7c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1726
  }
}
 8009306:	bd38      	pop	{r3, r4, r5, pc}
 8009308:	0801f9ad 	.word	0x0801f9ad
 800930c:	0801faca 	.word	0x0801faca
 8009310:	0800e36a 	.word	0x0800e36a

08009314 <tcp_sent>:
tcp_sent():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1738
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8009314:	b538      	push	{r3, r4, r5, lr}
 8009316:	460d      	mov	r5, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1739
  if (pcb != NULL) {
 8009318:	4604      	mov	r4, r0
 800931a:	b150      	cbz	r0, 8009332 <tcp_sent+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1740
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800931c:	7d03      	ldrb	r3, [r0, #20]
 800931e:	2b01      	cmp	r3, #1
 8009320:	d106      	bne.n	8009330 <tcp_sent+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1740 (discriminator 1)
 8009322:	4b04      	ldr	r3, [pc, #16]	; (8009334 <tcp_sent+0x20>)
 8009324:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8009328:	4903      	ldr	r1, [pc, #12]	; (8009338 <tcp_sent+0x24>)
 800932a:	4804      	ldr	r0, [pc, #16]	; (800933c <tcp_sent+0x28>)
 800932c:	f003 fe36 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1741
    pcb->sent = sent;
 8009330:	67a5      	str	r5, [r4, #120]	; 0x78
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1743
  }
}
 8009332:	bd38      	pop	{r3, r4, r5, pc}
 8009334:	0801f9ad 	.word	0x0801f9ad
 8009338:	0801fb38 	.word	0x0801fb38
 800933c:	0800e36a 	.word	0x0800e36a

08009340 <tcp_err>:
tcp_err():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1758
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8009340:	b538      	push	{r3, r4, r5, lr}
 8009342:	460d      	mov	r5, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1759
  if (pcb != NULL) {
 8009344:	4604      	mov	r4, r0
 8009346:	b158      	cbz	r0, 8009360 <tcp_err+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1760
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8009348:	7d03      	ldrb	r3, [r0, #20]
 800934a:	2b01      	cmp	r3, #1
 800934c:	d106      	bne.n	800935c <tcp_err+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1760 (discriminator 1)
 800934e:	4b05      	ldr	r3, [pc, #20]	; (8009364 <tcp_err+0x24>)
 8009350:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8009354:	4904      	ldr	r1, [pc, #16]	; (8009368 <tcp_err+0x28>)
 8009356:	4805      	ldr	r0, [pc, #20]	; (800936c <tcp_err+0x2c>)
 8009358:	f003 fe20 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1761
    pcb->errf = err;
 800935c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1763
  }
}
 8009360:	bd38      	pop	{r3, r4, r5, pc}
 8009362:	bf00      	nop
 8009364:	0801f9ad 	.word	0x0801f9ad
 8009368:	0801fa1a 	.word	0x0801fa1a
 800936c:	0800e36a 	.word	0x0800e36a

08009370 <tcp_accept>:
tcp_accept():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1777
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8009370:	b118      	cbz	r0, 800937a <tcp_accept+0xa>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1777 (discriminator 1)
 8009372:	7d03      	ldrb	r3, [r0, #20]
 8009374:	2b01      	cmp	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1779 (discriminator 1)
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
 8009376:	bf08      	it	eq
 8009378:	6181      	streq	r1, [r0, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1781
  }
}
 800937a:	4770      	bx	lr

0800937c <tcp_poll>:
tcp_poll():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1795
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800937c:	7d03      	ldrb	r3, [r0, #20]
 800937e:	2b01      	cmp	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1794
{
 8009380:	b570      	push	{r4, r5, r6, lr}
 8009382:	4604      	mov	r4, r0
 8009384:	460e      	mov	r6, r1
 8009386:	4615      	mov	r5, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1795
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8009388:	d106      	bne.n	8009398 <tcp_poll+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1795 (discriminator 1)
 800938a:	4b05      	ldr	r3, [pc, #20]	; (80093a0 <tcp_poll+0x24>)
 800938c:	f240 7203 	movw	r2, #1795	; 0x703
 8009390:	4904      	ldr	r1, [pc, #16]	; (80093a4 <tcp_poll+0x28>)
 8009392:	4805      	ldr	r0, [pc, #20]	; (80093a8 <tcp_poll+0x2c>)
 8009394:	f003 fe02 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1797
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8009398:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1801
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800939c:	7725      	strb	r5, [r4, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1802
}
 800939e:	bd70      	pop	{r4, r5, r6, pc}
 80093a0:	0801f9ad 	.word	0x0801f9ad
 80093a4:	0801faac 	.word	0x0801faac
 80093a8:	0800e36a 	.word	0x0800e36a

080093ac <tcp_pcb_purge>:
tcp_pcb_purge():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1813
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  if (pcb->state != CLOSED &&
 80093ac:	7d03      	ldrb	r3, [r0, #20]
 80093ae:	2b01      	cmp	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1812
{
 80093b0:	b510      	push	{r4, lr}
 80093b2:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1813
  if (pcb->state != CLOSED &&
 80093b4:	d915      	bls.n	80093e2 <tcp_pcb_purge+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1813 (discriminator 1)
 80093b6:	2b0a      	cmp	r3, #10
 80093b8:	d013      	beq.n	80093e2 <tcp_pcb_purge+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1821

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80093ba:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80093bc:	b118      	cbz	r0, 80093c6 <tcp_pcb_purge+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1823
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80093be:	f001 fa61 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1824
      pcb->refused_data = NULL;
 80093c2:	2300      	movs	r3, #0
 80093c4:	6723      	str	r3, [r4, #112]	; 0x70
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1842
    pcb->ooseq = NULL;
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80093c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1844

    tcp_segs_free(pcb->unsent);
 80093ca:	6ea0      	ldr	r0, [r4, #104]	; 0x68
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1842
    pcb->rtime = -1;
 80093cc:	8623      	strh	r3, [r4, #48]	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1844
    tcp_segs_free(pcb->unsent);
 80093ce:	f7ff ff7f 	bl	80092d0 <tcp_segs_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1845
    tcp_segs_free(pcb->unacked);
 80093d2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80093d4:	f7ff ff7c 	bl	80092d0 <tcp_segs_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1846
    pcb->unacked = pcb->unsent = NULL;
 80093d8:	2300      	movs	r3, #0
 80093da:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1848
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80093de:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1851
#endif /* TCP_OVERSIZE */
  }
}
 80093e2:	bd10      	pop	{r4, pc}

080093e4 <tcp_slowtmr>:
tcp_slowtmr():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:987
{
 80093e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:996
  ++tcp_ticks;
 80093e8:	4eb6      	ldr	r6, [pc, #728]	; (80096c4 <tcp_slowtmr+0x2e0>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:987
{
 80093ea:	b085      	sub	sp, #20
 80093ec:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 80096cc <tcp_slowtmr+0x2e8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:996
  ++tcp_ticks;
 80093f0:	6833      	ldr	r3, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1008
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80093f2:	f8df 8304 	ldr.w	r8, [pc, #772]	; 80096f8 <tcp_slowtmr+0x314>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:996
  ++tcp_ticks;
 80093f6:	3301      	adds	r3, #1
 80093f8:	6033      	str	r3, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:997
  ++tcp_timer_ctr;
 80093fa:	4bb3      	ldr	r3, [pc, #716]	; (80096c8 <tcp_slowtmr+0x2e4>)
 80093fc:	781a      	ldrb	r2, [r3, #0]
 80093fe:	9302      	str	r3, [sp, #8]
 8009400:	3201      	adds	r2, #1
 8009402:	701a      	strb	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1002
  pcb = tcp_active_pcbs;
 8009404:	4bb1      	ldr	r3, [pc, #708]	; (80096cc <tcp_slowtmr+0x2e8>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1001
  prev = NULL;
 8009406:	2700      	movs	r7, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1008
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009408:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 80096fc <tcp_slowtmr+0x318>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1002
  pcb = tcp_active_pcbs;
 800940c:	681c      	ldr	r4, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1006
  while (pcb != NULL) {
 800940e:	b96c      	cbnz	r4, 800942c <tcp_slowtmr+0x48>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1211
  pcb = tcp_tw_pcbs;
 8009410:	4faf      	ldr	r7, [pc, #700]	; (80096d0 <tcp_slowtmr+0x2ec>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1213
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009412:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 80096f8 <tcp_slowtmr+0x314>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1211
  pcb = tcp_tw_pcbs;
 8009416:	683d      	ldr	r5, [r7, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1213
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009418:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 8009700 <tcp_slowtmr+0x31c>
 800941c:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 80096fc <tcp_slowtmr+0x318>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1212
  while (pcb != NULL) {
 8009420:	2d00      	cmp	r5, #0
 8009422:	f040 816f 	bne.w	8009704 <tcp_slowtmr+0x320>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1242
}
 8009426:	b005      	add	sp, #20
 8009428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1008
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800942c:	7d23      	ldrb	r3, [r4, #20]
 800942e:	b933      	cbnz	r3, 800943e <tcp_slowtmr+0x5a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1008 (discriminator 1)
 8009430:	4643      	mov	r3, r8
 8009432:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8009436:	49a7      	ldr	r1, [pc, #668]	; (80096d4 <tcp_slowtmr+0x2f0>)
 8009438:	4648      	mov	r0, r9
 800943a:	f003 fdaf 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1009
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800943e:	7d23      	ldrb	r3, [r4, #20]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d106      	bne.n	8009452 <tcp_slowtmr+0x6e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1009 (discriminator 1)
 8009444:	4643      	mov	r3, r8
 8009446:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800944a:	49a3      	ldr	r1, [pc, #652]	; (80096d8 <tcp_slowtmr+0x2f4>)
 800944c:	4648      	mov	r0, r9
 800944e:	f003 fda5 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1010
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009452:	7d23      	ldrb	r3, [r4, #20]
 8009454:	2b0a      	cmp	r3, #10
 8009456:	d106      	bne.n	8009466 <tcp_slowtmr+0x82>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1010 (discriminator 1)
 8009458:	4643      	mov	r3, r8
 800945a:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800945e:	499f      	ldr	r1, [pc, #636]	; (80096dc <tcp_slowtmr+0x2f8>)
 8009460:	4648      	mov	r0, r9
 8009462:	f003 fd9b 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1011
    if (pcb->last_timer == tcp_timer_ctr) {
 8009466:	9b02      	ldr	r3, [sp, #8]
 8009468:	7f62      	ldrb	r2, [r4, #29]
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	429a      	cmp	r2, r3
 800946e:	d102      	bne.n	8009476 <tcp_slowtmr+0x92>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1013
      pcb = pcb->next;
 8009470:	68e5      	ldr	r5, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1014
      continue;
 8009472:	462c      	mov	r4, r5
 8009474:	e7cb      	b.n	800940e <tcp_slowtmr+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1021
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009476:	7d21      	ldrb	r1, [r4, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1016
    pcb->last_timer = tcp_timer_ctr;
 8009478:	7763      	strb	r3, [r4, #29]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1021
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800947a:	2902      	cmp	r1, #2
 800947c:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8009480:	f040 808a 	bne.w	8009598 <tcp_slowtmr+0x1b4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1021 (discriminator 1)
 8009484:	2a05      	cmp	r2, #5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1025
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8009486:	f200 80d1 	bhi.w	800962c <tcp_slowtmr+0x248>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1029
      if (pcb->persist_backoff > 0) {
 800948a:	f894 b091 	ldrb.w	fp, [r4, #145]	; 0x91
 800948e:	f1bb 0f00 	cmp.w	fp, #0
 8009492:	f000 8095 	beq.w	80095c0 <tcp_slowtmr+0x1dc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1032
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8009496:	4892      	ldr	r0, [pc, #584]	; (80096e0 <tcp_slowtmr+0x2fc>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1033
        if (pcb->persist_cnt < backoff_cnt) {
 8009498:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1032
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800949c:	4483      	add	fp, r0
 800949e:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1033
        if (pcb->persist_cnt < backoff_cnt) {
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d37a      	bcc.n	800959c <tcp_slowtmr+0x1b8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1037
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 80094a6:	4620      	mov	r0, r4
 80094a8:	f7ff fd08 	bl	8008ebc <tcp_zero_window_probe>
 80094ac:	2800      	cmp	r0, #0
 80094ae:	d07c      	beq.n	80095aa <tcp_slowtmr+0x1c6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1018
    pcb_remove = 0;
 80094b0:	f04f 0b00 	mov.w	fp, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1084
    if (pcb->state == FIN_WAIT_2) {
 80094b4:	7d23      	ldrb	r3, [r4, #20]
 80094b6:	2b06      	cmp	r3, #6
 80094b8:	d10b      	bne.n	80094d2 <tcp_slowtmr+0xee>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1086
      if (pcb->flags & TF_RXCLOSED) {
 80094ba:	7ea2      	ldrb	r2, [r4, #26]
 80094bc:	06d2      	lsls	r2, r2, #27
 80094be:	d508      	bpl.n	80094d2 <tcp_slowtmr+0xee>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1089
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80094c0:	6832      	ldr	r2, [r6, #0]
 80094c2:	6a21      	ldr	r1, [r4, #32]
 80094c4:	1a52      	subs	r2, r2, r1
 80094c6:	2a28      	cmp	r2, #40	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1091
          ++pcb_remove;
 80094c8:	bf84      	itt	hi
 80094ca:	f10b 0b01 	addhi.w	fp, fp, #1
 80094ce:	fa5f fb8b 	uxtbhi.w	fp, fp
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1098
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80094d2:	7a25      	ldrb	r5, [r4, #8]
 80094d4:	f015 0508 	ands.w	r5, r5, #8
 80094d8:	d019      	beq.n	800950e <tcp_slowtmr+0x12a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1098 (discriminator 1)
 80094da:	2b04      	cmp	r3, #4
 80094dc:	d002      	beq.n	80094e4 <tcp_slowtmr+0x100>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1099
       ((pcb->state == ESTABLISHED) ||
 80094de:	2b07      	cmp	r3, #7
 80094e0:	f040 80b9 	bne.w	8009656 <tcp_slowtmr+0x272>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1102
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80094e4:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
 80094e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1101
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80094ec:	6831      	ldr	r1, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1102
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80094ee:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1101
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80094f2:	6a23      	ldr	r3, [r4, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1102
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80094f4:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1101
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80094f8:	1ac9      	subs	r1, r1, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1102
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80094fa:	fbb2 f2f0 	udiv	r2, r2, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1101
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80094fe:	4291      	cmp	r1, r2
 8009500:	f240 8097 	bls.w	8009632 <tcp_slowtmr+0x24e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1108
        ++pcb_remove;
 8009504:	f10b 0b01 	add.w	fp, fp, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1109
        ++pcb_reset;
 8009508:	2501      	movs	r5, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1108
        ++pcb_remove;
 800950a:	fa5f fb8b 	uxtb.w	fp, fp
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1134
    if (pcb->state == SYN_RCVD) {
 800950e:	7d23      	ldrb	r3, [r4, #20]
 8009510:	2b03      	cmp	r3, #3
 8009512:	f040 80a2 	bne.w	800965a <tcp_slowtmr+0x276>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1135
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009516:	6833      	ldr	r3, [r6, #0]
 8009518:	6a22      	ldr	r2, [r4, #32]
 800951a:	1a9b      	subs	r3, r3, r2
 800951c:	2b28      	cmp	r3, #40	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1144
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800951e:	d803      	bhi.n	8009528 <tcp_slowtmr+0x144>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1151
    if (pcb_remove) {
 8009520:	f1bb 0f00 	cmp.w	fp, #0
 8009524:	f000 80ae 	beq.w	8009684 <tcp_slowtmr+0x2a0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1158
      tcp_pcb_purge(pcb);
 8009528:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1154
      tcp_err_fn err_fn = pcb->errf;
 800952a:	f8d4 b088 	ldr.w	fp, [r4, #136]	; 0x88
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1158
      tcp_pcb_purge(pcb);
 800952e:	f7ff ff3d 	bl	80093ac <tcp_pcb_purge>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1161
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009532:	f8da 3000 	ldr.w	r3, [sl]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1160
      if (prev != NULL) {
 8009536:	2f00      	cmp	r7, #0
 8009538:	f000 8097 	beq.w	800966a <tcp_slowtmr+0x286>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1161
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800953c:	42a3      	cmp	r3, r4
 800953e:	d106      	bne.n	800954e <tcp_slowtmr+0x16a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1161 (discriminator 1)
 8009540:	4643      	mov	r3, r8
 8009542:	f240 4289 	movw	r2, #1161	; 0x489
 8009546:	4967      	ldr	r1, [pc, #412]	; (80096e4 <tcp_slowtmr+0x300>)
 8009548:	4648      	mov	r0, r9
 800954a:	f003 fd27 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1162
        prev->next = pcb->next;
 800954e:	68e3      	ldr	r3, [r4, #12]
 8009550:	60fb      	str	r3, [r7, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1169
      if (pcb_reset) {
 8009552:	b14d      	cbz	r5, 8009568 <tcp_slowtmr+0x184>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1170
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009554:	8b23      	ldrh	r3, [r4, #24]
 8009556:	4622      	mov	r2, r4
 8009558:	9301      	str	r3, [sp, #4]
 800955a:	8ae3      	ldrh	r3, [r4, #22]
 800955c:	9300      	str	r3, [sp, #0]
 800955e:	1d23      	adds	r3, r4, #4
 8009560:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009562:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8009564:	f7ff fbbe 	bl	8008ce4 <tcp_rst>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1174
      err_arg = pcb->callback_arg;
 8009568:	6923      	ldr	r3, [r4, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1178
      memp_free(MEMP_TCP_PCB, pcb2);
 800956a:	4621      	mov	r1, r4
 800956c:	2001      	movs	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1177
      pcb = pcb->next;
 800956e:	68e5      	ldr	r5, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1174
      err_arg = pcb->callback_arg;
 8009570:	9303      	str	r3, [sp, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1178
      memp_free(MEMP_TCP_PCB, pcb2);
 8009572:	f002 fea7 	bl	800c2c4 <memp_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1180
      tcp_active_pcbs_changed = 0;
 8009576:	4c5c      	ldr	r4, [pc, #368]	; (80096e8 <tcp_slowtmr+0x304>)
 8009578:	2200      	movs	r2, #0
 800957a:	7022      	strb	r2, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1181
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800957c:	f1bb 0f00 	cmp.w	fp, #0
 8009580:	f43f af77 	beq.w	8009472 <tcp_slowtmr+0x8e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1181 (discriminator 1)
 8009584:	9b03      	ldr	r3, [sp, #12]
 8009586:	f06f 010c 	mvn.w	r1, #12
 800958a:	4618      	mov	r0, r3
 800958c:	47d8      	blx	fp
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1182 (discriminator 1)
      if (tcp_active_pcbs_changed) {
 800958e:	7823      	ldrb	r3, [r4, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	f43f af6e 	beq.w	8009472 <tcp_slowtmr+0x8e>
 8009596:	e735      	b.n	8009404 <tcp_slowtmr+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1025
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8009598:	2a0b      	cmp	r2, #11
 800959a:	e774      	b.n	8009486 <tcp_slowtmr+0xa2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1034
          pcb->persist_cnt++;
 800959c:	3301      	adds	r3, #1
 800959e:	b2db      	uxtb	r3, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1036
        if (pcb->persist_cnt >= backoff_cnt) {
 80095a0:	4293      	cmp	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1034
          pcb->persist_cnt++;
 80095a2:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1036
        if (pcb->persist_cnt >= backoff_cnt) {
 80095a6:	d383      	bcc.n	80094b0 <tcp_slowtmr+0xcc>
 80095a8:	e77d      	b.n	80094a6 <tcp_slowtmr+0xc2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1039
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80095aa:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1038
            pcb->persist_cnt = 0;
 80095ae:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1039
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80095b2:	2b06      	cmp	r3, #6
 80095b4:	f63f af7c 	bhi.w	80094b0 <tcp_slowtmr+0xcc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1040
              pcb->persist_backoff++;
 80095b8:	3301      	adds	r3, #1
 80095ba:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
 80095be:	e777      	b.n	80094b0 <tcp_slowtmr+0xcc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1046
        if (pcb->rtime >= 0) {
 80095c0:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 80095c4:	2b00      	cmp	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1047
          ++pcb->rtime;
 80095c6:	bfa4      	itt	ge
 80095c8:	3301      	addge	r3, #1
 80095ca:	8623      	strhge	r3, [r4, #48]	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1050
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80095cc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f43f af6e 	beq.w	80094b0 <tcp_slowtmr+0xcc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1050 (discriminator 1)
 80095d4:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 80095d8:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80095dc:	4298      	cmp	r0, r3
 80095de:	f6ff af67 	blt.w	80094b0 <tcp_slowtmr+0xcc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1058
          if (pcb->state != SYN_SENT) {
 80095e2:	2902      	cmp	r1, #2
 80095e4:	d00a      	beq.n	80095fc <tcp_slowtmr+0x218>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1060
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80095e6:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 80095ea:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 80095ee:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 80095f2:	493e      	ldr	r1, [pc, #248]	; (80096ec <tcp_slowtmr+0x308>)
 80095f4:	5c8a      	ldrb	r2, [r1, r2]
 80095f6:	4093      	lsls	r3, r2
 80095f8:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1064
          pcb->rtime = 0;
 80095fc:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1067
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80095fe:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1069
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009602:	8e61      	ldrh	r1, [r4, #50]	; 0x32
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1079
          tcp_rexmit_rto(pcb);
 8009604:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1064
          pcb->rtime = 0;
 8009606:	8623      	strh	r3, [r4, #48]	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1067
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009608:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1072
          pcb->cwnd = pcb->mss;
 800960c:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1068
          pcb->ssthresh = eff_wnd >> 1;
 8009610:	4293      	cmp	r3, r2
 8009612:	bf28      	it	cs
 8009614:	4613      	movcs	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1069
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009616:	004a      	lsls	r2, r1, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1068
          pcb->ssthresh = eff_wnd >> 1;
 8009618:	085b      	lsrs	r3, r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1069
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800961a:	b292      	uxth	r2, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1070
            pcb->ssthresh = (pcb->mss << 1);
 800961c:	4293      	cmp	r3, r2
 800961e:	bf38      	it	cc
 8009620:	4613      	movcc	r3, r2
 8009622:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1079
          tcp_rexmit_rto(pcb);
 8009626:	f7ff fbb7 	bl	8008d98 <tcp_rexmit_rto>
 800962a:	e743      	b.n	80094b4 <tcp_slowtmr+0xd0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1022
      ++pcb_remove;
 800962c:	f04f 0b01 	mov.w	fp, #1
 8009630:	e740      	b.n	80094b4 <tcp_slowtmr+0xd0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1111
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009632:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 8009636:	4a2e      	ldr	r2, [pc, #184]	; (80096f0 <tcp_slowtmr+0x30c>)
 8009638:	fb02 5303 	mla	r3, r2, r3, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1112
                / TCP_SLOW_INTERVAL)
 800963c:	fbb3 f3f0 	udiv	r3, r3, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1110
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009640:	4299      	cmp	r1, r3
 8009642:	d908      	bls.n	8009656 <tcp_slowtmr+0x272>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1114
        err = tcp_keepalive(pcb);
 8009644:	4620      	mov	r0, r4
 8009646:	f7ff fc0f 	bl	8008e68 <tcp_keepalive>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1115
        if (err == ERR_OK) {
 800964a:	b920      	cbnz	r0, 8009656 <tcp_slowtmr+0x272>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1116
          pcb->keep_cnt_sent++;
 800964c:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 8009650:	3301      	adds	r3, #1
 8009652:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1019
    pcb_reset = 0;
 8009656:	2500      	movs	r5, #0
 8009658:	e759      	b.n	800950e <tcp_slowtmr+0x12a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1143
    if (pcb->state == LAST_ACK) {
 800965a:	2b09      	cmp	r3, #9
 800965c:	f47f af60 	bne.w	8009520 <tcp_slowtmr+0x13c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1144
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009660:	6833      	ldr	r3, [r6, #0]
 8009662:	6a22      	ldr	r2, [r4, #32]
 8009664:	1a9b      	subs	r3, r3, r2
 8009666:	2bf0      	cmp	r3, #240	; 0xf0
 8009668:	e759      	b.n	800951e <tcp_slowtmr+0x13a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1165
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800966a:	42a3      	cmp	r3, r4
 800966c:	d006      	beq.n	800967c <tcp_slowtmr+0x298>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1165 (discriminator 1)
 800966e:	4643      	mov	r3, r8
 8009670:	f240 428d 	movw	r2, #1165	; 0x48d
 8009674:	491f      	ldr	r1, [pc, #124]	; (80096f4 <tcp_slowtmr+0x310>)
 8009676:	4648      	mov	r0, r9
 8009678:	f003 fc90 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1166
        tcp_active_pcbs = pcb->next;
 800967c:	68e3      	ldr	r3, [r4, #12]
 800967e:	f8ca 3000 	str.w	r3, [sl]
 8009682:	e766      	b.n	8009552 <tcp_slowtmr+0x16e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1191
      ++prev->polltmr;
 8009684:	7ee3      	ldrb	r3, [r4, #27]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1192
      if (prev->polltmr >= prev->pollinterval) {
 8009686:	7f22      	ldrb	r2, [r4, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1191
      ++prev->polltmr;
 8009688:	3301      	adds	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1188
      pcb = pcb->next;
 800968a:	68e5      	ldr	r5, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1191
      ++prev->polltmr;
 800968c:	b2db      	uxtb	r3, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1192
      if (prev->polltmr >= prev->pollinterval) {
 800968e:	429a      	cmp	r2, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1191
      ++prev->polltmr;
 8009690:	76e3      	strb	r3, [r4, #27]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1192
      if (prev->polltmr >= prev->pollinterval) {
 8009692:	d80a      	bhi.n	80096aa <tcp_slowtmr+0x2c6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1195
        tcp_active_pcbs_changed = 0;
 8009694:	4f14      	ldr	r7, [pc, #80]	; (80096e8 <tcp_slowtmr+0x304>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1196
        TCP_EVENT_POLL(prev, err);
 8009696:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1193
        prev->polltmr = 0;
 800969a:	f884 b01b 	strb.w	fp, [r4, #27]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1195
        tcp_active_pcbs_changed = 0;
 800969e:	f887 b000 	strb.w	fp, [r7]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1196
        TCP_EVENT_POLL(prev, err);
 80096a2:	b923      	cbnz	r3, 80096ae <tcp_slowtmr+0x2ca>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1202
          tcp_output(prev);
 80096a4:	4620      	mov	r0, r4
 80096a6:	f7ff f9a5 	bl	80089f4 <tcp_output>
 80096aa:	4627      	mov	r7, r4
 80096ac:	e6e1      	b.n	8009472 <tcp_slowtmr+0x8e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1196 (discriminator 1)
        TCP_EVENT_POLL(prev, err);
 80096ae:	4621      	mov	r1, r4
 80096b0:	6920      	ldr	r0, [r4, #16]
 80096b2:	4798      	blx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1197 (discriminator 1)
        if (tcp_active_pcbs_changed) {
 80096b4:	783b      	ldrb	r3, [r7, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f47f aea4 	bne.w	8009404 <tcp_slowtmr+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1201
        if (err == ERR_OK) {
 80096bc:	2800      	cmp	r0, #0
 80096be:	d1f4      	bne.n	80096aa <tcp_slowtmr+0x2c6>
 80096c0:	e7f0      	b.n	80096a4 <tcp_slowtmr+0x2c0>
 80096c2:	bf00      	nop
 80096c4:	200080f8 	.word	0x200080f8
 80096c8:	20007fc9 	.word	0x20007fc9
 80096cc:	200080f4 	.word	0x200080f4
 80096d0:	20008104 	.word	0x20008104
 80096d4:	0801fb5f 	.word	0x0801fb5f
 80096d8:	0801fb89 	.word	0x0801fb89
 80096dc:	0801fbb3 	.word	0x0801fbb3
 80096e0:	0801faa5 	.word	0x0801faa5
 80096e4:	0801fbe0 	.word	0x0801fbe0
 80096e8:	200080f0 	.word	0x200080f0
 80096ec:	0801f95f 	.word	0x0801f95f
 80096f0:	000124f8 	.word	0x000124f8
 80096f4:	0801fc0b 	.word	0x0801fc0b
 80096f8:	0801f9ad 	.word	0x0801f9ad
 80096fc:	0800e36a 	.word	0x0800e36a
 8009700:	0801fc35 	.word	0x0801fc35
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1213
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009704:	7d2b      	ldrb	r3, [r5, #20]
 8009706:	2b0a      	cmp	r3, #10
 8009708:	d006      	beq.n	8009718 <tcp_slowtmr+0x334>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1213 (discriminator 1)
 800970a:	4643      	mov	r3, r8
 800970c:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8009710:	4651      	mov	r1, sl
 8009712:	4648      	mov	r0, r9
 8009714:	f003 fc42 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1217
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009718:	6833      	ldr	r3, [r6, #0]
 800971a:	6a2a      	ldr	r2, [r5, #32]
 800971c:	1a9b      	subs	r3, r3, r2
 800971e:	2bf0      	cmp	r3, #240	; 0xf0
 8009720:	d802      	bhi.n	8009728 <tcp_slowtmr+0x344>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1239
      pcb = pcb->next;
 8009722:	462c      	mov	r4, r5
 8009724:	68ed      	ldr	r5, [r5, #12]
 8009726:	e67b      	b.n	8009420 <tcp_slowtmr+0x3c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1224
      tcp_pcb_purge(pcb);
 8009728:	4628      	mov	r0, r5
 800972a:	f7ff fe3f 	bl	80093ac <tcp_pcb_purge>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1227
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800972e:	683b      	ldr	r3, [r7, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1226
      if (prev != NULL) {
 8009730:	b194      	cbz	r4, 8009758 <tcp_slowtmr+0x374>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1227
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009732:	42ab      	cmp	r3, r5
 8009734:	d106      	bne.n	8009744 <tcp_slowtmr+0x360>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1227 (discriminator 1)
 8009736:	4643      	mov	r3, r8
 8009738:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800973c:	490c      	ldr	r1, [pc, #48]	; (8009770 <tcp_slowtmr+0x38c>)
 800973e:	4648      	mov	r0, r9
 8009740:	f003 fc2c 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1228
        prev->next = pcb->next;
 8009744:	68eb      	ldr	r3, [r5, #12]
 8009746:	60e3      	str	r3, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1235
      pcb = pcb->next;
 8009748:	f8d5 b00c 	ldr.w	fp, [r5, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1236
      memp_free(MEMP_TCP_PCB, pcb2);
 800974c:	4629      	mov	r1, r5
 800974e:	2001      	movs	r0, #1
 8009750:	f002 fdb8 	bl	800c2c4 <memp_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1235
      pcb = pcb->next;
 8009754:	465d      	mov	r5, fp
 8009756:	e663      	b.n	8009420 <tcp_slowtmr+0x3c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1231
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009758:	42ab      	cmp	r3, r5
 800975a:	d006      	beq.n	800976a <tcp_slowtmr+0x386>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1231 (discriminator 1)
 800975c:	4643      	mov	r3, r8
 800975e:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8009762:	4904      	ldr	r1, [pc, #16]	; (8009774 <tcp_slowtmr+0x390>)
 8009764:	4648      	mov	r0, r9
 8009766:	f003 fc19 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1232
        tcp_tw_pcbs = pcb->next;
 800976a:	68eb      	ldr	r3, [r5, #12]
 800976c:	603b      	str	r3, [r7, #0]
 800976e:	e7eb      	b.n	8009748 <tcp_slowtmr+0x364>
 8009770:	0801fc64 	.word	0x0801fc64
 8009774:	0801fc8b 	.word	0x0801fc8b

08009778 <tcp_pcb_remove>:
tcp_pcb_remove():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1862
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 8009778:	6803      	ldr	r3, [r0, #0]
 800977a:	428b      	cmp	r3, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1861
{
 800977c:	b510      	push	{r4, lr}
 800977e:	460c      	mov	r4, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1862
  TCP_RMV(pcblist, pcb);
 8009780:	d116      	bne.n	80097b0 <tcp_pcb_remove+0x38>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1862 (discriminator 1)
 8009782:	68cb      	ldr	r3, [r1, #12]
 8009784:	6003      	str	r3, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1862 (discriminator 10)
 8009786:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1864 (discriminator 10)

  tcp_pcb_purge(pcb);
 8009788:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1862 (discriminator 10)
  TCP_RMV(pcblist, pcb);
 800978a:	60e3      	str	r3, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1864 (discriminator 10)
  tcp_pcb_purge(pcb);
 800978c:	f7ff fe0e 	bl	80093ac <tcp_pcb_purge>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1867 (discriminator 10)

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8009790:	7d23      	ldrb	r3, [r4, #20]
 8009792:	2b0a      	cmp	r3, #10
 8009794:	d114      	bne.n	80097c0 <tcp_pcb_remove+0x48>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1875
    pcb->flags |= TF_ACK_NOW;
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009796:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009798:	bb23      	cbnz	r3, 80097e4 <tcp_pcb_remove+0x6c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1876
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800979a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800979c:	b1f3      	cbz	r3, 80097dc <tcp_pcb_remove+0x64>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1876 (discriminator 1)
 800979e:	4b15      	ldr	r3, [pc, #84]	; (80097f4 <tcp_pcb_remove+0x7c>)
 80097a0:	f240 7254 	movw	r2, #1876	; 0x754
 80097a4:	4914      	ldr	r1, [pc, #80]	; (80097f8 <tcp_pcb_remove+0x80>)
 80097a6:	4815      	ldr	r0, [pc, #84]	; (80097fc <tcp_pcb_remove+0x84>)
 80097a8:	f003 fbf8 	bl	800cf9c <iprintf>
 80097ac:	e016      	b.n	80097dc <tcp_pcb_remove+0x64>
 80097ae:	4613      	mov	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1862 (discriminator 8)
  TCP_RMV(pcblist, pcb);
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d0e8      	beq.n	8009786 <tcp_pcb_remove+0xe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1862 (discriminator 9)
 80097b4:	68da      	ldr	r2, [r3, #12]
 80097b6:	42a2      	cmp	r2, r4
 80097b8:	d1f9      	bne.n	80097ae <tcp_pcb_remove+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1862 (discriminator 5)
 80097ba:	68e2      	ldr	r2, [r4, #12]
 80097bc:	60da      	str	r2, [r3, #12]
 80097be:	e7e2      	b.n	8009786 <tcp_pcb_remove+0xe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1867 (discriminator 1)
  if (pcb->state != TIME_WAIT &&
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d00b      	beq.n	80097dc <tcp_pcb_remove+0x64>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1869
     pcb->flags & TF_ACK_DELAY) {
 80097c4:	7ea3      	ldrb	r3, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1868
     pcb->state != LISTEN &&
 80097c6:	07da      	lsls	r2, r3, #31
 80097c8:	d5e5      	bpl.n	8009796 <tcp_pcb_remove+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1870
    pcb->flags |= TF_ACK_NOW;
 80097ca:	f043 0302 	orr.w	r3, r3, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1871
    tcp_output(pcb);
 80097ce:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1870
    pcb->flags |= TF_ACK_NOW;
 80097d0:	76a3      	strb	r3, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1871
    tcp_output(pcb);
 80097d2:	f7ff f90f 	bl	80089f4 <tcp_output>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1874
  if (pcb->state != LISTEN) {
 80097d6:	7d23      	ldrb	r3, [r4, #20]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d1dc      	bne.n	8009796 <tcp_pcb_remove+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1882
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80097dc:	2300      	movs	r3, #0
 80097de:	7523      	strb	r3, [r4, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1884
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80097e0:	82e3      	strh	r3, [r4, #22]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1887

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80097e2:	bd10      	pop	{r4, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1875 (discriminator 1)
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80097e4:	4b03      	ldr	r3, [pc, #12]	; (80097f4 <tcp_pcb_remove+0x7c>)
 80097e6:	f240 7253 	movw	r2, #1875	; 0x753
 80097ea:	4905      	ldr	r1, [pc, #20]	; (8009800 <tcp_pcb_remove+0x88>)
 80097ec:	4803      	ldr	r0, [pc, #12]	; (80097fc <tcp_pcb_remove+0x84>)
 80097ee:	f003 fbd5 	bl	800cf9c <iprintf>
 80097f2:	e7d2      	b.n	800979a <tcp_pcb_remove+0x22>
 80097f4:	0801f9ad 	.word	0x0801f9ad
 80097f8:	0801fa8c 	.word	0x0801fa8c
 80097fc:	0800e36a 	.word	0x0800e36a
 8009800:	0801fa74 	.word	0x0801fa74

08009804 <tcp_close_shutdown>:
tcp_close_shutdown():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:266
{
 8009804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009806:	7d03      	ldrb	r3, [r0, #20]
 8009808:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:267
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800980a:	2900      	cmp	r1, #0
 800980c:	d04a      	beq.n	80098a4 <tcp_close_shutdown+0xa0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:267 (discriminator 1)
 800980e:	2b04      	cmp	r3, #4
 8009810:	d001      	beq.n	8009816 <tcp_close_shutdown+0x12>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:267 (discriminator 2)
 8009812:	2b07      	cmp	r3, #7
 8009814:	d146      	bne.n	80098a4 <tcp_close_shutdown+0xa0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:268
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009816:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8009818:	b922      	cbnz	r2, 8009824 <tcp_close_shutdown+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:268 (discriminator 1)
 800981a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800981c:	f640 3268 	movw	r2, #2920	; 0xb68
 8009820:	4291      	cmp	r1, r2
 8009822:	d03f      	beq.n	80098a4 <tcp_close_shutdown+0xa0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:271
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009824:	7ea3      	ldrb	r3, [r4, #26]
 8009826:	06db      	lsls	r3, r3, #27
 8009828:	d406      	bmi.n	8009838 <tcp_close_shutdown+0x34>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:271 (discriminator 1)
 800982a:	4b3f      	ldr	r3, [pc, #252]	; (8009928 <tcp_close_shutdown+0x124>)
 800982c:	f240 120f 	movw	r2, #271	; 0x10f
 8009830:	493e      	ldr	r1, [pc, #248]	; (800992c <tcp_close_shutdown+0x128>)
 8009832:	483f      	ldr	r0, [pc, #252]	; (8009930 <tcp_close_shutdown+0x12c>)
 8009834:	f003 fbb2 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:275
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009838:	8b23      	ldrh	r3, [r4, #24]
 800983a:	4622      	mov	r2, r4
 800983c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800983e:	9301      	str	r3, [sp, #4]
 8009840:	8ae3      	ldrh	r3, [r4, #22]
 8009842:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	1d23      	adds	r3, r4, #4
 8009848:	f7ff fa4c 	bl	8008ce4 <tcp_rst>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:278
      tcp_pcb_purge(pcb);
 800984c:	4620      	mov	r0, r4
 800984e:	f7ff fdad 	bl	80093ac <tcp_pcb_purge>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:279
      TCP_RMV_ACTIVE(pcb);
 8009852:	4a38      	ldr	r2, [pc, #224]	; (8009934 <tcp_close_shutdown+0x130>)
 8009854:	6813      	ldr	r3, [r2, #0]
 8009856:	42a3      	cmp	r3, r4
 8009858:	d115      	bne.n	8009886 <tcp_close_shutdown+0x82>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:279 (discriminator 1)
 800985a:	68e3      	ldr	r3, [r4, #12]
 800985c:	6013      	str	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:279 (discriminator 10)
 800985e:	2300      	movs	r3, #0
 8009860:	2201      	movs	r2, #1
 8009862:	60e3      	str	r3, [r4, #12]
 8009864:	4b34      	ldr	r3, [pc, #208]	; (8009938 <tcp_close_shutdown+0x134>)
 8009866:	701a      	strb	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:280 (discriminator 10)
      if (pcb->state == ESTABLISHED) {
 8009868:	7d23      	ldrb	r3, [r4, #20]
 800986a:	2b04      	cmp	r3, #4
 800986c:	d113      	bne.n	8009896 <tcp_close_shutdown+0x92>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:282
        pcb->state = TIME_WAIT;
 800986e:	230a      	movs	r3, #10
 8009870:	7523      	strb	r3, [r4, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:283
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009872:	4b32      	ldr	r3, [pc, #200]	; (800993c <tcp_close_shutdown+0x138>)
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	601c      	str	r4, [r3, #0]
 8009878:	60e2      	str	r2, [r4, #12]
 800987a:	f001 fb33 	bl	800aee4 <tcp_timer_needed>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:327
}
 800987e:	2000      	movs	r0, #0
 8009880:	b003      	add	sp, #12
 8009882:	bd30      	pop	{r4, r5, pc}
 8009884:	4613      	mov	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:279 (discriminator 8)
      TCP_RMV_ACTIVE(pcb);
 8009886:	2b00      	cmp	r3, #0
 8009888:	d0e9      	beq.n	800985e <tcp_close_shutdown+0x5a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:279 (discriminator 9)
 800988a:	68da      	ldr	r2, [r3, #12]
 800988c:	42a2      	cmp	r2, r4
 800988e:	d1f9      	bne.n	8009884 <tcp_close_shutdown+0x80>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:279 (discriminator 5)
 8009890:	68e2      	ldr	r2, [r4, #12]
 8009892:	60da      	str	r2, [r3, #12]
 8009894:	e7e3      	b.n	800985e <tcp_close_shutdown+0x5a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:286
        if (tcp_input_pcb == pcb) {
 8009896:	4b2a      	ldr	r3, [pc, #168]	; (8009940 <tcp_close_shutdown+0x13c>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	42a3      	cmp	r3, r4
 800989c:	d117      	bne.n	80098ce <tcp_close_shutdown+0xca>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:288
          tcp_trigger_input_pcb_close();
 800989e:	f002 fc65 	bl	800c16c <tcp_trigger_input_pcb_close>
 80098a2:	e7ec      	b.n	800987e <tcp_close_shutdown+0x7a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:299
  switch (pcb->state) {
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d020      	beq.n	80098ea <tcp_close_shutdown+0xe6>
 80098a8:	b13b      	cbz	r3, 80098ba <tcp_close_shutdown+0xb6>
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d033      	beq.n	8009916 <tcp_close_shutdown+0x112>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:324
    return tcp_close_shutdown_fin(pcb);
 80098ae:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:327
}
 80098b0:	b003      	add	sp, #12
 80098b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:324
    return tcp_close_shutdown_fin(pcb);
 80098b6:	f7ff bbbd 	b.w	8009034 <tcp_close_shutdown_fin>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:308
    if (pcb->local_port != 0) {
 80098ba:	8ae3      	ldrh	r3, [r4, #22]
 80098bc:	b13b      	cbz	r3, 80098ce <tcp_close_shutdown+0xca>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:309
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80098be:	4a21      	ldr	r2, [pc, #132]	; (8009944 <tcp_close_shutdown+0x140>)
 80098c0:	6813      	ldr	r3, [r2, #0]
 80098c2:	42a3      	cmp	r3, r4
 80098c4:	d109      	bne.n	80098da <tcp_close_shutdown+0xd6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:309 (discriminator 1)
 80098c6:	68e3      	ldr	r3, [r4, #12]
 80098c8:	6013      	str	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:309 (discriminator 10)
 80098ca:	2300      	movs	r3, #0
 80098cc:	60e3      	str	r3, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:290
          memp_free(MEMP_TCP_PCB, pcb);
 80098ce:	4621      	mov	r1, r4
 80098d0:	2001      	movs	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:320
    memp_free(MEMP_TCP_PCB, pcb);
 80098d2:	f002 fcf7 	bl	800c2c4 <memp_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:322
    break;
 80098d6:	e7d2      	b.n	800987e <tcp_close_shutdown+0x7a>
 80098d8:	4613      	mov	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:309 (discriminator 8)
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d0f5      	beq.n	80098ca <tcp_close_shutdown+0xc6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:309 (discriminator 9)
 80098de:	68da      	ldr	r2, [r3, #12]
 80098e0:	42a2      	cmp	r2, r4
 80098e2:	d1f9      	bne.n	80098d8 <tcp_close_shutdown+0xd4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:309 (discriminator 5)
 80098e4:	68e2      	ldr	r2, [r4, #12]
 80098e6:	60da      	str	r2, [r3, #12]
 80098e8:	e7ef      	b.n	80098ca <tcp_close_shutdown+0xc6>
tcp_listen_closed():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:195
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80098ea:	4917      	ldr	r1, [pc, #92]	; (8009948 <tcp_close_shutdown+0x144>)
tcp_remove_listener():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:178
         pcb->listener = NULL;
 80098ec:	2000      	movs	r0, #0
tcp_listen_closed():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:195
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80098ee:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80098f2:	6812      	ldr	r2, [r2, #0]
tcp_remove_listener():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:176
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80098f4:	b94a      	cbnz	r2, 800990a <tcp_close_shutdown+0x106>
tcp_listen_closed():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:194
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80098f6:	3301      	adds	r3, #1
 80098f8:	2b04      	cmp	r3, #4
 80098fa:	d1f8      	bne.n	80098ee <tcp_close_shutdown+0xea>
tcp_close_shutdown():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:315
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80098fc:	4621      	mov	r1, r4
 80098fe:	4813      	ldr	r0, [pc, #76]	; (800994c <tcp_close_shutdown+0x148>)
 8009900:	f7ff ff3a 	bl	8009778 <tcp_pcb_remove>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:316
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009904:	4621      	mov	r1, r4
 8009906:	2002      	movs	r0, #2
 8009908:	e7e3      	b.n	80098d2 <tcp_close_shutdown+0xce>
tcp_remove_listener():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:177
      if (pcb->listener == lpcb) {
 800990a:	6f55      	ldr	r5, [r2, #116]	; 0x74
 800990c:	42ac      	cmp	r4, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:178
         pcb->listener = NULL;
 800990e:	bf08      	it	eq
 8009910:	6750      	streq	r0, [r2, #116]	; 0x74
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:176
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009912:	68d2      	ldr	r2, [r2, #12]
 8009914:	e7ee      	b.n	80098f4 <tcp_close_shutdown+0xf0>
tcp_close_shutdown():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:319
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8009916:	4621      	mov	r1, r4
 8009918:	4806      	ldr	r0, [pc, #24]	; (8009934 <tcp_close_shutdown+0x130>)
 800991a:	f7ff ff2d 	bl	8009778 <tcp_pcb_remove>
 800991e:	2001      	movs	r0, #1
 8009920:	4b05      	ldr	r3, [pc, #20]	; (8009938 <tcp_close_shutdown+0x134>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:320
    memp_free(MEMP_TCP_PCB, pcb);
 8009922:	4621      	mov	r1, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:319
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8009924:	7018      	strb	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:320
    memp_free(MEMP_TCP_PCB, pcb);
 8009926:	e7d4      	b.n	80098d2 <tcp_close_shutdown+0xce>
 8009928:	0801f9ad 	.word	0x0801f9ad
 800992c:	0801f994 	.word	0x0801f994
 8009930:	0800e36a 	.word	0x0800e36a
 8009934:	200080f4 	.word	0x200080f4
 8009938:	200080f0 	.word	0x200080f0
 800993c:	20008104 	.word	0x20008104
 8009940:	20008114 	.word	0x20008114
 8009944:	20008100 	.word	0x20008100
 8009948:	0801fa64 	.word	0x0801fa64
 800994c:	200080fc 	.word	0x200080fc

08009950 <tcp_close>:
tcp_close():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:404
  if (pcb->state != LISTEN) {
 8009950:	7d03      	ldrb	r3, [r0, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:409
  return tcp_close_shutdown(pcb, 1);
 8009952:	2101      	movs	r1, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:404
  if (pcb->state != LISTEN) {
 8009954:	2b01      	cmp	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:406
    pcb->flags |= TF_RXCLOSED;
 8009956:	bf1e      	ittt	ne
 8009958:	7e83      	ldrbne	r3, [r0, #26]
 800995a:	f043 0310 	orrne.w	r3, r3, #16
 800995e:	7683      	strbne	r3, [r0, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:409
  return tcp_close_shutdown(pcb, 1);
 8009960:	f7ff bf50 	b.w	8009804 <tcp_close_shutdown>

08009964 <tcp_recv_null>:
tcp_recv_null():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1445
{
 8009964:	b510      	push	{r4, lr}
 8009966:	4608      	mov	r0, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1447
  if (p != NULL) {
 8009968:	4614      	mov	r4, r2
 800996a:	b13a      	cbz	r2, 800997c <tcp_recv_null+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1448
    tcp_recved(pcb, p->tot_len);
 800996c:	8911      	ldrh	r1, [r2, #8]
 800996e:	f7ff fc61 	bl	8009234 <tcp_recved>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1449
    pbuf_free(p);
 8009972:	4620      	mov	r0, r4
 8009974:	f000 ff86 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1454
}
 8009978:	2000      	movs	r0, #0
 800997a:	bd10      	pop	{r4, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1450
  } else if (err == ERR_OK) {
 800997c:	2b00      	cmp	r3, #0
 800997e:	d1fb      	bne.n	8009978 <tcp_recv_null+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1454
}
 8009980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1451
    return tcp_close(pcb);
 8009984:	f7ff bfe4 	b.w	8009950 <tcp_close>

08009988 <tcp_process_refused_data>:
tcp_process_refused_data():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1312
{
 8009988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1319
    u8_t refused_flags = pcb->refused_data->flags;
 800998a:	6f06      	ldr	r6, [r0, #112]	; 0x70
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1327
    pcb->refused_data = NULL;
 800998c:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1331
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800998e:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1312
{
 8009990:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1319
    u8_t refused_flags = pcb->refused_data->flags;
 8009992:	7b77      	ldrb	r7, [r6, #13]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1327
    pcb->refused_data = NULL;
 8009994:	6703      	str	r3, [r0, #112]	; 0x70
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1331
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009996:	b1dd      	cbz	r5, 80099d0 <tcp_process_refused_data+0x48>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1331 (discriminator 1)
 8009998:	4601      	mov	r1, r0
 800999a:	4632      	mov	r2, r6
 800999c:	6900      	ldr	r0, [r0, #16]
 800999e:	47a8      	blx	r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1331 (discriminator 2)
 80099a0:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1332 (discriminator 2)
    if (err == ERR_OK) {
 80099a2:	b9e0      	cbnz	r0, 80099de <tcp_process_refused_data+0x56>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1334
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80099a4:	06bb      	lsls	r3, r7, #26
 80099a6:	d511      	bpl.n	80099cc <tcp_process_refused_data+0x44>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1341
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80099a8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80099aa:	f640 3268 	movw	r2, #2920	; 0xb68
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1344
        TCP_EVENT_CLOSED(pcb, err);
 80099ae:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1341
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80099b0:	4293      	cmp	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1342
          pcb->rcv_wnd++;
 80099b2:	bf1c      	itt	ne
 80099b4:	3301      	addne	r3, #1
 80099b6:	8523      	strhne	r3, [r4, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1344
        TCP_EVENT_CLOSED(pcb, err);
 80099b8:	b146      	cbz	r6, 80099cc <tcp_process_refused_data+0x44>
 80099ba:	2300      	movs	r3, #0
 80099bc:	4621      	mov	r1, r4
 80099be:	6920      	ldr	r0, [r4, #16]
 80099c0:	461a      	mov	r2, r3
 80099c2:	47b0      	blx	r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1345
        if (err == ERR_ABRT) {
 80099c4:	300d      	adds	r0, #13
 80099c6:	d101      	bne.n	80099cc <tcp_process_refused_data+0x44>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1346
          return ERR_ABRT;
 80099c8:	f06f 050c 	mvn.w	r5, #12
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1367
}
 80099cc:	4628      	mov	r0, r5
 80099ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1331 (discriminator 2)
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80099d0:	4601      	mov	r1, r0
 80099d2:	462b      	mov	r3, r5
 80099d4:	4632      	mov	r2, r6
 80099d6:	4628      	mov	r0, r5
 80099d8:	f7ff ffc4 	bl	8009964 <tcp_recv_null>
 80099dc:	e7e0      	b.n	80099a0 <tcp_process_refused_data+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1349
    } else if (err == ERR_ABRT) {
 80099de:	f110 050d 	adds.w	r5, r0, #13
 80099e2:	d0f1      	beq.n	80099c8 <tcp_process_refused_data+0x40>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1362
      pcb->refused_data = refused_data;
 80099e4:	6726      	str	r6, [r4, #112]	; 0x70
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1363
      return ERR_INPROGRESS;
 80099e6:	f06f 0504 	mvn.w	r5, #4
 80099ea:	e7ef      	b.n	80099cc <tcp_process_refused_data+0x44>

080099ec <tcp_fasttmr>:
tcp_fasttmr():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1252
{
 80099ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1255
  ++tcp_timer_ctr;
 80099f0:	4d1b      	ldr	r5, [pc, #108]	; (8009a60 <tcp_fasttmr+0x74>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1258
  pcb = tcp_active_pcbs;
 80099f2:	4f1c      	ldr	r7, [pc, #112]	; (8009a64 <tcp_fasttmr+0x78>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1255
  ++tcp_timer_ctr;
 80099f4:	782b      	ldrb	r3, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1282
        tcp_active_pcbs_changed = 0;
 80099f6:	4e1c      	ldr	r6, [pc, #112]	; (8009a68 <tcp_fasttmr+0x7c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1255
  ++tcp_timer_ctr;
 80099f8:	3301      	adds	r3, #1
 80099fa:	702b      	strb	r3, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1258
  pcb = tcp_active_pcbs;
 80099fc:	683c      	ldr	r4, [r7, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1282
        tcp_active_pcbs_changed = 0;
 80099fe:	f04f 0800 	mov.w	r8, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1260
  while (pcb != NULL) {
 8009a02:	b90c      	cbnz	r4, 8009a08 <tcp_fasttmr+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1294
}
 8009a04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1261
    if (pcb->last_timer != tcp_timer_ctr) {
 8009a08:	782b      	ldrb	r3, [r5, #0]
 8009a0a:	7f62      	ldrb	r2, [r4, #29]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d024      	beq.n	8009a5a <tcp_fasttmr+0x6e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1263
      pcb->last_timer = tcp_timer_ctr;
 8009a10:	7763      	strb	r3, [r4, #29]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1265
      if (pcb->flags & TF_ACK_DELAY) {
 8009a12:	7ea3      	ldrb	r3, [r4, #26]
 8009a14:	07d9      	lsls	r1, r3, #31
 8009a16:	d509      	bpl.n	8009a2c <tcp_fasttmr+0x40>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1267
        tcp_ack_now(pcb);
 8009a18:	f043 0302 	orr.w	r3, r3, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1268
        tcp_output(pcb);
 8009a1c:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1267
        tcp_ack_now(pcb);
 8009a1e:	76a3      	strb	r3, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1268
        tcp_output(pcb);
 8009a20:	f7fe ffe8 	bl	80089f4 <tcp_output>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1269
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009a24:	7ea3      	ldrb	r3, [r4, #26]
 8009a26:	f023 0303 	bic.w	r3, r3, #3
 8009a2a:	76a3      	strb	r3, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1272
      if (pcb->flags & TF_CLOSEPEND) {
 8009a2c:	7ea3      	ldrb	r3, [r4, #26]
 8009a2e:	071a      	lsls	r2, r3, #28
 8009a30:	d505      	bpl.n	8009a3e <tcp_fasttmr+0x52>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1274
        pcb->flags &= ~(TF_CLOSEPEND);
 8009a32:	f023 0308 	bic.w	r3, r3, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1275
        tcp_close_shutdown_fin(pcb);
 8009a36:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1274
        pcb->flags &= ~(TF_CLOSEPEND);
 8009a38:	76a3      	strb	r3, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1275
        tcp_close_shutdown_fin(pcb);
 8009a3a:	f7ff fafb 	bl	8009034 <tcp_close_shutdown_fin>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1281
      if (pcb->refused_data != NULL) {
 8009a3e:	6f23      	ldr	r3, [r4, #112]	; 0x70
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1278
      next = pcb->next;
 8009a40:	f8d4 900c 	ldr.w	r9, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1281
      if (pcb->refused_data != NULL) {
 8009a44:	b13b      	cbz	r3, 8009a56 <tcp_fasttmr+0x6a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1283
        tcp_process_refused_data(pcb);
 8009a46:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1282
        tcp_active_pcbs_changed = 0;
 8009a48:	f886 8000 	strb.w	r8, [r6]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1283
        tcp_process_refused_data(pcb);
 8009a4c:	f7ff ff9c 	bl	8009988 <tcp_process_refused_data>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1284
        if (tcp_active_pcbs_changed) {
 8009a50:	7833      	ldrb	r3, [r6, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1d2      	bne.n	80099fc <tcp_fasttmr+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1252
{
 8009a56:	464c      	mov	r4, r9
 8009a58:	e7d3      	b.n	8009a02 <tcp_fasttmr+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1291
      pcb = pcb->next;
 8009a5a:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8009a5e:	e7fa      	b.n	8009a56 <tcp_fasttmr+0x6a>
 8009a60:	20007fc9 	.word	0x20007fc9
 8009a64:	200080f4 	.word	0x200080f4
 8009a68:	200080f0 	.word	0x200080f0

08009a6c <tcp_tmr>:
tcp_tmr():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:157
{
 8009a6c:	b508      	push	{r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:159
  tcp_fasttmr();
 8009a6e:	f7ff ffbd 	bl	80099ec <tcp_fasttmr>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:161
  if (++tcp_timer & 1) {
 8009a72:	4a06      	ldr	r2, [pc, #24]	; (8009a8c <tcp_tmr+0x20>)
 8009a74:	7813      	ldrb	r3, [r2, #0]
 8009a76:	3301      	adds	r3, #1
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	7013      	strb	r3, [r2, #0]
 8009a7c:	07db      	lsls	r3, r3, #31
 8009a7e:	d503      	bpl.n	8009a88 <tcp_tmr+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:166
}
 8009a80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:164
    tcp_slowtmr();
 8009a84:	f7ff bcae 	b.w	80093e4 <tcp_slowtmr>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:166
}
 8009a88:	bd08      	pop	{r3, pc}
 8009a8a:	bf00      	nop
 8009a8c:	20007fc8 	.word	0x20007fc8

08009a90 <tcp_shutdown>:
tcp_shutdown():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:427
{
 8009a90:	b538      	push	{r3, r4, r5, lr}
 8009a92:	4614      	mov	r4, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:428
  if (pcb->state == LISTEN) {
 8009a94:	7d02      	ldrb	r2, [r0, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:427
{
 8009a96:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:428
  if (pcb->state == LISTEN) {
 8009a98:	2a01      	cmp	r2, #1
 8009a9a:	d01b      	beq.n	8009ad4 <tcp_shutdown+0x44>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:431
  if (shut_rx) {
 8009a9c:	b189      	cbz	r1, 8009ac2 <tcp_shutdown+0x32>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:433
    pcb->flags |= TF_RXCLOSED;
 8009a9e:	7e83      	ldrb	r3, [r0, #26]
 8009aa0:	f043 0310 	orr.w	r3, r3, #16
 8009aa4:	7683      	strb	r3, [r0, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:434
    if (shut_tx) {
 8009aa6:	b124      	cbz	r4, 8009ab2 <tcp_shutdown+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:436
      return tcp_close_shutdown(pcb, 1);
 8009aa8:	2101      	movs	r1, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:459
}
 8009aaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:451
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8009aae:	f7ff bea9 	b.w	8009804 <tcp_close_shutdown>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:439
    if (pcb->refused_data != NULL) {
 8009ab2:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8009ab4:	b908      	cbnz	r0, 8009aba <tcp_shutdown+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:458
  return ERR_OK;
 8009ab6:	2000      	movs	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:459
}
 8009ab8:	bd38      	pop	{r3, r4, r5, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:440
      pbuf_free(pcb->refused_data);
 8009aba:	f000 fee3 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:441
      pcb->refused_data = NULL;
 8009abe:	672c      	str	r4, [r5, #112]	; 0x70
 8009ac0:	e7f9      	b.n	8009ab6 <tcp_shutdown+0x26>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:444
  if (shut_tx) {
 8009ac2:	2c00      	cmp	r4, #0
 8009ac4:	d0f7      	beq.n	8009ab6 <tcp_shutdown+0x26>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:447
    switch (pcb->state) {
 8009ac6:	2a07      	cmp	r2, #7
 8009ac8:	d804      	bhi.n	8009ad4 <tcp_shutdown+0x44>
 8009aca:	2301      	movs	r3, #1
 8009acc:	4093      	lsls	r3, r2
 8009ace:	f013 0f98 	tst.w	r3, #152	; 0x98
 8009ad2:	d1ea      	bne.n	8009aaa <tcp_shutdown+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:429
    return ERR_CONN;
 8009ad4:	f06f 000a 	mvn.w	r0, #10
 8009ad8:	e7ee      	b.n	8009ab8 <tcp_shutdown+0x28>
	...

08009adc <tcp_abandon>:
tcp_abandon():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:479
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009adc:	7d03      	ldrb	r3, [r0, #20]
 8009ade:	2b01      	cmp	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:471
{
 8009ae0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae4:	4604      	mov	r4, r0
 8009ae6:	460e      	mov	r6, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:479
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009ae8:	d106      	bne.n	8009af8 <tcp_abandon+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:479 (discriminator 1)
 8009aea:	4b2e      	ldr	r3, [pc, #184]	; (8009ba4 <tcp_abandon+0xc8>)
 8009aec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009af0:	492d      	ldr	r1, [pc, #180]	; (8009ba8 <tcp_abandon+0xcc>)
 8009af2:	482e      	ldr	r0, [pc, #184]	; (8009bac <tcp_abandon+0xd0>)
 8009af4:	f003 fa52 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:484
  if (pcb->state == TIME_WAIT) {
 8009af8:	7d23      	ldrb	r3, [r4, #20]
 8009afa:	2b0a      	cmp	r3, #10
 8009afc:	d10a      	bne.n	8009b14 <tcp_abandon+0x38>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:485
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009afe:	4621      	mov	r1, r4
 8009b00:	482b      	ldr	r0, [pc, #172]	; (8009bb0 <tcp_abandon+0xd4>)
 8009b02:	f7ff fe39 	bl	8009778 <tcp_pcb_remove>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:486
    memp_free(MEMP_TCP_PCB, pcb);
 8009b06:	4621      	mov	r1, r4
 8009b08:	2001      	movs	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:527
}
 8009b0a:	b002      	add	sp, #8
 8009b0c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:486
    memp_free(MEMP_TCP_PCB, pcb);
 8009b10:	f002 bbd8 	b.w	800c2c4 <memp_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:491
    seqno = pcb->snd_nxt;
 8009b14:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:492
    ackno = pcb->rcv_nxt;
 8009b18:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:494
    errf = pcb->errf;
 8009b1c:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:496
    errf_arg = pcb->callback_arg;
 8009b20:	f8d4 8010 	ldr.w	r8, [r4, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:497
    if (pcb->state == CLOSED) {
 8009b24:	8ae5      	ldrh	r5, [r4, #22]
 8009b26:	b99b      	cbnz	r3, 8009b50 <tcp_abandon+0x74>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:498
      if (pcb->local_port != 0) {
 8009b28:	b13d      	cbz	r5, 8009b3a <tcp_abandon+0x5e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:500
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009b2a:	4a22      	ldr	r2, [pc, #136]	; (8009bb4 <tcp_abandon+0xd8>)
 8009b2c:	6813      	ldr	r3, [r2, #0]
 8009b2e:	42a3      	cmp	r3, r4
 8009b30:	d106      	bne.n	8009b40 <tcp_abandon+0x64>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:500 (discriminator 1)
 8009b32:	68e3      	ldr	r3, [r4, #12]
 8009b34:	6013      	str	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:500 (discriminator 10)
 8009b36:	2500      	movs	r5, #0
 8009b38:	60e5      	str	r5, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:488
    int send_rst = 0;
 8009b3a:	462e      	mov	r6, r5
 8009b3c:	e00f      	b.n	8009b5e <tcp_abandon+0x82>
 8009b3e:	4613      	mov	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:500 (discriminator 8)
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d0f8      	beq.n	8009b36 <tcp_abandon+0x5a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:500 (discriminator 9)
 8009b44:	68da      	ldr	r2, [r3, #12]
 8009b46:	42a2      	cmp	r2, r4
 8009b48:	d1f9      	bne.n	8009b3e <tcp_abandon+0x62>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:500 (discriminator 5)
 8009b4a:	68e2      	ldr	r2, [r4, #12]
 8009b4c:	60da      	str	r2, [r3, #12]
 8009b4e:	e7f2      	b.n	8009b36 <tcp_abandon+0x5a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:505
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009b50:	4621      	mov	r1, r4
 8009b52:	4819      	ldr	r0, [pc, #100]	; (8009bb8 <tcp_abandon+0xdc>)
 8009b54:	f7ff fe10 	bl	8009778 <tcp_pcb_remove>
 8009b58:	4b18      	ldr	r3, [pc, #96]	; (8009bbc <tcp_abandon+0xe0>)
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	701a      	strb	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:507
    if (pcb->unacked != NULL) {
 8009b5e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8009b60:	b108      	cbz	r0, 8009b66 <tcp_abandon+0x8a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:508
      tcp_segs_free(pcb->unacked);
 8009b62:	f7ff fbb5 	bl	80092d0 <tcp_segs_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:510
    if (pcb->unsent != NULL) {
 8009b66:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8009b68:	b108      	cbz	r0, 8009b6e <tcp_abandon+0x92>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:511
      tcp_segs_free(pcb->unsent);
 8009b6a:	f7ff fbb1 	bl	80092d0 <tcp_segs_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:519
    if (send_rst) {
 8009b6e:	b146      	cbz	r6, 8009b82 <tcp_abandon+0xa6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:521
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009b70:	8b23      	ldrh	r3, [r4, #24]
 8009b72:	4622      	mov	r2, r4
 8009b74:	4651      	mov	r1, sl
 8009b76:	4648      	mov	r0, r9
 8009b78:	e9cd 5300 	strd	r5, r3, [sp]
 8009b7c:	1d23      	adds	r3, r4, #4
 8009b7e:	f7ff f8b1 	bl	8008ce4 <tcp_rst>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:524
    memp_free(MEMP_TCP_PCB, pcb);
 8009b82:	4621      	mov	r1, r4
 8009b84:	2001      	movs	r0, #1
 8009b86:	f002 fb9d 	bl	800c2c4 <memp_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:525
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009b8a:	b13f      	cbz	r7, 8009b9c <tcp_abandon+0xc0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:525 (discriminator 1)
 8009b8c:	f06f 010c 	mvn.w	r1, #12
 8009b90:	4640      	mov	r0, r8
 8009b92:	463b      	mov	r3, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:527 (discriminator 1)
}
 8009b94:	b002      	add	sp, #8
 8009b96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:525 (discriminator 1)
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009b9a:	4718      	bx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:527
}
 8009b9c:	b002      	add	sp, #8
 8009b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ba2:	bf00      	nop
 8009ba4:	0801f9ad 	.word	0x0801f9ad
 8009ba8:	0801f92e 	.word	0x0801f92e
 8009bac:	0800e36a 	.word	0x0800e36a
 8009bb0:	20008104 	.word	0x20008104
 8009bb4:	20008100 	.word	0x20008100
 8009bb8:	200080f4 	.word	0x200080f4
 8009bbc:	200080f0 	.word	0x200080f0

08009bc0 <tcp_abort>:
tcp_abort():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:543
  tcp_abandon(pcb, 1);
 8009bc0:	2101      	movs	r1, #1
 8009bc2:	f7ff bf8b 	b.w	8009adc <tcp_abandon>

08009bc6 <tcp_accept_null>:
tcp_accept_null():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:642
  tcp_abort(pcb);
 8009bc6:	4608      	mov	r0, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:638
{
 8009bc8:	b508      	push	{r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:642
  tcp_abort(pcb);
 8009bca:	f7ff fff9 	bl	8009bc0 <tcp_abort>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:645
}
 8009bce:	f06f 000c 	mvn.w	r0, #12
 8009bd2:	bd08      	pop	{r3, pc}

08009bd4 <tcp_netif_ip_addr_changed_pcblist.isra.4>:
tcp_netif_ip_addr_changed_pcblist():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1977
}
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
 8009bd4:	b538      	push	{r3, r4, r5, lr}
 8009bd6:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1981
{
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 8009bd8:	b901      	cbnz	r1, 8009bdc <tcp_netif_ip_addr_changed_pcblist.isra.4+0x8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1998
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8009bda:	bd38      	pop	{r3, r4, r5, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1983
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009bdc:	680a      	ldr	r2, [r1, #0]
 8009bde:	6823      	ldr	r3, [r4, #0]
 8009be0:	68cd      	ldr	r5, [r1, #12]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d102      	bne.n	8009bec <tcp_netif_ip_addr_changed_pcblist.isra.4+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1992
      tcp_abort(pcb);
 8009be6:	4608      	mov	r0, r1
 8009be8:	f7ff ffea 	bl	8009bc0 <tcp_abort>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1977
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
 8009bec:	4629      	mov	r1, r5
 8009bee:	e7f3      	b.n	8009bd8 <tcp_netif_ip_addr_changed_pcblist.isra.4+0x4>

08009bf0 <tcp_kill_state>:
tcp_kill_state():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1506
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009bf0:	4b0c      	ldr	r3, [pc, #48]	; (8009c24 <tcp_kill_state+0x34>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1496
{
 8009bf2:	b430      	push	{r4, r5}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1506
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009bf4:	6819      	ldr	r1, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1502
  inactivity = 0;
 8009bf6:	2400      	movs	r4, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1508
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009bf8:	4b0b      	ldr	r3, [pc, #44]	; (8009c28 <tcp_kill_state+0x38>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1503
  inactive = NULL;
 8009bfa:	4622      	mov	r2, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1508
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009bfc:	681d      	ldr	r5, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1506 (discriminator 1)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009bfe:	b921      	cbnz	r1, 8009c0a <tcp_kill_state+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1514
  if (inactive != NULL) {
 8009c00:	b172      	cbz	r2, 8009c20 <tcp_kill_state+0x30>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1518
    tcp_abandon(inactive, 0);
 8009c02:	4610      	mov	r0, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1520
}
 8009c04:	bc30      	pop	{r4, r5}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1518
    tcp_abandon(inactive, 0);
 8009c06:	f7ff bf69 	b.w	8009adc <tcp_abandon>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1507
    if (pcb->state == state) {
 8009c0a:	7d0b      	ldrb	r3, [r1, #20]
 8009c0c:	4283      	cmp	r3, r0
 8009c0e:	d105      	bne.n	8009c1c <tcp_kill_state+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1508
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009c10:	6a0b      	ldr	r3, [r1, #32]
 8009c12:	1aeb      	subs	r3, r5, r3
 8009c14:	42a3      	cmp	r3, r4
 8009c16:	bf24      	itt	cs
 8009c18:	461c      	movcs	r4, r3
 8009c1a:	460a      	movcs	r2, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1506 (discriminator 2)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c1c:	68c9      	ldr	r1, [r1, #12]
 8009c1e:	e7ee      	b.n	8009bfe <tcp_kill_state+0xe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1520
}
 8009c20:	bc30      	pop	{r4, r5}
 8009c22:	4770      	bx	lr
 8009c24:	200080f4 	.word	0x200080f4
 8009c28:	200080f8 	.word	0x200080f8

08009c2c <tcp_alloc>:
tcp_alloc():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1556
{
 8009c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2e:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1559
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c30:	2001      	movs	r0, #1
 8009c32:	f002 fb17 	bl	800c264 <memp_malloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1560
  if (pcb == NULL) {
 8009c36:	4c37      	ldr	r4, [pc, #220]	; (8009d14 <tcp_alloc+0xe8>)
 8009c38:	4603      	mov	r3, r0
 8009c3a:	bb90      	cbnz	r0, 8009ca2 <tcp_alloc+0x76>
tcp_kill_timewait():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1535
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c3c:	4a36      	ldr	r2, [pc, #216]	; (8009d18 <tcp_alloc+0xec>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1536
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009c3e:	6826      	ldr	r6, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1535
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c40:	6812      	ldr	r2, [r2, #0]
 8009c42:	2a00      	cmp	r2, #0
 8009c44:	d150      	bne.n	8009ce8 <tcp_alloc+0xbc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1541
  if (inactive != NULL) {
 8009c46:	b113      	cbz	r3, 8009c4e <tcp_alloc+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1544
    tcp_abort(inactive);
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7ff ffb9 	bl	8009bc0 <tcp_abort>
tcp_alloc():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1565
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c4e:	2001      	movs	r0, #1
 8009c50:	f002 fb08 	bl	800c264 <memp_malloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1566
    if (pcb == NULL) {
 8009c54:	4603      	mov	r3, r0
 8009c56:	bb20      	cbnz	r0, 8009ca2 <tcp_alloc+0x76>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1569
      tcp_kill_state(LAST_ACK);
 8009c58:	2009      	movs	r0, #9
 8009c5a:	f7ff ffc9 	bl	8009bf0 <tcp_kill_state>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1571
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c5e:	2001      	movs	r0, #1
 8009c60:	f002 fb00 	bl	800c264 <memp_malloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1572
      if (pcb == NULL) {
 8009c64:	4603      	mov	r3, r0
 8009c66:	b9e0      	cbnz	r0, 8009ca2 <tcp_alloc+0x76>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1575
        tcp_kill_state(CLOSING);
 8009c68:	2008      	movs	r0, #8
 8009c6a:	f7ff ffc1 	bl	8009bf0 <tcp_kill_state>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1577
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c6e:	2001      	movs	r0, #1
 8009c70:	f002 faf8 	bl	800c264 <memp_malloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1578
        if (pcb == NULL) {
 8009c74:	4603      	mov	r3, r0
 8009c76:	b9a0      	cbnz	r0, 8009ca2 <tcp_alloc+0x76>
tcp_kill_prio():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1470
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009c78:	f015 0f80 	tst.w	r5, #128	; 0x80
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1475
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c7c:	4a27      	ldr	r2, [pc, #156]	; (8009d1c <tcp_alloc+0xf0>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1477
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009c7e:	f8d4 c000 	ldr.w	ip, [r4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1473
  inactivity = 0;
 8009c82:	461e      	mov	r6, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1470
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009c84:	bf0c      	ite	eq
 8009c86:	4628      	moveq	r0, r5
 8009c88:	207f      	movne	r0, #127	; 0x7f
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1475
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c8a:	6812      	ldr	r2, [r2, #0]
 8009c8c:	2a00      	cmp	r2, #0
 8009c8e:	d133      	bne.n	8009cf8 <tcp_alloc+0xcc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1483
  if (inactive != NULL) {
 8009c90:	b113      	cbz	r3, 8009c98 <tcp_alloc+0x6c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1486
    tcp_abort(inactive);
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7ff ff94 	bl	8009bc0 <tcp_abort>
tcp_alloc():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1583
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c98:	2001      	movs	r0, #1
 8009c9a:	f002 fae3 	bl	800c264 <memp_malloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1604
  if (pcb != NULL) {
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	b300      	cbz	r0, 8009ce4 <tcp_alloc+0xb8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1606
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009ca2:	2294      	movs	r2, #148	; 0x94
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	f003 f970 	bl	800cf8c <memset>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1608
    pcb->snd_buf = TCP_SND_BUF;
 8009cac:	f241 62d0 	movw	r2, #5840	; 0x16d0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1606
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009cb0:	4603      	mov	r3, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1607
    pcb->prio = prio;
 8009cb2:	7545      	strb	r5, [r0, #21]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1608
    pcb->snd_buf = TCP_SND_BUF;
 8009cb4:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1611
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009cb8:	4a19      	ldr	r2, [pc, #100]	; (8009d20 <tcp_alloc+0xf4>)
 8009cba:	6282      	str	r2, [r0, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1612
    pcb->ttl = TCP_TTL;
 8009cbc:	22ff      	movs	r2, #255	; 0xff
 8009cbe:	7282      	strb	r2, [r0, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1616
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009cc0:	2206      	movs	r2, #6
 8009cc2:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1617
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009cc6:	87c2      	strh	r2, [r0, #62]	; 0x3e
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1618
    pcb->rtime = -1;
 8009cc8:	4a16      	ldr	r2, [pc, #88]	; (8009d24 <tcp_alloc+0xf8>)
 8009cca:	6302      	str	r2, [r0, #48]	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1620
    pcb->tmr = tcp_ticks;
 8009ccc:	6822      	ldr	r2, [r4, #0]
 8009cce:	6202      	str	r2, [r0, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1621
    pcb->last_timer = tcp_timer_ctr;
 8009cd0:	4a15      	ldr	r2, [pc, #84]	; (8009d28 <tcp_alloc+0xfc>)
 8009cd2:	7812      	ldrb	r2, [r2, #0]
 8009cd4:	7742      	strb	r2, [r0, #29]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1619
    pcb->cwnd = 1;
 8009cd6:	4a15      	ldr	r2, [pc, #84]	; (8009d2c <tcp_alloc+0x100>)
 8009cd8:	6482      	str	r2, [r0, #72]	; 0x48
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1632
    pcb->recv = tcp_recv_null;
 8009cda:	4a15      	ldr	r2, [pc, #84]	; (8009d30 <tcp_alloc+0x104>)
 8009cdc:	67c2      	str	r2, [r0, #124]	; 0x7c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1636
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009cde:	4a15      	ldr	r2, [pc, #84]	; (8009d34 <tcp_alloc+0x108>)
 8009ce0:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1644
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
tcp_kill_timewait():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1536
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009ce8:	6a11      	ldr	r1, [r2, #32]
 8009cea:	1a71      	subs	r1, r6, r1
 8009cec:	4281      	cmp	r1, r0
 8009cee:	bf24      	itt	cs
 8009cf0:	4613      	movcs	r3, r2
 8009cf2:	4608      	movcs	r0, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1535
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009cf4:	68d2      	ldr	r2, [r2, #12]
 8009cf6:	e7a4      	b.n	8009c42 <tcp_alloc+0x16>
tcp_kill_prio():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1476
    if (pcb->prio <= mprio &&
 8009cf8:	7d57      	ldrb	r7, [r2, #21]
 8009cfa:	4287      	cmp	r7, r0
 8009cfc:	d807      	bhi.n	8009d0e <tcp_alloc+0xe2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1477
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009cfe:	6a11      	ldr	r1, [r2, #32]
 8009d00:	ebac 0101 	sub.w	r1, ip, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1476
    if (pcb->prio <= mprio &&
 8009d04:	42b1      	cmp	r1, r6
 8009d06:	bf22      	ittt	cs
 8009d08:	4638      	movcs	r0, r7
 8009d0a:	460e      	movcs	r6, r1
 8009d0c:	4613      	movcs	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1475
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d0e:	68d2      	ldr	r2, [r2, #12]
 8009d10:	e7bc      	b.n	8009c8c <tcp_alloc+0x60>
 8009d12:	bf00      	nop
 8009d14:	200080f8 	.word	0x200080f8
 8009d18:	20008104 	.word	0x20008104
 8009d1c:	200080f4 	.word	0x200080f4
 8009d20:	0b680b68 	.word	0x0b680b68
 8009d24:	0218ffff 	.word	0x0218ffff
 8009d28:	20007fc9 	.word	0x20007fc9
 8009d2c:	16d00001 	.word	0x16d00001
 8009d30:	08009965 	.word	0x08009965
 8009d34:	006ddd00 	.word	0x006ddd00

08009d38 <tcp_new_ip_type>:
tcp_new_ip_type():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1680
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8009d38:	2040      	movs	r0, #64	; 0x40
 8009d3a:	f7ff bf77 	b.w	8009c2c <tcp_alloc>
	...

08009d40 <tcp_next_iss>:
tcp_next_iss():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1904
  iss += tcp_ticks;       /* XXX */
 8009d40:	4b03      	ldr	r3, [pc, #12]	; (8009d50 <tcp_next_iss+0x10>)
 8009d42:	4a04      	ldr	r2, [pc, #16]	; (8009d54 <tcp_next_iss+0x14>)
 8009d44:	6818      	ldr	r0, [r3, #0]
 8009d46:	6812      	ldr	r2, [r2, #0]
 8009d48:	4410      	add	r0, r2
 8009d4a:	6018      	str	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1907
}
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	20000018 	.word	0x20000018
 8009d54:	200080f8 	.word	0x200080f8

08009d58 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1921
{
 8009d58:	b510      	push	{r4, lr}
 8009d5a:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1926
  outif = ip_route(src, dest);
 8009d5c:	4608      	mov	r0, r1
 8009d5e:	f7f9 f8c9 	bl	8002ef4 <ip4_route>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1941
    if (outif == NULL) {
 8009d62:	b130      	cbz	r0, 8009d72 <tcp_eff_send_mss_impl+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1944
    mtu = outif->mtu;
 8009d64:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1948
  if (mtu != 0) {
 8009d66:	b123      	cbz	r3, 8009d72 <tcp_eff_send_mss_impl+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1962
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8009d68:	3b28      	subs	r3, #40	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1969
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	429c      	cmp	r4, r3
 8009d6e:	bf28      	it	cs
 8009d70:	461c      	movcs	r4, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:1972
}
 8009d72:	4620      	mov	r0, r4
 8009d74:	bd10      	pop	{r4, pc}
	...

08009d78 <tcp_netif_ip_addr_changed>:
tcp_netif_ip_addr_changed():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:2007
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8009d78:	b538      	push	{r3, r4, r5, lr}
 8009d7a:	460d      	mov	r5, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:2010
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8009d7c:	4604      	mov	r4, r0
 8009d7e:	b180      	cbz	r0, 8009da2 <tcp_netif_ip_addr_changed+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:2010 (discriminator 1)
 8009d80:	6803      	ldr	r3, [r0, #0]
 8009d82:	b173      	cbz	r3, 8009da2 <tcp_netif_ip_addr_changed+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:2011
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009d84:	4b0c      	ldr	r3, [pc, #48]	; (8009db8 <tcp_netif_ip_addr_changed+0x40>)
 8009d86:	6819      	ldr	r1, [r3, #0]
 8009d88:	f7ff ff24 	bl	8009bd4 <tcp_netif_ip_addr_changed_pcblist.isra.4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:2012
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009d8c:	4b0b      	ldr	r3, [pc, #44]	; (8009dbc <tcp_netif_ip_addr_changed+0x44>)
 8009d8e:	4620      	mov	r0, r4
 8009d90:	6819      	ldr	r1, [r3, #0]
 8009d92:	f7ff ff1f 	bl	8009bd4 <tcp_netif_ip_addr_changed_pcblist.isra.4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:2014

    if (!ip_addr_isany(new_addr)) {
 8009d96:	b125      	cbz	r5, 8009da2 <tcp_netif_ip_addr_changed+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:2014 (discriminator 1)
 8009d98:	682b      	ldr	r3, [r5, #0]
 8009d9a:	b113      	cbz	r3, 8009da2 <tcp_netif_ip_addr_changed+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:2016
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8009d9c:	4b08      	ldr	r3, [pc, #32]	; (8009dc0 <tcp_netif_ip_addr_changed+0x48>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:2016 (discriminator 1)
 8009da0:	b903      	cbnz	r3, 8009da4 <tcp_netif_ip_addr_changed+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:2027
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 8009da2:	bd38      	pop	{r3, r4, r5, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:2019
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009da4:	6818      	ldr	r0, [r3, #0]
 8009da6:	6821      	ldr	r1, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:2017
        next = lpcb->next;
 8009da8:	68da      	ldr	r2, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:2019
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009daa:	4288      	cmp	r0, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:2022
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009dac:	bf04      	itt	eq
 8009dae:	6829      	ldreq	r1, [r5, #0]
 8009db0:	6019      	streq	r1, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp.c:2007
{
 8009db2:	4613      	mov	r3, r2
 8009db4:	e7f4      	b.n	8009da0 <tcp_netif_ip_addr_changed+0x28>
 8009db6:	bf00      	nop
 8009db8:	200080f4 	.word	0x200080f4
 8009dbc:	20008100 	.word	0x20008100
 8009dc0:	200080fc 	.word	0x200080fc

08009dc4 <lwip_init>:
lwip_init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/init.c:338
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009dc4:	b508      	push	{r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/init.c:351
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009dc6:	f7f6 fff1 	bl	8000dac <sys_init>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/init.c:353
#endif /* !NO_SYS */
  mem_init();
 8009dca:	f000 fabb 	bl	800a344 <mem_init>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/init.c:354
  memp_init();
 8009dce:	f002 fa23 	bl	800c218 <memp_init>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/init.c:356
  pbuf_init();
  netif_init();
 8009dd2:	f000 f9e8 	bl	800a1a6 <netif_init>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/init.c:367
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009dd6:	f000 f806 	bl	8009de6 <udp_init>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/init.c:370
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009dda:	f7ff f95b 	bl	8009094 <tcp_init>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/init.c:385
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8009dde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/init.c:383
  sys_timeouts_init();
 8009de2:	f001 b8b5 	b.w	800af50 <sys_timeouts_init>

08009de6 <udp_init>:
udp_init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:92
udp_init(void)
{
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8009de6:	4770      	bx	lr

08009de8 <udp_input>:
udp_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:201
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8009de8:	8943      	ldrh	r3, [r0, #10]
 8009dea:	2b07      	cmp	r3, #7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:186
{
 8009dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df0:	4605      	mov	r5, r0
 8009df2:	b085      	sub	sp, #20
 8009df4:	4689      	mov	r9, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:201
  if (p->len < UDP_HLEN) {
 8009df6:	d805      	bhi.n	8009e04 <udp_input+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:344 (discriminator 1)
    if (pbuf_header(p, -UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8009df8:	4628      	mov	r0, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:432 (discriminator 1)
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8009dfa:	b005      	add	sp, #20
 8009dfc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:344 (discriminator 1)
      pbuf_free(p);
 8009e00:	f000 bd40 	b.w	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:215
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8009e04:	4e3d      	ldr	r6, [pc, #244]	; (8009efc <udp_input+0x114>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:212
  udphdr = (struct udp_hdr *)p->payload;
 8009e06:	6844      	ldr	r4, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:215
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8009e08:	6831      	ldr	r1, [r6, #0]
 8009e0a:	6970      	ldr	r0, [r6, #20]
 8009e0c:	f7fa fa0e 	bl	800422c <ip4_addr_isbroadcast_u32>
 8009e10:	4607      	mov	r7, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:220
  src = lwip_ntohs(udphdr->src);
 8009e12:	8820      	ldrh	r0, [r4, #0]
 8009e14:	f000 fcac 	bl	800a770 <lwip_htons>
 8009e18:	4680      	mov	r8, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:221
  dest = lwip_ntohs(udphdr->dest);
 8009e1a:	8860      	ldrh	r0, [r4, #2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:234
  uncon_pcb = NULL;
 8009e1c:	2400      	movs	r4, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:221
  dest = lwip_ntohs(udphdr->dest);
 8009e1e:	f000 fca7 	bl	800a770 <lwip_htons>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:239
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e22:	4a37      	ldr	r2, [pc, #220]	; (8009f00 <udp_input+0x118>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:221
  dest = lwip_ntohs(udphdr->dest);
 8009e24:	4682      	mov	sl, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:233
  prev = NULL;
 8009e26:	46a6      	mov	lr, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:239
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e28:	6810      	ldr	r0, [r2, #0]
 8009e2a:	4693      	mov	fp, r2
 8009e2c:	9603      	str	r6, [sp, #12]
 8009e2e:	4603      	mov	r3, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:264
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8009e30:	e9d6 c104 	ldrd	ip, r1, [r6, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:239 (discriminator 1)
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e34:	b99b      	cbnz	r3, 8009e5e <udp_input+0x76>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:287
  if (pcb != NULL) {
 8009e36:	b91c      	cbnz	r4, 8009e40 <udp_input+0x58>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:302
  if (for_us) {
 8009e38:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009e3c:	428b      	cmp	r3, r1
 8009e3e:	d1db      	bne.n	8009df8 <udp_input+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:339
    if (pbuf_header(p, -UDP_HLEN)) {
 8009e40:	f06f 0107 	mvn.w	r1, #7
 8009e44:	4628      	mov	r0, r5
 8009e46:	f000 fd17 	bl	800a878 <pbuf_header>
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	d034      	beq.n	8009eb8 <udp_input+0xd0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:341 (discriminator 1)
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8009e4e:	4b2d      	ldr	r3, [pc, #180]	; (8009f04 <udp_input+0x11c>)
 8009e50:	f240 1255 	movw	r2, #341	; 0x155
 8009e54:	492c      	ldr	r1, [pc, #176]	; (8009f08 <udp_input+0x120>)
 8009e56:	482d      	ldr	r0, [pc, #180]	; (8009f0c <udp_input+0x124>)
 8009e58:	f003 f8a0 	bl	800cf9c <iprintf>
 8009e5c:	e7cc      	b.n	8009df8 <udp_input+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:248
    if ((pcb->local_port == dest) &&
 8009e5e:	8a5a      	ldrh	r2, [r3, #18]
 8009e60:	4552      	cmp	r2, sl
 8009e62:	d126      	bne.n	8009eb2 <udp_input+0xca>
udp_input_local_match():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:150
    if (broadcast != 0) {
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	b307      	cbz	r7, 8009eaa <udp_input+0xc2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:155
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009e68:	b13a      	cbz	r2, 8009e7a <udp_input+0x92>
 8009e6a:	1c4e      	adds	r6, r1, #1
 8009e6c:	d005      	beq.n	8009e7a <udp_input+0x92>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:157
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8009e6e:	404a      	eors	r2, r1
 8009e70:	4616      	mov	r6, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:156
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8009e72:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8009e76:	4216      	tst	r6, r2
 8009e78:	d11b      	bne.n	8009eb2 <udp_input+0xca>
udp_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:250
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8009e7a:	7c1a      	ldrb	r2, [r3, #16]
 8009e7c:	0752      	lsls	r2, r2, #29
 8009e7e:	d402      	bmi.n	8009e86 <udp_input+0x9e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:250 (discriminator 1)
 8009e80:	2c00      	cmp	r4, #0
 8009e82:	bf08      	it	eq
 8009e84:	461c      	moveq	r4, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:262
      if ((pcb->remote_port == src) &&
 8009e86:	8a9a      	ldrh	r2, [r3, #20]
 8009e88:	4542      	cmp	r2, r8
 8009e8a:	d112      	bne.n	8009eb2 <udp_input+0xca>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:263 (discriminator 1)
          (ip_addr_isany_val(pcb->remote_ip) ||
 8009e8c:	685a      	ldr	r2, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:262 (discriminator 1)
      if ((pcb->remote_port == src) &&
 8009e8e:	b10a      	cbz	r2, 8009e94 <udp_input+0xac>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:263
          (ip_addr_isany_val(pcb->remote_ip) ||
 8009e90:	4562      	cmp	r2, ip
 8009e92:	d10e      	bne.n	8009eb2 <udp_input+0xca>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:266
        if (prev != NULL) {
 8009e94:	f1be 0f00 	cmp.w	lr, #0
 8009e98:	d005      	beq.n	8009ea6 <udp_input+0xbe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:269
          prev->next = pcb->next;
 8009e9a:	68da      	ldr	r2, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:271
          udp_pcbs = pcb;
 8009e9c:	f8cb 3000 	str.w	r3, [fp]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:269
          prev->next = pcb->next;
 8009ea0:	f8ce 200c 	str.w	r2, [lr, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:270
          pcb->next = udp_pcbs;
 8009ea4:	60d8      	str	r0, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:271
          udp_pcbs = pcb;
 8009ea6:	461c      	mov	r4, r3
 8009ea8:	e7ca      	b.n	8009e40 <udp_input+0x58>
udp_input_local_match():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:164
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009eaa:	2a00      	cmp	r2, #0
 8009eac:	d0e5      	beq.n	8009e7a <udp_input+0x92>
 8009eae:	428a      	cmp	r2, r1
 8009eb0:	d0e3      	beq.n	8009e7a <udp_input+0x92>
udp_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:239 (discriminator 2)
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009eb2:	469e      	mov	lr, r3
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	e7bd      	b.n	8009e34 <udp_input+0x4c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:348
    if (pcb != NULL) {
 8009eb8:	b164      	cbz	r4, 8009ed4 <udp_input+0xec>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:391
      if (pcb->recv != NULL) {
 8009eba:	69a6      	ldr	r6, [r4, #24]
 8009ebc:	2e00      	cmp	r6, #0
 8009ebe:	d09b      	beq.n	8009df8 <udp_input+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:393
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8009ec0:	f8cd 8000 	str.w	r8, [sp]
 8009ec4:	462a      	mov	r2, r5
 8009ec6:	4b12      	ldr	r3, [pc, #72]	; (8009f10 <udp_input+0x128>)
 8009ec8:	4621      	mov	r1, r4
 8009eca:	69e0      	ldr	r0, [r4, #28]
 8009ecc:	47b0      	blx	r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:432
}
 8009ece:	b005      	add	sp, #20
 8009ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:405
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8009ed4:	2f00      	cmp	r7, #0
 8009ed6:	d18f      	bne.n	8009df8 <udp_input+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:405 (discriminator 1)
 8009ed8:	9b03      	ldr	r3, [sp, #12]
 8009eda:	695b      	ldr	r3, [r3, #20]
 8009edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ee0:	2be0      	cmp	r3, #224	; 0xe0
 8009ee2:	d089      	beq.n	8009df8 <udp_input+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:407
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8009ee4:	9b03      	ldr	r3, [sp, #12]
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	8999      	ldrh	r1, [r3, #12]
 8009eea:	3108      	adds	r1, #8
 8009eec:	b209      	sxth	r1, r1
 8009eee:	f000 fcc6 	bl	800a87e <pbuf_header_force>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:408
        icmp_port_unreach(ip_current_is_v6(), p);
 8009ef2:	2103      	movs	r1, #3
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	f7fa f98f 	bl	8004218 <icmp_dest_unreach>
 8009efa:	e77d      	b.n	8009df8 <udp_input+0x10>
 8009efc:	2000be1c 	.word	0x2000be1c
 8009f00:	20008108 	.word	0x20008108
 8009f04:	0801fccb 	.word	0x0801fccb
 8009f08:	0801fd2c 	.word	0x0801fd2c
 8009f0c:	0800e36a 	.word	0x0800e36a
 8009f10:	2000be2c 	.word	0x2000be2c

08009f14 <udp_bind>:
udp_bind():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:890
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 8009f14:	4b26      	ldr	r3, [pc, #152]	; (8009fb0 <udp_bind+0x9c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:883
{
 8009f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:890
    ipaddr = IP4_ADDR_ANY;
 8009f1a:	2900      	cmp	r1, #0
 8009f1c:	bf08      	it	eq
 8009f1e:	4619      	moveq	r1, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:895
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8009f20:	2800      	cmp	r0, #0
 8009f22:	d042      	beq.n	8009faa <udp_bind+0x96>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:905
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8009f24:	4e23      	ldr	r6, [pc, #140]	; (8009fb4 <udp_bind+0xa0>)
 8009f26:	f8d6 c000 	ldr.w	ip, [r6]
 8009f2a:	4665      	mov	r5, ip
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:905 (discriminator 1)
 8009f2c:	b9cd      	cbnz	r5, 8009f62 <udp_bind+0x4e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:914
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 8009f2e:	2a00      	cmp	r2, #0
 8009f30:	d139      	bne.n	8009fa6 <udp_bind+0x92>
 8009f32:	4b21      	ldr	r3, [pc, #132]	; (8009fb8 <udp_bind+0xa4>)
 8009f34:	f44f 4480 	mov.w	r4, #16384	; 0x4000
udp_new_port():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:106
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8009f38:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8009f3c:	881a      	ldrh	r2, [r3, #0]
 8009f3e:	4572      	cmp	r2, lr
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:110
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f40:	4667      	mov	r7, ip
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:106
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8009f42:	bf16      	itet	ne
 8009f44:	3201      	addne	r2, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:107
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8009f46:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:106
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8009f4a:	b292      	uxthne	r2, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:110
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f4c:	b97f      	cbnz	r7, 8009f6e <udp_bind+0x5a>
 8009f4e:	801a      	strh	r2, [r3, #0]
udp_bind():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:946
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8009f50:	680b      	ldr	r3, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:948

  pcb->local_port = port;
 8009f52:	8242      	strh	r2, [r0, #18]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:946
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8009f54:	6003      	str	r3, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:951
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8009f56:	b915      	cbnz	r5, 8009f5e <udp_bind+0x4a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:953
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8009f58:	f8c0 c00c 	str.w	ip, [r0, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:954
    udp_pcbs = pcb;
 8009f5c:	6030      	str	r0, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:959
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8009f5e:	2000      	movs	r0, #0
 8009f60:	e010      	b.n	8009f84 <udp_bind+0x70>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:907
    if (pcb == ipcb) {
 8009f62:	4285      	cmp	r5, r0
 8009f64:	d001      	beq.n	8009f6a <udp_bind+0x56>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:905 (discriminator 2)
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8009f66:	68ed      	ldr	r5, [r5, #12]
 8009f68:	e7e0      	b.n	8009f2c <udp_bind+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:908
      rebind = 1;
 8009f6a:	2501      	movs	r5, #1
 8009f6c:	e7df      	b.n	8009f2e <udp_bind+0x1a>
udp_new_port():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:111
    if (pcb->local_port == udp_port) {
 8009f6e:	f8b7 8012 	ldrh.w	r8, [r7, #18]
 8009f72:	4590      	cmp	r8, r2
 8009f74:	d108      	bne.n	8009f88 <udp_bind+0x74>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:112
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8009f76:	3c01      	subs	r4, #1
 8009f78:	b2a4      	uxth	r4, r4
 8009f7a:	2c00      	cmp	r4, #0
 8009f7c:	d1df      	bne.n	8009f3e <udp_bind+0x2a>
 8009f7e:	801a      	strh	r2, [r3, #0]
udp_bind():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:919
      return ERR_USE;
 8009f80:	f06f 0007 	mvn.w	r0, #7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:960
}
 8009f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
udp_new_port():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:110
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f88:	68ff      	ldr	r7, [r7, #12]
 8009f8a:	e7df      	b.n	8009f4c <udp_bind+0x38>
udp_bind():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:923
      if (pcb != ipcb) {
 8009f8c:	4283      	cmp	r3, r0
 8009f8e:	d006      	beq.n	8009f9e <udp_bind+0x8a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:933
          if ((ipcb->local_port == port) &&
 8009f90:	8a5c      	ldrh	r4, [r3, #18]
 8009f92:	4294      	cmp	r4, r2
 8009f94:	d103      	bne.n	8009f9e <udp_bind+0x8a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:933 (discriminator 1)
 8009f96:	681f      	ldr	r7, [r3, #0]
 8009f98:	680c      	ldr	r4, [r1, #0]
 8009f9a:	42a7      	cmp	r7, r4
 8009f9c:	d0f0      	beq.n	8009f80 <udp_bind+0x6c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:922 (discriminator 2)
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8009f9e:	68db      	ldr	r3, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:922 (discriminator 1)
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d1f3      	bne.n	8009f8c <udp_bind+0x78>
 8009fa4:	e7d4      	b.n	8009f50 <udp_bind+0x3c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:922
 8009fa6:	4663      	mov	r3, ip
 8009fa8:	e7fa      	b.n	8009fa0 <udp_bind+0x8c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:896
    return ERR_VAL;
 8009faa:	f06f 0005 	mvn.w	r0, #5
 8009fae:	e7e9      	b.n	8009f84 <udp_bind+0x70>
 8009fb0:	0801e8dc 	.word	0x0801e8dc
 8009fb4:	20008108 	.word	0x20008108
 8009fb8:	2000001e 	.word	0x2000001e

08009fbc <udp_sendto_if_src>:
udp_sendto_if_src():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:663
{
 8009fbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009fc0:	460e      	mov	r6, r1
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	4690      	mov	r8, r2
 8009fc6:	4699      	mov	r9, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:681
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 8009fc8:	4607      	mov	r7, r0
 8009fca:	2800      	cmp	r0, #0
 8009fcc:	d050      	beq.n	800a070 <udp_sendto_if_src+0xb4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:681 (discriminator 1)
 8009fce:	2a00      	cmp	r2, #0
 8009fd0:	d04e      	beq.n	800a070 <udp_sendto_if_src+0xb4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:700
  if (pcb->local_port == 0) {
 8009fd2:	8a42      	ldrh	r2, [r0, #18]
 8009fd4:	2a00      	cmp	r2, #0
 8009fd6:	d033      	beq.n	800a040 <udp_sendto_if_src+0x84>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:710
  if (pbuf_header(p, UDP_HLEN)) {
 8009fd8:	2108      	movs	r1, #8
 8009fda:	4630      	mov	r0, r6
 8009fdc:	f000 fc4c 	bl	800a878 <pbuf_header>
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	d137      	bne.n	800a054 <udp_sendto_if_src+0x98>
 8009fe4:	4634      	mov	r4, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:731
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8009fe6:	8963      	ldrh	r3, [r4, #10]
 8009fe8:	2b07      	cmp	r3, #7
 8009fea:	d806      	bhi.n	8009ffa <udp_sendto_if_src+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:731 (discriminator 1)
 8009fec:	4b23      	ldr	r3, [pc, #140]	; (800a07c <udp_sendto_if_src+0xc0>)
 8009fee:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009ff2:	4923      	ldr	r1, [pc, #140]	; (800a080 <udp_sendto_if_src+0xc4>)
 8009ff4:	4823      	ldr	r0, [pc, #140]	; (800a084 <udp_sendto_if_src+0xc8>)
 8009ff6:	f002 ffd1 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:734
  udphdr = (struct udp_hdr *)q->payload;
 8009ffa:	6865      	ldr	r5, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:735
  udphdr->src = lwip_htons(pcb->local_port);
 8009ffc:	8a78      	ldrh	r0, [r7, #18]
 8009ffe:	f000 fbb7 	bl	800a770 <lwip_htons>
 800a002:	8028      	strh	r0, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:736
  udphdr->dest = lwip_htons(dst_port);
 800a004:	4648      	mov	r0, r9
 800a006:	f000 fbb3 	bl	800a770 <lwip_htons>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:738
  udphdr->chksum = 0x0000;
 800a00a:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:736
  udphdr->dest = lwip_htons(dst_port);
 800a00c:	8068      	strh	r0, [r5, #2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:738
  udphdr->chksum = 0x0000;
 800a00e:	71ab      	strb	r3, [r5, #6]
 800a010:	71eb      	strb	r3, [r5, #7]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:800
    udphdr->len = lwip_htons(q->tot_len);
 800a012:	8920      	ldrh	r0, [r4, #8]
 800a014:	f000 fbac 	bl	800a770 <lwip_htons>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:843
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800a018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:800
    udphdr->len = lwip_htons(q->tot_len);
 800a01a:	80a8      	strh	r0, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:843
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800a01c:	4642      	mov	r2, r8
 800a01e:	9302      	str	r3, [sp, #8]
 800a020:	2311      	movs	r3, #17
 800a022:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a024:	4620      	mov	r0, r4
 800a026:	9301      	str	r3, [sp, #4]
 800a028:	7a7b      	ldrb	r3, [r7, #9]
 800a02a:	9300      	str	r3, [sp, #0]
 800a02c:	7abb      	ldrb	r3, [r7, #10]
 800a02e:	f7f9 f85b 	bl	80030e8 <ip4_output_if_src>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:850
  if (q != p) {
 800a032:	42b4      	cmp	r4, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:843
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800a034:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:850
  if (q != p) {
 800a036:	d009      	beq.n	800a04c <udp_sendto_if_src+0x90>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:852
    pbuf_free(q);
 800a038:	4620      	mov	r0, r4
 800a03a:	f000 fc23 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:853
    q = NULL;
 800a03e:	e005      	b.n	800a04c <udp_sendto_if_src+0x90>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:702
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800a040:	4601      	mov	r1, r0
 800a042:	f7ff ff67 	bl	8009f14 <udp_bind>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:703
    if (err != ERR_OK) {
 800a046:	4605      	mov	r5, r0
 800a048:	2800      	cmp	r0, #0
 800a04a:	d0c5      	beq.n	8009fd8 <udp_sendto_if_src+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:859
}
 800a04c:	4628      	mov	r0, r5
 800a04e:	b005      	add	sp, #20
 800a050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:712
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800a054:	2200      	movs	r2, #0
 800a056:	2108      	movs	r1, #8
 800a058:	2001      	movs	r0, #1
 800a05a:	f000 fc7b 	bl	800a954 <pbuf_alloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:714
    if (q == NULL) {
 800a05e:	4604      	mov	r4, r0
 800a060:	b148      	cbz	r0, 800a076 <udp_sendto_if_src+0xba>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:718
    if (p->tot_len != 0) {
 800a062:	8933      	ldrh	r3, [r6, #8]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d0be      	beq.n	8009fe6 <udp_sendto_if_src+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:720
      pbuf_chain(q, p);
 800a068:	4631      	mov	r1, r6
 800a06a:	f000 fe13 	bl	800ac94 <pbuf_chain>
 800a06e:	e7ba      	b.n	8009fe6 <udp_sendto_if_src+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:683
    return ERR_VAL;
 800a070:	f06f 0505 	mvn.w	r5, #5
 800a074:	e7ea      	b.n	800a04c <udp_sendto_if_src+0x90>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:716
      return ERR_MEM;
 800a076:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a07a:	e7e7      	b.n	800a04c <udp_sendto_if_src+0x90>
 800a07c:	0801fccb 	.word	0x0801fccb
 800a080:	0801fd40 	.word	0x0801fd40
 800a084:	0800e36a 	.word	0x0800e36a

0800a088 <udp_sendto_if>:
udp_sendto_if():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:594
{
 800a088:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a08a:	9c06      	ldr	r4, [sp, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:608
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800a08c:	b190      	cbz	r0, 800a0b4 <udp_sendto_if+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:608 (discriminator 1)
 800a08e:	b18a      	cbz	r2, 800a0b4 <udp_sendto_if+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:635
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a090:	6805      	ldr	r5, [r0, #0]
 800a092:	b11d      	cbz	r5, 800a09c <udp_sendto_if+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:636 (discriminator 2)
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800a094:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:635 (discriminator 2)
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a098:	2ee0      	cmp	r6, #224	; 0xe0
 800a09a:	d106      	bne.n	800a0aa <udp_sendto_if+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:639
    src_ip = netif_ip_addr4(netif);
 800a09c:	1d25      	adds	r5, r4, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:654
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800a09e:	e9cd 4500 	strd	r4, r5, [sp]
 800a0a2:	f7ff ff8b 	bl	8009fbc <udp_sendto_if_src>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:656
}
 800a0a6:	b002      	add	sp, #8
 800a0a8:	bd70      	pop	{r4, r5, r6, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:643
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800a0aa:	6866      	ldr	r6, [r4, #4]
 800a0ac:	42b5      	cmp	r5, r6
 800a0ae:	d104      	bne.n	800a0ba <udp_sendto_if+0x32>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:635
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a0b0:	4605      	mov	r5, r0
 800a0b2:	e7f4      	b.n	800a09e <udp_sendto_if+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:609
    return ERR_VAL;
 800a0b4:	f06f 0005 	mvn.w	r0, #5
 800a0b8:	e7f5      	b.n	800a0a6 <udp_sendto_if+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:645
      return ERR_RTE;
 800a0ba:	f06f 0003 	mvn.w	r0, #3
 800a0be:	e7f2      	b.n	800a0a6 <udp_sendto_if+0x1e>

0800a0c0 <udp_connect>:
udp_connect():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:982
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800a0c0:	b570      	push	{r4, r5, r6, lr}
 800a0c2:	460d      	mov	r5, r1
 800a0c4:	4616      	mov	r6, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:985
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	b1d0      	cbz	r0, 800a100 <udp_connect+0x40>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:985 (discriminator 1)
 800a0ca:	b1c9      	cbz	r1, 800a100 <udp_connect+0x40>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:989
    return ERR_VAL;
  }

  if (pcb->local_port == 0) {
 800a0cc:	8a42      	ldrh	r2, [r0, #18]
 800a0ce:	b16a      	cbz	r2, 800a0ec <udp_connect+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:996
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800a0d0:	682b      	ldr	r3, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:997
  pcb->remote_port = port;
 800a0d2:	82a6      	strh	r6, [r4, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:996
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800a0d4:	6063      	str	r3, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:998
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800a0d6:	7c23      	ldrb	r3, [r4, #16]
 800a0d8:	f043 0304 	orr.w	r3, r3, #4
 800a0dc:	7423      	strb	r3, [r4, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1006
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a0de:	4b0b      	ldr	r3, [pc, #44]	; (800a10c <udp_connect+0x4c>)
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	4610      	mov	r0, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1006 (discriminator 1)
 800a0e4:	b940      	cbnz	r0, 800a0f8 <udp_connect+0x38>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1013
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800a0e6:	60e2      	str	r2, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1014
  udp_pcbs = pcb;
 800a0e8:	601c      	str	r4, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1015
  return ERR_OK;
 800a0ea:	e004      	b.n	800a0f6 <udp_connect+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:990
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800a0ec:	4601      	mov	r1, r0
 800a0ee:	f7ff ff11 	bl	8009f14 <udp_bind>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:991
    if (err != ERR_OK) {
 800a0f2:	2800      	cmp	r0, #0
 800a0f4:	d0ec      	beq.n	800a0d0 <udp_connect+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1016
}
 800a0f6:	bd70      	pop	{r4, r5, r6, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1007
    if (pcb == ipcb) {
 800a0f8:	42a0      	cmp	r0, r4
 800a0fa:	d004      	beq.n	800a106 <udp_connect+0x46>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1006 (discriminator 2)
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a0fc:	68c0      	ldr	r0, [r0, #12]
 800a0fe:	e7f1      	b.n	800a0e4 <udp_connect+0x24>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:986
    return ERR_VAL;
 800a100:	f06f 0005 	mvn.w	r0, #5
 800a104:	e7f7      	b.n	800a0f6 <udp_connect+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1009
      return ERR_OK;
 800a106:	2000      	movs	r0, #0
 800a108:	e7f5      	b.n	800a0f6 <udp_connect+0x36>
 800a10a:	bf00      	nop
 800a10c:	20008108 	.word	0x20008108

0800a110 <udp_recv>:
udp_recv():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1057
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 800a110:	e9c0 1206 	strd	r1, r2, [r0, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1058
}
 800a114:	4770      	bx	lr
	...

0800a118 <udp_remove>:
udp_remove():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1076
{
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800a118:	4a0a      	ldr	r2, [pc, #40]	; (800a144 <udp_remove+0x2c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1071
{
 800a11a:	4601      	mov	r1, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1076
  if (udp_pcbs == pcb) {
 800a11c:	6813      	ldr	r3, [r2, #0]
 800a11e:	4283      	cmp	r3, r0
 800a120:	d105      	bne.n	800a12e <udp_remove+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1078
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800a122:	68c3      	ldr	r3, [r0, #12]
 800a124:	6013      	str	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1090
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800a126:	2000      	movs	r0, #0
 800a128:	f002 b8cc 	b.w	800c2c4 <memp_free>
 800a12c:	4613      	mov	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1081 (discriminator 1)
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d0f9      	beq.n	800a126 <udp_remove+0xe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1083
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800a132:	68da      	ldr	r2, [r3, #12]
 800a134:	2a00      	cmp	r2, #0
 800a136:	d0f6      	beq.n	800a126 <udp_remove+0xe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1083 (discriminator 1)
 800a138:	428a      	cmp	r2, r1
 800a13a:	d1f7      	bne.n	800a12c <udp_remove+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1085
        pcb2->next = pcb->next;
 800a13c:	68ca      	ldr	r2, [r1, #12]
 800a13e:	60da      	str	r2, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1086
        break;
 800a140:	e7f1      	b.n	800a126 <udp_remove+0xe>
 800a142:	bf00      	nop
 800a144:	20008108 	.word	0x20008108

0800a148 <udp_new>:
udp_new():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1104
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800a148:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1106
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800a14a:	2000      	movs	r0, #0
 800a14c:	f002 f88a 	bl	800c264 <memp_malloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1108
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800a150:	4604      	mov	r4, r0
 800a152:	b128      	cbz	r0, 800a160 <udp_new+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1113
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800a154:	2220      	movs	r2, #32
 800a156:	2100      	movs	r1, #0
 800a158:	f002 ff18 	bl	800cf8c <memset>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1114
    pcb->ttl = UDP_TTL;
 800a15c:	23ff      	movs	r3, #255	; 0xff
 800a15e:	72a3      	strb	r3, [r4, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1120
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800a160:	4620      	mov	r0, r4
 800a162:	bd10      	pop	{r4, pc}

0800a164 <udp_new_ip_type>:
udp_new_ip_type():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1138
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
  struct udp_pcb *pcb;
  pcb = udp_new();
 800a164:	f7ff bff0 	b.w	800a148 <udp_new>

0800a168 <udp_netif_ip_addr_changed>:
udp_netif_ip_addr_changed():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1156
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800a168:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1159
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800a16a:	b138      	cbz	r0, 800a17c <udp_netif_ip_addr_changed+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1159 (discriminator 1)
 800a16c:	6803      	ldr	r3, [r0, #0]
 800a16e:	b12b      	cbz	r3, 800a17c <udp_netif_ip_addr_changed+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1159 (discriminator 2)
 800a170:	b121      	cbz	r1, 800a17c <udp_netif_ip_addr_changed+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1159 (discriminator 3)
 800a172:	680b      	ldr	r3, [r1, #0]
 800a174:	b113      	cbz	r3, 800a17c <udp_netif_ip_addr_changed+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1160
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a176:	4b06      	ldr	r3, [pc, #24]	; (800a190 <udp_netif_ip_addr_changed+0x28>)
 800a178:	681b      	ldr	r3, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1160 (discriminator 1)
 800a17a:	b903      	cbnz	r3, 800a17e <udp_netif_ip_addr_changed+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1169
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 800a17c:	bd10      	pop	{r4, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1162
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800a17e:	681c      	ldr	r4, [r3, #0]
 800a180:	6802      	ldr	r2, [r0, #0]
 800a182:	4294      	cmp	r4, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1165
        ip_addr_copy(upcb->local_ip, *new_addr);
 800a184:	bf04      	itt	eq
 800a186:	680a      	ldreq	r2, [r1, #0]
 800a188:	601a      	streq	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/udp.c:1160
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	e7f5      	b.n	800a17a <udp_netif_ip_addr_changed+0x12>
 800a18e:	bf00      	nop
 800a190:	20008108 	.word	0x20008108

0800a194 <netif_issue_reports.part.0>:
netif_issue_reports():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:649
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a194:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:642
netif_issue_reports(struct netif* netif, u8_t report_type)
 800a198:	4601      	mov	r1, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:649
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a19a:	071b      	lsls	r3, r3, #28
 800a19c:	d502      	bpl.n	800a1a4 <netif_issue_reports.part.0+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:650
      etharp_gratuitous(netif);
 800a19e:	3104      	adds	r1, #4
 800a1a0:	f7f9 bd8a 	b.w	8003cb8 <etharp_request>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:675
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800a1a4:	4770      	bx	lr

0800a1a6 <netif_init>:
netif_init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:191
}
 800a1a6:	4770      	bx	lr

0800a1a8 <netif_set_ipaddr>:
netif_set_ipaddr():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:508
{
 800a1a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1aa:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:510
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800a1ac:	460d      	mov	r5, r1
 800a1ae:	b191      	cbz	r1, 800a1d6 <netif_set_ipaddr+0x2e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:510 (discriminator 1)
 800a1b0:	680b      	ldr	r3, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:510 (discriminator 2)
 800a1b2:	9301      	str	r3, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:514 (discriminator 2)
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800a1b4:	9a01      	ldr	r2, [sp, #4]
 800a1b6:	6863      	ldr	r3, [r4, #4]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d00a      	beq.n	800a1d2 <netif_set_ipaddr+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:517
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800a1bc:	1d26      	adds	r6, r4, #4
 800a1be:	a901      	add	r1, sp, #4
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	f7ff fdd9 	bl	8009d78 <tcp_netif_ip_addr_changed>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:520
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800a1c6:	a901      	add	r1, sp, #4
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	f7ff ffcd 	bl	800a168 <udp_netif_ip_addr_changed>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:529
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a1ce:	b92d      	cbnz	r5, 800a1dc <netif_set_ipaddr+0x34>
 800a1d0:	6065      	str	r5, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:545
}
 800a1d2:	b002      	add	sp, #8
 800a1d4:	bd70      	pop	{r4, r5, r6, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:510 (discriminator 2)
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800a1d6:	4b05      	ldr	r3, [pc, #20]	; (800a1ec <netif_set_ipaddr+0x44>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	e7ea      	b.n	800a1b2 <netif_set_ipaddr+0xa>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:529 (discriminator 1)
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a1dc:	682b      	ldr	r3, [r5, #0]
 800a1de:	6063      	str	r3, [r4, #4]
netif_issue_reports():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:645 (discriminator 1)
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d0f6      	beq.n	800a1d2 <netif_set_ipaddr+0x2a>
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	f7ff ffd5 	bl	800a194 <netif_issue_reports.part.0>
netif_set_ipaddr():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:545
}
 800a1ea:	e7f2      	b.n	800a1d2 <netif_set_ipaddr+0x2a>
 800a1ec:	0801e8dc 	.word	0x0801e8dc

0800a1f0 <netif_set_addr>:
netif_set_addr():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:354
{
 800a1f0:	b570      	push	{r4, r5, r6, lr}
 800a1f2:	4606      	mov	r6, r0
 800a1f4:	4615      	mov	r5, r2
 800a1f6:	461c      	mov	r4, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:355
  if (ip4_addr_isany(ipaddr)) {
 800a1f8:	b109      	cbz	r1, 800a1fe <netif_set_addr+0xe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:355 (discriminator 1)
 800a1fa:	680b      	ldr	r3, [r1, #0]
 800a1fc:	b94b      	cbnz	r3, 800a212 <netif_set_addr+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:358
    netif_set_ipaddr(netif, ipaddr);
 800a1fe:	4630      	mov	r0, r6
 800a200:	f7ff ffd2 	bl	800a1a8 <netif_set_ipaddr>
netif_set_netmask():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:584
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a204:	b105      	cbz	r5, 800a208 <netif_set_addr+0x18>
 800a206:	682d      	ldr	r5, [r5, #0]
 800a208:	60b5      	str	r5, [r6, #8]
netif_set_gw():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:559
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a20a:	b104      	cbz	r4, 800a20e <netif_set_addr+0x1e>
 800a20c:	6824      	ldr	r4, [r4, #0]
 800a20e:	60f4      	str	r4, [r6, #12]
netif_set_addr():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:367
}
 800a210:	bd70      	pop	{r4, r5, r6, pc}
netif_set_netmask():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:584
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a212:	b102      	cbz	r2, 800a216 <netif_set_addr+0x26>
 800a214:	6815      	ldr	r5, [r2, #0]
 800a216:	60b5      	str	r5, [r6, #8]
netif_set_gw():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:559
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a218:	b104      	cbz	r4, 800a21c <netif_set_addr+0x2c>
 800a21a:	6824      	ldr	r4, [r4, #0]
 800a21c:	60f4      	str	r4, [r6, #12]
netif_set_addr():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:365
    netif_set_ipaddr(netif, ipaddr);
 800a21e:	4630      	mov	r0, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:367
}
 800a220:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:365
    netif_set_ipaddr(netif, ipaddr);
 800a224:	f7ff bfc0 	b.w	800a1a8 <netif_set_ipaddr>

0800a228 <netif_add>:
netif_add():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:246
{
 800a228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a22c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a22e:	4604      	mov	r4, r0
 800a230:	460f      	mov	r7, r1
 800a232:	4690      	mov	r8, r2
 800a234:	4699      	mov	r9, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:251
  LWIP_ASSERT("No init function given", init != NULL);
 800a236:	b92e      	cbnz	r6, 800a244 <netif_add+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:251 (discriminator 1)
 800a238:	4b16      	ldr	r3, [pc, #88]	; (800a294 <netif_add+0x6c>)
 800a23a:	22fb      	movs	r2, #251	; 0xfb
 800a23c:	4916      	ldr	r1, [pc, #88]	; (800a298 <netif_add+0x70>)
 800a23e:	4817      	ldr	r0, [pc, #92]	; (800a29c <netif_add+0x74>)
 800a240:	f002 feac 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:276
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800a244:	2303      	movs	r3, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:297
  netif->num = netif_num++;
 800a246:	4a16      	ldr	r2, [pc, #88]	; (800a2a0 <netif_add+0x78>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:255
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a248:	2500      	movs	r5, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:306
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a24a:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:276
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800a24c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:296
  netif->state = state;
 800a250:	9b08      	ldr	r3, [sp, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:257
  ip_addr_set_zero_ip4(&netif->gw);
 800a252:	60e5      	str	r5, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:296
  netif->state = state;
 800a254:	6223      	str	r3, [r4, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:297
  netif->num = netif_num++;
 800a256:	7813      	ldrb	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:267
  netif->flags = 0;
 800a258:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:297
  netif->num = netif_num++;
 800a25c:	1c59      	adds	r1, r3, #1
 800a25e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:298
  netif->input = input;
 800a262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:297
  netif->num = netif_num++;
 800a264:	7011      	strb	r1, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:306
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a266:	4642      	mov	r2, r8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:298
  netif->input = input;
 800a268:	6123      	str	r3, [r4, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:306
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a26a:	4639      	mov	r1, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:269
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800a26c:	6265      	str	r5, [r4, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:306
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a26e:	464b      	mov	r3, r9
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:282
  netif->link_callback = NULL;
 800a270:	61e5      	str	r5, [r4, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:256
  ip_addr_set_zero_ip4(&netif->netmask);
 800a272:	e9c4 5501 	strd	r5, r5, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:306
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a276:	f7ff ffbb 	bl	800a1f0 <netif_set_addr>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:310
  if (init(netif) != ERR_OK) {
 800a27a:	4620      	mov	r0, r4
 800a27c:	47b0      	blx	r6
 800a27e:	b930      	cbnz	r0, 800a28e <netif_add+0x66>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:315
  netif->next = netif_list;
 800a280:	4b08      	ldr	r3, [pc, #32]	; (800a2a4 <netif_add+0x7c>)
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	6022      	str	r2, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:316
  netif_list = netif;
 800a286:	601c      	str	r4, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:338
}
 800a288:	4620      	mov	r0, r4
 800a28a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:311
    return NULL;
 800a28e:	462c      	mov	r4, r5
 800a290:	e7fa      	b.n	800a288 <netif_add+0x60>
 800a292:	bf00      	nop
 800a294:	0801fd6e 	.word	0x0801fd6e
 800a298:	0801fdd1 	.word	0x0801fdd1
 800a29c:	0800e36a 	.word	0x0800e36a
 800a2a0:	20007fca 	.word	0x20007fca
 800a2a4:	2000810c 	.word	0x2000810c

0800a2a8 <netif_set_default>:
netif_set_default():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:613
  netif_default = netif;
 800a2a8:	4b01      	ldr	r3, [pc, #4]	; (800a2b0 <netif_set_default+0x8>)
 800a2aa:	6018      	str	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:616
}
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	20008110 	.word	0x20008110

0800a2b4 <netif_set_up>:
netif_set_up():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:626
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a2b4:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
 800a2b8:	07d1      	lsls	r1, r2, #31
 800a2ba:	d409      	bmi.n	800a2d0 <netif_set_up+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:627
    netif->flags |= NETIF_FLAG_UP;
 800a2bc:	f042 0101 	orr.w	r1, r2, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:633
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a2c0:	0752      	lsls	r2, r2, #29
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:627
    netif->flags |= NETIF_FLAG_UP;
 800a2c2:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:633
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a2c6:	d503      	bpl.n	800a2d0 <netif_set_up+0x1c>
netif_issue_reports():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:645
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a2c8:	6843      	ldr	r3, [r0, #4]
 800a2ca:	b10b      	cbz	r3, 800a2d0 <netif_set_up+0x1c>
 800a2cc:	f7ff bf62 	b.w	800a194 <netif_issue_reports.part.0>
netif_set_up():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:637
}
 800a2d0:	4770      	bx	lr

0800a2d2 <netif_set_down>:
netif_set_down():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:684
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 800a2d2:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 800a2d6:	07d9      	lsls	r1, r3, #31
 800a2d8:	d507      	bpl.n	800a2ea <netif_set_down+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:685
    netif->flags &= ~NETIF_FLAG_UP;
 800a2da:	f023 0101 	bic.w	r1, r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:689
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a2de:	071b      	lsls	r3, r3, #28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:685
    netif->flags &= ~NETIF_FLAG_UP;
 800a2e0:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:689
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a2e4:	d501      	bpl.n	800a2ea <netif_set_down+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:690
      etharp_cleanup_netif(netif);
 800a2e6:	f7f9 bc2f 	b.w	8003b48 <etharp_cleanup_netif>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:700
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a2ea:	4770      	bx	lr

0800a2ec <netif_set_link_up>:
netif_set_link_up():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:736
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800a2ec:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:737
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a2ee:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:736
{
 800a2f2:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:737
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a2f4:	075a      	lsls	r2, r3, #29
 800a2f6:	d414      	bmi.n	800a322 <netif_set_link_up+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:738
    netif->flags |= NETIF_FLAG_LINK_UP;
 800a2f8:	f043 0304 	orr.w	r3, r3, #4
 800a2fc:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:741

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800a300:	f7fa fdde 	bl	8004ec0 <dhcp_network_changed>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:748

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 800a304:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800a308:	07db      	lsls	r3, r3, #31
 800a30a:	d504      	bpl.n	800a316 <netif_set_link_up+0x2a>
netif_issue_reports():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:645
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a30c:	6863      	ldr	r3, [r4, #4]
 800a30e:	b113      	cbz	r3, 800a316 <netif_set_link_up+0x2a>
 800a310:	4620      	mov	r0, r4
 800a312:	f7ff ff3f 	bl	800a194 <netif_issue_reports.part.0>
netif_set_link_up():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:751
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
    }
    NETIF_LINK_CALLBACK(netif);
 800a316:	69e3      	ldr	r3, [r4, #28]
 800a318:	b11b      	cbz	r3, 800a322 <netif_set_link_up+0x36>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:751 (discriminator 1)
 800a31a:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:753 (discriminator 1)
  }
}
 800a31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:751 (discriminator 1)
    NETIF_LINK_CALLBACK(netif);
 800a320:	4718      	bx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:753
}
 800a322:	bd10      	pop	{r4, pc}

0800a324 <netif_set_link_down>:
netif_set_link_down():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:762
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a324:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 800a328:	0759      	lsls	r1, r3, #29
 800a32a:	d506      	bpl.n	800a33a <netif_set_link_down+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:763
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 800a32c:	f023 0304 	bic.w	r3, r3, #4
 800a330:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:764
    NETIF_LINK_CALLBACK(netif);
 800a334:	69c3      	ldr	r3, [r0, #28]
 800a336:	b103      	cbz	r3, 800a33a <netif_set_link_down+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:764 (discriminator 1)
 800a338:	4718      	bx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:766
  }
}
 800a33a:	4770      	bx	lr

0800a33c <netif_set_link_callback>:
netif_set_link_callback():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:776
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
  if (netif) {
 800a33c:	b100      	cbz	r0, 800a340 <netif_set_link_callback+0x4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:777
    netif->link_callback = link_callback;
 800a33e:	61c1      	str	r1, [r0, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/netif.c:779
  }
}
 800a340:	4770      	bx	lr
	...

0800a344 <mem_init>:
mem_init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:390

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a344:	4b10      	ldr	r3, [pc, #64]	; (800a388 <mem_init+0x44>)
 800a346:	4a11      	ldr	r2, [pc, #68]	; (800a38c <mem_init+0x48>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:397
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800a348:	4911      	ldr	r1, [pc, #68]	; (800a390 <mem_init+0x4c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:407
  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a34a:	4812      	ldr	r0, [pc, #72]	; (800a394 <mem_init+0x50>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:383
{
 800a34c:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:390
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a34e:	6013      	str	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:393
  mem->next = MEM_SIZE_ALIGNED;
 800a350:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a354:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:395
  mem->used = 0;
 800a356:	2200      	movs	r2, #0
 800a358:	711a      	strb	r2, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:397
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800a35a:	4a0f      	ldr	r2, [pc, #60]	; (800a398 <mem_init+0x54>)
 800a35c:	600a      	str	r2, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:399
  ram_end->next = MEM_SIZE_ALIGNED;
 800a35e:	f04f 2128 	mov.w	r1, #671098880	; 0x28002800
 800a362:	6011      	str	r1, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:398
  ram_end->used = 1;
 800a364:	2101      	movs	r1, #1
 800a366:	7111      	strb	r1, [r2, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:403
  lfree = (struct mem *)(void *)ram;
 800a368:	4a0c      	ldr	r2, [pc, #48]	; (800a39c <mem_init+0x58>)
 800a36a:	6013      	str	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:407
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a36c:	f7f6 fd2a 	bl	8000dc4 <sys_mutex_new>
 800a370:	b140      	cbz	r0, 800a384 <mem_init+0x40>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:408 (discriminator 1)
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a372:	4b0b      	ldr	r3, [pc, #44]	; (800a3a0 <mem_init+0x5c>)
 800a374:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a378:	490a      	ldr	r1, [pc, #40]	; (800a3a4 <mem_init+0x60>)
 800a37a:	480b      	ldr	r0, [pc, #44]	; (800a3a8 <mem_init+0x64>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:410 (discriminator 1)
  }
}
 800a37c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:408 (discriminator 1)
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a380:	f002 be0c 	b.w	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:410
}
 800a384:	bd10      	pop	{r4, pc}
 800a386:	bf00      	nop
 800a388:	30044000 	.word	0x30044000
 800a38c:	20007fd4 	.word	0x20007fd4
 800a390:	20007fd8 	.word	0x20007fd8
 800a394:	20007fd0 	.word	0x20007fd0
 800a398:	30046800 	.word	0x30046800
 800a39c:	20007fcc 	.word	0x20007fcc
 800a3a0:	0801feaa 	.word	0x0801feaa
 800a3a4:	0801ff0b 	.word	0x0801ff0b
 800a3a8:	0800e36a 	.word	0x0800e36a

0800a3ac <mem_free>:
mem_free():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:420
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:424
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	2800      	cmp	r0, #0
 800a3b4:	f000 8098 	beq.w	800a4e8 <mem_free+0x13c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:428
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800a3b8:	0783      	lsls	r3, r0, #30
 800a3ba:	d006      	beq.n	800a3ca <mem_free+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:428 (discriminator 1)
 800a3bc:	4b4b      	ldr	r3, [pc, #300]	; (800a4ec <mem_free+0x140>)
 800a3be:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800a3c2:	494b      	ldr	r1, [pc, #300]	; (800a4f0 <mem_free+0x144>)
 800a3c4:	484b      	ldr	r0, [pc, #300]	; (800a4f4 <mem_free+0x148>)
 800a3c6:	f002 fde9 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:430

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a3ca:	4f4b      	ldr	r7, [pc, #300]	; (800a4f8 <mem_free+0x14c>)
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	42a3      	cmp	r3, r4
 800a3d0:	d875      	bhi.n	800a4be <mem_free+0x112>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:430 (discriminator 2)
 800a3d2:	4b4a      	ldr	r3, [pc, #296]	; (800a4fc <mem_free+0x150>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	42a3      	cmp	r3, r4
 800a3d8:	d971      	bls.n	800a4be <mem_free+0x112>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:443
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return;
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a3da:	4849      	ldr	r0, [pc, #292]	; (800a500 <mem_free+0x154>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:446
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800a3dc:	f1a4 0508 	sub.w	r5, r4, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:443
  LWIP_MEM_FREE_PROTECT();
 800a3e0:	f7f6 fcfe 	bl	8000de0 <sys_mutex_lock>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:448
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800a3e4:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800a3e8:	b933      	cbnz	r3, 800a3f8 <mem_free+0x4c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:448 (discriminator 1)
 800a3ea:	4b40      	ldr	r3, [pc, #256]	; (800a4ec <mem_free+0x140>)
 800a3ec:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800a3f0:	4944      	ldr	r1, [pc, #272]	; (800a504 <mem_free+0x158>)
 800a3f2:	4840      	ldr	r0, [pc, #256]	; (800a4f4 <mem_free+0x148>)
 800a3f4:	f002 fdd2 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:450
  /* ... and is now unused. */
  mem->used = 0;
 800a3f8:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:452

  if (mem < lfree) {
 800a3fa:	4e43      	ldr	r6, [pc, #268]	; (800a508 <mem_free+0x15c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:450
  mem->used = 0;
 800a3fc:	f804 3c04 	strb.w	r3, [r4, #-4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:452
  if (mem < lfree) {
 800a400:	6833      	ldr	r3, [r6, #0]
 800a402:	42ab      	cmp	r3, r5
plug_holes():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:349
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a404:	683b      	ldr	r3, [r7, #0]
mem_free():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:454
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a406:	bf88      	it	hi
 800a408:	6035      	strhi	r5, [r6, #0]
plug_holes():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:349
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a40a:	429d      	cmp	r5, r3
 800a40c:	d206      	bcs.n	800a41c <mem_free+0x70>
 800a40e:	4b37      	ldr	r3, [pc, #220]	; (800a4ec <mem_free+0x140>)
 800a410:	f240 125d 	movw	r2, #349	; 0x15d
 800a414:	493d      	ldr	r1, [pc, #244]	; (800a50c <mem_free+0x160>)
 800a416:	4837      	ldr	r0, [pc, #220]	; (800a4f4 <mem_free+0x148>)
 800a418:	f002 fdc0 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:350
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a41c:	4b37      	ldr	r3, [pc, #220]	; (800a4fc <mem_free+0x150>)
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	4698      	mov	r8, r3
 800a422:	4295      	cmp	r5, r2
 800a424:	d306      	bcc.n	800a434 <mem_free+0x88>
 800a426:	4b31      	ldr	r3, [pc, #196]	; (800a4ec <mem_free+0x140>)
 800a428:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a42c:	4938      	ldr	r1, [pc, #224]	; (800a510 <mem_free+0x164>)
 800a42e:	4831      	ldr	r0, [pc, #196]	; (800a4f4 <mem_free+0x148>)
 800a430:	f002 fdb4 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:351
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a434:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800a438:	b133      	cbz	r3, 800a448 <mem_free+0x9c>
 800a43a:	4b2c      	ldr	r3, [pc, #176]	; (800a4ec <mem_free+0x140>)
 800a43c:	f240 125f 	movw	r2, #351	; 0x15f
 800a440:	4934      	ldr	r1, [pc, #208]	; (800a514 <mem_free+0x168>)
 800a442:	482c      	ldr	r0, [pc, #176]	; (800a4f4 <mem_free+0x148>)
 800a444:	f002 fdaa 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:354
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a448:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800a44c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a450:	d906      	bls.n	800a460 <mem_free+0xb4>
 800a452:	4b26      	ldr	r3, [pc, #152]	; (800a4ec <mem_free+0x140>)
 800a454:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800a458:	492f      	ldr	r1, [pc, #188]	; (800a518 <mem_free+0x16c>)
 800a45a:	4826      	ldr	r0, [pc, #152]	; (800a4f4 <mem_free+0x148>)
 800a45c:	f002 fd9e 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:356
  nmem = (struct mem *)(void *)&ram[mem->next];
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800a466:	185a      	adds	r2, r3, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:357
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a468:	4295      	cmp	r5, r2
 800a46a:	d011      	beq.n	800a490 <mem_free+0xe4>
 800a46c:	7910      	ldrb	r0, [r2, #4]
 800a46e:	b978      	cbnz	r0, 800a490 <mem_free+0xe4>
 800a470:	f8d8 0000 	ldr.w	r0, [r8]
 800a474:	4282      	cmp	r2, r0
 800a476:	d00b      	beq.n	800a490 <mem_free+0xe4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:359
    if (lfree == nmem) {
 800a478:	6830      	ldr	r0, [r6, #0]
 800a47a:	4282      	cmp	r2, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:362
    mem->next = nmem->next;
 800a47c:	5a5a      	ldrh	r2, [r3, r1]
 800a47e:	f824 2c08 	strh.w	r2, [r4, #-8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:363
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800a482:	5a5a      	ldrh	r2, [r3, r1]
 800a484:	eba5 0103 	sub.w	r1, r5, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:360
      lfree = mem;
 800a488:	bf08      	it	eq
 800a48a:	6035      	streq	r5, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:363
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800a48c:	441a      	add	r2, r3
 800a48e:	8051      	strh	r1, [r2, #2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:367
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800a490:	f834 2c06 	ldrh.w	r2, [r4, #-6]
 800a494:	1899      	adds	r1, r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:368
  if (pmem != mem && pmem->used == 0) {
 800a496:	428d      	cmp	r5, r1
 800a498:	d00c      	beq.n	800a4b4 <mem_free+0x108>
 800a49a:	7908      	ldrb	r0, [r1, #4]
 800a49c:	b950      	cbnz	r0, 800a4b4 <mem_free+0x108>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:370
    if (lfree == mem) {
 800a49e:	6830      	ldr	r0, [r6, #0]
 800a4a0:	4285      	cmp	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:371
      lfree = pmem;
 800a4a2:	bf08      	it	eq
 800a4a4:	6031      	streq	r1, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:373
    pmem->next = mem->next;
 800a4a6:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800a4aa:	5299      	strh	r1, [r3, r2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:374
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800a4ac:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800a4b0:	440b      	add	r3, r1
 800a4b2:	805a      	strh	r2, [r3, #2]
mem_free():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:464
  /* finally, see if prev or next are free also */
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a4b4:	4812      	ldr	r0, [pc, #72]	; (800a500 <mem_free+0x154>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:465
}
 800a4b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:464
  LWIP_MEM_FREE_UNPROTECT();
 800a4ba:	f7f6 bc96 	b.w	8000dea <sys_mutex_unlock>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:430 (discriminator 3)
  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a4be:	4b0b      	ldr	r3, [pc, #44]	; (800a4ec <mem_free+0x140>)
 800a4c0:	f240 12af 	movw	r2, #431	; 0x1af
 800a4c4:	4915      	ldr	r1, [pc, #84]	; (800a51c <mem_free+0x170>)
 800a4c6:	480b      	ldr	r0, [pc, #44]	; (800a4f4 <mem_free+0x148>)
 800a4c8:	f002 fd68 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:433 (discriminator 3)
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	42a3      	cmp	r3, r4
 800a4d0:	d804      	bhi.n	800a4dc <mem_free+0x130>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:433
 800a4d2:	4b0a      	ldr	r3, [pc, #40]	; (800a4fc <mem_free+0x150>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	42a3      	cmp	r3, r4
 800a4d8:	f63f af7f 	bhi.w	800a3da <mem_free+0x2e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:437
    SYS_ARCH_PROTECT(lev);
 800a4dc:	f7f6 fc98 	bl	8000e10 <sys_arch_protect>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:465
}
 800a4e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:439
    SYS_ARCH_UNPROTECT(lev);
 800a4e4:	f7f6 bca0 	b.w	8000e28 <sys_arch_unprotect>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:465
}
 800a4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4ec:	0801feaa 	.word	0x0801feaa
 800a4f0:	0801fde8 	.word	0x0801fde8
 800a4f4:	0800e36a 	.word	0x0800e36a
 800a4f8:	20007fd4 	.word	0x20007fd4
 800a4fc:	20007fd8 	.word	0x20007fd8
 800a500:	20007fd0 	.word	0x20007fd0
 800a504:	0801fe20 	.word	0x0801fe20
 800a508:	20007fcc 	.word	0x20007fcc
 800a50c:	0801fe34 	.word	0x0801fe34
 800a510:	0801fe4b 	.word	0x0801fe4b
 800a514:	0801fe65 	.word	0x0801fe65
 800a518:	0801fe80 	.word	0x0801fe80
 800a51c:	0801fe09 	.word	0x0801fe09

0800a520 <mem_trim>:
mem_trim():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:479
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800a520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:488
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800a524:	3103      	adds	r1, #3
 800a526:	f64f 75fc 	movw	r5, #65532	; 0xfffc
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:479
{
 800a52a:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:488
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800a52c:	400d      	ands	r5, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:490

  if (newsize < MIN_SIZE_ALIGNED) {
 800a52e:	2d0b      	cmp	r5, #11
 800a530:	d904      	bls.n	800a53c <mem_trim+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:495
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800a532:	f5b5 5f20 	cmp.w	r5, #10240	; 0x2800
 800a536:	d902      	bls.n	800a53e <mem_trim+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:496
    return NULL;
 800a538:	2400      	movs	r4, #0
 800a53a:	e01c      	b.n	800a576 <mem_trim+0x56>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:492
    newsize = MIN_SIZE_ALIGNED;
 800a53c:	250c      	movs	r5, #12
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:499
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a53e:	4b37      	ldr	r3, [pc, #220]	; (800a61c <mem_trim+0xfc>)
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	4698      	mov	r8, r3
 800a544:	42a2      	cmp	r2, r4
 800a546:	d803      	bhi.n	800a550 <mem_trim+0x30>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:499 (discriminator 2)
 800a548:	4b35      	ldr	r3, [pc, #212]	; (800a620 <mem_trim+0x100>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	42a3      	cmp	r3, r4
 800a54e:	d806      	bhi.n	800a55e <mem_trim+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:499 (discriminator 3)
 800a550:	4b34      	ldr	r3, [pc, #208]	; (800a624 <mem_trim+0x104>)
 800a552:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a556:	4934      	ldr	r1, [pc, #208]	; (800a628 <mem_trim+0x108>)
 800a558:	4834      	ldr	r0, [pc, #208]	; (800a62c <mem_trim+0x10c>)
 800a55a:	f002 fd1f 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:502
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a55e:	f8d8 3000 	ldr.w	r3, [r8]
 800a562:	42a3      	cmp	r3, r4
 800a564:	d803      	bhi.n	800a56e <mem_trim+0x4e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:502 (discriminator 1)
 800a566:	4a2e      	ldr	r2, [pc, #184]	; (800a620 <mem_trim+0x100>)
 800a568:	6812      	ldr	r2, [r2, #0]
 800a56a:	42a2      	cmp	r2, r4
 800a56c:	d806      	bhi.n	800a57c <mem_trim+0x5c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:506
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800a56e:	f7f6 fc4f 	bl	8000e10 <sys_arch_protect>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:508
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800a572:	f7f6 fc59 	bl	8000e28 <sys_arch_unprotect>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:592
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 800a576:	4620      	mov	r0, r4
 800a578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:513
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800a57c:	f1a4 0608 	sub.w	r6, r4, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:517
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800a580:	f834 7c08 	ldrh.w	r7, [r4, #-8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:515
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800a584:	1af6      	subs	r6, r6, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:517
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800a586:	3f08      	subs	r7, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:515
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800a588:	b2b6      	uxth	r6, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:517
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800a58a:	1bbf      	subs	r7, r7, r6
 800a58c:	b2bf      	uxth	r7, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:518
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a58e:	42af      	cmp	r7, r5
 800a590:	d219      	bcs.n	800a5c6 <mem_trim+0xa6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:518 (discriminator 1)
 800a592:	4b24      	ldr	r3, [pc, #144]	; (800a624 <mem_trim+0x104>)
 800a594:	f240 2206 	movw	r2, #518	; 0x206
 800a598:	4925      	ldr	r1, [pc, #148]	; (800a630 <mem_trim+0x110>)
 800a59a:	4824      	ldr	r0, [pc, #144]	; (800a62c <mem_trim+0x10c>)
 800a59c:	f002 fcfe 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:519 (discriminator 1)
  if (newsize > size) {
 800a5a0:	e7ca      	b.n	800a538 <mem_trim+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:558
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a5a2:	f105 0214 	add.w	r2, r5, #20
 800a5a6:	42ba      	cmp	r2, r7
 800a5a8:	d833      	bhi.n	800a612 <mem_trim+0xf2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:566
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800a5aa:	f106 0208 	add.w	r2, r6, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:568
    if (mem2 < lfree) {
 800a5ae:	4821      	ldr	r0, [pc, #132]	; (800a634 <mem_trim+0x114>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:566
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800a5b0:	4415      	add	r5, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:568
    if (mem2 < lfree) {
 800a5b2:	6807      	ldr	r7, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:566
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800a5b4:	b2ad      	uxth	r5, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:567
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800a5b6:	195a      	adds	r2, r3, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:568
    if (mem2 < lfree) {
 800a5b8:	4297      	cmp	r7, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:569
      lfree = mem2;
 800a5ba:	bf88      	it	hi
 800a5bc:	6002      	strhi	r2, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:571
    mem2->used = 0;
 800a5be:	2000      	movs	r0, #0
 800a5c0:	7110      	strb	r0, [r2, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:572
    mem2->next = mem->next;
 800a5c2:	5359      	strh	r1, [r3, r5]
 800a5c4:	e01c      	b.n	800a600 <mem_trim+0xe0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:523
  if (newsize == size) {
 800a5c6:	d0d6      	beq.n	800a576 <mem_trim+0x56>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:529
  LWIP_MEM_FREE_PROTECT();
 800a5c8:	481b      	ldr	r0, [pc, #108]	; (800a638 <mem_trim+0x118>)
 800a5ca:	f7f6 fc09 	bl	8000de0 <sys_mutex_lock>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:531
  mem2 = (struct mem *)(void *)&ram[mem->next];
 800a5ce:	f8d8 3000 	ldr.w	r3, [r8]
 800a5d2:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800a5d6:	1858      	adds	r0, r3, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:532
  if (mem2->used == 0) {
 800a5d8:	7902      	ldrb	r2, [r0, #4]
 800a5da:	2a00      	cmp	r2, #0
 800a5dc:	d1e1      	bne.n	800a5a2 <mem_trim+0x82>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:538
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800a5de:	f106 0208 	add.w	r2, r6, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:536
    next = mem2->next;
 800a5e2:	f833 c001 	ldrh.w	ip, [r3, r1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:539
    if (lfree == mem2) {
 800a5e6:	4913      	ldr	r1, [pc, #76]	; (800a634 <mem_trim+0x114>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:538
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800a5e8:	4415      	add	r5, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:539
    if (lfree == mem2) {
 800a5ea:	680f      	ldr	r7, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:538
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800a5ec:	b2ad      	uxth	r5, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:539
    if (lfree == mem2) {
 800a5ee:	4287      	cmp	r7, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:540
      lfree = (struct mem *)(void *)&ram[ptr2];
 800a5f0:	eb03 0205 	add.w	r2, r3, r5
 800a5f4:	bf08      	it	eq
 800a5f6:	600a      	streq	r2, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:543
    mem2->used = 0;
 800a5f8:	2100      	movs	r1, #0
 800a5fa:	7111      	strb	r1, [r2, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:545
    mem2->next = next;
 800a5fc:	f823 c005 	strh.w	ip, [r3, r5]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:573
    mem2->prev = ptr;
 800a600:	8056      	strh	r6, [r2, #2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:574
    mem->next = ptr2;
 800a602:	f824 5c08 	strh.w	r5, [r4, #-8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:575
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a606:	5b5a      	ldrh	r2, [r3, r5]
 800a608:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:576
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800a60c:	bf1c      	itt	ne
 800a60e:	189b      	addne	r3, r3, r2
 800a610:	805d      	strhne	r5, [r3, #2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:590
  LWIP_MEM_FREE_UNPROTECT();
 800a612:	4809      	ldr	r0, [pc, #36]	; (800a638 <mem_trim+0x118>)
 800a614:	f7f6 fbe9 	bl	8000dea <sys_mutex_unlock>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:591
  return rmem;
 800a618:	e7ad      	b.n	800a576 <mem_trim+0x56>
 800a61a:	bf00      	nop
 800a61c:	20007fd4 	.word	0x20007fd4
 800a620:	20007fd8 	.word	0x20007fd8
 800a624:	0801feaa 	.word	0x0801feaa
 800a628:	0801ffc1 	.word	0x0801ffc1
 800a62c:	0800e36a 	.word	0x0800e36a
 800a630:	0801ffd8 	.word	0x0801ffd8
 800a634:	20007fcc 	.word	0x20007fcc
 800a638:	20007fd0 	.word	0x20007fd0

0800a63c <mem_malloc>:
mem_malloc():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:604
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800a63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:612
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800a640:	2800      	cmp	r0, #0
 800a642:	d076      	beq.n	800a732 <mem_malloc+0xf6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:618
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800a644:	3003      	adds	r0, #3
 800a646:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 800a64a:	4005      	ands	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:620

  if (size < MIN_SIZE_ALIGNED) {
 800a64c:	2d0b      	cmp	r5, #11
 800a64e:	d904      	bls.n	800a65a <mem_malloc+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:625
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 800a650:	f5b5 5f20 	cmp.w	r5, #10240	; 0x2800
 800a654:	d902      	bls.n	800a65c <mem_malloc+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:613
    return NULL;
 800a656:	2000      	movs	r0, #0
 800a658:	e06b      	b.n	800a732 <mem_malloc+0xf6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:622
    size = MIN_SIZE_ALIGNED;
 800a65a:	250c      	movs	r5, #12
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:630
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a65c:	483a      	ldr	r0, [pc, #232]	; (800a748 <mem_malloc+0x10c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:658
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a65e:	f06f 0807 	mvn.w	r8, #7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:630
  sys_mutex_lock(&mem_mutex);
 800a662:	f7f6 fbbd 	bl	8000de0 <sys_mutex_lock>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:641
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800a666:	4e39      	ldr	r6, [pc, #228]	; (800a74c <mem_malloc+0x110>)
 800a668:	4a39      	ldr	r2, [pc, #228]	; (800a750 <mem_malloc+0x114>)
 800a66a:	f5c5 5c20 	rsb	ip, r5, #10240	; 0x2800
 800a66e:	6833      	ldr	r3, [r6, #0]
 800a670:	6810      	ldr	r0, [r2, #0]
 800a672:	1a1a      	subs	r2, r3, r0
 800a674:	b292      	uxth	r2, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:641 (discriminator 1)
 800a676:	4562      	cmp	r2, ip
 800a678:	d303      	bcc.n	800a682 <mem_malloc+0x46>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:740
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a67a:	4833      	ldr	r0, [pc, #204]	; (800a748 <mem_malloc+0x10c>)
 800a67c:	f7f6 fbb5 	bl	8000dea <sys_mutex_unlock>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:741
  return NULL;
 800a680:	e7e9      	b.n	800a656 <mem_malloc+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:643
      mem = (struct mem *)(void *)&ram[ptr];
 800a682:	1884      	adds	r4, r0, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:657
      if ((!mem->used) &&
 800a684:	5a87      	ldrh	r7, [r0, r2]
 800a686:	f894 e004 	ldrb.w	lr, [r4, #4]
 800a68a:	f1be 0f00 	cmp.w	lr, #0
 800a68e:	d158      	bne.n	800a742 <mem_malloc+0x106>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:658 (discriminator 1)
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a690:	eba8 0102 	sub.w	r1, r8, r2
 800a694:	4439      	add	r1, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:657 (discriminator 1)
      if ((!mem->used) &&
 800a696:	42a9      	cmp	r1, r5
 800a698:	d353      	bcc.n	800a742 <mem_malloc+0x106>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:662
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a69a:	f105 0c14 	add.w	ip, r5, #20
 800a69e:	4561      	cmp	r1, ip
 800a6a0:	d349      	bcc.n	800a736 <mem_malloc+0xfa>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:673
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800a6a2:	f105 0108 	add.w	r1, r5, #8
 800a6a6:	4411      	add	r1, r2
 800a6a8:	b289      	uxth	r1, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:675
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800a6aa:	eb00 0c01 	add.w	ip, r0, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:676
          mem2->used = 0;
 800a6ae:	f88c e004 	strb.w	lr, [ip, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:677
          mem2->next = mem->next;
 800a6b2:	5247      	strh	r7, [r0, r1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:678
          mem2->prev = ptr;
 800a6b4:	f8ac 2002 	strh.w	r2, [ip, #2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:681
          mem->used = 1;
 800a6b8:	2201      	movs	r2, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:680
          mem->next = ptr2;
 800a6ba:	8021      	strh	r1, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:681
          mem->used = 1;
 800a6bc:	7122      	strb	r2, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:683
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a6be:	5a42      	ldrh	r2, [r0, r1]
 800a6c0:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800a6c4:	d001      	beq.n	800a6ca <mem_malloc+0x8e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:684
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800a6c6:	4402      	add	r2, r0
 800a6c8:	8051      	strh	r1, [r2, #2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:701
        if (mem == lfree) {
 800a6ca:	42a3      	cmp	r3, r4
 800a6cc:	4f21      	ldr	r7, [pc, #132]	; (800a754 <mem_malloc+0x118>)
 800a6ce:	d10f      	bne.n	800a6f0 <mem_malloc+0xb4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:704
          while (cur->used && cur != ram_end) {
 800a6d0:	6839      	ldr	r1, [r7, #0]
 800a6d2:	791a      	ldrb	r2, [r3, #4]
 800a6d4:	b10a      	cbz	r2, 800a6da <mem_malloc+0x9e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:704 (discriminator 1)
 800a6d6:	4299      	cmp	r1, r3
 800a6d8:	d130      	bne.n	800a73c <mem_malloc+0x100>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:719
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a6da:	4299      	cmp	r1, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:718
          lfree = cur;
 800a6dc:	6033      	str	r3, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:719
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a6de:	d007      	beq.n	800a6f0 <mem_malloc+0xb4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:719 (discriminator 1)
 800a6e0:	b132      	cbz	r2, 800a6f0 <mem_malloc+0xb4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:719 (discriminator 2)
 800a6e2:	4b1d      	ldr	r3, [pc, #116]	; (800a758 <mem_malloc+0x11c>)
 800a6e4:	f240 22cf 	movw	r2, #719	; 0x2cf
 800a6e8:	491c      	ldr	r1, [pc, #112]	; (800a75c <mem_malloc+0x120>)
 800a6ea:	481d      	ldr	r0, [pc, #116]	; (800a760 <mem_malloc+0x124>)
 800a6ec:	f002 fc56 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:723
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a6f0:	3508      	adds	r5, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:722
        sys_mutex_unlock(&mem_mutex);
 800a6f2:	4815      	ldr	r0, [pc, #84]	; (800a748 <mem_malloc+0x10c>)
 800a6f4:	f7f6 fb79 	bl	8000dea <sys_mutex_unlock>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:723
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	4425      	add	r5, r4
 800a6fc:	42ab      	cmp	r3, r5
 800a6fe:	d206      	bcs.n	800a70e <mem_malloc+0xd2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:723 (discriminator 1)
 800a700:	4b15      	ldr	r3, [pc, #84]	; (800a758 <mem_malloc+0x11c>)
 800a702:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800a706:	4917      	ldr	r1, [pc, #92]	; (800a764 <mem_malloc+0x128>)
 800a708:	4815      	ldr	r0, [pc, #84]	; (800a760 <mem_malloc+0x124>)
 800a70a:	f002 fc47 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:725
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a70e:	07a3      	lsls	r3, r4, #30
 800a710:	d00d      	beq.n	800a72e <mem_malloc+0xf2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:725 (discriminator 1)
 800a712:	4b11      	ldr	r3, [pc, #68]	; (800a758 <mem_malloc+0x11c>)
 800a714:	f240 22d6 	movw	r2, #726	; 0x2d6
 800a718:	4913      	ldr	r1, [pc, #76]	; (800a768 <mem_malloc+0x12c>)
 800a71a:	4811      	ldr	r0, [pc, #68]	; (800a760 <mem_malloc+0x124>)
 800a71c:	f002 fc3e 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:727 (discriminator 1)
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a720:	4b0d      	ldr	r3, [pc, #52]	; (800a758 <mem_malloc+0x11c>)
 800a722:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800a726:	4911      	ldr	r1, [pc, #68]	; (800a76c <mem_malloc+0x130>)
 800a728:	480d      	ldr	r0, [pc, #52]	; (800a760 <mem_malloc+0x124>)
 800a72a:	f002 fc37 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:730
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800a72e:	f104 0008 	add.w	r0, r4, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:742
}
 800a732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:695
          mem->used = 1;
 800a736:	2201      	movs	r2, #1
 800a738:	7122      	strb	r2, [r4, #4]
 800a73a:	e7c6      	b.n	800a6ca <mem_malloc+0x8e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:716
            cur = (struct mem *)(void *)&ram[cur->next];
 800a73c:	881b      	ldrh	r3, [r3, #0]
 800a73e:	4403      	add	r3, r0
 800a740:	e7c7      	b.n	800a6d2 <mem_malloc+0x96>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/mem.c:622 (discriminator 1)
    size = MIN_SIZE_ALIGNED;
 800a742:	463a      	mov	r2, r7
 800a744:	e797      	b.n	800a676 <mem_malloc+0x3a>
 800a746:	bf00      	nop
 800a748:	20007fd0 	.word	0x20007fd0
 800a74c:	20007fcc 	.word	0x20007fcc
 800a750:	20007fd4 	.word	0x20007fd4
 800a754:	20007fd8 	.word	0x20007fd8
 800a758:	0801feaa 	.word	0x0801feaa
 800a75c:	0801ff26 	.word	0x0801ff26
 800a760:	0800e36a 	.word	0x0800e36a
 800a764:	0801ff3f 	.word	0x0801ff3f
 800a768:	0801ff6f 	.word	0x0801ff6f
 800a76c:	0801ff9e 	.word	0x0801ff9e

0800a770 <lwip_htons>:
lwip_htons():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/def.c:78
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 800a770:	ba40      	rev16	r0, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/def.c:79
}
 800a772:	b280      	uxth	r0, r0
 800a774:	4770      	bx	lr

0800a776 <lwip_htonl>:
lwip_htonl():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/def.c:93
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 800a776:	ba00      	rev	r0, r0
 800a778:	4770      	bx	lr
	...

0800a77c <pbuf_header_impl>:
pbuf_header_impl():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:570
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a77c:	b570      	push	{r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:575
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a77e:	4604      	mov	r4, r0
 800a780:	bb70      	cbnz	r0, 800a7e0 <pbuf_header_impl+0x64>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:575 (discriminator 1)
 800a782:	4b20      	ldr	r3, [pc, #128]	; (800a804 <pbuf_header_impl+0x88>)
 800a784:	f240 223f 	movw	r2, #575	; 0x23f
 800a788:	491f      	ldr	r1, [pc, #124]	; (800a808 <pbuf_header_impl+0x8c>)
 800a78a:	4820      	ldr	r0, [pc, #128]	; (800a80c <pbuf_header_impl+0x90>)
 800a78c:	f002 fc06 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:641
  p->tot_len += header_size_increment;

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800a790:	2000      	movs	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:642
}
 800a792:	bd70      	pop	{r4, r5, r6, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:585
    increment_magnitude = (u16_t)header_size_increment;
 800a794:	461d      	mov	r5, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:598
  type = p->type;
 800a796:	7b26      	ldrb	r6, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:600
  payload = p->payload;
 800a798:	6860      	ldr	r0, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:603
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800a79a:	b10e      	cbz	r6, 800a7a0 <pbuf_header_impl+0x24>
 800a79c:	2e03      	cmp	r6, #3
 800a79e:	d106      	bne.n	800a7ae <pbuf_header_impl+0x32>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:605
    p->payload = (u8_t *)p->payload - header_size_increment;
 800a7a0:	1a40      	subs	r0, r0, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:607
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a7a2:	f104 0210 	add.w	r2, r4, #16
 800a7a6:	4290      	cmp	r0, r2
 800a7a8:	d20a      	bcs.n	800a7c0 <pbuf_header_impl+0x44>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:627
      return 1;
 800a7aa:	2001      	movs	r0, #1
 800a7ac:	e7f1      	b.n	800a792 <pbuf_header_impl+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:617
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800a7ae:	3e01      	subs	r6, #1
 800a7b0:	2e01      	cmp	r6, #1
 800a7b2:	d810      	bhi.n	800a7d6 <pbuf_header_impl+0x5a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:619
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800a7b4:	2900      	cmp	r1, #0
 800a7b6:	da0b      	bge.n	800a7d0 <pbuf_header_impl+0x54>
 800a7b8:	8962      	ldrh	r2, [r4, #10]
 800a7ba:	42aa      	cmp	r2, r5
 800a7bc:	d3f5      	bcc.n	800a7aa <pbuf_header_impl+0x2e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:623
      p->payload = (u8_t *)p->payload - header_size_increment;
 800a7be:	1a40      	subs	r0, r0, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:635
  p->len += header_size_increment;
 800a7c0:	8962      	ldrh	r2, [r4, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:605
    p->payload = (u8_t *)p->payload - header_size_increment;
 800a7c2:	6060      	str	r0, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:635
  p->len += header_size_increment;
 800a7c4:	441a      	add	r2, r3
 800a7c6:	8162      	strh	r2, [r4, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:636
  p->tot_len += header_size_increment;
 800a7c8:	8922      	ldrh	r2, [r4, #8]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	8123      	strh	r3, [r4, #8]
 800a7ce:	e7df      	b.n	800a790 <pbuf_header_impl+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:622
    } else if ((header_size_increment > 0) && force) {
 800a7d0:	2a00      	cmp	r2, #0
 800a7d2:	d1f4      	bne.n	800a7be <pbuf_header_impl+0x42>
 800a7d4:	e7e9      	b.n	800a7aa <pbuf_header_impl+0x2e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:631
    LWIP_ASSERT("bad pbuf type", 0);
 800a7d6:	4b0b      	ldr	r3, [pc, #44]	; (800a804 <pbuf_header_impl+0x88>)
 800a7d8:	f240 2277 	movw	r2, #631	; 0x277
 800a7dc:	490c      	ldr	r1, [pc, #48]	; (800a810 <pbuf_header_impl+0x94>)
 800a7de:	e00c      	b.n	800a7fa <pbuf_header_impl+0x7e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:576
  if ((header_size_increment == 0) || (p == NULL)) {
 800a7e0:	2900      	cmp	r1, #0
 800a7e2:	d0d5      	beq.n	800a790 <pbuf_header_impl+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:580
  if (header_size_increment < 0) {
 800a7e4:	b28b      	uxth	r3, r1
 800a7e6:	dad5      	bge.n	800a794 <pbuf_header_impl+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:581
    increment_magnitude = (u16_t)-header_size_increment;
 800a7e8:	425d      	negs	r5, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:583
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a7ea:	8960      	ldrh	r0, [r4, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:581
    increment_magnitude = (u16_t)-header_size_increment;
 800a7ec:	b2ad      	uxth	r5, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:583
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a7ee:	42a8      	cmp	r0, r5
 800a7f0:	d2d1      	bcs.n	800a796 <pbuf_header_impl+0x1a>
 800a7f2:	4b04      	ldr	r3, [pc, #16]	; (800a804 <pbuf_header_impl+0x88>)
 800a7f4:	f240 2247 	movw	r2, #583	; 0x247
 800a7f8:	4906      	ldr	r1, [pc, #24]	; (800a814 <pbuf_header_impl+0x98>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:631
    LWIP_ASSERT("bad pbuf type", 0);
 800a7fa:	4804      	ldr	r0, [pc, #16]	; (800a80c <pbuf_header_impl+0x90>)
 800a7fc:	f002 fbce 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:632
    return 1;
 800a800:	e7d3      	b.n	800a7aa <pbuf_header_impl+0x2e>
 800a802:	bf00      	nop
 800a804:	08020262 	.word	0x08020262
 800a808:	080202fe 	.word	0x080202fe
 800a80c:	0800e36a 	.word	0x0800e36a
 800a810:	080202e2 	.word	0x080202e2
 800a814:	080202c4 	.word	0x080202c4

0800a818 <pbuf_alloced_custom>:
pbuf_alloced_custom():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:432
  switch (l) {
 800a818:	2804      	cmp	r0, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:427
{
 800a81a:	b570      	push	{r4, r5, r6, lr}
 800a81c:	9d04      	ldr	r5, [sp, #16]
 800a81e:	d80c      	bhi.n	800a83a <pbuf_alloced_custom+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:457
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a820:	4c11      	ldr	r4, [pc, #68]	; (800a868 <pbuf_alloced_custom+0x50>)
 800a822:	5c24      	ldrb	r4, [r4, r0]
 800a824:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 800a828:	3403      	adds	r4, #3
 800a82a:	f024 0403 	bic.w	r4, r4, #3
 800a82e:	190e      	adds	r6, r1, r4
 800a830:	4286      	cmp	r6, r0
 800a832:	f04f 0000 	mov.w	r0, #0
 800a836:	d909      	bls.n	800a84c <pbuf_alloced_custom+0x34>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:473
}
 800a838:	bd70      	pop	{r4, r5, r6, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:453 (discriminator 1)
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800a83a:	4b0c      	ldr	r3, [pc, #48]	; (800a86c <pbuf_alloced_custom+0x54>)
 800a83c:	f240 12c5 	movw	r2, #453	; 0x1c5
 800a840:	490b      	ldr	r1, [pc, #44]	; (800a870 <pbuf_alloced_custom+0x58>)
 800a842:	480c      	ldr	r0, [pc, #48]	; (800a874 <pbuf_alloced_custom+0x5c>)
 800a844:	f002 fbaa 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:454 (discriminator 1)
    return NULL;
 800a848:	2000      	movs	r0, #0
 800a84a:	e7f5      	b.n	800a838 <pbuf_alloced_custom+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:462
  p->pbuf.next = NULL;
 800a84c:	6018      	str	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:463
  if (payload_mem != NULL) {
 800a84e:	b105      	cbz	r5, 800a852 <pbuf_alloced_custom+0x3a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:464
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a850:	4425      	add	r5, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:468
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800a852:	2002      	movs	r0, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:470
  p->pbuf.type = type;
 800a854:	731a      	strb	r2, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:471
  p->pbuf.ref = 1;
 800a856:	2201      	movs	r2, #1
 800a858:	605d      	str	r5, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:468
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800a85a:	7358      	strb	r0, [r3, #13]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:472
  return &p->pbuf;
 800a85c:	4618      	mov	r0, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:469
  p->pbuf.len = p->pbuf.tot_len = length;
 800a85e:	8119      	strh	r1, [r3, #8]
 800a860:	8159      	strh	r1, [r3, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:471
  p->pbuf.ref = 1;
 800a862:	81da      	strh	r2, [r3, #14]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:472
  return &p->pbuf;
 800a864:	e7e8      	b.n	800a838 <pbuf_alloced_custom+0x20>
 800a866:	bf00      	nop
 800a868:	0801fff8 	.word	0x0801fff8
 800a86c:	08020262 	.word	0x08020262
 800a870:	080200a5 	.word	0x080200a5
 800a874:	0800e36a 	.word	0x0800e36a

0800a878 <pbuf_header>:
pbuf_header():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:667
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
 800a878:	2200      	movs	r2, #0
 800a87a:	f7ff bf7f 	b.w	800a77c <pbuf_header_impl>

0800a87e <pbuf_header_force>:
pbuf_header_force():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:677
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
 800a87e:	2201      	movs	r2, #1
 800a880:	f7ff bf7c 	b.w	800a77c <pbuf_header_impl>

0800a884 <pbuf_free>:
pbuf_free():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:716
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:721
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a888:	4604      	mov	r4, r0
 800a88a:	b950      	cbnz	r0, 800a8a2 <pbuf_free+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:726 (discriminator 1)
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a88c:	4625      	mov	r5, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:722 (discriminator 1)
    LWIP_ASSERT("p != NULL", p != NULL);
 800a88e:	4b2b      	ldr	r3, [pc, #172]	; (800a93c <pbuf_free+0xb8>)
 800a890:	f240 22d2 	movw	r2, #722	; 0x2d2
 800a894:	492a      	ldr	r1, [pc, #168]	; (800a940 <pbuf_free+0xbc>)
 800a896:	482b      	ldr	r0, [pc, #172]	; (800a944 <pbuf_free+0xc0>)
 800a898:	f002 fb80 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:791
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 800a89c:	4628      	mov	r0, r5
 800a89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:732
  LWIP_ASSERT("pbuf_free: sane type",
 800a8a2:	7b03      	ldrb	r3, [r0, #12]
 800a8a4:	2b03      	cmp	r3, #3
 800a8a6:	d906      	bls.n	800a8b6 <pbuf_free+0x32>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:732 (discriminator 1)
 800a8a8:	4b24      	ldr	r3, [pc, #144]	; (800a93c <pbuf_free+0xb8>)
 800a8aa:	f240 22de 	movw	r2, #734	; 0x2de
 800a8ae:	4926      	ldr	r1, [pc, #152]	; (800a948 <pbuf_free+0xc4>)
 800a8b0:	4824      	ldr	r0, [pc, #144]	; (800a944 <pbuf_free+0xc0>)
 800a8b2:	f002 fb73 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:716
{
 800a8b6:	2500      	movs	r5, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:747
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a8b8:	4f20      	ldr	r7, [pc, #128]	; (800a93c <pbuf_free+0xb8>)
 800a8ba:	f8df 9094 	ldr.w	r9, [pc, #148]	; 800a950 <pbuf_free+0xcc>
 800a8be:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800a944 <pbuf_free+0xc0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:745
    SYS_ARCH_PROTECT(old_level);
 800a8c2:	f7f6 faa5 	bl	8000e10 <sys_arch_protect>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:747
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a8c6:	89e3      	ldrh	r3, [r4, #14]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:745
    SYS_ARCH_PROTECT(old_level);
 800a8c8:	4682      	mov	sl, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:747
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a8ca:	b933      	cbnz	r3, 800a8da <pbuf_free+0x56>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:747 (discriminator 1)
 800a8cc:	463b      	mov	r3, r7
 800a8ce:	f240 22eb 	movw	r2, #747	; 0x2eb
 800a8d2:	4649      	mov	r1, r9
 800a8d4:	4640      	mov	r0, r8
 800a8d6:	f002 fb61 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:749
    ref = --(p->ref);
 800a8da:	89e6      	ldrh	r6, [r4, #14]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:750
    SYS_ARCH_UNPROTECT(old_level);
 800a8dc:	4650      	mov	r0, sl
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:749
    ref = --(p->ref);
 800a8de:	3e01      	subs	r6, #1
 800a8e0:	b2b6      	uxth	r6, r6
 800a8e2:	81e6      	strh	r6, [r4, #14]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:750
    SYS_ARCH_UNPROTECT(old_level);
 800a8e4:	f7f6 faa0 	bl	8000e28 <sys_arch_unprotect>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:752
    if (ref == 0) {
 800a8e8:	2e00      	cmp	r6, #0
 800a8ea:	d1d7      	bne.n	800a89c <pbuf_free+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:759
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a8ec:	7b63      	ldrb	r3, [r4, #13]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:754
      q = p->next;
 800a8ee:	6826      	ldr	r6, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:759
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a8f0:	079b      	lsls	r3, r3, #30
 800a8f2:	d511      	bpl.n	800a918 <pbuf_free+0x94>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:761
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a8f4:	6923      	ldr	r3, [r4, #16]
 800a8f6:	b933      	cbnz	r3, 800a906 <pbuf_free+0x82>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:761 (discriminator 1)
 800a8f8:	463b      	mov	r3, r7
 800a8fa:	f240 22f9 	movw	r2, #761	; 0x2f9
 800a8fe:	4913      	ldr	r1, [pc, #76]	; (800a94c <pbuf_free+0xc8>)
 800a900:	4640      	mov	r0, r8
 800a902:	f002 fb4b 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:762
        pc->custom_free_function(p);
 800a906:	6923      	ldr	r3, [r4, #16]
 800a908:	4620      	mov	r0, r4
 800a90a:	4798      	blx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:777
      count++;
 800a90c:	3501      	adds	r5, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:739
  while (p != NULL) {
 800a90e:	4634      	mov	r4, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:777
      count++;
 800a910:	b2ed      	uxtb	r5, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:739
  while (p != NULL) {
 800a912:	2e00      	cmp	r6, #0
 800a914:	d1d5      	bne.n	800a8c2 <pbuf_free+0x3e>
 800a916:	e7c1      	b.n	800a89c <pbuf_free+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:756
      type = p->type;
 800a918:	7b23      	ldrb	r3, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:767
        if (type == PBUF_POOL) {
 800a91a:	2b03      	cmp	r3, #3
 800a91c:	d104      	bne.n	800a928 <pbuf_free+0xa4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:768
          memp_free(MEMP_PBUF_POOL, p);
 800a91e:	4621      	mov	r1, r4
 800a920:	200c      	movs	r0, #12
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:771
          memp_free(MEMP_PBUF, p);
 800a922:	f001 fccf 	bl	800c2c4 <memp_free>
 800a926:	e7f1      	b.n	800a90c <pbuf_free+0x88>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:770
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800a928:	3b01      	subs	r3, #1
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d802      	bhi.n	800a934 <pbuf_free+0xb0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:771
          memp_free(MEMP_PBUF, p);
 800a92e:	4621      	mov	r1, r4
 800a930:	200b      	movs	r0, #11
 800a932:	e7f6      	b.n	800a922 <pbuf_free+0x9e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:774
          mem_free(p);
 800a934:	4620      	mov	r0, r4
 800a936:	f7ff fd39 	bl	800a3ac <mem_free>
 800a93a:	e7e7      	b.n	800a90c <pbuf_free+0x88>
 800a93c:	08020262 	.word	0x08020262
 800a940:	080202fe 	.word	0x080202fe
 800a944:	0800e36a 	.word	0x0800e36a
 800a948:	08020216 	.word	0x08020216
 800a94c:	08020241 	.word	0x08020241
 800a950:	0802022b 	.word	0x0802022b

0800a954 <pbuf_alloc>:
pbuf_alloc():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:256
  switch (layer) {
 800a954:	2804      	cmp	r0, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:249
{
 800a956:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a95a:	460e      	mov	r6, r1
 800a95c:	4617      	mov	r7, r2
 800a95e:	d808      	bhi.n	800a972 <pbuf_alloc+0x1e>
 800a960:	4b5d      	ldr	r3, [pc, #372]	; (800aad8 <pbuf_alloc+0x184>)
 800a962:	5c1d      	ldrb	r5, [r3, r0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:282
  switch (type) {
 800a964:	2a03      	cmp	r2, #3
 800a966:	f200 80b1 	bhi.w	800aacc <pbuf_alloc+0x178>
 800a96a:	e8df f002 	tbb	[pc, r2]
 800a96e:	a184      	.short	0xa184
 800a970:	0aa1      	.short	0x0aa1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:278 (discriminator 1)
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800a972:	4b5a      	ldr	r3, [pc, #360]	; (800aadc <pbuf_alloc+0x188>)
 800a974:	f44f 728b 	mov.w	r2, #278	; 0x116
 800a978:	4959      	ldr	r1, [pc, #356]	; (800aae0 <pbuf_alloc+0x18c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:396 (discriminator 1)
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a97a:	485a      	ldr	r0, [pc, #360]	; (800aae4 <pbuf_alloc+0x190>)
 800a97c:	f002 fb0e 	bl	800cf9c <iprintf>
 800a980:	e004      	b.n	800a98c <pbuf_alloc+0x38>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:285
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a982:	200c      	movs	r0, #12
 800a984:	f001 fc6e 	bl	800c264 <memp_malloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:287
    if (p == NULL) {
 800a988:	4604      	mov	r4, r0
 800a98a:	b918      	cbnz	r0, 800a994 <pbuf_alloc+0x40>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:397 (discriminator 1)
    return NULL;
 800a98c:	2400      	movs	r4, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:405
}
 800a98e:	4620      	mov	r0, r4
 800a990:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:291
    p->type = type;
 800a994:	2303      	movs	r3, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:302
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800a996:	f500 67c1 	add.w	r7, r0, #1544	; 0x608
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:299
    p->tot_len = length;
 800a99a:	8106      	strh	r6, [r0, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:291
    p->type = type;
 800a99c:	7303      	strb	r3, [r0, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:292
    p->next = NULL;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	6003      	str	r3, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:295
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800a9a2:	1943      	adds	r3, r0, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:301
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800a9a4:	3503      	adds	r5, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:295
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800a9a6:	3313      	adds	r3, #19
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:301
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800a9a8:	f025 0503 	bic.w	r5, r5, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:295
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800a9ac:	f023 0303 	bic.w	r3, r3, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:301
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800a9b0:	f5c5 65bf 	rsb	r5, r5, #1528	; 0x5f8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:295
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800a9b4:	6043      	str	r3, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:301
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800a9b6:	42b5      	cmp	r5, r6
 800a9b8:	bf28      	it	cs
 800a9ba:	4635      	movcs	r5, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:302
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800a9bc:	442b      	add	r3, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:301
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800a9be:	8145      	strh	r5, [r0, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:302
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800a9c0:	429f      	cmp	r7, r3
 800a9c2:	d206      	bcs.n	800a9d2 <pbuf_alloc+0x7e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:302 (discriminator 1)
 800a9c4:	4b45      	ldr	r3, [pc, #276]	; (800aadc <pbuf_alloc+0x188>)
 800a9c6:	f44f 7298 	mov.w	r2, #304	; 0x130
 800a9ca:	4947      	ldr	r1, [pc, #284]	; (800aae8 <pbuf_alloc+0x194>)
 800a9cc:	4845      	ldr	r0, [pc, #276]	; (800aae4 <pbuf_alloc+0x190>)
 800a9ce:	f002 fae5 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:308
    p->ref = 1;
 800a9d2:	2301      	movs	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:317
    while (rem_len > 0) {
 800a9d4:	46a3      	mov	fp, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:332
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800a9d6:	f8df 8104 	ldr.w	r8, [pc, #260]	; 800aadc <pbuf_alloc+0x188>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:308
    p->ref = 1;
 800a9da:	81e3      	strh	r3, [r4, #14]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:315
    rem_len = length - p->len;
 800a9dc:	8963      	ldrh	r3, [r4, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:332
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800a9de:	f8df a114 	ldr.w	sl, [pc, #276]	; 800aaf4 <pbuf_alloc+0x1a0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:315
    rem_len = length - p->len;
 800a9e2:	1af6      	subs	r6, r6, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:332
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800a9e4:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 800aae4 <pbuf_alloc+0x190>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:317
    while (rem_len > 0) {
 800a9e8:	2e00      	cmp	r6, #0
 800a9ea:	dc04      	bgt.n	800a9f6 <pbuf_alloc+0xa2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:400
  p->ref = 1;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	81e3      	strh	r3, [r4, #14]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:402
  p->flags = 0;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	7363      	strb	r3, [r4, #13]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:404
  return p;
 800a9f4:	e7cb      	b.n	800a98e <pbuf_alloc+0x3a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:318
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a9f6:	200c      	movs	r0, #12
 800a9f8:	f001 fc34 	bl	800c264 <memp_malloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:319
      if (q == NULL) {
 800a9fc:	4605      	mov	r5, r0
 800a9fe:	b918      	cbnz	r0, 800aa08 <pbuf_alloc+0xb4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:322
        pbuf_free(p);
 800aa00:	4620      	mov	r0, r4
 800aa02:	f7ff ff3f 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:324
        return NULL;
 800aa06:	e7c1      	b.n	800a98c <pbuf_alloc+0x38>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:326
      q->type = type;
 800aa08:	2303      	movs	r3, #3
 800aa0a:	8183      	strh	r3, [r0, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:328
      q->next = NULL;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	6003      	str	r3, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:332
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800aa10:	f64f 73ff 	movw	r3, #65535	; 0xffff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:330
      r->next = q;
 800aa14:	f8cb 0000 	str.w	r0, [fp]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:332
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800aa18:	429e      	cmp	r6, r3
 800aa1a:	d106      	bne.n	800aa2a <pbuf_alloc+0xd6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:332 (discriminator 1)
 800aa1c:	4643      	mov	r3, r8
 800aa1e:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800aa22:	4651      	mov	r1, sl
 800aa24:	4648      	mov	r0, r9
 800aa26:	f002 fab9 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:333
      q->tot_len = (u16_t)rem_len;
 800aa2a:	b2b3      	uxth	r3, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:335
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800aa2c:	f5b3 6fbf 	cmp.w	r3, #1528	; 0x5f8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:333
      q->tot_len = (u16_t)rem_len;
 800aa30:	812b      	strh	r3, [r5, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:335
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800aa32:	bf28      	it	cs
 800aa34:	f44f 63bf 	movcs.w	r3, #1528	; 0x5f8
 800aa38:	816b      	strh	r3, [r5, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:336
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800aa3a:	f105 0310 	add.w	r3, r5, #16
 800aa3e:	606b      	str	r3, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:337
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800aa40:	079b      	lsls	r3, r3, #30
 800aa42:	d006      	beq.n	800aa52 <pbuf_alloc+0xfe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:337 (discriminator 1)
 800aa44:	4643      	mov	r3, r8
 800aa46:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800aa4a:	4928      	ldr	r1, [pc, #160]	; (800aaec <pbuf_alloc+0x198>)
 800aa4c:	4648      	mov	r0, r9
 800aa4e:	f002 faa5 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:339
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800aa52:	8962      	ldrh	r2, [r4, #10]
 800aa54:	6863      	ldr	r3, [r4, #4]
 800aa56:	4413      	add	r3, r2
 800aa58:	429f      	cmp	r7, r3
 800aa5a:	d206      	bcs.n	800aa6a <pbuf_alloc+0x116>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:339 (discriminator 1)
 800aa5c:	4643      	mov	r3, r8
 800aa5e:	f240 1255 	movw	r2, #341	; 0x155
 800aa62:	4921      	ldr	r1, [pc, #132]	; (800aae8 <pbuf_alloc+0x194>)
 800aa64:	4648      	mov	r0, r9
 800aa66:	f002 fa99 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:342
      q->ref = 1;
 800aa6a:	2301      	movs	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:344
      rem_len -= q->len;
 800aa6c:	46ab      	mov	fp, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:342
      q->ref = 1;
 800aa6e:	81eb      	strh	r3, [r5, #14]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:344
      rem_len -= q->len;
 800aa70:	896b      	ldrh	r3, [r5, #10]
 800aa72:	1af6      	subs	r6, r6, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:346
      r = q;
 800aa74:	e7b8      	b.n	800a9e8 <pbuf_alloc+0x94>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:354
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800aa76:	f105 0013 	add.w	r0, r5, #19
 800aa7a:	1ccb      	adds	r3, r1, #3
 800aa7c:	f020 0003 	bic.w	r0, r0, #3
 800aa80:	f023 0303 	bic.w	r3, r3, #3
 800aa84:	4418      	add	r0, r3
 800aa86:	b280      	uxth	r0, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:357
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800aa88:	4298      	cmp	r0, r3
 800aa8a:	f4ff af7f 	bcc.w	800a98c <pbuf_alloc+0x38>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:362
      p = (struct pbuf*)mem_malloc(alloc_len);
 800aa8e:	f7ff fdd5 	bl	800a63c <mem_malloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:365
    if (p == NULL) {
 800aa92:	4604      	mov	r4, r0
 800aa94:	2800      	cmp	r0, #0
 800aa96:	f43f af79 	beq.w	800a98c <pbuf_alloc+0x38>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:369
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800aa9a:	4405      	add	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:371
    p->next = NULL;
 800aa9c:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:370
    p->len = p->tot_len = length;
 800aa9e:	8106      	strh	r6, [r0, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:369
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800aaa0:	3513      	adds	r5, #19
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:370
    p->len = p->tot_len = length;
 800aaa2:	8146      	strh	r6, [r0, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:371
    p->next = NULL;
 800aaa4:	6003      	str	r3, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:369
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800aaa6:	f025 0503 	bic.w	r5, r5, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:372
    p->type = type;
 800aaaa:	7303      	strb	r3, [r0, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:369
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800aaac:	6045      	str	r5, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:374
    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800aaae:	e79d      	b.n	800a9ec <pbuf_alloc+0x98>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:382
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800aab0:	200b      	movs	r0, #11
 800aab2:	f001 fbd7 	bl	800c264 <memp_malloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:383
    if (p == NULL) {
 800aab6:	4604      	mov	r4, r0
 800aab8:	2800      	cmp	r0, #0
 800aaba:	f43f af67 	beq.w	800a98c <pbuf_alloc+0x38>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:390
    p->payload = NULL;
 800aabe:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:391
    p->len = p->tot_len = length;
 800aac0:	8106      	strh	r6, [r0, #8]
 800aac2:	8146      	strh	r6, [r0, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:390
    p->payload = NULL;
 800aac4:	6043      	str	r3, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:392
    p->next = NULL;
 800aac6:	6003      	str	r3, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:393
    p->type = type;
 800aac8:	7307      	strb	r7, [r0, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:394
    break;
 800aaca:	e78f      	b.n	800a9ec <pbuf_alloc+0x98>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:396 (discriminator 1)
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800aacc:	4b03      	ldr	r3, [pc, #12]	; (800aadc <pbuf_alloc+0x188>)
 800aace:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800aad2:	4907      	ldr	r1, [pc, #28]	; (800aaf0 <pbuf_alloc+0x19c>)
 800aad4:	e751      	b.n	800a97a <pbuf_alloc+0x26>
 800aad6:	bf00      	nop
 800aad8:	0801fff8 	.word	0x0801fff8
 800aadc:	08020262 	.word	0x08020262
 800aae0:	0801fffd 	.word	0x0801fffd
 800aae4:	0800e36a 	.word	0x0800e36a
 800aae8:	08020018 	.word	0x08020018
 800aaec:	0802005d 	.word	0x0802005d
 800aaf0:	0802008a 	.word	0x0802008a
 800aaf4:	08020049 	.word	0x08020049

0800aaf8 <pbuf_realloc>:
pbuf_realloc():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:494
{
 800aaf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aafc:	460d      	mov	r5, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:499
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800aafe:	4604      	mov	r4, r0
 800ab00:	b930      	cbnz	r0, 800ab10 <pbuf_realloc+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:499 (discriminator 1)
 800ab02:	4b2e      	ldr	r3, [pc, #184]	; (800abbc <pbuf_realloc+0xc4>)
 800ab04:	f240 12f3 	movw	r2, #499	; 0x1f3
 800ab08:	492d      	ldr	r1, [pc, #180]	; (800abc0 <pbuf_realloc+0xc8>)
 800ab0a:	482e      	ldr	r0, [pc, #184]	; (800abc4 <pbuf_realloc+0xcc>)
 800ab0c:	f002 fa46 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:500
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800ab10:	7b23      	ldrb	r3, [r4, #12]
 800ab12:	2b03      	cmp	r3, #3
 800ab14:	d906      	bls.n	800ab24 <pbuf_realloc+0x2c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:500 (discriminator 4)
 800ab16:	4b29      	ldr	r3, [pc, #164]	; (800abbc <pbuf_realloc+0xc4>)
 800ab18:	f240 12f7 	movw	r2, #503	; 0x1f7
 800ab1c:	492a      	ldr	r1, [pc, #168]	; (800abc8 <pbuf_realloc+0xd0>)
 800ab1e:	4829      	ldr	r0, [pc, #164]	; (800abc4 <pbuf_realloc+0xcc>)
 800ab20:	f002 fa3c 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:506
  if (new_len >= p->tot_len) {
 800ab24:	8926      	ldrh	r6, [r4, #8]
 800ab26:	42ae      	cmp	r6, r5
 800ab28:	d945      	bls.n	800abb6 <pbuf_realloc+0xbe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:513
  grow = new_len - p->tot_len;
 800ab2a:	1bae      	subs	r6, r5, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:523
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800ab2c:	4f23      	ldr	r7, [pc, #140]	; (800abbc <pbuf_realloc+0xc4>)
 800ab2e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800abd4 <pbuf_realloc+0xdc>
 800ab32:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800abc4 <pbuf_realloc+0xcc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:519
  while (rem_len > q->len) {
 800ab36:	8963      	ldrh	r3, [r4, #10]
 800ab38:	42ab      	cmp	r3, r5
 800ab3a:	d319      	bcc.n	800ab70 <pbuf_realloc+0x78>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:534
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800ab3c:	7b22      	ldrb	r2, [r4, #12]
 800ab3e:	2a00      	cmp	r2, #0
 800ab40:	d131      	bne.n	800aba6 <pbuf_realloc+0xae>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:534 (discriminator 1)
 800ab42:	42ab      	cmp	r3, r5
 800ab44:	d02f      	beq.n	800aba6 <pbuf_realloc+0xae>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:536
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ab46:	7b63      	ldrb	r3, [r4, #13]
 800ab48:	079b      	lsls	r3, r3, #30
 800ab4a:	d42c      	bmi.n	800aba6 <pbuf_realloc+0xae>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:540
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800ab4c:	6861      	ldr	r1, [r4, #4]
 800ab4e:	4620      	mov	r0, r4
 800ab50:	1b09      	subs	r1, r1, r4
 800ab52:	4429      	add	r1, r5
 800ab54:	b289      	uxth	r1, r1
 800ab56:	f7ff fce3 	bl	800a520 <mem_trim>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:541
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	bb18      	cbnz	r0, 800aba6 <pbuf_realloc+0xae>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:541 (discriminator 1)
 800ab5e:	4b17      	ldr	r3, [pc, #92]	; (800abbc <pbuf_realloc+0xc4>)
 800ab60:	f240 221d 	movw	r2, #541	; 0x21d
 800ab64:	4919      	ldr	r1, [pc, #100]	; (800abcc <pbuf_realloc+0xd4>)
 800ab66:	4817      	ldr	r0, [pc, #92]	; (800abc4 <pbuf_realloc+0xcc>)
 800ab68:	f002 fa18 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:544 (discriminator 1)
  q->len = rem_len;
 800ab6c:	8164      	strh	r4, [r4, #10]
 800ab6e:	deff      	udf	#255	; 0xff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:521
    rem_len -= q->len;
 800ab70:	1aed      	subs	r5, r5, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:523
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800ab72:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800ab76:	429e      	cmp	r6, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:521
    rem_len -= q->len;
 800ab78:	b2ad      	uxth	r5, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:523
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800ab7a:	dd06      	ble.n	800ab8a <pbuf_realloc+0x92>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:523 (discriminator 1)
 800ab7c:	463b      	mov	r3, r7
 800ab7e:	f240 220b 	movw	r2, #523	; 0x20b
 800ab82:	4649      	mov	r1, r9
 800ab84:	4640      	mov	r0, r8
 800ab86:	f002 fa09 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:524
    q->tot_len += (u16_t)grow;
 800ab8a:	8923      	ldrh	r3, [r4, #8]
 800ab8c:	4433      	add	r3, r6
 800ab8e:	8123      	strh	r3, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:526
    q = q->next;
 800ab90:	6824      	ldr	r4, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:527
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ab92:	2c00      	cmp	r4, #0
 800ab94:	d1cf      	bne.n	800ab36 <pbuf_realloc+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:527 (discriminator 1)
 800ab96:	463b      	mov	r3, r7
 800ab98:	f240 220f 	movw	r2, #527	; 0x20f
 800ab9c:	490c      	ldr	r1, [pc, #48]	; (800abd0 <pbuf_realloc+0xd8>)
 800ab9e:	4640      	mov	r0, r8
 800aba0:	f002 f9fc 	bl	800cf9c <iprintf>
 800aba4:	e7c7      	b.n	800ab36 <pbuf_realloc+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:548
  if (q->next != NULL) {
 800aba6:	6820      	ldr	r0, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:544
  q->len = rem_len;
 800aba8:	8165      	strh	r5, [r4, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:545
  q->tot_len = q->len;
 800abaa:	8125      	strh	r5, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:548
  if (q->next != NULL) {
 800abac:	b108      	cbz	r0, 800abb2 <pbuf_realloc+0xba>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:550
    pbuf_free(q->next);
 800abae:	f7ff fe69 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:553
  q->next = NULL;
 800abb2:	2300      	movs	r3, #0
 800abb4:	6023      	str	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:555
}
 800abb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abba:	bf00      	nop
 800abbc:	08020262 	.word	0x08020262
 800abc0:	080202f0 	.word	0x080202f0
 800abc4:	0800e36a 	.word	0x0800e36a
 800abc8:	08020308 	.word	0x08020308
 800abcc:	0802034c 	.word	0x0802034c
 800abd0:	08020334 	.word	0x08020334
 800abd4:	08020323 	.word	0x08020323

0800abd8 <pbuf_clen>:
pbuf_clen():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:801
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800abd8:	4603      	mov	r3, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:805
  u16_t len;

  len = 0;
  while (p != NULL) {
 800abda:	2200      	movs	r2, #0
 800abdc:	b290      	uxth	r0, r2
 800abde:	3201      	adds	r2, #1
 800abe0:	b903      	cbnz	r3, 800abe4 <pbuf_clen+0xc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:810
    ++len;
    p = p->next;
  }
  return len;
}
 800abe2:	4770      	bx	lr
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:807
    p = p->next;
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	e7f9      	b.n	800abdc <pbuf_clen+0x4>

0800abe8 <pbuf_ref>:
pbuf_ref():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:821
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800abe8:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:823
  /* pbuf given? */
  if (p != NULL) {
 800abea:	4604      	mov	r4, r0
 800abec:	b188      	cbz	r0, 800ac12 <pbuf_ref+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:824
    SYS_ARCH_INC(p->ref, 1);
 800abee:	f7f6 f90f 	bl	8000e10 <sys_arch_protect>
 800abf2:	89e3      	ldrh	r3, [r4, #14]
 800abf4:	3301      	adds	r3, #1
 800abf6:	81e3      	strh	r3, [r4, #14]
 800abf8:	f7f6 f916 	bl	8000e28 <sys_arch_unprotect>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:825
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800abfc:	89e3      	ldrh	r3, [r4, #14]
 800abfe:	b943      	cbnz	r3, 800ac12 <pbuf_ref+0x2a>
 800ac00:	4b04      	ldr	r3, [pc, #16]	; (800ac14 <pbuf_ref+0x2c>)
 800ac02:	f240 3239 	movw	r2, #825	; 0x339
 800ac06:	4904      	ldr	r1, [pc, #16]	; (800ac18 <pbuf_ref+0x30>)
 800ac08:	4804      	ldr	r0, [pc, #16]	; (800ac1c <pbuf_ref+0x34>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:827
  }
}
 800ac0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:825
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ac0e:	f002 b9c5 	b.w	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:827
}
 800ac12:	bd10      	pop	{r4, pc}
 800ac14:	08020262 	.word	0x08020262
 800ac18:	08020368 	.word	0x08020368
 800ac1c:	0800e36a 	.word	0x0800e36a

0800ac20 <pbuf_cat>:
pbuf_cat():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:841
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ac20:	b570      	push	{r4, r5, r6, lr}
 800ac22:	460d      	mov	r5, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:844
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ac24:	4604      	mov	r4, r0
 800ac26:	b100      	cbz	r0, 800ac2a <pbuf_cat+0xa>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:844 (discriminator 2)
 800ac28:	b961      	cbnz	r1, 800ac44 <pbuf_cat+0x24>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:844
 800ac2a:	4b15      	ldr	r3, [pc, #84]	; (800ac80 <pbuf_cat+0x60>)
 800ac2c:	f240 324d 	movw	r2, #845	; 0x34d
 800ac30:	4914      	ldr	r1, [pc, #80]	; (800ac84 <pbuf_cat+0x64>)
 800ac32:	4815      	ldr	r0, [pc, #84]	; (800ac88 <pbuf_cat+0x68>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:862
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ac34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:844
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ac38:	f002 b9b0 	b.w	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:850 (discriminator 3)
    p->tot_len += t->tot_len;
 800ac3c:	8929      	ldrh	r1, [r5, #8]
 800ac3e:	440b      	add	r3, r1
 800ac40:	8123      	strh	r3, [r4, #8]
 800ac42:	4614      	mov	r4, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:848 (discriminator 1)
  for (p = h; p->next != NULL; p = p->next) {
 800ac44:	6822      	ldr	r2, [r4, #0]
 800ac46:	8923      	ldrh	r3, [r4, #8]
 800ac48:	2a00      	cmp	r2, #0
 800ac4a:	d1f7      	bne.n	800ac3c <pbuf_cat+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:853
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ac4c:	8962      	ldrh	r2, [r4, #10]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d00f      	beq.n	800ac72 <pbuf_cat+0x52>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:853 (discriminator 1)
 800ac52:	4b0b      	ldr	r3, [pc, #44]	; (800ac80 <pbuf_cat+0x60>)
 800ac54:	f240 3255 	movw	r2, #853	; 0x355
 800ac58:	490c      	ldr	r1, [pc, #48]	; (800ac8c <pbuf_cat+0x6c>)
 800ac5a:	480b      	ldr	r0, [pc, #44]	; (800ac88 <pbuf_cat+0x68>)
 800ac5c:	f002 f99e 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:854 (discriminator 1)
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ac60:	6823      	ldr	r3, [r4, #0]
 800ac62:	b133      	cbz	r3, 800ac72 <pbuf_cat+0x52>
 800ac64:	4b06      	ldr	r3, [pc, #24]	; (800ac80 <pbuf_cat+0x60>)
 800ac66:	f240 3256 	movw	r2, #854	; 0x356
 800ac6a:	4909      	ldr	r1, [pc, #36]	; (800ac90 <pbuf_cat+0x70>)
 800ac6c:	4806      	ldr	r0, [pc, #24]	; (800ac88 <pbuf_cat+0x68>)
 800ac6e:	f002 f995 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:856
  p->tot_len += t->tot_len;
 800ac72:	892a      	ldrh	r2, [r5, #8]
 800ac74:	8923      	ldrh	r3, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:858
  p->next = t;
 800ac76:	6025      	str	r5, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:856
  p->tot_len += t->tot_len;
 800ac78:	4413      	add	r3, r2
 800ac7a:	8123      	strh	r3, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:862
}
 800ac7c:	bd70      	pop	{r4, r5, r6, pc}
 800ac7e:	bf00      	nop
 800ac80:	08020262 	.word	0x08020262
 800ac84:	080200c9 	.word	0x080200c9
 800ac88:	0800e36a 	.word	0x0800e36a
 800ac8c:	080200fe 	.word	0x080200fe
 800ac90:	0802012b 	.word	0x0802012b

0800ac94 <pbuf_chain>:
pbuf_chain():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:883
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800ac94:	b510      	push	{r4, lr}
 800ac96:	460c      	mov	r4, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:884
  pbuf_cat(h, t);
 800ac98:	f7ff ffc2 	bl	800ac20 <pbuf_cat>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:886
  /* t is now referenced by h */
  pbuf_ref(t);
 800ac9c:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:888
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800ac9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:886
  pbuf_ref(t);
 800aca2:	f7ff bfa1 	b.w	800abe8 <pbuf_ref>
	...

0800aca8 <pbuf_copy>:
pbuf_copy():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:949
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800aca8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acac:	460c      	mov	r4, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:956

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800acae:	4605      	mov	r5, r0
 800acb0:	b120      	cbz	r0, 800acbc <pbuf_copy+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:956 (discriminator 2)
 800acb2:	b119      	cbz	r1, 800acbc <pbuf_copy+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:956 (discriminator 4)
 800acb4:	8902      	ldrh	r2, [r0, #8]
 800acb6:	890b      	ldrh	r3, [r1, #8]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d20a      	bcs.n	800acd2 <pbuf_copy+0x2a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:956 (discriminator 5)
 800acbc:	4b36      	ldr	r3, [pc, #216]	; (800ad98 <pbuf_copy+0xf0>)
 800acbe:	f240 32bd 	movw	r2, #957	; 0x3bd
 800acc2:	4936      	ldr	r1, [pc, #216]	; (800ad9c <pbuf_copy+0xf4>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:984
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800acc4:	4836      	ldr	r0, [pc, #216]	; (800ada0 <pbuf_copy+0xf8>)
 800acc6:	f002 f969 	bl	800cf9c <iprintf>
 800acca:	f06f 000f 	mvn.w	r0, #15
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:1000
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 800acce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:950
  u16_t offset_to=0, offset_from=0, len;
 800acd2:	f04f 0b00 	mov.w	fp, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:973
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800acd6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800ad98 <pbuf_copy+0xf0>
 800acda:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800adb0 <pbuf_copy+0x108>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:950
  u16_t offset_to=0, offset_from=0, len;
 800acde:	465f      	mov	r7, fp
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:973
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ace0:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 800ada0 <pbuf_copy+0xf8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:963
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ace4:	896e      	ldrh	r6, [r5, #10]
 800ace6:	8963      	ldrh	r3, [r4, #10]
 800ace8:	1bf6      	subs	r6, r6, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:970
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800acea:	6868      	ldr	r0, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:963
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800acec:	eba3 030b 	sub.w	r3, r3, fp
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:970
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800acf0:	6861      	ldr	r1, [r4, #4]
 800acf2:	4438      	add	r0, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:963
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800acf4:	429e      	cmp	r6, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:970
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800acf6:	4459      	add	r1, fp
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:965
      len = p_from->len - offset_from;
 800acf8:	bfac      	ite	ge
 800acfa:	b29e      	uxthge	r6, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:968
      len = p_to->len - offset_to;
 800acfc:	b2b6      	uxthlt	r6, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:971
    offset_to += len;
 800acfe:	4437      	add	r7, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:970
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800ad00:	4632      	mov	r2, r6
 800ad02:	f002 f935 	bl	800cf70 <memcpy>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:973
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ad06:	896b      	ldrh	r3, [r5, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:971
    offset_to += len;
 800ad08:	b2bf      	uxth	r7, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:972
    offset_from += len;
 800ad0a:	445e      	add	r6, fp
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:973
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ad0c:	42bb      	cmp	r3, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:972
    offset_from += len;
 800ad0e:	fa1f fb86 	uxth.w	fp, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:973
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ad12:	d206      	bcs.n	800ad22 <pbuf_copy+0x7a>
 800ad14:	4643      	mov	r3, r8
 800ad16:	f240 32cd 	movw	r2, #973	; 0x3cd
 800ad1a:	4651      	mov	r1, sl
 800ad1c:	4648      	mov	r0, r9
 800ad1e:	f002 f93d 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:974
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ad22:	8963      	ldrh	r3, [r4, #10]
 800ad24:	455b      	cmp	r3, fp
 800ad26:	d206      	bcs.n	800ad36 <pbuf_copy+0x8e>
 800ad28:	4643      	mov	r3, r8
 800ad2a:	f240 32ce 	movw	r2, #974	; 0x3ce
 800ad2e:	491d      	ldr	r1, [pc, #116]	; (800ada4 <pbuf_copy+0xfc>)
 800ad30:	4648      	mov	r0, r9
 800ad32:	f002 f933 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:975
    if (offset_from >= p_from->len) {
 800ad36:	8963      	ldrh	r3, [r4, #10]
 800ad38:	455b      	cmp	r3, fp
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:980
    if (offset_to == p_to->len) {
 800ad3a:	896b      	ldrh	r3, [r5, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:978
      p_from = p_from->next;
 800ad3c:	bf9c      	itt	ls
 800ad3e:	6824      	ldrls	r4, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:977
      offset_from = 0;
 800ad40:	f04f 0b00 	movls.w	fp, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:980
    if (offset_to == p_to->len) {
 800ad44:	42bb      	cmp	r3, r7
 800ad46:	d108      	bne.n	800ad5a <pbuf_copy+0xb2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:983
      p_to = p_to->next;
 800ad48:	682d      	ldr	r5, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:984
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800ad4a:	b92d      	cbnz	r5, 800ad58 <pbuf_copy+0xb0>
 800ad4c:	b314      	cbz	r4, 800ad94 <pbuf_copy+0xec>
 800ad4e:	4b12      	ldr	r3, [pc, #72]	; (800ad98 <pbuf_copy+0xf0>)
 800ad50:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ad54:	4914      	ldr	r1, [pc, #80]	; (800ada8 <pbuf_copy+0x100>)
 800ad56:	e7b5      	b.n	800acc4 <pbuf_copy+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:982
      offset_to = 0;
 800ad58:	2700      	movs	r7, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:987
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ad5a:	b17c      	cbz	r4, 800ad7c <pbuf_copy+0xd4>
 800ad5c:	8962      	ldrh	r2, [r4, #10]
 800ad5e:	8923      	ldrh	r3, [r4, #8]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d10b      	bne.n	800ad7c <pbuf_copy+0xd4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:989
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ad64:	6823      	ldr	r3, [r4, #0]
 800ad66:	b14b      	cbz	r3, 800ad7c <pbuf_copy+0xd4>
 800ad68:	4b0b      	ldr	r3, [pc, #44]	; (800ad98 <pbuf_copy+0xf0>)
 800ad6a:	f240 32de 	movw	r2, #990	; 0x3de
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:994
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ad6e:	490f      	ldr	r1, [pc, #60]	; (800adac <pbuf_copy+0x104>)
 800ad70:	480b      	ldr	r0, [pc, #44]	; (800ada0 <pbuf_copy+0xf8>)
 800ad72:	f002 f913 	bl	800cf9c <iprintf>
 800ad76:	f06f 0005 	mvn.w	r0, #5
 800ad7a:	e7a8      	b.n	800acce <pbuf_copy+0x26>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:992
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ad7c:	896a      	ldrh	r2, [r5, #10]
 800ad7e:	892b      	ldrh	r3, [r5, #8]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d105      	bne.n	800ad90 <pbuf_copy+0xe8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:994
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ad84:	682b      	ldr	r3, [r5, #0]
 800ad86:	b11b      	cbz	r3, 800ad90 <pbuf_copy+0xe8>
 800ad88:	4b03      	ldr	r3, [pc, #12]	; (800ad98 <pbuf_copy+0xf0>)
 800ad8a:	f240 32e3 	movw	r2, #995	; 0x3e3
 800ad8e:	e7ee      	b.n	800ad6e <pbuf_copy+0xc6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:997
  } while (p_from);
 800ad90:	2c00      	cmp	r4, #0
 800ad92:	d1a7      	bne.n	800ace4 <pbuf_copy+0x3c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:999
  return ERR_OK;
 800ad94:	4620      	mov	r0, r4
 800ad96:	e79a      	b.n	800acce <pbuf_copy+0x26>
 800ad98:	08020262 	.word	0x08020262
 800ad9c:	0802013b 	.word	0x0802013b
 800ada0:	0800e36a 	.word	0x0800e36a
 800ada4:	08020182 	.word	0x08020182
 800ada8:	0802019d 	.word	0x0802019d
 800adac:	080201aa 	.word	0x080201aa
 800adb0:	0802016b 	.word	0x0802016b

0800adb4 <pbuf_copy_partial>:
pbuf_copy_partial():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:1016
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800adb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adb8:	460f      	mov	r7, r1
 800adba:	4690      	mov	r8, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:1022
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800adbc:	4606      	mov	r6, r0
 800adbe:	b950      	cbnz	r0, 800add6 <pbuf_copy_partial+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:1022 (discriminator 1)
 800adc0:	4635      	mov	r5, r6
 800adc2:	4b1b      	ldr	r3, [pc, #108]	; (800ae30 <pbuf_copy_partial+0x7c>)
 800adc4:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800adc8:	491a      	ldr	r1, [pc, #104]	; (800ae34 <pbuf_copy_partial+0x80>)
 800adca:	481b      	ldr	r0, [pc, #108]	; (800ae38 <pbuf_copy_partial+0x84>)
 800adcc:	f002 f8e6 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:1051
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 800add0:	4628      	mov	r0, r5
 800add2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:1023 (discriminator 2)
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800add6:	bb41      	cbnz	r1, 800ae2a <pbuf_copy_partial+0x76>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:1023 (discriminator 1)
 800add8:	4b15      	ldr	r3, [pc, #84]	; (800ae30 <pbuf_copy_partial+0x7c>)
 800adda:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800adde:	4917      	ldr	r1, [pc, #92]	; (800ae3c <pbuf_copy_partial+0x88>)
 800ade0:	463d      	mov	r5, r7
 800ade2:	4815      	ldr	r0, [pc, #84]	; (800ae38 <pbuf_copy_partial+0x84>)
 800ade4:	f002 f8da 	bl	800cf9c <iprintf>
 800ade8:	e7f2      	b.n	800add0 <pbuf_copy_partial+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:1033
    if ((offset != 0) && (offset >= p->len)) {
 800adea:	8972      	ldrh	r2, [r6, #10]
 800adec:	b153      	cbz	r3, 800ae04 <pbuf_copy_partial+0x50>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:1033 (discriminator 1)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d308      	bcc.n	800ae04 <pbuf_copy_partial+0x50>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:1035
      offset -= p->len;
 800adf2:	1a9b      	subs	r3, r3, r2
 800adf4:	b29b      	uxth	r3, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:1032 (discriminator 2)
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800adf6:	6836      	ldr	r6, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:1032 (discriminator 1)
 800adf8:	f1b8 0f00 	cmp.w	r8, #0
 800adfc:	d0e8      	beq.n	800add0 <pbuf_copy_partial+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:1032 (discriminator 3)
 800adfe:	2e00      	cmp	r6, #0
 800ae00:	d1f3      	bne.n	800adea <pbuf_copy_partial+0x36>
 800ae02:	e7e5      	b.n	800add0 <pbuf_copy_partial+0x1c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:1038
      buf_copy_len = p->len - offset;
 800ae04:	1ad4      	subs	r4, r2, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:1043
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800ae06:	6871      	ldr	r1, [r6, #4]
 800ae08:	1978      	adds	r0, r7, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:1038
      buf_copy_len = p->len - offset;
 800ae0a:	b2a4      	uxth	r4, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:1043
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800ae0c:	4419      	add	r1, r3
 800ae0e:	4544      	cmp	r4, r8
 800ae10:	bf28      	it	cs
 800ae12:	4644      	movcs	r4, r8
 800ae14:	4622      	mov	r2, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:1044
      copied_total += buf_copy_len;
 800ae16:	4425      	add	r5, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:1046
      len -= buf_copy_len;
 800ae18:	eba8 0404 	sub.w	r4, r8, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:1043
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800ae1c:	f002 f8a8 	bl	800cf70 <memcpy>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:1044
      copied_total += buf_copy_len;
 800ae20:	b2ad      	uxth	r5, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:1047
      offset = 0;
 800ae22:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:1046
      len -= buf_copy_len;
 800ae24:	fa1f f884 	uxth.w	r8, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:1047
      offset = 0;
 800ae28:	e7e5      	b.n	800adf6 <pbuf_copy_partial+0x42>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/pbuf.c:1025
  left = 0;
 800ae2a:	2500      	movs	r5, #0
 800ae2c:	e7e4      	b.n	800adf8 <pbuf_copy_partial+0x44>
 800ae2e:	bf00      	nop
 800ae30:	08020262 	.word	0x08020262
 800ae34:	080201d4 	.word	0x080201d4
 800ae38:	0800e36a 	.word	0x0800e36a
 800ae3c:	080201f3 	.word	0x080201f3

0800ae40 <sys_timeout>:
sys_timeout():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:206
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ae40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae44:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:210
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ae46:	200a      	movs	r0, #10
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:206
{
 800ae48:	460f      	mov	r7, r1
 800ae4a:	4616      	mov	r6, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:210
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ae4c:	f001 fa0a 	bl	800c264 <memp_malloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:211
  if (timeout == NULL) {
 800ae50:	4604      	mov	r4, r0
 800ae52:	b938      	cbnz	r0, 800ae64 <sys_timeout+0x24>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:212 (discriminator 1)
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ae54:	4b1e      	ldr	r3, [pc, #120]	; (800aed0 <sys_timeout+0x90>)
 800ae56:	22d4      	movs	r2, #212	; 0xd4
 800ae58:	491e      	ldr	r1, [pc, #120]	; (800aed4 <sys_timeout+0x94>)
 800ae5a:	481f      	ldr	r0, [pc, #124]	; (800aed8 <sys_timeout+0x98>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:262 (discriminator 1)
        t->next = timeout;
        break;
      }
    }
  }
}
 800ae5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:212 (discriminator 1)
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ae60:	f002 b89c 	b.w	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:216
  now = sys_now();
 800ae64:	f001 fe44 	bl	800caf0 <sys_now>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:217
  if (next_timeout == NULL) {
 800ae68:	4a1c      	ldr	r2, [pc, #112]	; (800aedc <sys_timeout+0x9c>)
 800ae6a:	491d      	ldr	r1, [pc, #116]	; (800aee0 <sys_timeout+0xa0>)
 800ae6c:	6813      	ldr	r3, [r2, #0]
 800ae6e:	b95b      	cbnz	r3, 800ae88 <sys_timeout+0x48>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:219
    timeouts_last_time = now;
 800ae70:	6008      	str	r0, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:218
    diff = 0;
 800ae72:	4618      	mov	r0, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:224
  timeout->next = NULL;
 800ae74:	2100      	movs	r1, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:227
  timeout->time = msecs + diff;
 800ae76:	4428      	add	r0, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:224
  timeout->next = NULL;
 800ae78:	6021      	str	r1, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:227
  timeout->time = msecs + diff;
 800ae7a:	6060      	str	r0, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:226
  timeout->arg = arg;
 800ae7c:	e9c4 7602 	strd	r7, r6, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:234
  if (next_timeout == NULL) {
 800ae80:	b92b      	cbnz	r3, 800ae8e <sys_timeout+0x4e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:242
    next_timeout = timeout;
 800ae82:	6014      	str	r4, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:262
}
 800ae84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:221
    diff = now - timeouts_last_time;
 800ae88:	6809      	ldr	r1, [r1, #0]
 800ae8a:	1a40      	subs	r0, r0, r1
 800ae8c:	e7f2      	b.n	800ae74 <sys_timeout+0x34>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:239
  if (next_timeout->time > msecs) {
 800ae8e:	6859      	ldr	r1, [r3, #4]
 800ae90:	42a9      	cmp	r1, r5
 800ae92:	d903      	bls.n	800ae9c <sys_timeout+0x5c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:240
    next_timeout->time -= msecs;
 800ae94:	1b4d      	subs	r5, r1, r5
 800ae96:	605d      	str	r5, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:241
    timeout->next = next_timeout;
 800ae98:	6023      	str	r3, [r4, #0]
 800ae9a:	e7f2      	b.n	800ae82 <sys_timeout+0x42>
 800ae9c:	4618      	mov	r0, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:245
      timeout->time -= t->time;
 800ae9e:	6867      	ldr	r7, [r4, #4]
 800aea0:	6842      	ldr	r2, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:246
      if (t->next == NULL || t->next->time > timeout->time) {
 800aea2:	6801      	ldr	r1, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:245
      timeout->time -= t->time;
 800aea4:	1abe      	subs	r6, r7, r2
 800aea6:	6066      	str	r6, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:246
      if (t->next == NULL || t->next->time > timeout->time) {
 800aea8:	b149      	cbz	r1, 800aebe <sys_timeout+0x7e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:246 (discriminator 1)
 800aeaa:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800aeae:	4566      	cmp	r6, ip
 800aeb0:	d301      	bcc.n	800aeb6 <sys_timeout+0x76>
 800aeb2:	4608      	mov	r0, r1
 800aeb4:	e7f3      	b.n	800ae9e <sys_timeout+0x5e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:248
          t->next->time -= timeout->time;
 800aeb6:	4462      	add	r2, ip
 800aeb8:	1bd2      	subs	r2, r2, r7
 800aeba:	604a      	str	r2, [r1, #4]
 800aebc:	e004      	b.n	800aec8 <sys_timeout+0x88>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:249
        } else if (timeout->time > msecs) {
 800aebe:	42ae      	cmp	r6, r5
 800aec0:	d902      	bls.n	800aec8 <sys_timeout+0x88>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:254
          timeout->time = msecs + next_timeout->time;
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	441d      	add	r5, r3
 800aec6:	6065      	str	r5, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:256
        timeout->next = t->next;
 800aec8:	6021      	str	r1, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:257
        t->next = timeout;
 800aeca:	6004      	str	r4, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:258
        break;
 800aecc:	e7da      	b.n	800ae84 <sys_timeout+0x44>
 800aece:	bf00      	nop
 800aed0:	080203a4 	.word	0x080203a4
 800aed4:	0802040a 	.word	0x0802040a
 800aed8:	0800e36a 	.word	0x0800e36a
 800aedc:	20007fdc 	.word	0x20007fdc
 800aee0:	20007fe4 	.word	0x20007fe4

0800aee4 <tcp_timer_needed>:
tcp_timer_needed():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:150
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800aee4:	4b08      	ldr	r3, [pc, #32]	; (800af08 <tcp_timer_needed+0x24>)
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	b962      	cbnz	r2, 800af04 <tcp_timer_needed+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:150 (discriminator 1)
 800aeea:	4a08      	ldr	r2, [pc, #32]	; (800af0c <tcp_timer_needed+0x28>)
 800aeec:	6812      	ldr	r2, [r2, #0]
 800aeee:	b912      	cbnz	r2, 800aef6 <tcp_timer_needed+0x12>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:150 (discriminator 2)
 800aef0:	4a07      	ldr	r2, [pc, #28]	; (800af10 <tcp_timer_needed+0x2c>)
 800aef2:	6812      	ldr	r2, [r2, #0]
 800aef4:	b132      	cbz	r2, 800af04 <tcp_timer_needed+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:152
    tcpip_tcp_timer_active = 1;
 800aef6:	2201      	movs	r2, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:153
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800aef8:	4906      	ldr	r1, [pc, #24]	; (800af14 <tcp_timer_needed+0x30>)
 800aefa:	20fa      	movs	r0, #250	; 0xfa
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:152
    tcpip_tcp_timer_active = 1;
 800aefc:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:153
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800aefe:	2200      	movs	r2, #0
 800af00:	f7ff bf9e 	b.w	800ae40 <sys_timeout>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:155
}
 800af04:	4770      	bx	lr
 800af06:	bf00      	nop
 800af08:	20007fe0 	.word	0x20007fe0
 800af0c:	200080f4 	.word	0x200080f4
 800af10:	20008104 	.word	0x20008104
 800af14:	0800af19 	.word	0x0800af19

0800af18 <tcpip_tcp_timer>:
tcpip_tcp_timer():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:126
{
 800af18:	b508      	push	{r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:130
  tcp_tmr();
 800af1a:	f7fe fda7 	bl	8009a6c <tcp_tmr>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:132
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800af1e:	4b08      	ldr	r3, [pc, #32]	; (800af40 <tcpip_tcp_timer+0x28>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	b913      	cbnz	r3, 800af2a <tcpip_tcp_timer+0x12>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:132 (discriminator 1)
 800af24:	4b07      	ldr	r3, [pc, #28]	; (800af44 <tcpip_tcp_timer+0x2c>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	b133      	cbz	r3, 800af38 <tcpip_tcp_timer+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:134
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800af2a:	2200      	movs	r2, #0
 800af2c:	4906      	ldr	r1, [pc, #24]	; (800af48 <tcpip_tcp_timer+0x30>)
 800af2e:	20fa      	movs	r0, #250	; 0xfa
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:139
}
 800af30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:134
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800af34:	f7ff bf84 	b.w	800ae40 <sys_timeout>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:137
    tcpip_tcp_timer_active = 0;
 800af38:	4a04      	ldr	r2, [pc, #16]	; (800af4c <tcpip_tcp_timer+0x34>)
 800af3a:	6013      	str	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:139
}
 800af3c:	bd08      	pop	{r3, pc}
 800af3e:	bf00      	nop
 800af40:	200080f4 	.word	0x200080f4
 800af44:	20008104 	.word	0x20008104
 800af48:	0800af19 	.word	0x0800af19
 800af4c:	20007fe0 	.word	0x20007fe0

0800af50 <sys_timeouts_init>:
sys_timeouts_init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:176
{
 800af50:	b538      	push	{r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:182
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800af52:	4d11      	ldr	r5, [pc, #68]	; (800af98 <sys_timeouts_init+0x48>)
 800af54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800af58:	4c10      	ldr	r4, [pc, #64]	; (800af9c <sys_timeouts_init+0x4c>)
 800af5a:	f105 0208 	add.w	r2, r5, #8
 800af5e:	4621      	mov	r1, r4
 800af60:	f7ff ff6e 	bl	800ae40 <sys_timeout>
 800af64:	f105 0210 	add.w	r2, r5, #16
 800af68:	4621      	mov	r1, r4
 800af6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800af6e:	f7ff ff67 	bl	800ae40 <sys_timeout>
 800af72:	f105 0218 	add.w	r2, r5, #24
 800af76:	4621      	mov	r1, r4
 800af78:	f64e 2060 	movw	r0, #60000	; 0xea60
 800af7c:	f7ff ff60 	bl	800ae40 <sys_timeout>
 800af80:	f105 0220 	add.w	r2, r5, #32
 800af84:	4621      	mov	r1, r4
 800af86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800af8a:	f7ff ff59 	bl	800ae40 <sys_timeout>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:186
  timeouts_last_time = sys_now();
 800af8e:	f001 fdaf 	bl	800caf0 <sys_now>
 800af92:	4b03      	ldr	r3, [pc, #12]	; (800afa0 <sys_timeouts_init+0x50>)
 800af94:	6018      	str	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:187
}
 800af96:	bd38      	pop	{r3, r4, r5, pc}
 800af98:	0802037c 	.word	0x0802037c
 800af9c:	0800afa5 	.word	0x0800afa5
 800afa0:	20007fe4 	.word	0x20007fe4

0800afa4 <cyclic_timer>:
cyclic_timer():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:165
{
 800afa4:	b510      	push	{r4, lr}
 800afa6:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:170
  cyclic->handler();
 800afa8:	6843      	ldr	r3, [r0, #4]
 800afaa:	4798      	blx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:171
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800afac:	4903      	ldr	r1, [pc, #12]	; (800afbc <cyclic_timer+0x18>)
 800afae:	4622      	mov	r2, r4
 800afb0:	6820      	ldr	r0, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:172
}
 800afb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:171
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800afb6:	f7ff bf43 	b.w	800ae40 <sys_timeout>
 800afba:	bf00      	nop
 800afbc:	0800afa5 	.word	0x0800afa5

0800afc0 <sys_timeouts_mbox_fetch>:
sys_timeouts_mbox_fetch():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:406
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800afc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:410
  u32_t sleeptime;

again:
  if (!next_timeout) {
 800afc4:	4c26      	ldr	r4, [pc, #152]	; (800b060 <sys_timeouts_mbox_fetch+0xa0>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:406
{
 800afc6:	4606      	mov	r6, r0
 800afc8:	460f      	mov	r7, r1
sys_timeouts_sleeptime():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:387
  diff = sys_now() - timeouts_last_time;
 800afca:	4d26      	ldr	r5, [pc, #152]	; (800b064 <sys_timeouts_mbox_fetch+0xa4>)
 800afcc:	46a0      	mov	r8, r4
sys_timeouts_mbox_fetch():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:410
  if (!next_timeout) {
 800afce:	6822      	ldr	r2, [r4, #0]
 800afd0:	b932      	cbnz	r2, 800afe0 <sys_timeouts_mbox_fetch+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:411
    sys_arch_mbox_fetch(mbox, msg, 0);
 800afd2:	4639      	mov	r1, r7
 800afd4:	4630      	mov	r0, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:423
       before a message could be fetched. */
    sys_check_timeouts();
    /* We try again to fetch a message from the mbox. */
    goto again;
  }
}
 800afd6:	b003      	add	sp, #12
 800afd8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:411
    sys_arch_mbox_fetch(mbox, msg, 0);
 800afdc:	f7f5 be6a 	b.w	8000cb4 <sys_arch_mbox_fetch>
sys_timeouts_sleeptime():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:387
  diff = sys_now() - timeouts_last_time;
 800afe0:	f001 fd86 	bl	800caf0 <sys_now>
 800afe4:	682a      	ldr	r2, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:388
  if (diff > next_timeout->time) {
 800afe6:	6823      	ldr	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:387
  diff = sys_now() - timeouts_last_time;
 800afe8:	1a81      	subs	r1, r0, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:388
  if (diff > next_timeout->time) {
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	4299      	cmp	r1, r3
 800afee:	d80b      	bhi.n	800b008 <sys_timeouts_mbox_fetch+0x48>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:391
    return next_timeout->time - diff;
 800aff0:	441a      	add	r2, r3
sys_timeouts_mbox_fetch():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:416
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 800aff2:	1a12      	subs	r2, r2, r0
 800aff4:	d008      	beq.n	800b008 <sys_timeouts_mbox_fetch+0x48>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:416 (discriminator 1)
 800aff6:	4639      	mov	r1, r7
 800aff8:	4630      	mov	r0, r6
 800affa:	f7f5 fe5b 	bl	8000cb4 <sys_arch_mbox_fetch>
 800affe:	3001      	adds	r0, #1
 800b000:	d12a      	bne.n	800b058 <sys_timeouts_mbox_fetch+0x98>
sys_check_timeouts():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:315
  if (next_timeout) {
 800b002:	6823      	ldr	r3, [r4, #0]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d0e2      	beq.n	800afce <sys_timeouts_mbox_fetch+0xe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:323
    now = sys_now();
 800b008:	f001 fd72 	bl	800caf0 <sys_now>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:325
    diff = now - timeouts_last_time;
 800b00c:	682b      	ldr	r3, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:349
          LOCK_TCPIP_CORE();
 800b00e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800b068 <sys_timeouts_mbox_fetch+0xa8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:325
    diff = now - timeouts_last_time;
 800b012:	eba0 0b03 	sub.w	fp, r0, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:329
      tmptimeout = next_timeout;
 800b016:	f8d8 1000 	ldr.w	r1, [r8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:330
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800b01a:	2900      	cmp	r1, #0
 800b01c:	d0d7      	beq.n	800afce <sys_timeouts_mbox_fetch+0xe>
 800b01e:	684a      	ldr	r2, [r1, #4]
 800b020:	455a      	cmp	r2, fp
 800b022:	d8d4      	bhi.n	800afce <sys_timeouts_mbox_fetch+0xe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:333
        timeouts_last_time += tmptimeout->time;
 800b024:	6828      	ldr	r0, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:334
        diff -= tmptimeout->time;
 800b026:	ebab 0b02 	sub.w	fp, fp, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:333
        timeouts_last_time += tmptimeout->time;
 800b02a:	4410      	add	r0, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:335
        next_timeout = tmptimeout->next;
 800b02c:	680a      	ldr	r2, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:337
        arg = tmptimeout->arg;
 800b02e:	e9d1 a302 	ldrd	sl, r3, [r1, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:333
        timeouts_last_time += tmptimeout->time;
 800b032:	6028      	str	r0, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:344
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b034:	200a      	movs	r0, #10
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:335
        next_timeout = tmptimeout->next;
 800b036:	f8c8 2000 	str.w	r2, [r8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:337
        arg = tmptimeout->arg;
 800b03a:	9301      	str	r3, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:344
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b03c:	f001 f942 	bl	800c2c4 <memp_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:345
        if (handler != NULL) {
 800b040:	f1ba 0f00 	cmp.w	sl, #0
 800b044:	d0e7      	beq.n	800b016 <sys_timeouts_mbox_fetch+0x56>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:349
          LOCK_TCPIP_CORE();
 800b046:	4648      	mov	r0, r9
 800b048:	f7f5 feca 	bl	8000de0 <sys_mutex_lock>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:351
          handler(arg);
 800b04c:	9801      	ldr	r0, [sp, #4]
 800b04e:	47d0      	blx	sl
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:353
          UNLOCK_TCPIP_CORE();
 800b050:	4648      	mov	r0, r9
 800b052:	f7f5 feca 	bl	8000dea <sys_mutex_unlock>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:356
        LWIP_TCPIP_THREAD_ALIVE();
 800b056:	e7de      	b.n	800b016 <sys_timeouts_mbox_fetch+0x56>
sys_timeouts_mbox_fetch():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/timeouts.c:423
}
 800b058:	b003      	add	sp, #12
 800b05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b05e:	bf00      	nop
 800b060:	20007fdc 	.word	0x20007fdc
 800b064:	20007fe4 	.word	0x20007fe4
 800b068:	200080a8 	.word	0x200080a8

0800b06c <tcp_receive>:
tcp_receive():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1032
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b06c:	7d03      	ldrb	r3, [r0, #20]
 800b06e:	2b03      	cmp	r3, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1017
{
 800b070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b074:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1032
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b076:	d806      	bhi.n	800b086 <tcp_receive+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1032 (discriminator 1)
 800b078:	4b82      	ldr	r3, [pc, #520]	; (800b284 <tcp_receive+0x218>)
 800b07a:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800b07e:	4982      	ldr	r1, [pc, #520]	; (800b288 <tcp_receive+0x21c>)
 800b080:	4882      	ldr	r0, [pc, #520]	; (800b28c <tcp_receive+0x220>)
 800b082:	f001 ff8b 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1034

  if (flags & TCP_ACK) {
 800b086:	4b82      	ldr	r3, [pc, #520]	; (800b290 <tcp_receive+0x224>)
 800b088:	4e82      	ldr	r6, [pc, #520]	; (800b294 <tcp_receive+0x228>)
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	f013 0f10 	tst.w	r3, #16
 800b090:	f000 8172 	beq.w	800b378 <tcp_receive+0x30c>
 800b094:	6831      	ldr	r1, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1035
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b096:	4d80      	ldr	r5, [pc, #512]	; (800b298 <tcp_receive+0x22c>)
 800b098:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 800b09c:	682b      	ldr	r3, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1038

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b09e:	e9d4 0c14 	ldrd	r0, ip, [r4, #80]	; 0x50
 800b0a2:	1a47      	subs	r7, r0, r1
 800b0a4:	2f00      	cmp	r7, #0
 800b0a6:	db0c      	blt.n	800b0c2 <tcp_receive+0x56>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1038 (discriminator 1)
 800b0a8:	4288      	cmp	r0, r1
 800b0aa:	d103      	bne.n	800b0b4 <tcp_receive+0x48>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1039
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b0ac:	ebac 0003 	sub.w	r0, ip, r3
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	db06      	blt.n	800b0c2 <tcp_receive+0x56>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1039 (discriminator 1)
 800b0b4:	459c      	cmp	ip, r3
 800b0b6:	d11a      	bne.n	800b0ee <tcp_receive+0x82>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1040
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b0b8:	4878      	ldr	r0, [pc, #480]	; (800b29c <tcp_receive+0x230>)
 800b0ba:	6800      	ldr	r0, [r0, #0]
 800b0bc:	89c0      	ldrh	r0, [r0, #14]
 800b0be:	4290      	cmp	r0, r2
 800b0c0:	d915      	bls.n	800b0ee <tcp_receive+0x82>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1041
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b0c2:	4876      	ldr	r0, [pc, #472]	; (800b29c <tcp_receive+0x230>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1044
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b0c4:	f8b4 e05e 	ldrh.w	lr, [r4, #94]	; 0x5e
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1041
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b0c8:	6800      	ldr	r0, [r0, #0]
 800b0ca:	89c0      	ldrh	r0, [r0, #14]
 800b0cc:	b287      	uxth	r7, r0
 800b0ce:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1044
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b0d2:	45be      	cmp	lr, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1048
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
      pcb->snd_wl2 = ackno;
 800b0d4:	e9c4 1314 	strd	r1, r3, [r4, #80]	; 0x50
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1045
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b0d8:	bf38      	it	cc
 800b0da:	f8a4 005e 	strhcc.w	r0, [r4, #94]	; 0x5e
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1049
      if (pcb->snd_wnd == 0) {
 800b0de:	f894 1091 	ldrb.w	r1, [r4, #145]	; 0x91
 800b0e2:	bb97      	cbnz	r7, 800b14a <tcp_receive+0xde>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1050
        if (pcb->persist_backoff == 0) {
 800b0e4:	b919      	cbnz	r1, 800b0ee <tcp_receive+0x82>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1052
          /* start persist timer */
          pcb->persist_cnt = 0;
 800b0e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b0ea:	f8a4 1090 	strh.w	r1, [r4, #144]	; 0x90
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1092
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b0ee:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800b0f0:	4f6b      	ldr	r7, [pc, #428]	; (800b2a0 <tcp_receive+0x234>)
 800b0f2:	1a19      	subs	r1, r3, r0
 800b0f4:	2900      	cmp	r1, #0
 800b0f6:	dc37      	bgt.n	800b168 <tcp_receive+0xfc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1094
      /* Clause 2 */
      if (tcplen == 0) {
 800b0f8:	496a      	ldr	r1, [pc, #424]	; (800b2a4 <tcp_receive+0x238>)
 800b0fa:	8809      	ldrh	r1, [r1, #0]
 800b0fc:	bb81      	cbnz	r1, 800b160 <tcp_receive+0xf4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1096
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b0fe:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1035
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b102:	4462      	add	r2, ip
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1096
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b104:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800b106:	4471      	add	r1, lr
 800b108:	4291      	cmp	r1, r2
 800b10a:	d129      	bne.n	800b160 <tcp_receive+0xf4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1098
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b10c:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800b110:	2a00      	cmp	r2, #0
 800b112:	db25      	blt.n	800b160 <tcp_receive+0xf4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1100
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b114:	4298      	cmp	r0, r3
 800b116:	d123      	bne.n	800b160 <tcp_receive+0xf4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1102
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b118:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b11c:	2bff      	cmp	r3, #255	; 0xff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1103
                ++pcb->dupacks;
 800b11e:	bf1c      	itt	ne
 800b120:	3301      	addne	r3, #1
 800b122:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1105
              }
              if (pcb->dupacks > 3) {
 800b126:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b12a:	2b03      	cmp	r3, #3
 800b12c:	d913      	bls.n	800b156 <tcp_receive+0xea>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1108
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800b12e:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800b132:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800b134:	4413      	add	r3, r2
 800b136:	b29b      	uxth	r3, r3
 800b138:	429a      	cmp	r2, r3
 800b13a:	d201      	bcs.n	800b140 <tcp_receive+0xd4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1109
                  pcb->cwnd += pcb->mss;
 800b13c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1237
      if (pcb->unsent == NULL) {
        pcb->unsent_oversize = 0;
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800b140:	f8df 9140 	ldr.w	r9, [pc, #320]	; 800b284 <tcp_receive+0x218>
 800b144:	f8df a144 	ldr.w	sl, [pc, #324]	; 800b28c <tcp_receive+0x220>
 800b148:	e109      	b.n	800b35e <tcp_receive+0x2f2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1055
      } else if (pcb->persist_backoff > 0) {
 800b14a:	2900      	cmp	r1, #0
 800b14c:	d0cf      	beq.n	800b0ee <tcp_receive+0x82>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1057
          pcb->persist_backoff = 0;
 800b14e:	2100      	movs	r1, #0
 800b150:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
 800b154:	e7cb      	b.n	800b0ee <tcp_receive+0x82>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1111
              } else if (pcb->dupacks == 3) {
 800b156:	d1f3      	bne.n	800b140 <tcp_receive+0xd4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1113
                tcp_rexmit_fast(pcb);
 800b158:	4620      	mov	r0, r4
 800b15a:	f7fd fe62 	bl	8008e22 <tcp_rexmit_fast>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1121
      if (!found_dupack) {
 800b15e:	e7ef      	b.n	800b140 <tcp_receive+0xd4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1122
        pcb->dupacks = 0;
 800b160:	2300      	movs	r3, #0
 800b162:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b166:	e7eb      	b.n	800b140 <tcp_receive+0xd4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1124
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800b168:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800b16a:	1a9a      	subs	r2, r3, r2
 800b16c:	2a00      	cmp	r2, #0
 800b16e:	f300 8085 	bgt.w	800b27c <tcp_receive+0x210>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1130
      if (pcb->flags & TF_INFR) {
 800b172:	7ea2      	ldrb	r2, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1143
      pcb->lastack = ackno;
 800b174:	6463      	str	r3, [r4, #68]	; 0x44
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1130
      if (pcb->flags & TF_INFR) {
 800b176:	0751      	lsls	r1, r2, #29
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1139
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800b178:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1147
      if (pcb->state >= ESTABLISHED) {
 800b17c:	7d23      	ldrb	r3, [r4, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1131
        pcb->flags &= ~TF_INFR;
 800b17e:	bf41      	itttt	mi
 800b180:	f022 0204 	bicmi.w	r2, r2, #4
 800b184:	76a2      	strbmi	r2, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1132
        pcb->cwnd = pcb->ssthresh;
 800b186:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
 800b18a:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1147
      if (pcb->state >= ESTABLISHED) {
 800b18e:	2b03      	cmp	r3, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1139
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800b190:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b192:	eb02 02e1 	add.w	r2, r2, r1, asr #3
 800b196:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1136
      pcb->nrtx = 0;
 800b19a:	f04f 0200 	mov.w	r2, #0
 800b19e:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1147
      if (pcb->state >= ESTABLISHED) {
 800b1a2:	d90f      	bls.n	800b1c4 <tcp_receive+0x158>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1148
        if (pcb->cwnd < pcb->ssthresh) {
 800b1a4:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800b1a8:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800b1ac:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800b1ae:	4291      	cmp	r1, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1154
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800b1b0:	bf9c      	itt	ls
 800b1b2:	435b      	mulls	r3, r3
 800b1b4:	fbb3 f3f2 	udivls	r3, r3, r2
 800b1b8:	4413      	add	r3, r2
 800b1ba:	b29b      	uxth	r3, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1155
          if (new_cwnd > pcb->cwnd) {
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d201      	bcs.n	800b1c4 <tcp_receive+0x158>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1156
            pcb->cwnd = new_cwnd;
 800b1c0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1182
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800b1c4:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 800b284 <tcp_receive+0x218>
 800b1c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800b28c <tcp_receive+0x220>
 800b1cc:	e04a      	b.n	800b264 <tcp_receive+0x1f8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1171
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	6858      	ldr	r0, [r3, #4]
 800b1d2:	f7ff fad0 	bl	800a776 <lwip_htonl>
 800b1d6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b1d8:	4683      	mov	fp, r0
 800b1da:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	8998      	ldrh	r0, [r3, #12]
 800b1e2:	f7ff fac5 	bl	800a770 <lwip_htons>
 800b1e6:	682b      	ldr	r3, [r5, #0]
 800b1e8:	f010 0003 	ands.w	r0, r0, #3
 800b1ec:	eba8 0803 	sub.w	r8, r8, r3
 800b1f0:	bf18      	it	ne
 800b1f2:	2001      	movne	r0, #1
 800b1f4:	44d8      	add	r8, fp
 800b1f6:	4480      	add	r8, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1170
      while (pcb->unacked != NULL &&
 800b1f8:	f1b8 0f00 	cmp.w	r8, #0
 800b1fc:	dc35      	bgt.n	800b26a <tcp_receive+0x1fe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1178
        next = pcb->unacked;
 800b1fe:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1182
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800b202:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1179
        pcb->unacked = pcb->unacked->next;
 800b206:	f8d8 3000 	ldr.w	r3, [r8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1182
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800b20a:	f8d8 0004 	ldr.w	r0, [r8, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1179
        pcb->unacked = pcb->unacked->next;
 800b20e:	66e3      	str	r3, [r4, #108]	; 0x6c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1182
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800b210:	f7ff fce2 	bl	800abd8 <pbuf_clen>
 800b214:	4583      	cmp	fp, r0
 800b216:	d206      	bcs.n	800b226 <tcp_receive+0x1ba>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1182 (discriminator 1)
 800b218:	464b      	mov	r3, r9
 800b21a:	f240 429e 	movw	r2, #1182	; 0x49e
 800b21e:	4922      	ldr	r1, [pc, #136]	; (800b2a8 <tcp_receive+0x23c>)
 800b220:	4650      	mov	r0, sl
 800b222:	f001 febb 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1184
        pcb->snd_queuelen -= pbuf_clen(next->p);
 800b226:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b22a:	f7ff fcd5 	bl	800abd8 <pbuf_clen>
 800b22e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1185
        recv_acked += next->len;
 800b232:	883a      	ldrh	r2, [r7, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1184
        pcb->snd_queuelen -= pbuf_clen(next->p);
 800b234:	1a18      	subs	r0, r3, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1185
        recv_acked += next->len;
 800b236:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800b23a:	4413      	add	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1184
        pcb->snd_queuelen -= pbuf_clen(next->p);
 800b23c:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1186
        tcp_seg_free(next);
 800b240:	4640      	mov	r0, r8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1185
        recv_acked += next->len;
 800b242:	803b      	strh	r3, [r7, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1186
        tcp_seg_free(next);
 800b244:	f7fe f836 	bl	80092b4 <tcp_seg_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1189
        if (pcb->snd_queuelen != 0) {
 800b248:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b24c:	b153      	cbz	r3, 800b264 <tcp_receive+0x1f8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1190
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800b24e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b250:	b943      	cbnz	r3, 800b264 <tcp_receive+0x1f8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1190 (discriminator 1)
 800b252:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b254:	b933      	cbnz	r3, 800b264 <tcp_receive+0x1f8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1190 (discriminator 2)
 800b256:	464b      	mov	r3, r9
 800b258:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800b25c:	4913      	ldr	r1, [pc, #76]	; (800b2ac <tcp_receive+0x240>)
 800b25e:	4650      	mov	r0, sl
 800b260:	f001 fe9c 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1170
      while (pcb->unacked != NULL &&
 800b264:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b266:	2b00      	cmp	r3, #0
 800b268:	d1b1      	bne.n	800b1ce <tcp_receive+0x162>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1197
      if (pcb->unacked == NULL) {
 800b26a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b26c:	fab3 f383 	clz	r3, r3
 800b270:	095b      	lsrs	r3, r3, #5
 800b272:	425b      	negs	r3, r3
 800b274:	8623      	strh	r3, [r4, #48]	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1203
      pcb->polltmr = 0;
 800b276:	2300      	movs	r3, #0
 800b278:	76e3      	strb	r3, [r4, #27]
 800b27a:	e761      	b.n	800b140 <tcp_receive+0xd4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1213
      tcp_send_empty_ack(pcb);
 800b27c:	4620      	mov	r0, r4
 800b27e:	f7fd fb84 	bl	800898a <tcp_send_empty_ack>
 800b282:	e75d      	b.n	800b140 <tcp_receive+0xd4>
 800b284:	080205fd 	.word	0x080205fd
 800b288:	08020661 	.word	0x08020661
 800b28c:	0800e36a 	.word	0x0800e36a
 800b290:	20007fec 	.word	0x20007fec
 800b294:	2000800c 	.word	0x2000800c
 800b298:	20007fe8 	.word	0x20007fe8
 800b29c:	20008014 	.word	0x20008014
 800b2a0:	20008000 	.word	0x20008000
 800b2a4:	20008022 	.word	0x20008022
 800b2a8:	0802067a 	.word	0x0802067a
 800b2ac:	080206a2 	.word	0x080206a2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1223
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800b2b0:	682a      	ldr	r2, [r5, #0]
 800b2b2:	68db      	ldr	r3, [r3, #12]
 800b2b4:	9201      	str	r2, [sp, #4]
 800b2b6:	6858      	ldr	r0, [r3, #4]
 800b2b8:	f7ff fa5d 	bl	800a776 <lwip_htonl>
 800b2bc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b2be:	4683      	mov	fp, r0
 800b2c0:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 800b2c4:	68db      	ldr	r3, [r3, #12]
 800b2c6:	8998      	ldrh	r0, [r3, #12]
 800b2c8:	f7ff fa52 	bl	800a770 <lwip_htons>
 800b2cc:	9a01      	ldr	r2, [sp, #4]
 800b2ce:	f010 0003 	ands.w	r0, r0, #3
 800b2d2:	eba2 0808 	sub.w	r8, r2, r8
 800b2d6:	bf18      	it	ne
 800b2d8:	2001      	movne	r0, #1
 800b2da:	eba8 080b 	sub.w	r8, r8, fp
 800b2de:	eba8 0800 	sub.w	r8, r8, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1222
    while (pcb->unsent != NULL &&
 800b2e2:	f1b8 0f00 	cmp.w	r8, #0
 800b2e6:	db3d      	blt.n	800b364 <tcp_receive+0x2f8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1223
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800b2e8:	682b      	ldr	r3, [r5, #0]
 800b2ea:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800b2ec:	1a9b      	subs	r3, r3, r2
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	dc38      	bgt.n	800b364 <tcp_receive+0x2f8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1229
      next = pcb->unsent;
 800b2f2:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1230
      pcb->unsent = pcb->unsent->next;
 800b2f6:	f8d8 3000 	ldr.w	r3, [r8]
 800b2fa:	66a3      	str	r3, [r4, #104]	; 0x68
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1232
      if (pcb->unsent == NULL) {
 800b2fc:	b90b      	cbnz	r3, 800b302 <tcp_receive+0x296>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1233
        pcb->unsent_oversize = 0;
 800b2fe:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1237
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800b302:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
 800b306:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b30a:	f7ff fc65 	bl	800abd8 <pbuf_clen>
 800b30e:	4583      	cmp	fp, r0
 800b310:	d206      	bcs.n	800b320 <tcp_receive+0x2b4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1237 (discriminator 1)
 800b312:	464b      	mov	r3, r9
 800b314:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b318:	49ae      	ldr	r1, [pc, #696]	; (800b5d4 <tcp_receive+0x568>)
 800b31a:	4650      	mov	r0, sl
 800b31c:	f001 fe3e 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1239
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800b320:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b324:	f7ff fc58 	bl	800abd8 <pbuf_clen>
 800b328:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1240
      recv_acked += next->len;
 800b32c:	883a      	ldrh	r2, [r7, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1239
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800b32e:	1a18      	subs	r0, r3, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1240
      recv_acked += next->len;
 800b330:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800b334:	4413      	add	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1239
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800b336:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1241
      tcp_seg_free(next);
 800b33a:	4640      	mov	r0, r8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1240
      recv_acked += next->len;
 800b33c:	803b      	strh	r3, [r7, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1241
      tcp_seg_free(next);
 800b33e:	f7fd ffb9 	bl	80092b4 <tcp_seg_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1243
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800b342:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b346:	b153      	cbz	r3, 800b35e <tcp_receive+0x2f2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1244
        LWIP_ASSERT("tcp_receive: valid queue length",
 800b348:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b34a:	b943      	cbnz	r3, 800b35e <tcp_receive+0x2f2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1244 (discriminator 1)
 800b34c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b34e:	b933      	cbnz	r3, 800b35e <tcp_receive+0x2f2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1244 (discriminator 2)
 800b350:	464b      	mov	r3, r9
 800b352:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800b356:	49a0      	ldr	r1, [pc, #640]	; (800b5d8 <tcp_receive+0x56c>)
 800b358:	4650      	mov	r0, sl
 800b35a:	f001 fe1f 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1222
    while (pcb->unsent != NULL &&
 800b35e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b360:	2b00      	cmp	r3, #0
 800b362:	d1a5      	bne.n	800b2b0 <tcp_receive+0x244>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1248
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800b364:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800b368:	883a      	ldrh	r2, [r7, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1257
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b36a:	6b60      	ldr	r0, [r4, #52]	; 0x34
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1248
    pcb->snd_buf += recv_acked;
 800b36c:	4413      	add	r3, r2
 800b36e:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1257
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b372:	2800      	cmp	r0, #0
 800b374:	f040 80f2 	bne.w	800b55c <tcp_receive+0x4f0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1286

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b378:	4998      	ldr	r1, [pc, #608]	; (800b5dc <tcp_receive+0x570>)
 800b37a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b37c:	8808      	ldrh	r0, [r1, #0]
 800b37e:	4688      	mov	r8, r1
 800b380:	6833      	ldr	r3, [r6, #0]
 800b382:	2800      	cmp	r0, #0
 800b384:	f000 8158 	beq.w	800b638 <tcp_receive+0x5cc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1286 (discriminator 1)
 800b388:	7d21      	ldrb	r1, [r4, #20]
 800b38a:	2906      	cmp	r1, #6
 800b38c:	f200 8154 	bhi.w	800b638 <tcp_receive+0x5cc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1317
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b390:	eba2 0a03 	sub.w	sl, r2, r3
 800b394:	f1ba 0f01 	cmp.w	sl, #1
 800b398:	f100 813a 	bmi.w	800b610 <tcp_receive+0x5a4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1317 (discriminator 1)
 800b39c:	f1c3 0101 	rsb	r1, r3, #1
 800b3a0:	1a09      	subs	r1, r1, r0
 800b3a2:	4411      	add	r1, r2
 800b3a4:	2900      	cmp	r1, #0
 800b3a6:	f300 8133 	bgt.w	800b610 <tcp_receive+0x5a4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1338

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b3aa:	4d8d      	ldr	r5, [pc, #564]	; (800b5e0 <tcp_receive+0x574>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1339
      off = pcb->rcv_nxt - seqno;
 800b3ac:	46d1      	mov	r9, sl
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1338
      struct pbuf *p = inseg.p;
 800b3ae:	686f      	ldr	r7, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1340
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b3b0:	b937      	cbnz	r7, 800b3c0 <tcp_receive+0x354>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1340 (discriminator 1)
 800b3b2:	4b8c      	ldr	r3, [pc, #560]	; (800b5e4 <tcp_receive+0x578>)
 800b3b4:	f240 523c 	movw	r2, #1340	; 0x53c
 800b3b8:	498b      	ldr	r1, [pc, #556]	; (800b5e8 <tcp_receive+0x57c>)
 800b3ba:	488c      	ldr	r0, [pc, #560]	; (800b5ec <tcp_receive+0x580>)
 800b3bc:	f001 fdee 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1341
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800b3c0:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 800b3c4:	459a      	cmp	sl, r3
 800b3c6:	dd06      	ble.n	800b3d6 <tcp_receive+0x36a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1341 (discriminator 1)
 800b3c8:	4b86      	ldr	r3, [pc, #536]	; (800b5e4 <tcp_receive+0x578>)
 800b3ca:	f240 523d 	movw	r2, #1341	; 0x53d
 800b3ce:	4988      	ldr	r1, [pc, #544]	; (800b5f0 <tcp_receive+0x584>)
 800b3d0:	4886      	ldr	r0, [pc, #536]	; (800b5ec <tcp_receive+0x580>)
 800b3d2:	f001 fde3 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1342
      if (inseg.p->len < off) {
 800b3d6:	6868      	ldr	r0, [r5, #4]
 800b3d8:	fa1f fb8a 	uxth.w	fp, sl
 800b3dc:	8943      	ldrh	r3, [r0, #10]
 800b3de:	4553      	cmp	r3, sl
 800b3e0:	f280 80eb 	bge.w	800b5ba <tcp_receive+0x54e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1343
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b3e4:	8903      	ldrh	r3, [r0, #8]
 800b3e6:	4553      	cmp	r3, sl
 800b3e8:	da06      	bge.n	800b3f8 <tcp_receive+0x38c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1343 (discriminator 1)
 800b3ea:	4b7e      	ldr	r3, [pc, #504]	; (800b5e4 <tcp_receive+0x578>)
 800b3ec:	f240 523f 	movw	r2, #1343	; 0x53f
 800b3f0:	4980      	ldr	r1, [pc, #512]	; (800b5f4 <tcp_receive+0x588>)
 800b3f2:	487e      	ldr	r0, [pc, #504]	; (800b5ec <tcp_receive+0x580>)
 800b3f4:	f001 fdd2 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1344
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b3f8:	686b      	ldr	r3, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1351
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 800b3fa:	2200      	movs	r2, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1344
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b3fc:	8919      	ldrh	r1, [r3, #8]
 800b3fe:	eba1 010b 	sub.w	r1, r1, fp
 800b402:	b289      	uxth	r1, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1345
        while (p->len < off) {
 800b404:	897b      	ldrh	r3, [r7, #10]
 800b406:	454b      	cmp	r3, r9
 800b408:	f2c0 80d1 	blt.w	800b5ae <tcp_receive+0x542>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1354
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800b40c:	f1c9 0100 	rsb	r1, r9, #0
 800b410:	4638      	mov	r0, r7
 800b412:	b209      	sxth	r1, r1
 800b414:	f7ff fa30 	bl	800a878 <pbuf_header>
 800b418:	b130      	cbz	r0, 800b428 <tcp_receive+0x3bc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1356 (discriminator 1)
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800b41a:	4b72      	ldr	r3, [pc, #456]	; (800b5e4 <tcp_receive+0x578>)
 800b41c:	f240 524c 	movw	r2, #1356	; 0x54c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1361 (discriminator 1)
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800b420:	4975      	ldr	r1, [pc, #468]	; (800b5f8 <tcp_receive+0x58c>)
 800b422:	4872      	ldr	r0, [pc, #456]	; (800b5ec <tcp_receive+0x580>)
 800b424:	f001 fdba 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1364
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800b428:	6833      	ldr	r3, [r6, #0]
 800b42a:	8929      	ldrh	r1, [r5, #8]
 800b42c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b42e:	440b      	add	r3, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1365
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b430:	6032      	str	r2, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1364
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800b432:	1a9b      	subs	r3, r3, r2
 800b434:	812b      	strh	r3, [r5, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1365
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b436:	68eb      	ldr	r3, [r5, #12]
 800b438:	605a      	str	r2, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1380
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b43a:	6831      	ldr	r1, [r6, #0]
 800b43c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b43e:	1a8b      	subs	r3, r1, r2
 800b440:	2b00      	cmp	r3, #0
 800b442:	f2c0 80f3 	blt.w	800b62c <tcp_receive+0x5c0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1380 (discriminator 1)
 800b446:	1c4b      	adds	r3, r1, #1
 800b448:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800b44a:	1a9b      	subs	r3, r3, r2
 800b44c:	1a1b      	subs	r3, r3, r0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	f300 80ec 	bgt.w	800b62c <tcp_receive+0x5c0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1382
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b454:	4291      	cmp	r1, r2
 800b456:	f040 80e9 	bne.w	800b62c <tcp_receive+0x5c0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1386
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b45a:	4d61      	ldr	r5, [pc, #388]	; (800b5e0 <tcp_receive+0x574>)
 800b45c:	68eb      	ldr	r3, [r5, #12]
 800b45e:	892f      	ldrh	r7, [r5, #8]
 800b460:	8998      	ldrh	r0, [r3, #12]
 800b462:	f7ff f985 	bl	800a770 <lwip_htons>
 800b466:	f010 0003 	ands.w	r0, r0, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1388

        if (tcplen > pcb->rcv_wnd) {
 800b46a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1386
        tcplen = TCP_TCPLEN(&inseg);
 800b46c:	bf18      	it	ne
 800b46e:	2001      	movne	r0, #1
 800b470:	4438      	add	r0, r7
 800b472:	b280      	uxth	r0, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1388
        if (tcplen > pcb->rcv_wnd) {
 800b474:	4283      	cmp	r3, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1386
        tcplen = TCP_TCPLEN(&inseg);
 800b476:	f8a8 0000 	strh.w	r0, [r8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1388
        if (tcplen > pcb->rcv_wnd) {
 800b47a:	d23e      	bcs.n	800b4fa <tcp_receive+0x48e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1393
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b47c:	68eb      	ldr	r3, [r5, #12]
 800b47e:	8998      	ldrh	r0, [r3, #12]
 800b480:	f7ff f976 	bl	800a770 <lwip_htons>
 800b484:	07c7      	lsls	r7, r0, #31
 800b486:	d50d      	bpl.n	800b4a4 <tcp_receive+0x438>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1396
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b488:	68eb      	ldr	r3, [r5, #12]
 800b48a:	899f      	ldrh	r7, [r3, #12]
 800b48c:	4638      	mov	r0, r7
 800b48e:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 800b492:	f7ff f96d 	bl	800a770 <lwip_htons>
 800b496:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800b49a:	f7ff f969 	bl	800a770 <lwip_htons>
 800b49e:	68eb      	ldr	r3, [r5, #12]
 800b4a0:	4307      	orrs	r7, r0
 800b4a2:	819f      	strh	r7, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1400
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b4a4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b4a6:	812b      	strh	r3, [r5, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1401
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b4a8:	68eb      	ldr	r3, [r5, #12]
 800b4aa:	8998      	ldrh	r0, [r3, #12]
 800b4ac:	f7ff f960 	bl	800a770 <lwip_htons>
 800b4b0:	0780      	lsls	r0, r0, #30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1404
            inseg.len -= 1;
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b4b2:	6868      	ldr	r0, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1402
            inseg.len -= 1;
 800b4b4:	bf42      	ittt	mi
 800b4b6:	892b      	ldrhmi	r3, [r5, #8]
 800b4b8:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 800b4bc:	812b      	strhmi	r3, [r5, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1404
          pbuf_realloc(inseg.p, inseg.len);
 800b4be:	8929      	ldrh	r1, [r5, #8]
 800b4c0:	f7ff fb1a 	bl	800aaf8 <pbuf_realloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1405
          tcplen = TCP_TCPLEN(&inseg);
 800b4c4:	68eb      	ldr	r3, [r5, #12]
 800b4c6:	892f      	ldrh	r7, [r5, #8]
 800b4c8:	8998      	ldrh	r0, [r3, #12]
 800b4ca:	f7ff f951 	bl	800a770 <lwip_htons>
 800b4ce:	f010 0003 	ands.w	r0, r0, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1406
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b4d2:	6833      	ldr	r3, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1405
          tcplen = TCP_TCPLEN(&inseg);
 800b4d4:	bf18      	it	ne
 800b4d6:	2001      	movne	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1406
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b4d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1405
          tcplen = TCP_TCPLEN(&inseg);
 800b4da:	4438      	add	r0, r7
 800b4dc:	b280      	uxth	r0, r0
 800b4de:	f8a8 0000 	strh.w	r0, [r8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1406
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b4e2:	4418      	add	r0, r3
 800b4e4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b4e6:	4413      	add	r3, r2
 800b4e8:	4298      	cmp	r0, r3
 800b4ea:	d006      	beq.n	800b4fa <tcp_receive+0x48e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1406 (discriminator 1)
 800b4ec:	4b3d      	ldr	r3, [pc, #244]	; (800b5e4 <tcp_receive+0x578>)
 800b4ee:	f240 527f 	movw	r2, #1407	; 0x57f
 800b4f2:	4942      	ldr	r1, [pc, #264]	; (800b5fc <tcp_receive+0x590>)
 800b4f4:	483d      	ldr	r0, [pc, #244]	; (800b5ec <tcp_receive+0x580>)
 800b4f6:	f001 fd51 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1462
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b4fa:	f8b8 2000 	ldrh.w	r2, [r8]
 800b4fe:	6833      	ldr	r3, [r6, #0]
 800b500:	4413      	add	r3, r2
 800b502:	6263      	str	r3, [r4, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1465

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b504:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b506:	4293      	cmp	r3, r2
 800b508:	d206      	bcs.n	800b518 <tcp_receive+0x4ac>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1465 (discriminator 1)
 800b50a:	4b36      	ldr	r3, [pc, #216]	; (800b5e4 <tcp_receive+0x578>)
 800b50c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b510:	493b      	ldr	r1, [pc, #236]	; (800b600 <tcp_receive+0x594>)
 800b512:	4836      	ldr	r0, [pc, #216]	; (800b5ec <tcp_receive+0x580>)
 800b514:	f001 fd42 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1466
        pcb->rcv_wnd -= tcplen;
 800b518:	8d23      	ldrh	r3, [r4, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1468

        tcp_update_rcv_ann_wnd(pcb);
 800b51a:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1466
        pcb->rcv_wnd -= tcplen;
 800b51c:	f8b8 2000 	ldrh.w	r2, [r8]
 800b520:	1a9b      	subs	r3, r3, r2
 800b522:	8523      	strh	r3, [r4, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1468
        tcp_update_rcv_ann_wnd(pcb);
 800b524:	f7fd fe5a 	bl	80091dc <tcp_update_rcv_ann_wnd>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1479
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b528:	686b      	ldr	r3, [r5, #4]
 800b52a:	891a      	ldrh	r2, [r3, #8]
 800b52c:	b11a      	cbz	r2, 800b536 <tcp_receive+0x4ca>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1480
          recv_data = inseg.p;
 800b52e:	4a35      	ldr	r2, [pc, #212]	; (800b604 <tcp_receive+0x598>)
 800b530:	6013      	str	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1484
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b532:	2300      	movs	r3, #0
 800b534:	606b      	str	r3, [r5, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1486
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b536:	68eb      	ldr	r3, [r5, #12]
 800b538:	8998      	ldrh	r0, [r3, #12]
 800b53a:	f7ff f919 	bl	800a770 <lwip_htons>
 800b53e:	07c1      	lsls	r1, r0, #31
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1488
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b540:	bf41      	itttt	mi
 800b542:	4a31      	ldrmi	r2, [pc, #196]	; (800b608 <tcp_receive+0x59c>)
 800b544:	7813      	ldrbmi	r3, [r2, #0]
 800b546:	f043 0320 	orrmi.w	r3, r3, #32
 800b54a:	7013      	strbmi	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1535
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b54c:	7ea3      	ldrb	r3, [r4, #26]
 800b54e:	07da      	lsls	r2, r3, #31
 800b550:	d566      	bpl.n	800b620 <tcp_receive+0x5b4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1535 (discriminator 1)
 800b552:	f023 0301 	bic.w	r3, r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1703
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 800b556:	f043 0302 	orr.w	r3, r3, #2
 800b55a:	e063      	b.n	800b624 <tcp_receive+0x5b8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1257 (discriminator 1)
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b55c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b55e:	682a      	ldr	r2, [r5, #0]
 800b560:	1a9b      	subs	r3, r3, r2
 800b562:	2b00      	cmp	r3, #0
 800b564:	f6bf af08 	bge.w	800b378 <tcp_receive+0x30c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1260
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b568:	4b28      	ldr	r3, [pc, #160]	; (800b60c <tcp_receive+0x5a0>)
 800b56a:	b280      	uxth	r0, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1266
      m = m - (pcb->sa >> 3);
 800b56c:	f9b4 703c 	ldrsh.w	r7, [r4, #60]	; 0x3c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1260
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b570:	881a      	ldrh	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1266
      m = m - (pcb->sa >> 3);
 800b572:	f3c7 05cf 	ubfx	r5, r7, #3, #16
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1260
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b576:	1a11      	subs	r1, r2, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1266
      m = m - (pcb->sa >> 3);
 800b578:	1b49      	subs	r1, r1, r5
 800b57a:	b289      	uxth	r1, r1
 800b57c:	b20b      	sxth	r3, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1267
      pcb->sa += m;
 800b57e:	4439      	add	r1, r7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1268
      if (m < 0) {
 800b580:	2b00      	cmp	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1267
      pcb->sa += m;
 800b582:	b209      	sxth	r1, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1269
        m = -m;
 800b584:	bfb8      	it	lt
 800b586:	1a80      	sublt	r0, r0, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1271
      m = m - (pcb->sv >> 2);
 800b588:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1267
      pcb->sa += m;
 800b58c:	87a1      	strh	r1, [r4, #60]	; 0x3c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1269
        m = -m;
 800b58e:	bfb8      	it	lt
 800b590:	1940      	addlt	r0, r0, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1272
      pcb->sv += m;
 800b592:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1269
        m = -m;
 800b596:	bfb8      	it	lt
 800b598:	b203      	sxthlt	r3, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1272
      pcb->sv += m;
 800b59a:	4413      	add	r3, r2
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	87e3      	strh	r3, [r4, #62]	; 0x3e
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1273
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800b5a0:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800b5a4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1278
      pcb->rttest = 0;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	6363      	str	r3, [r4, #52]	; 0x34
 800b5ac:	e6e4      	b.n	800b378 <tcp_receive+0x30c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1350
          p->tot_len = new_tot_len;
 800b5ae:	8139      	strh	r1, [r7, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1346
          off -= p->len;
 800b5b0:	eba9 0903 	sub.w	r9, r9, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1351
          p->len = 0;
 800b5b4:	817a      	strh	r2, [r7, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1352
          p = p->next;
 800b5b6:	683f      	ldr	r7, [r7, #0]
 800b5b8:	e724      	b.n	800b404 <tcp_receive+0x398>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1359
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800b5ba:	f1cb 0100 	rsb	r1, fp, #0
 800b5be:	b209      	sxth	r1, r1
 800b5c0:	f7ff f95a 	bl	800a878 <pbuf_header>
 800b5c4:	2800      	cmp	r0, #0
 800b5c6:	f43f af2f 	beq.w	800b428 <tcp_receive+0x3bc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1361 (discriminator 1)
          LWIP_ASSERT("pbuf_header failed", 0);
 800b5ca:	4b06      	ldr	r3, [pc, #24]	; (800b5e4 <tcp_receive+0x578>)
 800b5cc:	f240 5251 	movw	r2, #1361	; 0x551
 800b5d0:	e726      	b.n	800b420 <tcp_receive+0x3b4>
 800b5d2:	bf00      	nop
 800b5d4:	0802067a 	.word	0x0802067a
 800b5d8:	080206a2 	.word	0x080206a2
 800b5dc:	20008022 	.word	0x20008022
 800b5e0:	20007ff0 	.word	0x20007ff0
 800b5e4:	080205fd 	.word	0x080205fd
 800b5e8:	080206c2 	.word	0x080206c2
 800b5ec:	0800e36a 	.word	0x0800e36a
 800b5f0:	080206d2 	.word	0x080206d2
 800b5f4:	080206e1 	.word	0x080206e1
 800b5f8:	080206f1 	.word	0x080206f1
 800b5fc:	08020704 	.word	0x08020704
 800b600:	0802073b 	.word	0x0802073b
 800b604:	20008004 	.word	0x20008004
 800b608:	20008008 	.word	0x20008008
 800b60c:	200080f8 	.word	0x200080f8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1368
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b610:	1a9b      	subs	r3, r3, r2
 800b612:	2b00      	cmp	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1373
        tcp_ack_now(pcb);
 800b614:	bfbe      	ittt	lt
 800b616:	7ea3      	ldrblt	r3, [r4, #26]
 800b618:	f043 0302 	orrlt.w	r3, r3, #2
 800b61c:	76a3      	strblt	r3, [r4, #26]
 800b61e:	e70c      	b.n	800b43a <tcp_receive+0x3ce>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1535 (discriminator 2)
        tcp_ack(pcb);
 800b620:	f043 0301 	orr.w	r3, r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1703
      tcp_ack_now(pcb);
 800b624:	76a3      	strb	r3, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1706
    }
  }
}
 800b626:	b003      	add	sp, #12
 800b628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1546
        tcp_send_empty_ack(pcb);
 800b62c:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1706
}
 800b62e:	b003      	add	sp, #12
 800b630:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1546
        tcp_send_empty_ack(pcb);
 800b634:	f7fd b9a9 	b.w	800898a <tcp_send_empty_ack>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1702
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b638:	1a99      	subs	r1, r3, r2
 800b63a:	2900      	cmp	r1, #0
 800b63c:	db05      	blt.n	800b64a <tcp_receive+0x5de>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1702 (discriminator 1)
 800b63e:	3301      	adds	r3, #1
 800b640:	1a9b      	subs	r3, r3, r2
 800b642:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800b644:	1a9b      	subs	r3, r3, r2
 800b646:	2b00      	cmp	r3, #0
 800b648:	dded      	ble.n	800b626 <tcp_receive+0x5ba>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1703
      tcp_ack_now(pcb);
 800b64a:	7ea3      	ldrb	r3, [r4, #26]
 800b64c:	e783      	b.n	800b556 <tcp_receive+0x4ea>
 800b64e:	bf00      	nop

0800b650 <tcp_getoptbyte>:
tcp_getoptbyte():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1711

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800b650:	4b0b      	ldr	r3, [pc, #44]	; (800b680 <tcp_getoptbyte+0x30>)
 800b652:	490c      	ldr	r1, [pc, #48]	; (800b684 <tcp_getoptbyte+0x34>)
 800b654:	6818      	ldr	r0, [r3, #0]
 800b656:	880b      	ldrh	r3, [r1, #0]
 800b658:	1c5a      	adds	r2, r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1710
{
 800b65a:	b530      	push	{r4, r5, lr}
 800b65c:	b292      	uxth	r2, r2
 800b65e:	460d      	mov	r5, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1711
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800b660:	b118      	cbz	r0, 800b66a <tcp_getoptbyte+0x1a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1711 (discriminator 1)
 800b662:	4c09      	ldr	r4, [pc, #36]	; (800b688 <tcp_getoptbyte+0x38>)
 800b664:	8824      	ldrh	r4, [r4, #0]
 800b666:	429c      	cmp	r4, r3
 800b668:	d905      	bls.n	800b676 <tcp_getoptbyte+0x26>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1712
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800b66a:	4908      	ldr	r1, [pc, #32]	; (800b68c <tcp_getoptbyte+0x3c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1713
    return opts[tcp_optidx++];
 800b66c:	802a      	strh	r2, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1712
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800b66e:	6809      	ldr	r1, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1713
    return opts[tcp_optidx++];
 800b670:	440b      	add	r3, r1
 800b672:	7d18      	ldrb	r0, [r3, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1718
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
    return tcphdr_opt2[idx];
  }
}
 800b674:	bd30      	pop	{r4, r5, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1715
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800b676:	1b1b      	subs	r3, r3, r4
 800b678:	800a      	strh	r2, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1716
    return tcphdr_opt2[idx];
 800b67a:	b2db      	uxtb	r3, r3
 800b67c:	5cc0      	ldrb	r0, [r0, r3]
 800b67e:	e7f9      	b.n	800b674 <tcp_getoptbyte+0x24>
 800b680:	2000801c 	.word	0x2000801c
 800b684:	20008010 	.word	0x20008010
 800b688:	20008018 	.word	0x20008018
 800b68c:	20008014 	.word	0x20008014

0800b690 <tcp_parseopt.isra.1.part.2>:
tcp_parseopt():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1729
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 800b690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1739
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b694:	4d1b      	ldr	r5, [pc, #108]	; (800b704 <tcp_parseopt.isra.1.part.2+0x74>)
 800b696:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1729
tcp_parseopt(struct tcp_pcb *pcb)
 800b698:	4607      	mov	r7, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1739
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b69a:	4e1b      	ldr	r6, [pc, #108]	; (800b708 <tcp_parseopt.isra.1.part.2+0x78>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1761
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
        mss |= tcp_getoptbyte();
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b69c:	f240 58b3 	movw	r8, #1459	; 0x5b3
 800b6a0:	f240 59b4 	movw	r9, #1460	; 0x5b4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1739
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b6a4:	802b      	strh	r3, [r5, #0]
 800b6a6:	8834      	ldrh	r4, [r6, #0]
 800b6a8:	882b      	ldrh	r3, [r5, #0]
 800b6aa:	42a3      	cmp	r3, r4
 800b6ac:	d301      	bcc.n	800b6b2 <tcp_parseopt.isra.1.part.2+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1829
           can skip past them. */
        tcp_optidx += data - 2;
      }
    }
  }
}
 800b6ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1740
      u8_t opt = tcp_getoptbyte();
 800b6b2:	f7ff ffcd 	bl	800b650 <tcp_getoptbyte>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1741
      switch (opt) {
 800b6b6:	2801      	cmp	r0, #1
 800b6b8:	d0f5      	beq.n	800b6a6 <tcp_parseopt.isra.1.part.2+0x16>
 800b6ba:	f010 0fff 	tst.w	r0, #255	; 0xff
 800b6be:	d0f6      	beq.n	800b6ae <tcp_parseopt.isra.1.part.2+0x1e>
 800b6c0:	2802      	cmp	r0, #2
 800b6c2:	d116      	bne.n	800b6f2 <tcp_parseopt.isra.1.part.2+0x62>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1752
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b6c4:	f7ff ffc4 	bl	800b650 <tcp_getoptbyte>
 800b6c8:	2804      	cmp	r0, #4
 800b6ca:	d1f0      	bne.n	800b6ae <tcp_parseopt.isra.1.part.2+0x1e>
 800b6cc:	882b      	ldrh	r3, [r5, #0]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	42a3      	cmp	r3, r4
 800b6d2:	daec      	bge.n	800b6ae <tcp_parseopt.isra.1.part.2+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1758
        mss = (tcp_getoptbyte() << 8);
 800b6d4:	f7ff ffbc 	bl	800b650 <tcp_getoptbyte>
 800b6d8:	0200      	lsls	r0, r0, #8
 800b6da:	b284      	uxth	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1759
        mss |= tcp_getoptbyte();
 800b6dc:	f7ff ffb8 	bl	800b650 <tcp_getoptbyte>
 800b6e0:	4320      	orrs	r0, r4
 800b6e2:	b280      	uxth	r0, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1761
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b6e4:	1e43      	subs	r3, r0, #1
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	4543      	cmp	r3, r8
 800b6ea:	bf88      	it	hi
 800b6ec:	4648      	movhi	r0, r9
 800b6ee:	8038      	strh	r0, [r7, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1762
        break;
 800b6f0:	e7d9      	b.n	800b6a6 <tcp_parseopt.isra.1.part.2+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1816
        data = tcp_getoptbyte();
 800b6f2:	f7ff ffad 	bl	800b650 <tcp_getoptbyte>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1817
        if (data < 2) {
 800b6f6:	2801      	cmp	r0, #1
 800b6f8:	d9d9      	bls.n	800b6ae <tcp_parseopt.isra.1.part.2+0x1e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1825
        tcp_optidx += data - 2;
 800b6fa:	882b      	ldrh	r3, [r5, #0]
 800b6fc:	3b02      	subs	r3, #2
 800b6fe:	4403      	add	r3, r0
 800b700:	802b      	strh	r3, [r5, #0]
 800b702:	e7d0      	b.n	800b6a6 <tcp_parseopt.isra.1.part.2+0x16>
 800b704:	20008010 	.word	0x20008010
 800b708:	20008020 	.word	0x20008020

0800b70c <tcp_input_delayed_close>:
tcp_input_delayed_close():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:538
  if (recv_flags & TF_CLOSED) {
 800b70c:	4b0d      	ldr	r3, [pc, #52]	; (800b744 <tcp_input_delayed_close+0x38>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:537
{
 800b70e:	b510      	push	{r4, lr}
 800b710:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:538
  if (recv_flags & TF_CLOSED) {
 800b712:	7818      	ldrb	r0, [r3, #0]
 800b714:	f010 0010 	ands.w	r0, r0, #16
 800b718:	d012      	beq.n	800b740 <tcp_input_delayed_close+0x34>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:541
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b71a:	7ea3      	ldrb	r3, [r4, #26]
 800b71c:	06db      	lsls	r3, r3, #27
 800b71e:	d406      	bmi.n	800b72e <tcp_input_delayed_close+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:545
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b720:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800b724:	b11b      	cbz	r3, 800b72e <tcp_input_delayed_close+0x22>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:545 (discriminator 1)
 800b726:	f06f 010e 	mvn.w	r1, #14
 800b72a:	6920      	ldr	r0, [r4, #16]
 800b72c:	4798      	blx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:547
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b72e:	4621      	mov	r1, r4
 800b730:	4805      	ldr	r0, [pc, #20]	; (800b748 <tcp_input_delayed_close+0x3c>)
 800b732:	f7fe f821 	bl	8009778 <tcp_pcb_remove>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:548
    memp_free(MEMP_TCP_PCB, pcb);
 800b736:	2001      	movs	r0, #1
 800b738:	4621      	mov	r1, r4
 800b73a:	f000 fdc3 	bl	800c2c4 <memp_free>
 800b73e:	2001      	movs	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:552
}
 800b740:	bd10      	pop	{r4, pc}
 800b742:	bf00      	nop
 800b744:	20008008 	.word	0x20008008
 800b748:	200080f4 	.word	0x200080f4

0800b74c <tcp_input>:
tcp_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:105
{
 800b74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:122
  tcphdr = (struct tcp_hdr *)p->payload;
 800b750:	6843      	ldr	r3, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:105
{
 800b752:	b087      	sub	sp, #28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:122
  tcphdr = (struct tcp_hdr *)p->payload;
 800b754:	4ea4      	ldr	r6, [pc, #656]	; (800b9e8 <tcp_input+0x29c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:105
{
 800b756:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:122
  tcphdr = (struct tcp_hdr *)p->payload;
 800b758:	6033      	str	r3, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:129
  if (p->len < TCP_HLEN) {
 800b75a:	8943      	ldrh	r3, [r0, #10]
 800b75c:	2b13      	cmp	r3, #19
 800b75e:	f240 81bc 	bls.w	800bada <tcp_input+0x38e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:137
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b762:	4fa2      	ldr	r7, [pc, #648]	; (800b9ec <tcp_input+0x2a0>)
 800b764:	6839      	ldr	r1, [r7, #0]
 800b766:	46b8      	mov	r8, r7
 800b768:	6978      	ldr	r0, [r7, #20]
 800b76a:	f7f8 fd5f 	bl	800422c <ip4_addr_isbroadcast_u32>
 800b76e:	4604      	mov	r4, r0
 800b770:	2800      	cmp	r0, #0
 800b772:	f040 81b2 	bne.w	800bada <tcp_input+0x38e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:138 (discriminator 1)
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:137 (discriminator 1)
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b77c:	2be0      	cmp	r3, #224	; 0xe0
 800b77e:	f000 81ac 	beq.w	800bada <tcp_input+0x38e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:159
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800b782:	6833      	ldr	r3, [r6, #0]
 800b784:	8998      	ldrh	r0, [r3, #12]
 800b786:	f7fe fff3 	bl	800a770 <lwip_htons>
 800b78a:	0a81      	lsrs	r1, r0, #10
 800b78c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:160
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b790:	2913      	cmp	r1, #19
 800b792:	f240 81a2 	bls.w	800bada <tcp_input+0x38e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:160 (discriminator 1)
 800b796:	b289      	uxth	r1, r1
 800b798:	892b      	ldrh	r3, [r5, #8]
 800b79a:	428b      	cmp	r3, r1
 800b79c:	f0c0 819d 	bcc.w	800bada <tcp_input+0x38e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:168
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800b7a0:	f1a1 0314 	sub.w	r3, r1, #20
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:170
  if (p->len >= hdrlen_bytes) {
 800b7a4:	8968      	ldrh	r0, [r5, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:168
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800b7a6:	4a92      	ldr	r2, [pc, #584]	; (800b9f0 <tcp_input+0x2a4>)
 800b7a8:	b29b      	uxth	r3, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:169
  tcphdr_opt2 = NULL;
 800b7aa:	4f92      	ldr	r7, [pc, #584]	; (800b9f4 <tcp_input+0x2a8>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:170
  if (p->len >= hdrlen_bytes) {
 800b7ac:	4288      	cmp	r0, r1
 800b7ae:	9204      	str	r2, [sp, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:168
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800b7b0:	8013      	strh	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:169
  tcphdr_opt2 = NULL;
 800b7b2:	603c      	str	r4, [r7, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:170
  if (p->len >= hdrlen_bytes) {
 800b7b4:	f8df 928c 	ldr.w	r9, [pc, #652]	; 800ba44 <tcp_input+0x2f8>
 800b7b8:	d346      	bcc.n	800b848 <tcp_input+0xfc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:173
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800b7ba:	4249      	negs	r1, r1
 800b7bc:	4628      	mov	r0, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:172
    tcphdr_opt1len = tcphdr_optlen;
 800b7be:	f8a9 3000 	strh.w	r3, [r9]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:173
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800b7c2:	f7ff f859 	bl	800a878 <pbuf_header>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:212
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b7c6:	6834      	ldr	r4, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:223
  prev = NULL;
 800b7c8:	f04f 0900 	mov.w	r9, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:214
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b7cc:	f8df a278 	ldr.w	sl, [pc, #632]	; 800ba48 <tcp_input+0x2fc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:212
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b7d0:	8820      	ldrh	r0, [r4, #0]
 800b7d2:	f7fe ffcd 	bl	800a770 <lwip_htons>
 800b7d6:	8020      	strh	r0, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:213
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b7d8:	6834      	ldr	r4, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:215
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b7da:	4f87      	ldr	r7, [pc, #540]	; (800b9f8 <tcp_input+0x2ac>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:213
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b7dc:	8860      	ldrh	r0, [r4, #2]
 800b7de:	f7fe ffc7 	bl	800a770 <lwip_htons>
 800b7e2:	8060      	strh	r0, [r4, #2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:214
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b7e4:	6834      	ldr	r4, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:226
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b7e6:	f8df b224 	ldr.w	fp, [pc, #548]	; 800ba0c <tcp_input+0x2c0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:214
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b7ea:	6860      	ldr	r0, [r4, #4]
 800b7ec:	f7fe ffc3 	bl	800a776 <lwip_htonl>
 800b7f0:	6060      	str	r0, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:215
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b7f2:	6834      	ldr	r4, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:214
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b7f4:	f8ca 0000 	str.w	r0, [sl]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:215
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b7f8:	68a0      	ldr	r0, [r4, #8]
 800b7fa:	f7fe ffbc 	bl	800a776 <lwip_htonl>
 800b7fe:	60a0      	str	r0, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:216
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b800:	6834      	ldr	r4, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:215
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b802:	6038      	str	r0, [r7, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:216
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b804:	89e0      	ldrh	r0, [r4, #14]
 800b806:	f7fe ffb3 	bl	800a770 <lwip_htons>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:218
  flags = TCPH_FLAGS(tcphdr);
 800b80a:	6833      	ldr	r3, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:216
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b80c:	81e0      	strh	r0, [r4, #14]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:218
  flags = TCPH_FLAGS(tcphdr);
 800b80e:	8998      	ldrh	r0, [r3, #12]
 800b810:	f7fe ffae 	bl	800a770 <lwip_htons>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:219
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800b814:	8929      	ldrh	r1, [r5, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:218
  flags = TCPH_FLAGS(tcphdr);
 800b816:	b2c0      	uxtb	r0, r0
 800b818:	4a78      	ldr	r2, [pc, #480]	; (800b9fc <tcp_input+0x2b0>)
 800b81a:	f000 033f 	and.w	r3, r0, #63	; 0x3f
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:219
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800b81e:	f010 0003 	ands.w	r0, r0, #3
 800b822:	bf18      	it	ne
 800b824:	2001      	movne	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:218
  flags = TCPH_FLAGS(tcphdr);
 800b826:	7013      	strb	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:219
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800b828:	4b75      	ldr	r3, [pc, #468]	; (800ba00 <tcp_input+0x2b4>)
 800b82a:	4408      	add	r0, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:225
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b82c:	4975      	ldr	r1, [pc, #468]	; (800ba04 <tcp_input+0x2b8>)
 800b82e:	680c      	ldr	r4, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:219
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800b830:	8018      	strh	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:225
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b832:	e9cd 2302 	strd	r2, r3, [sp, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:225 (discriminator 1)
 800b836:	2c00      	cmp	r4, #0
 800b838:	d146      	bne.n	800b8c8 <tcp_input+0x17c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:253
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b83a:	4b73      	ldr	r3, [pc, #460]	; (800ba08 <tcp_input+0x2bc>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:254
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b83c:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 800ba0c <tcp_input+0x2c0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:253
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b840:	681c      	ldr	r4, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:254
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b842:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 800ba14 <tcp_input+0x2c8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:253
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b846:	e14f      	b.n	800bae8 <tcp_input+0x39c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:178
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b848:	682b      	ldr	r3, [r5, #0]
 800b84a:	b92b      	cbnz	r3, 800b858 <tcp_input+0x10c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:178 (discriminator 1)
 800b84c:	4b6f      	ldr	r3, [pc, #444]	; (800ba0c <tcp_input+0x2c0>)
 800b84e:	22b2      	movs	r2, #178	; 0xb2
 800b850:	496f      	ldr	r1, [pc, #444]	; (800ba10 <tcp_input+0x2c4>)
 800b852:	4870      	ldr	r0, [pc, #448]	; (800ba14 <tcp_input+0x2c8>)
 800b854:	f001 fba2 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:181
    pbuf_header(p, -TCP_HLEN);
 800b858:	f06f 0113 	mvn.w	r1, #19
 800b85c:	4628      	mov	r0, r5
 800b85e:	f7ff f80b 	bl	800a878 <pbuf_header>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:184
    tcphdr_opt1len = p->len;
 800b862:	896c      	ldrh	r4, [r5, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:185
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800b864:	9b04      	ldr	r3, [sp, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:189
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800b866:	4628      	mov	r0, r5
 800b868:	4261      	negs	r1, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:184
    tcphdr_opt1len = p->len;
 800b86a:	f8a9 4000 	strh.w	r4, [r9]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:185
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800b86e:	f8b3 a000 	ldrh.w	sl, [r3]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:189
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800b872:	b209      	sxth	r1, r1
 800b874:	f7ff f800 	bl	800a878 <pbuf_header>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:185
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800b878:	ebaa 0904 	sub.w	r9, sl, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:192
    if (opt2len > p->next->len) {
 800b87c:	6828      	ldr	r0, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:185
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800b87e:	fa1f f989 	uxth.w	r9, r9
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:192
    if (opt2len > p->next->len) {
 800b882:	8943      	ldrh	r3, [r0, #10]
 800b884:	454b      	cmp	r3, r9
 800b886:	f0c0 8128 	bcc.w	800bada <tcp_input+0x38e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:204
    pbuf_header(p->next, -(s16_t)opt2len);
 800b88a:	eba4 040a 	sub.w	r4, r4, sl
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:200
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800b88e:	6843      	ldr	r3, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:204
    pbuf_header(p->next, -(s16_t)opt2len);
 800b890:	b2a4      	uxth	r4, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:200
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800b892:	603b      	str	r3, [r7, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:204
    pbuf_header(p->next, -(s16_t)opt2len);
 800b894:	b221      	sxth	r1, r4
 800b896:	f7fe ffef 	bl	800a878 <pbuf_header>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:205
    p->tot_len -= opt2len;
 800b89a:	892b      	ldrh	r3, [r5, #8]
 800b89c:	441c      	add	r4, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:207
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b89e:	896b      	ldrh	r3, [r5, #10]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:205
    p->tot_len -= opt2len;
 800b8a0:	812c      	strh	r4, [r5, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:207
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b8a2:	b12b      	cbz	r3, 800b8b0 <tcp_input+0x164>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:207 (discriminator 1)
 800b8a4:	4b59      	ldr	r3, [pc, #356]	; (800ba0c <tcp_input+0x2c0>)
 800b8a6:	22cf      	movs	r2, #207	; 0xcf
 800b8a8:	495b      	ldr	r1, [pc, #364]	; (800ba18 <tcp_input+0x2cc>)
 800b8aa:	485a      	ldr	r0, [pc, #360]	; (800ba14 <tcp_input+0x2c8>)
 800b8ac:	f001 fb76 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:208
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b8b0:	682b      	ldr	r3, [r5, #0]
 800b8b2:	892a      	ldrh	r2, [r5, #8]
 800b8b4:	891b      	ldrh	r3, [r3, #8]
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d085      	beq.n	800b7c6 <tcp_input+0x7a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:208 (discriminator 1)
 800b8ba:	4b54      	ldr	r3, [pc, #336]	; (800ba0c <tcp_input+0x2c0>)
 800b8bc:	22d0      	movs	r2, #208	; 0xd0
 800b8be:	4957      	ldr	r1, [pc, #348]	; (800ba1c <tcp_input+0x2d0>)
 800b8c0:	4854      	ldr	r0, [pc, #336]	; (800ba14 <tcp_input+0x2c8>)
 800b8c2:	f001 fb6b 	bl	800cf9c <iprintf>
 800b8c6:	e77e      	b.n	800b7c6 <tcp_input+0x7a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:226
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b8c8:	7d23      	ldrb	r3, [r4, #20]
 800b8ca:	b92b      	cbnz	r3, 800b8d8 <tcp_input+0x18c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:226 (discriminator 1)
 800b8cc:	465b      	mov	r3, fp
 800b8ce:	22e2      	movs	r2, #226	; 0xe2
 800b8d0:	4953      	ldr	r1, [pc, #332]	; (800ba20 <tcp_input+0x2d4>)
 800b8d2:	4850      	ldr	r0, [pc, #320]	; (800ba14 <tcp_input+0x2c8>)
 800b8d4:	f001 fb62 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:227
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b8d8:	7d23      	ldrb	r3, [r4, #20]
 800b8da:	2b0a      	cmp	r3, #10
 800b8dc:	d105      	bne.n	800b8ea <tcp_input+0x19e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:227 (discriminator 1)
 800b8de:	465b      	mov	r3, fp
 800b8e0:	22e3      	movs	r2, #227	; 0xe3
 800b8e2:	4950      	ldr	r1, [pc, #320]	; (800ba24 <tcp_input+0x2d8>)
 800b8e4:	484b      	ldr	r0, [pc, #300]	; (800ba14 <tcp_input+0x2c8>)
 800b8e6:	f001 fb59 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:228
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b8ea:	7d23      	ldrb	r3, [r4, #20]
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d105      	bne.n	800b8fc <tcp_input+0x1b0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:228 (discriminator 1)
 800b8f0:	465b      	mov	r3, fp
 800b8f2:	22e4      	movs	r2, #228	; 0xe4
 800b8f4:	494c      	ldr	r1, [pc, #304]	; (800ba28 <tcp_input+0x2dc>)
 800b8f6:	4847      	ldr	r0, [pc, #284]	; (800ba14 <tcp_input+0x2c8>)
 800b8f8:	f001 fb50 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:229
    if (pcb->remote_port == tcphdr->src &&
 800b8fc:	6832      	ldr	r2, [r6, #0]
 800b8fe:	8b21      	ldrh	r1, [r4, #24]
 800b900:	8813      	ldrh	r3, [r2, #0]
 800b902:	4299      	cmp	r1, r3
 800b904:	68e3      	ldr	r3, [r4, #12]
 800b906:	d16b      	bne.n	800b9e0 <tcp_input+0x294>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:229 (discriminator 1)
 800b908:	8ae1      	ldrh	r1, [r4, #22]
 800b90a:	8852      	ldrh	r2, [r2, #2]
 800b90c:	4291      	cmp	r1, r2
 800b90e:	d167      	bne.n	800b9e0 <tcp_input+0x294>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:230
        pcb->local_port == tcphdr->dest &&
 800b910:	6861      	ldr	r1, [r4, #4]
 800b912:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b916:	4291      	cmp	r1, r2
 800b918:	d162      	bne.n	800b9e0 <tcp_input+0x294>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:231
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b91a:	6821      	ldr	r1, [r4, #0]
 800b91c:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800b920:	4291      	cmp	r1, r2
 800b922:	d15d      	bne.n	800b9e0 <tcp_input+0x294>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:236
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b924:	42a3      	cmp	r3, r4
 800b926:	f040 840f 	bne.w	800c148 <tcp_input+0x9fc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:236 (discriminator 1)
 800b92a:	4b38      	ldr	r3, [pc, #224]	; (800ba0c <tcp_input+0x2c0>)
 800b92c:	22ec      	movs	r2, #236	; 0xec
 800b92e:	493f      	ldr	r1, [pc, #252]	; (800ba2c <tcp_input+0x2e0>)
 800b930:	4838      	ldr	r0, [pc, #224]	; (800ba14 <tcp_input+0x2c8>)
 800b932:	f001 fb33 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:237 (discriminator 1)
      if (prev != NULL) {
 800b936:	f1b9 0f00 	cmp.w	r9, #0
 800b93a:	d006      	beq.n	800b94a <tcp_input+0x1fe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:238
        prev->next = pcb->next;
 800b93c:	68e3      	ldr	r3, [r4, #12]
 800b93e:	f8c9 300c 	str.w	r3, [r9, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:239
        pcb->next = tcp_active_pcbs;
 800b942:	4b30      	ldr	r3, [pc, #192]	; (800ba04 <tcp_input+0x2b8>)
 800b944:	681a      	ldr	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:240
        tcp_active_pcbs = pcb;
 800b946:	601c      	str	r4, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:239
        pcb->next = tcp_active_pcbs;
 800b948:	60e2      	str	r2, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:244
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b94a:	68e3      	ldr	r3, [r4, #12]
 800b94c:	42a3      	cmp	r3, r4
 800b94e:	d105      	bne.n	800b95c <tcp_input+0x210>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:244 (discriminator 1)
 800b950:	4b2e      	ldr	r3, [pc, #184]	; (800ba0c <tcp_input+0x2c0>)
 800b952:	22f4      	movs	r2, #244	; 0xf4
 800b954:	4936      	ldr	r1, [pc, #216]	; (800ba30 <tcp_input+0x2e4>)
 800b956:	482f      	ldr	r0, [pc, #188]	; (800ba14 <tcp_input+0x2c8>)
 800b958:	f001 fb20 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:342
    inseg.next = NULL;
 800b95c:	4b35      	ldr	r3, [pc, #212]	; (800ba34 <tcp_input+0x2e8>)
 800b95e:	2200      	movs	r2, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:343
    inseg.len = p->tot_len;
 800b960:	8929      	ldrh	r1, [r5, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:349
    recv_acked = 0;
 800b962:	4835      	ldr	r0, [pc, #212]	; (800ba38 <tcp_input+0x2ec>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:343
    inseg.len = p->tot_len;
 800b964:	8119      	strh	r1, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:345
    inseg.tcphdr = tcphdr;
 800b966:	6831      	ldr	r1, [r6, #0]
 800b968:	4681      	mov	r9, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:348
    recv_flags = 0;
 800b96a:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 800ba4c <tcp_input+0x300>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:345
    inseg.tcphdr = tcphdr;
 800b96e:	60d9      	str	r1, [r3, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:347
    recv_data = NULL;
 800b970:	4932      	ldr	r1, [pc, #200]	; (800ba3c <tcp_input+0x2f0>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:342
    inseg.next = NULL;
 800b972:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:347
    recv_data = NULL;
 800b974:	600a      	str	r2, [r1, #0]
 800b976:	468b      	mov	fp, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:348
    recv_flags = 0;
 800b978:	f888 2000 	strb.w	r2, [r8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:349
    recv_acked = 0;
 800b97c:	8002      	strh	r2, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:351
    if (flags & TCP_PSH) {
 800b97e:	9a02      	ldr	r2, [sp, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:344
    inseg.p = p;
 800b980:	605d      	str	r5, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:351
    if (flags & TCP_PSH) {
 800b982:	7812      	ldrb	r2, [r2, #0]
 800b984:	9305      	str	r3, [sp, #20]
 800b986:	f012 0f08 	tst.w	r2, #8
 800b98a:	d003      	beq.n	800b994 <tcp_input+0x248>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:352
      p->flags |= PBUF_FLAG_PUSH;
 800b98c:	7b6b      	ldrb	r3, [r5, #13]
 800b98e:	f043 0301 	orr.w	r3, r3, #1
 800b992:	736b      	strb	r3, [r5, #13]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:356
    if (pcb->refused_data != NULL) {
 800b994:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b996:	2b00      	cmp	r3, #0
 800b998:	f000 8138 	beq.w	800bc0c <tcp_input+0x4c0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:357
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b99c:	4620      	mov	r0, r4
 800b99e:	f7fd fff3 	bl	8009988 <tcp_process_refused_data>
 800b9a2:	300d      	adds	r0, #13
 800b9a4:	d008      	beq.n	800b9b8 <tcp_input+0x26c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:357 (discriminator 1)
 800b9a6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	f000 812f 	beq.w	800bc0c <tcp_input+0x4c0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:358
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b9ae:	9b03      	ldr	r3, [sp, #12]
 800b9b0:	881b      	ldrh	r3, [r3, #0]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	f000 812a 	beq.w	800bc0c <tcp_input+0x4c0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:361
        if (pcb->rcv_ann_wnd == 0) {
 800b9b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b9ba:	b913      	cbnz	r3, 800b9c2 <tcp_input+0x276>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:364
          tcp_send_empty_ack(pcb);
 800b9bc:	4620      	mov	r0, r4
 800b9be:	f7fc ffe4 	bl	800898a <tcp_send_empty_ack>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:498
    tcp_input_pcb = NULL;
 800b9c2:	2400      	movs	r4, #0
 800b9c4:	4b1e      	ldr	r3, [pc, #120]	; (800ba40 <tcp_input+0x2f4>)
 800b9c6:	601c      	str	r4, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:502
    if (inseg.p != NULL)
 800b9c8:	9b05      	ldr	r3, [sp, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:499
    recv_data = NULL;
 800b9ca:	f8cb 4000 	str.w	r4, [fp]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:502
    if (inseg.p != NULL)
 800b9ce:	6858      	ldr	r0, [r3, #4]
 800b9d0:	b118      	cbz	r0, 800b9da <tcp_input+0x28e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:504
      pbuf_free(inseg.p);
 800b9d2:	f7fe ff57 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:505
      inseg.p = NULL;
 800b9d6:	9b05      	ldr	r3, [sp, #20]
 800b9d8:	605c      	str	r4, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:528
}
 800b9da:	b007      	add	sp, #28
 800b9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:225 (discriminator 2)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b9e0:	46a1      	mov	r9, r4
 800b9e2:	461c      	mov	r4, r3
 800b9e4:	e727      	b.n	800b836 <tcp_input+0xea>
 800b9e6:	bf00      	nop
 800b9e8:	20008014 	.word	0x20008014
 800b9ec:	2000be1c 	.word	0x2000be1c
 800b9f0:	20008020 	.word	0x20008020
 800b9f4:	2000801c 	.word	0x2000801c
 800b9f8:	20007fe8 	.word	0x20007fe8
 800b9fc:	20007fec 	.word	0x20007fec
 800ba00:	20008022 	.word	0x20008022
 800ba04:	200080f4 	.word	0x200080f4
 800ba08:	20008104 	.word	0x20008104
 800ba0c:	080205fd 	.word	0x080205fd
 800ba10:	08020447 	.word	0x08020447
 800ba14:	0800e36a 	.word	0x0800e36a
 800ba18:	08020457 	.word	0x08020457
 800ba1c:	08020463 	.word	0x08020463
 800ba20:	08020482 	.word	0x08020482
 800ba24:	080204a9 	.word	0x080204a9
 800ba28:	080204d3 	.word	0x080204d3
 800ba2c:	080204fa 	.word	0x080204fa
 800ba30:	08020525 	.word	0x08020525
 800ba34:	20007ff0 	.word	0x20007ff0
 800ba38:	20008000 	.word	0x20008000
 800ba3c:	20008004 	.word	0x20008004
 800ba40:	20008114 	.word	0x20008114
 800ba44:	20008018 	.word	0x20008018
 800ba48:	2000800c 	.word	0x2000800c
 800ba4c:	20008008 	.word	0x20008008
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:254
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ba50:	7d23      	ldrb	r3, [r4, #20]
 800ba52:	2b0a      	cmp	r3, #10
 800ba54:	d005      	beq.n	800ba62 <tcp_input+0x316>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:254 (discriminator 1)
 800ba56:	464b      	mov	r3, r9
 800ba58:	22fe      	movs	r2, #254	; 0xfe
 800ba5a:	49a3      	ldr	r1, [pc, #652]	; (800bce8 <tcp_input+0x59c>)
 800ba5c:	4658      	mov	r0, fp
 800ba5e:	f001 fa9d 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:255
      if (pcb->remote_port == tcphdr->src &&
 800ba62:	6833      	ldr	r3, [r6, #0]
 800ba64:	8b20      	ldrh	r0, [r4, #24]
 800ba66:	881a      	ldrh	r2, [r3, #0]
 800ba68:	4290      	cmp	r0, r2
 800ba6a:	d13c      	bne.n	800bae6 <tcp_input+0x39a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:256 (discriminator 1)
          pcb->local_port == tcphdr->dest &&
 800ba6c:	885b      	ldrh	r3, [r3, #2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:255 (discriminator 1)
      if (pcb->remote_port == tcphdr->src &&
 800ba6e:	8ae2      	ldrh	r2, [r4, #22]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d138      	bne.n	800bae6 <tcp_input+0x39a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:256
          pcb->local_port == tcphdr->dest &&
 800ba74:	6861      	ldr	r1, [r4, #4]
 800ba76:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ba7a:	4299      	cmp	r1, r3
 800ba7c:	d133      	bne.n	800bae6 <tcp_input+0x39a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:257
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ba7e:	6821      	ldr	r1, [r4, #0]
 800ba80:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800ba84:	4299      	cmp	r1, r3
 800ba86:	d12e      	bne.n	800bae6 <tcp_input+0x39a>
tcp_timewait_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:670
  if (flags & TCP_RST) {
 800ba88:	9b02      	ldr	r3, [sp, #8]
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	075e      	lsls	r6, r3, #29
 800ba8e:	d424      	bmi.n	800bada <tcp_input+0x38e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:674
  if (flags & TCP_SYN) {
 800ba90:	9903      	ldr	r1, [sp, #12]
 800ba92:	880e      	ldrh	r6, [r1, #0]
 800ba94:	0799      	lsls	r1, r3, #30
 800ba96:	d513      	bpl.n	800bac0 <tcp_input+0x374>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:677
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ba98:	f8da 1000 	ldr.w	r1, [sl]
 800ba9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba9e:	1acb      	subs	r3, r1, r3
 800baa0:	d413      	bmi.n	800baca <tcp_input+0x37e>
 800baa2:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
 800baa6:	eba3 030c 	sub.w	r3, r3, ip
 800baaa:	2b00      	cmp	r3, #0
 800baac:	dc0d      	bgt.n	800baca <tcp_input+0x37e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:679
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800baae:	4b8f      	ldr	r3, [pc, #572]	; (800bcec <tcp_input+0x5a0>)
 800bab0:	4431      	add	r1, r6
 800bab2:	e9cd 2000 	strd	r2, r0, [sp]
 800bab6:	1d1a      	adds	r2, r3, #4
tcp_listen_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:581
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bab8:	6838      	ldr	r0, [r7, #0]
 800baba:	f7fd f913 	bl	8008ce4 <tcp_rst>
 800babe:	e00c      	b.n	800bada <tcp_input+0x38e>
tcp_timewait_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:683
  } else if (flags & TCP_FIN) {
 800bac0:	07d8      	lsls	r0, r3, #31
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:686
    pcb->tmr = tcp_ticks;
 800bac2:	bf42      	ittt	mi
 800bac4:	4b8a      	ldrmi	r3, [pc, #552]	; (800bcf0 <tcp_input+0x5a4>)
 800bac6:	681b      	ldrmi	r3, [r3, #0]
 800bac8:	6223      	strmi	r3, [r4, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:689
  if ((tcplen > 0)) {
 800baca:	b136      	cbz	r6, 800bada <tcp_input+0x38e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:691
    pcb->flags |= TF_ACK_NOW;
 800bacc:	7ea3      	ldrb	r3, [r4, #26]
 800bace:	f043 0302 	orr.w	r3, r3, #2
 800bad2:	76a3      	strb	r3, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:692
    tcp_output(pcb);
 800bad4:	4620      	mov	r0, r4
 800bad6:	f7fc ff8d 	bl	80089f4 <tcp_output>
tcp_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:527
  pbuf_free(p);
 800bada:	4628      	mov	r0, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:528
}
 800badc:	b007      	add	sp, #28
 800bade:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:527
  pbuf_free(p);
 800bae2:	f7fe becf 	b.w	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:253 (discriminator 2)
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bae6:	68e4      	ldr	r4, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:253 (discriminator 1)
 800bae8:	2c00      	cmp	r4, #0
 800baea:	d1b1      	bne.n	800ba50 <tcp_input+0x304>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:272
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800baec:	4b81      	ldr	r3, [pc, #516]	; (800bcf4 <tcp_input+0x5a8>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:283
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800baee:	f8d8 c014 	ldr.w	ip, [r8, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:272
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800baf2:	6819      	ldr	r1, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:273
      if (lpcb->local_port == tcphdr->dest) {
 800baf4:	6833      	ldr	r3, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:272
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800baf6:	4689      	mov	r9, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:272 (discriminator 1)
 800baf8:	f1b9 0f00 	cmp.w	r9, #0
 800bafc:	d111      	bne.n	800bb22 <tcp_input+0x3d6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:512
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800bafe:	8998      	ldrh	r0, [r3, #12]
 800bb00:	f7fe fe36 	bl	800a770 <lwip_htons>
 800bb04:	0743      	lsls	r3, r0, #29
 800bb06:	d4e8      	bmi.n	800bada <tcp_input+0x38e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:516
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb08:	6833      	ldr	r3, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:515
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb0a:	9a03      	ldr	r2, [sp, #12]
 800bb0c:	f8da 1000 	ldr.w	r1, [sl]
 800bb10:	8810      	ldrh	r0, [r2, #0]
 800bb12:	881a      	ldrh	r2, [r3, #0]
 800bb14:	4401      	add	r1, r0
 800bb16:	9201      	str	r2, [sp, #4]
 800bb18:	885b      	ldrh	r3, [r3, #2]
 800bb1a:	9300      	str	r3, [sp, #0]
 800bb1c:	4b73      	ldr	r3, [pc, #460]	; (800bcec <tcp_input+0x5a0>)
 800bb1e:	1d1a      	adds	r2, r3, #4
 800bb20:	e7ca      	b.n	800bab8 <tcp_input+0x36c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:273
      if (lpcb->local_port == tcphdr->dest) {
 800bb22:	8858      	ldrh	r0, [r3, #2]
 800bb24:	f8b9 2016 	ldrh.w	r2, [r9, #22]
 800bb28:	4282      	cmp	r2, r0
 800bb2a:	d107      	bne.n	800bb3c <tcp_input+0x3f0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:283
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bb2c:	f8d9 2000 	ldr.w	r2, [r9]
 800bb30:	4562      	cmp	r2, ip
 800bb32:	f000 82ed 	beq.w	800c110 <tcp_input+0x9c4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:286
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800bb36:	2a00      	cmp	r2, #0
 800bb38:	f000 82ea 	beq.w	800c110 <tcp_input+0x9c4>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:272 (discriminator 2)
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bb3c:	464c      	mov	r4, r9
 800bb3e:	f8d9 900c 	ldr.w	r9, [r9, #12]
 800bb42:	e7d9      	b.n	800baf8 <tcp_input+0x3ac>
tcp_listen_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:583
  } else if (flags & TCP_SYN) {
 800bb44:	0791      	lsls	r1, r2, #30
 800bb46:	d5c8      	bpl.n	800bada <tcp_input+0x38e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:591
    npcb = tcp_alloc(pcb->prio);
 800bb48:	f899 0015 	ldrb.w	r0, [r9, #21]
 800bb4c:	f7fe f86e 	bl	8009c2c <tcp_alloc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:595
    if (npcb == NULL) {
 800bb50:	4604      	mov	r4, r0
 800bb52:	b950      	cbnz	r0, 800bb6a <tcp_input+0x41e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:599
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bb54:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d0be      	beq.n	800bada <tcp_input+0x38e>
 800bb5c:	4601      	mov	r1, r0
 800bb5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb62:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bb66:	4798      	blx	r3
 800bb68:	e7b7      	b.n	800bada <tcp_input+0x38e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:608
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800bb6a:	f8d8 3014 	ldr.w	r3, [r8, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:611
    npcb->remote_port = tcphdr->src;
 800bb6e:	6832      	ldr	r2, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:608
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800bb70:	6003      	str	r3, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:609
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800bb72:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bb76:	6043      	str	r3, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:610
    npcb->local_port = pcb->local_port;
 800bb78:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 800bb7c:	82c3      	strh	r3, [r0, #22]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:611
    npcb->remote_port = tcphdr->src;
 800bb7e:	7813      	ldrb	r3, [r2, #0]
 800bb80:	7852      	ldrb	r2, [r2, #1]
 800bb82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bb86:	8303      	strh	r3, [r0, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:612
    npcb->state = SYN_RCVD;
 800bb88:	2303      	movs	r3, #3
 800bb8a:	7503      	strb	r3, [r0, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:613
    npcb->rcv_nxt = seqno + 1;
 800bb8c:	f8da 3000 	ldr.w	r3, [sl]
 800bb90:	3301      	adds	r3, #1
 800bb92:	6243      	str	r3, [r0, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:614
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800bb94:	62c3      	str	r3, [r0, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:615
    iss = tcp_next_iss(npcb);
 800bb96:	f7fe f8d3 	bl	8009d40 <tcp_next_iss>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:620
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800bb9a:	f8da 3000 	ldr.w	r3, [sl]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:616
    npcb->snd_wl2 = iss;
 800bb9e:	6560      	str	r0, [r4, #84]	; 0x54
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:620
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800bba0:	3b01      	subs	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:617
    npcb->snd_nxt = iss;
 800bba2:	64e0      	str	r0, [r4, #76]	; 0x4c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:618
    npcb->lastack = iss;
 800bba4:	6460      	str	r0, [r4, #68]	; 0x44
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:620
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800bba6:	6523      	str	r3, [r4, #80]	; 0x50
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:621
    npcb->callback_arg = pcb->callback_arg;
 800bba8:	f8d9 3010 	ldr.w	r3, [r9, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:619
    npcb->snd_lbb = iss;
 800bbac:	65a0      	str	r0, [r4, #88]	; 0x58
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:621
    npcb->callback_arg = pcb->callback_arg;
 800bbae:	6123      	str	r3, [r4, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:623
    npcb->listener = pcb;
 800bbb0:	f8c4 9074 	str.w	r9, [r4, #116]	; 0x74
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:626
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800bbb4:	f899 3008 	ldrb.w	r3, [r9, #8]
 800bbb8:	f003 030c 	and.w	r3, r3, #12
 800bbbc:	7223      	strb	r3, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:629
    TCP_REG_ACTIVE(npcb);
 800bbbe:	4b4e      	ldr	r3, [pc, #312]	; (800bcf8 <tcp_input+0x5ac>)
 800bbc0:	681a      	ldr	r2, [r3, #0]
 800bbc2:	601c      	str	r4, [r3, #0]
 800bbc4:	60e2      	str	r2, [r4, #12]
 800bbc6:	f7ff f98d 	bl	800aee4 <tcp_timer_needed>
 800bbca:	4b4c      	ldr	r3, [pc, #304]	; (800bcfc <tcp_input+0x5b0>)
 800bbcc:	2201      	movs	r2, #1
 800bbce:	701a      	strb	r2, [r3, #0]
tcp_parseopt():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1738
  if (tcphdr_optlen != 0) {
 800bbd0:	9b04      	ldr	r3, [sp, #16]
 800bbd2:	881b      	ldrh	r3, [r3, #0]
 800bbd4:	b11b      	cbz	r3, 800bbde <tcp_input+0x492>
 800bbd6:	f104 0032 	add.w	r0, r4, #50	; 0x32
 800bbda:	f7ff fd59 	bl	800b690 <tcp_parseopt.isra.1.part.2>
tcp_listen_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:633
    npcb->snd_wnd = tcphdr->wnd;
 800bbde:	6833      	ldr	r3, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:637
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800bbe0:	1d21      	adds	r1, r4, #4
 800bbe2:	8e60      	ldrh	r0, [r4, #50]	; 0x32
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:633
    npcb->snd_wnd = tcphdr->wnd;
 800bbe4:	89db      	ldrh	r3, [r3, #14]
 800bbe6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:634
    npcb->snd_wnd_max = npcb->snd_wnd;
 800bbea:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:637
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800bbee:	f7fe f8b3 	bl	8009d58 <tcp_eff_send_mss_impl>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:643
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800bbf2:	2112      	movs	r1, #18
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:637
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800bbf4:	8660      	strh	r0, [r4, #50]	; 0x32
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:643
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	f7fc fe14 	bl	8008824 <tcp_enqueue_flags>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:644
    if (rc != ERR_OK) {
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	f43f af69 	beq.w	800bad4 <tcp_input+0x388>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:645
      tcp_abandon(npcb, 0);
 800bc02:	2100      	movs	r1, #0
 800bc04:	4620      	mov	r0, r4
 800bc06:	f7fd ff69 	bl	8009adc <tcp_abandon>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:646
      return;
 800bc0a:	e766      	b.n	800bada <tcp_input+0x38e>
tcp_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:371
    tcp_input_pcb = pcb;
 800bc0c:	4b3c      	ldr	r3, [pc, #240]	; (800bd00 <tcp_input+0x5b4>)
 800bc0e:	601c      	str	r4, [r3, #0]
tcp_process():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:718
  if (flags & TCP_RST) {
 800bc10:	9b02      	ldr	r3, [sp, #8]
 800bc12:	781d      	ldrb	r5, [r3, #0]
 800bc14:	076a      	lsls	r2, r5, #29
 800bc16:	d53c      	bpl.n	800bc92 <tcp_input+0x546>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:720
    if (pcb->state == SYN_SENT) {
 800bc18:	7d21      	ldrb	r1, [r4, #20]
 800bc1a:	2902      	cmp	r1, #2
 800bc1c:	d122      	bne.n	800bc64 <tcp_input+0x518>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:723
      if (ackno == pcb->snd_nxt) {
 800bc1e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d109      	bne.n	800bc3a <tcp_input+0x4ee>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:744
      recv_flags |= TF_RESET;
 800bc26:	f898 3000 	ldrb.w	r3, [r8]
 800bc2a:	f043 0308 	orr.w	r3, r3, #8
 800bc2e:	f888 3000 	strb.w	r3, [r8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:745
      pcb->flags &= ~TF_ACK_DELAY;
 800bc32:	7ea3      	ldrb	r3, [r4, #26]
 800bc34:	f023 0301 	bic.w	r3, r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:824
      tcp_ack_now(pcb);
 800bc38:	76a3      	strb	r3, [r4, #26]
tcp_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:376
      if (recv_flags & TF_RESET) {
 800bc3a:	f898 3000 	ldrb.w	r3, [r8]
 800bc3e:	0719      	lsls	r1, r3, #28
 800bc40:	f140 8200 	bpl.w	800c044 <tcp_input+0x8f8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:381
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800bc44:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800bc48:	b11b      	cbz	r3, 800bc52 <tcp_input+0x506>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:381 (discriminator 1)
 800bc4a:	f06f 010d 	mvn.w	r1, #13
 800bc4e:	6920      	ldr	r0, [r4, #16]
 800bc50:	4798      	blx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:382
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bc52:	4621      	mov	r1, r4
 800bc54:	4828      	ldr	r0, [pc, #160]	; (800bcf8 <tcp_input+0x5ac>)
 800bc56:	f7fd fd8f 	bl	8009778 <tcp_pcb_remove>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:383
        memp_free(MEMP_TCP_PCB, pcb);
 800bc5a:	4621      	mov	r1, r4
 800bc5c:	2001      	movs	r0, #1
 800bc5e:	f000 fb31 	bl	800c2c4 <memp_free>
 800bc62:	e6ae      	b.n	800b9c2 <tcp_input+0x276>
tcp_process():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:729
      if (seqno == pcb->rcv_nxt) {
 800bc64:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bc66:	f8da 3000 	ldr.w	r3, [sl]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d007      	beq.n	800bc7e <tcp_input+0x532>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:731
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bc6e:	1a9b      	subs	r3, r3, r2
 800bc70:	d4e3      	bmi.n	800bc3a <tcp_input+0x4ee>
 800bc72:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800bc74:	1a9b      	subs	r3, r3, r2
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	dcdf      	bgt.n	800bc3a <tcp_input+0x4ee>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:824
      tcp_ack_now(pcb);
 800bc7a:	7ea3      	ldrb	r3, [r4, #26]
 800bc7c:	e011      	b.n	800bca2 <tcp_input+0x556>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:743
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800bc7e:	2900      	cmp	r1, #0
 800bc80:	d1d1      	bne.n	800bc26 <tcp_input+0x4da>
 800bc82:	4b20      	ldr	r3, [pc, #128]	; (800bd04 <tcp_input+0x5b8>)
 800bc84:	f240 22e7 	movw	r2, #743	; 0x2e7
 800bc88:	491f      	ldr	r1, [pc, #124]	; (800bd08 <tcp_input+0x5bc>)
 800bc8a:	4820      	ldr	r0, [pc, #128]	; (800bd0c <tcp_input+0x5c0>)
 800bc8c:	f001 f986 	bl	800cf9c <iprintf>
 800bc90:	e7c9      	b.n	800bc26 <tcp_input+0x4da>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:756
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800bc92:	f015 0202 	ands.w	r2, r5, #2
 800bc96:	7ea3      	ldrb	r3, [r4, #26]
 800bc98:	d006      	beq.n	800bca8 <tcp_input+0x55c>
 800bc9a:	7d21      	ldrb	r1, [r4, #20]
 800bc9c:	3902      	subs	r1, #2
 800bc9e:	2901      	cmp	r1, #1
 800bca0:	d902      	bls.n	800bca8 <tcp_input+0x55c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:824
      tcp_ack_now(pcb);
 800bca2:	f043 0302 	orr.w	r3, r3, #2
 800bca6:	e7c7      	b.n	800bc38 <tcp_input+0x4ec>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:762
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800bca8:	06db      	lsls	r3, r3, #27
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:764
    pcb->tmr = tcp_ticks;
 800bcaa:	bf5e      	ittt	pl
 800bcac:	4b10      	ldrpl	r3, [pc, #64]	; (800bcf0 <tcp_input+0x5a4>)
 800bcae:	681b      	ldrpl	r3, [r3, #0]
 800bcb0:	6223      	strpl	r3, [r4, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:766
  pcb->keep_cnt_sent = 0;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
tcp_parseopt():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1738
  if (tcphdr_optlen != 0) {
 800bcb8:	9b04      	ldr	r3, [sp, #16]
 800bcba:	881b      	ldrh	r3, [r3, #0]
 800bcbc:	b12b      	cbz	r3, 800bcca <tcp_input+0x57e>
 800bcbe:	f104 0032 	add.w	r0, r4, #50	; 0x32
 800bcc2:	9204      	str	r2, [sp, #16]
 800bcc4:	f7ff fce4 	bl	800b690 <tcp_parseopt.isra.1.part.2>
 800bcc8:	9a04      	ldr	r2, [sp, #16]
tcp_process():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:771
  switch (pcb->state) {
 800bcca:	7d23      	ldrb	r3, [r4, #20]
 800bccc:	3b02      	subs	r3, #2
 800bcce:	2b07      	cmp	r3, #7
 800bcd0:	d8b3      	bhi.n	800bc3a <tcp_input+0x4ee>
 800bcd2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bcd6:	001d      	.short	0x001d
 800bcd8:	0106009d 	.word	0x0106009d
 800bcdc:	0153010a 	.word	0x0153010a
 800bce0:	016d0106 	.word	0x016d0106
 800bce4:	019f      	.short	0x019f
 800bce6:	bf00      	nop
 800bce8:	0802054f 	.word	0x0802054f
 800bcec:	2000be2c 	.word	0x2000be2c
 800bcf0:	200080f8 	.word	0x200080f8
 800bcf4:	200080fc 	.word	0x200080fc
 800bcf8:	200080f4 	.word	0x200080f4
 800bcfc:	200080f0 	.word	0x200080f0
 800bd00:	20008114 	.word	0x20008114
 800bd04:	080205fd 	.word	0x080205fd
 800bd08:	0802057c 	.word	0x0802057c
 800bd0c:	0800e36a 	.word	0x0800e36a
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:776
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800bd10:	f005 0312 	and.w	r3, r5, #18
 800bd14:	2b12      	cmp	r3, #18
 800bd16:	d15e      	bne.n	800bdd6 <tcp_input+0x68a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:777
        && (ackno == pcb->lastack + 1)) {
 800bd18:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	3201      	adds	r2, #1
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d159      	bne.n	800bdd6 <tcp_input+0x68a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:778
      pcb->rcv_nxt = seqno + 1;
 800bd22:	f8da 3000 	ldr.w	r3, [sl]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:780
      pcb->lastack = ackno;
 800bd26:	6462      	str	r2, [r4, #68]	; 0x44
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:778
      pcb->rcv_nxt = seqno + 1;
 800bd28:	1c59      	adds	r1, r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:781
      pcb->snd_wnd = tcphdr->wnd;
 800bd2a:	6832      	ldr	r2, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:783
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800bd2c:	3b01      	subs	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:787
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800bd2e:	8e60      	ldrh	r0, [r4, #50]	; 0x32
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:778
      pcb->rcv_nxt = seqno + 1;
 800bd30:	6261      	str	r1, [r4, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:779
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800bd32:	62e1      	str	r1, [r4, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:781
      pcb->snd_wnd = tcphdr->wnd;
 800bd34:	89d2      	ldrh	r2, [r2, #14]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:783
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800bd36:	6523      	str	r3, [r4, #80]	; 0x50
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:784
      pcb->state = ESTABLISHED;
 800bd38:	2304      	movs	r3, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:781
      pcb->snd_wnd = tcphdr->wnd;
 800bd3a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:782
      pcb->snd_wnd_max = pcb->snd_wnd;
 800bd3e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:787
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800bd42:	18e1      	adds	r1, r4, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:784
      pcb->state = ESTABLISHED;
 800bd44:	7523      	strb	r3, [r4, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:787
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800bd46:	f7fe f807 	bl	8009d58 <tcp_eff_send_mss_impl>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:790
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bd4a:	f241 121c 	movw	r2, #4380	; 0x111c
 800bd4e:	0043      	lsls	r3, r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:787
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800bd50:	8660      	strh	r0, [r4, #50]	; 0x32
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:790
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bd52:	0080      	lsls	r0, r0, #2
 800bd54:	4293      	cmp	r3, r2
 800bd56:	bf38      	it	cc
 800bd58:	4613      	movcc	r3, r2
 800bd5a:	4283      	cmp	r3, r0
 800bd5c:	bf28      	it	cs
 800bd5e:	4603      	movcs	r3, r0
 800bd60:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:794
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800bd64:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800bd68:	b933      	cbnz	r3, 800bd78 <tcp_input+0x62c>
 800bd6a:	4ba1      	ldr	r3, [pc, #644]	; (800bff0 <tcp_input+0x8a4>)
 800bd6c:	f240 321a 	movw	r2, #794	; 0x31a
 800bd70:	49a0      	ldr	r1, [pc, #640]	; (800bff4 <tcp_input+0x8a8>)
 800bd72:	48a1      	ldr	r0, [pc, #644]	; (800bff8 <tcp_input+0x8ac>)
 800bd74:	f001 f912 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:795
      --pcb->snd_queuelen;
 800bd78:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:797
      rseg = pcb->unacked;
 800bd7c:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:795
      --pcb->snd_queuelen;
 800bd7e:	3b01      	subs	r3, #1
 800bd80:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:798
      if (rseg == NULL) {
 800bd84:	b9fd      	cbnz	r5, 800bdc6 <tcp_input+0x67a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:801
        rseg = pcb->unsent;
 800bd86:	6ea5      	ldr	r5, [r4, #104]	; 0x68
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:802
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800bd88:	b935      	cbnz	r5, 800bd98 <tcp_input+0x64c>
 800bd8a:	4b99      	ldr	r3, [pc, #612]	; (800bff0 <tcp_input+0x8a4>)
 800bd8c:	f240 3222 	movw	r2, #802	; 0x322
 800bd90:	499a      	ldr	r1, [pc, #616]	; (800bffc <tcp_input+0x8b0>)
 800bd92:	4899      	ldr	r0, [pc, #612]	; (800bff8 <tcp_input+0x8ac>)
 800bd94:	f001 f902 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:803
        pcb->unsent = rseg->next;
 800bd98:	682b      	ldr	r3, [r5, #0]
 800bd9a:	66a3      	str	r3, [r4, #104]	; 0x68
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:807
      tcp_seg_free(rseg);
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	f7fd fa89 	bl	80092b4 <tcp_seg_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:811
      if (pcb->unacked == NULL) {
 800bda2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bda4:	b993      	cbnz	r3, 800bdcc <tcp_input+0x680>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:812
        pcb->rtime = -1;
 800bda6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bdaa:	8623      	strh	r3, [r4, #48]	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:820
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800bdac:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	f43f af62 	beq.w	800bc7a <tcp_input+0x52e>
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	4621      	mov	r1, r4
 800bdba:	6920      	ldr	r0, [r4, #16]
 800bdbc:	4798      	blx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:821
      if (err == ERR_ABRT) {
 800bdbe:	300d      	adds	r0, #13
 800bdc0:	f47f af5b 	bne.w	800bc7a <tcp_input+0x52e>
 800bdc4:	e5fd      	b.n	800b9c2 <tcp_input+0x276>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:805
        pcb->unacked = rseg->next;
 800bdc6:	682b      	ldr	r3, [r5, #0]
 800bdc8:	66e3      	str	r3, [r4, #108]	; 0x6c
 800bdca:	e7e7      	b.n	800bd9c <tcp_input+0x650>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:814
        pcb->rtime = 0;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	8623      	strh	r3, [r4, #48]	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:815
        pcb->nrtx = 0;
 800bdd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bdd4:	e7ea      	b.n	800bdac <tcp_input+0x660>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:827
    else if (flags & TCP_ACK) {
 800bdd6:	06e8      	lsls	r0, r5, #27
 800bdd8:	f57f af2f 	bpl.w	800bc3a <tcp_input+0x4ee>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:830
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bddc:	6833      	ldr	r3, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:829
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bdde:	9a03      	ldr	r2, [sp, #12]
 800bde0:	f8da 1000 	ldr.w	r1, [sl]
 800bde4:	8810      	ldrh	r0, [r2, #0]
 800bde6:	881a      	ldrh	r2, [r3, #0]
 800bde8:	4401      	add	r1, r0
 800bdea:	9201      	str	r2, [sp, #4]
 800bdec:	885b      	ldrh	r3, [r3, #2]
 800bdee:	9300      	str	r3, [sp, #0]
 800bdf0:	4b83      	ldr	r3, [pc, #524]	; (800c000 <tcp_input+0x8b4>)
 800bdf2:	6838      	ldr	r0, [r7, #0]
 800bdf4:	1d1a      	adds	r2, r3, #4
 800bdf6:	f7fc ff75 	bl	8008ce4 <tcp_rst>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:834
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800bdfa:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800bdfe:	2b05      	cmp	r3, #5
 800be00:	f63f af1b 	bhi.w	800bc3a <tcp_input+0x4ee>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:835
        pcb->rtime = 0;
 800be04:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:836
        tcp_rexmit_rto(pcb);
 800be06:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:835
        pcb->rtime = 0;
 800be08:	8623      	strh	r3, [r4, #48]	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:836
        tcp_rexmit_rto(pcb);
 800be0a:	f7fc ffc5 	bl	8008d98 <tcp_rexmit_rto>
tcp_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:375
    if (err != ERR_ABRT) {
 800be0e:	e714      	b.n	800bc3a <tcp_input+0x4ee>
tcp_process():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:841
    if (flags & TCP_ACK) {
 800be10:	06e9      	lsls	r1, r5, #27
 800be12:	d558      	bpl.n	800bec6 <tcp_input+0x77a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:843
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800be14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800be16:	6838      	ldr	r0, [r7, #0]
 800be18:	43db      	mvns	r3, r3
 800be1a:	42c3      	cmn	r3, r0
 800be1c:	d444      	bmi.n	800bea8 <tcp_input+0x75c>
 800be1e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800be20:	1ac3      	subs	r3, r0, r3
 800be22:	2b00      	cmp	r3, #0
 800be24:	dc40      	bgt.n	800bea8 <tcp_input+0x75c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:844
        pcb->state = ESTABLISHED;
 800be26:	2304      	movs	r3, #4
 800be28:	7523      	strb	r3, [r4, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:848
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800be2a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800be2c:	b143      	cbz	r3, 800be40 <tcp_input+0x6f4>
 800be2e:	699b      	ldr	r3, [r3, #24]
 800be30:	b933      	cbnz	r3, 800be40 <tcp_input+0x6f4>
 800be32:	4b6f      	ldr	r3, [pc, #444]	; (800bff0 <tcp_input+0x8a4>)
 800be34:	f240 3251 	movw	r2, #849	; 0x351
 800be38:	4972      	ldr	r1, [pc, #456]	; (800c004 <tcp_input+0x8b8>)
 800be3a:	486f      	ldr	r0, [pc, #444]	; (800bff8 <tcp_input+0x8ac>)
 800be3c:	f001 f8ae 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:851
        if (pcb->listener == NULL) {
 800be40:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800be42:	b91b      	cbnz	r3, 800be4c <tcp_input+0x700>
tcp_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:430
            tcp_abort(pcb);
 800be44:	4620      	mov	r0, r4
 800be46:	f7fd febb 	bl	8009bc0 <tcp_abort>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:431
            goto aborted;
 800be4a:	e5ba      	b.n	800b9c2 <tcp_input+0x276>
tcp_process():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:859
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800be4c:	699b      	ldr	r3, [r3, #24]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d0f8      	beq.n	800be44 <tcp_input+0x6f8>
 800be52:	2200      	movs	r2, #0
 800be54:	4621      	mov	r1, r4
 800be56:	6920      	ldr	r0, [r4, #16]
 800be58:	4798      	blx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:861
        if (err != ERR_OK) {
 800be5a:	b118      	cbz	r0, 800be64 <tcp_input+0x718>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:865
          if (err != ERR_ABRT) {
 800be5c:	300d      	adds	r0, #13
 800be5e:	f43f adb0 	beq.w	800b9c2 <tcp_input+0x276>
 800be62:	e7ef      	b.n	800be44 <tcp_input+0x6f8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:872
        tcp_receive(pcb);
 800be64:	4620      	mov	r0, r4
 800be66:	f7ff f901 	bl	800b06c <tcp_receive>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:875
        if (recv_acked != 0) {
 800be6a:	f8b9 3000 	ldrh.w	r3, [r9]
 800be6e:	b113      	cbz	r3, 800be76 <tcp_input+0x72a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:876
          recv_acked--;
 800be70:	3b01      	subs	r3, #1
 800be72:	f8a9 3000 	strh.w	r3, [r9]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:879
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800be76:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800be78:	f241 111c 	movw	r1, #4380	; 0x111c
 800be7c:	0053      	lsls	r3, r2, #1
 800be7e:	0092      	lsls	r2, r2, #2
 800be80:	428b      	cmp	r3, r1
 800be82:	bf38      	it	cc
 800be84:	460b      	movcc	r3, r1
 800be86:	4293      	cmp	r3, r2
 800be88:	bf28      	it	cs
 800be8a:	4613      	movcs	r3, r2
 800be8c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:902
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800be90:	f898 3000 	ldrb.w	r3, [r8]
 800be94:	069a      	lsls	r2, r3, #26
 800be96:	f57f aed0 	bpl.w	800bc3a <tcp_input+0x4ee>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:903
      tcp_ack_now(pcb);
 800be9a:	7ea3      	ldrb	r3, [r4, #26]
 800be9c:	f043 0302 	orr.w	r3, r3, #2
 800bea0:	76a3      	strb	r3, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:904
      pcb->state = CLOSE_WAIT;
 800bea2:	2307      	movs	r3, #7
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:925
      pcb->state = FIN_WAIT_2;
 800bea4:	7523      	strb	r3, [r4, #20]
tcp_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:375
    if (err != ERR_ABRT) {
 800bea6:	e6c8      	b.n	800bc3a <tcp_input+0x4ee>
tcp_process():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:891
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bea8:	6833      	ldr	r3, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:890
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800beaa:	9a03      	ldr	r2, [sp, #12]
 800beac:	f8da 1000 	ldr.w	r1, [sl]
 800beb0:	8815      	ldrh	r5, [r2, #0]
 800beb2:	881a      	ldrh	r2, [r3, #0]
 800beb4:	4429      	add	r1, r5
 800beb6:	9201      	str	r2, [sp, #4]
 800beb8:	885b      	ldrh	r3, [r3, #2]
 800beba:	9300      	str	r3, [sp, #0]
 800bebc:	4b50      	ldr	r3, [pc, #320]	; (800c000 <tcp_input+0x8b4>)
 800bebe:	1d1a      	adds	r2, r3, #4
 800bec0:	f7fc ff10 	bl	8008ce4 <tcp_rst>
tcp_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:375
    if (err != ERR_ABRT) {
 800bec4:	e6b9      	b.n	800bc3a <tcp_input+0x4ee>
tcp_process():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:893
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800bec6:	2a00      	cmp	r2, #0
 800bec8:	f43f aeb7 	beq.w	800bc3a <tcp_input+0x4ee>
 800becc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bece:	f8da 2000 	ldr.w	r2, [sl]
 800bed2:	3b01      	subs	r3, #1
 800bed4:	4293      	cmp	r3, r2
 800bed6:	f47f aeb0 	bne.w	800bc3a <tcp_input+0x4ee>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:895
      tcp_rexmit(pcb);
 800beda:	4620      	mov	r0, r4
 800bedc:	f7fc ff78 	bl	8008dd0 <tcp_rexmit>
tcp_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:375
    if (err != ERR_ABRT) {
 800bee0:	e6ab      	b.n	800bc3a <tcp_input+0x4ee>
tcp_process():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:901
    tcp_receive(pcb);
 800bee2:	4620      	mov	r0, r4
 800bee4:	f7ff f8c2 	bl	800b06c <tcp_receive>
 800bee8:	e7d2      	b.n	800be90 <tcp_input+0x744>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:908
    tcp_receive(pcb);
 800beea:	4620      	mov	r0, r4
 800beec:	f7ff f8be 	bl	800b06c <tcp_receive>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:909
    if (recv_flags & TF_GOT_FIN) {
 800bef0:	f898 3000 	ldrb.w	r3, [r8]
 800bef4:	f013 0f20 	tst.w	r3, #32
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:910
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bef8:	9b02      	ldr	r3, [sp, #8]
 800befa:	781b      	ldrb	r3, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:909
    if (recv_flags & TF_GOT_FIN) {
 800befc:	d030      	beq.n	800bf60 <tcp_input+0x814>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:910
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800befe:	f013 0f10 	tst.w	r3, #16
 800bf02:	7ea3      	ldrb	r3, [r4, #26]
 800bf04:	d027      	beq.n	800bf56 <tcp_input+0x80a>
 800bf06:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800bf08:	683a      	ldr	r2, [r7, #0]
 800bf0a:	4291      	cmp	r1, r2
 800bf0c:	d123      	bne.n	800bf56 <tcp_input+0x80a>
 800bf0e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800bf10:	bb0a      	cbnz	r2, 800bf56 <tcp_input+0x80a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:914
        tcp_ack_now(pcb);
 800bf12:	f043 0302 	orr.w	r3, r3, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:915
        tcp_pcb_purge(pcb);
 800bf16:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:914
        tcp_ack_now(pcb);
 800bf18:	76a3      	strb	r3, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:915
        tcp_pcb_purge(pcb);
 800bf1a:	f7fd fa47 	bl	80093ac <tcp_pcb_purge>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:916
        TCP_RMV_ACTIVE(pcb);
 800bf1e:	4a3a      	ldr	r2, [pc, #232]	; (800c008 <tcp_input+0x8bc>)
 800bf20:	6813      	ldr	r3, [r2, #0]
 800bf22:	429c      	cmp	r4, r3
 800bf24:	d109      	bne.n	800bf3a <tcp_input+0x7ee>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:944
      TCP_RMV_ACTIVE(pcb);
 800bf26:	68e3      	ldr	r3, [r4, #12]
 800bf28:	6013      	str	r3, [r2, #0]
 800bf2a:	e008      	b.n	800bf3e <tcp_input+0x7f2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:916
        TCP_RMV_ACTIVE(pcb);
 800bf2c:	68da      	ldr	r2, [r3, #12]
 800bf2e:	4294      	cmp	r4, r2
 800bf30:	d102      	bne.n	800bf38 <tcp_input+0x7ec>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:944
      TCP_RMV_ACTIVE(pcb);
 800bf32:	68e2      	ldr	r2, [r4, #12]
 800bf34:	60da      	str	r2, [r3, #12]
 800bf36:	e002      	b.n	800bf3e <tcp_input+0x7f2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:916
        TCP_RMV_ACTIVE(pcb);
 800bf38:	4613      	mov	r3, r2
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d1f6      	bne.n	800bf2c <tcp_input+0x7e0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:944
      TCP_RMV_ACTIVE(pcb);
 800bf3e:	4b33      	ldr	r3, [pc, #204]	; (800c00c <tcp_input+0x8c0>)
 800bf40:	2201      	movs	r2, #1
 800bf42:	701a      	strb	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:945
      pcb->state = TIME_WAIT;
 800bf44:	230a      	movs	r3, #10
 800bf46:	7523      	strb	r3, [r4, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:946
      TCP_REG(&tcp_tw_pcbs, pcb);
 800bf48:	4b31      	ldr	r3, [pc, #196]	; (800c010 <tcp_input+0x8c4>)
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	601c      	str	r4, [r3, #0]
 800bf4e:	60e2      	str	r2, [r4, #12]
 800bf50:	f7fe ffc8 	bl	800aee4 <tcp_timer_needed>
tcp_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:375
    if (err != ERR_ABRT) {
 800bf54:	e671      	b.n	800bc3a <tcp_input+0x4ee>
tcp_process():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:920
        tcp_ack_now(pcb);
 800bf56:	f043 0302 	orr.w	r3, r3, #2
 800bf5a:	76a3      	strb	r3, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:921
        pcb->state = CLOSING;
 800bf5c:	2308      	movs	r3, #8
 800bf5e:	e7a1      	b.n	800bea4 <tcp_input+0x758>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:923
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bf60:	06db      	lsls	r3, r3, #27
 800bf62:	f57f ae6a 	bpl.w	800bc3a <tcp_input+0x4ee>
 800bf66:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	f47f ae65 	bne.w	800bc3a <tcp_input+0x4ee>
 800bf70:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	f47f ae61 	bne.w	800bc3a <tcp_input+0x4ee>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:925
      pcb->state = FIN_WAIT_2;
 800bf78:	2306      	movs	r3, #6
 800bf7a:	e793      	b.n	800bea4 <tcp_input+0x758>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:929
    tcp_receive(pcb);
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	f7ff f875 	bl	800b06c <tcp_receive>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:930
    if (recv_flags & TF_GOT_FIN) {
 800bf82:	f898 3000 	ldrb.w	r3, [r8]
 800bf86:	069e      	lsls	r6, r3, #26
 800bf88:	f57f ae57 	bpl.w	800bc3a <tcp_input+0x4ee>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:932
      tcp_ack_now(pcb);
 800bf8c:	7ea3      	ldrb	r3, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:933
      tcp_pcb_purge(pcb);
 800bf8e:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:932
      tcp_ack_now(pcb);
 800bf90:	f043 0302 	orr.w	r3, r3, #2
 800bf94:	76a3      	strb	r3, [r4, #26]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:933
      tcp_pcb_purge(pcb);
 800bf96:	f7fd fa09 	bl	80093ac <tcp_pcb_purge>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:934
      TCP_RMV_ACTIVE(pcb);
 800bf9a:	4a1b      	ldr	r2, [pc, #108]	; (800c008 <tcp_input+0x8bc>)
 800bf9c:	6813      	ldr	r3, [r2, #0]
 800bf9e:	429c      	cmp	r4, r3
 800bfa0:	d0c1      	beq.n	800bf26 <tcp_input+0x7da>
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d0cb      	beq.n	800bf3e <tcp_input+0x7f2>
 800bfa6:	68da      	ldr	r2, [r3, #12]
 800bfa8:	4294      	cmp	r4, r2
 800bfaa:	d0c2      	beq.n	800bf32 <tcp_input+0x7e6>
 800bfac:	4613      	mov	r3, r2
 800bfae:	e7f8      	b.n	800bfa2 <tcp_input+0x856>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:940
    tcp_receive(pcb);
 800bfb0:	4620      	mov	r0, r4
 800bfb2:	f7ff f85b 	bl	800b06c <tcp_receive>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:941
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bfb6:	9b02      	ldr	r3, [sp, #8]
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	06dd      	lsls	r5, r3, #27
 800bfbc:	f57f ae3d 	bpl.w	800bc3a <tcp_input+0x4ee>
 800bfc0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	f47f ae38 	bne.w	800bc3a <tcp_input+0x4ee>
 800bfca:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	f47f ae34 	bne.w	800bc3a <tcp_input+0x4ee>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:943
      tcp_pcb_purge(pcb);
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	f7fd f9ea 	bl	80093ac <tcp_pcb_purge>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:944
      TCP_RMV_ACTIVE(pcb);
 800bfd8:	4a0b      	ldr	r2, [pc, #44]	; (800c008 <tcp_input+0x8bc>)
 800bfda:	6813      	ldr	r3, [r2, #0]
 800bfdc:	429c      	cmp	r4, r3
 800bfde:	d0a2      	beq.n	800bf26 <tcp_input+0x7da>
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d0ac      	beq.n	800bf3e <tcp_input+0x7f2>
 800bfe4:	68da      	ldr	r2, [r3, #12]
 800bfe6:	4294      	cmp	r4, r2
 800bfe8:	d0a3      	beq.n	800bf32 <tcp_input+0x7e6>
 800bfea:	4613      	mov	r3, r2
 800bfec:	e7f8      	b.n	800bfe0 <tcp_input+0x894>
 800bfee:	bf00      	nop
 800bff0:	080205fd 	.word	0x080205fd
 800bff4:	0802059c 	.word	0x0802059c
 800bff8:	0800e36a 	.word	0x0800e36a
 800bffc:	080205b2 	.word	0x080205b2
 800c000:	2000be2c 	.word	0x2000be2c
 800c004:	080205c5 	.word	0x080205c5
 800c008:	200080f4 	.word	0x200080f4
 800c00c:	200080f0 	.word	0x200080f0
 800c010:	20008104 	.word	0x20008104
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:950
    tcp_receive(pcb);
 800c014:	4620      	mov	r0, r4
 800c016:	f7ff f829 	bl	800b06c <tcp_receive>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:951
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c01a:	9b02      	ldr	r3, [sp, #8]
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	06d8      	lsls	r0, r3, #27
 800c020:	f57f ae0b 	bpl.w	800bc3a <tcp_input+0x4ee>
 800c024:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	429a      	cmp	r2, r3
 800c02a:	f47f ae06 	bne.w	800bc3a <tcp_input+0x4ee>
 800c02e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800c030:	2b00      	cmp	r3, #0
 800c032:	f47f ae02 	bne.w	800bc3a <tcp_input+0x4ee>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:954
      recv_flags |= TF_CLOSED;
 800c036:	f898 3000 	ldrb.w	r3, [r8]
 800c03a:	f043 0310 	orr.w	r3, r3, #16
 800c03e:	f888 3000 	strb.w	r3, [r8]
tcp_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:375
    if (err != ERR_ABRT) {
 800c042:	e5fa      	b.n	800bc3a <tcp_input+0x4ee>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:389
        if (recv_acked > 0) {
 800c044:	f8b9 2000 	ldrh.w	r2, [r9]
 800c048:	b122      	cbz	r2, 800c054 <tcp_input+0x908>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:402
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c04a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c04c:	b9f3      	cbnz	r3, 800c08c <tcp_input+0x940>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:407
          recv_acked = 0;
 800c04e:	2300      	movs	r3, #0
 800c050:	f8a9 3000 	strh.w	r3, [r9]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:409
        if (tcp_input_delayed_close(pcb)) {
 800c054:	4620      	mov	r0, r4
 800c056:	f7ff fb59 	bl	800b70c <tcp_input_delayed_close>
 800c05a:	2800      	cmp	r0, #0
 800c05c:	f47f acb1 	bne.w	800b9c2 <tcp_input+0x276>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:417
        if (recv_data != NULL) {
 800c060:	f8db 3000 	ldr.w	r3, [fp]
 800c064:	b32b      	cbz	r3, 800c0b2 <tcp_input+0x966>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:420
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c066:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c068:	b133      	cbz	r3, 800c078 <tcp_input+0x92c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:420 (discriminator 1)
 800c06a:	4b3a      	ldr	r3, [pc, #232]	; (800c154 <tcp_input+0xa08>)
 800c06c:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800c070:	4939      	ldr	r1, [pc, #228]	; (800c158 <tcp_input+0xa0c>)
 800c072:	483a      	ldr	r0, [pc, #232]	; (800c15c <tcp_input+0xa10>)
 800c074:	f000 ff92 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:421
          if (pcb->flags & TF_RXCLOSED) {
 800c078:	7ea3      	ldrb	r3, [r4, #26]
 800c07a:	f8db 2000 	ldr.w	r2, [fp]
 800c07e:	f013 0310 	ands.w	r3, r3, #16
 800c082:	d009      	beq.n	800c098 <tcp_input+0x94c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:424
            pbuf_free(recv_data);
 800c084:	4610      	mov	r0, r2
 800c086:	f7fe fbfd 	bl	800a884 <pbuf_free>
 800c08a:	e6db      	b.n	800be44 <tcp_input+0x6f8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:402 (discriminator 1)
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c08c:	4621      	mov	r1, r4
 800c08e:	6920      	ldr	r0, [r4, #16]
 800c090:	4798      	blx	r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:403 (discriminator 1)
            if (err == ERR_ABRT) {
 800c092:	300d      	adds	r0, #13
 800c094:	d1db      	bne.n	800c04e <tcp_input+0x902>
 800c096:	e494      	b.n	800b9c2 <tcp_input+0x276>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:435
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c098:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800c09a:	b30d      	cbz	r5, 800c0e0 <tcp_input+0x994>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:435 (discriminator 1)
 800c09c:	4621      	mov	r1, r4
 800c09e:	6920      	ldr	r0, [r4, #16]
 800c0a0:	47a8      	blx	r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:436
          if (err == ERR_ABRT) {
 800c0a2:	f110 0f0d 	cmn.w	r0, #13
 800c0a6:	f43f ac8c 	beq.w	800b9c2 <tcp_input+0x276>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:446
          if (err != ERR_OK) {
 800c0aa:	b110      	cbz	r0, 800c0b2 <tcp_input+0x966>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:452
            pcb->refused_data = recv_data;
 800c0ac:	f8db 3000 	ldr.w	r3, [fp]
 800c0b0:	6723      	str	r3, [r4, #112]	; 0x70
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:465
        if (recv_flags & TF_GOT_FIN) {
 800c0b2:	f898 3000 	ldrb.w	r3, [r8]
 800c0b6:	069a      	lsls	r2, r3, #26
 800c0b8:	d505      	bpl.n	800c0c6 <tcp_input+0x97a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:466
          if (pcb->refused_data != NULL) {
 800c0ba:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c0bc:	b1b3      	cbz	r3, 800c0ec <tcp_input+0x9a0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:468
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c0be:	7b5a      	ldrb	r2, [r3, #13]
 800c0c0:	f042 0220 	orr.w	r2, r2, #32
 800c0c4:	735a      	strb	r2, [r3, #13]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:482
        tcp_input_pcb = NULL;
 800c0c6:	4b26      	ldr	r3, [pc, #152]	; (800c160 <tcp_input+0xa14>)
 800c0c8:	2200      	movs	r2, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:483
        if (tcp_input_delayed_close(pcb)) {
 800c0ca:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:482
        tcp_input_pcb = NULL;
 800c0cc:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:483
        if (tcp_input_delayed_close(pcb)) {
 800c0ce:	f7ff fb1d 	bl	800b70c <tcp_input_delayed_close>
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	f47f ac75 	bne.w	800b9c2 <tcp_input+0x276>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:487
        tcp_output(pcb);
 800c0d8:	4620      	mov	r0, r4
 800c0da:	f7fc fc8b 	bl	80089f4 <tcp_output>
 800c0de:	e470      	b.n	800b9c2 <tcp_input+0x276>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:435 (discriminator 2)
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c0e0:	462b      	mov	r3, r5
 800c0e2:	4621      	mov	r1, r4
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	f7fd fc3d 	bl	8009964 <tcp_recv_null>
 800c0ea:	e7da      	b.n	800c0a2 <tcp_input+0x956>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:472
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c0ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800c0ee:	f640 3268 	movw	r2, #2920	; 0xb68
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:475
            TCP_EVENT_CLOSED(pcb, err);
 800c0f2:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:472
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c0f4:	4293      	cmp	r3, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:473
              pcb->rcv_wnd++;
 800c0f6:	bf1c      	itt	ne
 800c0f8:	3301      	addne	r3, #1
 800c0fa:	8523      	strhne	r3, [r4, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:475
            TCP_EVENT_CLOSED(pcb, err);
 800c0fc:	2d00      	cmp	r5, #0
 800c0fe:	d0e2      	beq.n	800c0c6 <tcp_input+0x97a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:475 (discriminator 1)
 800c100:	2300      	movs	r3, #0
 800c102:	4621      	mov	r1, r4
 800c104:	6920      	ldr	r0, [r4, #16]
 800c106:	461a      	mov	r2, r3
 800c108:	47a8      	blx	r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:476 (discriminator 1)
            if (err == ERR_ABRT) {
 800c10a:	300d      	adds	r0, #13
 800c10c:	d1db      	bne.n	800c0c6 <tcp_input+0x97a>
 800c10e:	e458      	b.n	800b9c2 <tcp_input+0x276>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:311
      if (prev != NULL) {
 800c110:	b13c      	cbz	r4, 800c122 <tcp_input+0x9d6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:312
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c112:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800c116:	60e2      	str	r2, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:316
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c118:	4a12      	ldr	r2, [pc, #72]	; (800c164 <tcp_input+0xa18>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:314
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c11a:	f8c9 100c 	str.w	r1, [r9, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:316
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c11e:	f8c2 9000 	str.w	r9, [r2]
tcp_listen_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:570
  if (flags & TCP_RST) {
 800c122:	9a02      	ldr	r2, [sp, #8]
 800c124:	7812      	ldrb	r2, [r2, #0]
 800c126:	0751      	lsls	r1, r2, #29
 800c128:	f53f acd7 	bmi.w	800bada <tcp_input+0x38e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:577
  if (flags & TCP_ACK) {
 800c12c:	06d4      	lsls	r4, r2, #27
 800c12e:	f57f ad09 	bpl.w	800bb44 <tcp_input+0x3f8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:581
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c132:	9a03      	ldr	r2, [sp, #12]
 800c134:	881b      	ldrh	r3, [r3, #0]
 800c136:	8814      	ldrh	r4, [r2, #0]
 800c138:	f8da 1000 	ldr.w	r1, [sl]
 800c13c:	e9cd 0300 	strd	r0, r3, [sp]
 800c140:	4b09      	ldr	r3, [pc, #36]	; (800c168 <tcp_input+0xa1c>)
 800c142:	4421      	add	r1, r4
 800c144:	1d1a      	adds	r2, r3, #4
 800c146:	e4b7      	b.n	800bab8 <tcp_input+0x36c>
tcp_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:237
      if (prev != NULL) {
 800c148:	f1b9 0f00 	cmp.w	r9, #0
 800c14c:	f47f abf6 	bne.w	800b93c <tcp_input+0x1f0>
 800c150:	e404      	b.n	800b95c <tcp_input+0x210>
 800c152:	bf00      	nop
 800c154:	080205fd 	.word	0x080205fd
 800c158:	080205e3 	.word	0x080205e3
 800c15c:	0800e36a 	.word	0x0800e36a
 800c160:	20008114 	.word	0x20008114
 800c164:	200080fc 	.word	0x200080fc
 800c168:	2000be2c 	.word	0x2000be2c

0800c16c <tcp_trigger_input_pcb_close>:
tcp_trigger_input_pcb_close():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1834

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800c16c:	4a02      	ldr	r2, [pc, #8]	; (800c178 <tcp_trigger_input_pcb_close+0xc>)
 800c16e:	7813      	ldrb	r3, [r2, #0]
 800c170:	f043 0310 	orr.w	r3, r3, #16
 800c174:	7013      	strb	r3, [r2, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/tcp_in.c:1835
}
 800c176:	4770      	bx	lr
 800c178:	20008008 	.word	0x20008008

0800c17c <do_memp_malloc_pool.isra.0>:
do_memp_malloc_pool():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:292
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void*
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 800c17c:	b538      	push	{r3, r4, r5, lr}
 800c17e:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:304

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c180:	f7f4 fe46 	bl	8000e10 <sys_arch_protect>
 800c184:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:306

  memp = *desc->tab;
 800c186:	6823      	ldr	r3, [r4, #0]
 800c188:	681c      	ldr	r4, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:309
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c18a:	b15c      	cbz	r4, 800c1a4 <do_memp_malloc_pool.isra.0+0x28>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:316
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c18c:	6822      	ldr	r2, [r4, #0]
 800c18e:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:328
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c190:	07a3      	lsls	r3, r4, #30
 800c192:	d006      	beq.n	800c1a2 <do_memp_malloc_pool.isra.0+0x26>
 800c194:	4b05      	ldr	r3, [pc, #20]	; (800c1ac <do_memp_malloc_pool.isra.0+0x30>)
 800c196:	f240 1249 	movw	r2, #329	; 0x149
 800c19a:	4905      	ldr	r1, [pc, #20]	; (800c1b0 <do_memp_malloc_pool.isra.0+0x34>)
 800c19c:	4805      	ldr	r0, [pc, #20]	; (800c1b4 <do_memp_malloc_pool.isra.0+0x38>)
 800c19e:	f000 fefd 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:336
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c1a2:	4628      	mov	r0, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:346
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800c1a4:	f7f4 fe40 	bl	8000e28 <sys_arch_unprotect>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:348
  return NULL;
}
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	bd38      	pop	{r3, r4, r5, pc}
 800c1ac:	0802077a 	.word	0x0802077a
 800c1b0:	080207dc 	.word	0x080207dc
 800c1b4:	0800e36a 	.word	0x0800e36a

0800c1b8 <do_memp_free_pool.isra.1>:
do_memp_free_pool():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:407

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 800c1b8:	b538      	push	{r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:412
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c1ba:	078b      	lsls	r3, r1, #30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:407
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 800c1bc:	4605      	mov	r5, r0
 800c1be:	460c      	mov	r4, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:412
  LWIP_ASSERT("memp_free: mem properly aligned",
 800c1c0:	d006      	beq.n	800c1d0 <do_memp_free_pool.isra.1+0x18>
 800c1c2:	4b08      	ldr	r3, [pc, #32]	; (800c1e4 <do_memp_free_pool.isra.1+0x2c>)
 800c1c4:	f240 129d 	movw	r2, #413	; 0x19d
 800c1c8:	4907      	ldr	r1, [pc, #28]	; (800c1e8 <do_memp_free_pool.isra.1+0x30>)
 800c1ca:	4808      	ldr	r0, [pc, #32]	; (800c1ec <do_memp_free_pool.isra.1+0x34>)
 800c1cc:	f000 fee6 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:418
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 800c1d0:	f7f4 fe1e 	bl	8000e10 <sys_arch_protect>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:434
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c1d4:	682b      	ldr	r3, [r5, #0]
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	6022      	str	r2, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:435
  *desc->tab = memp;
 800c1da:	601c      	str	r4, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:443
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800c1dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:441
  SYS_ARCH_UNPROTECT(old_level);
 800c1e0:	f7f4 be22 	b.w	8000e28 <sys_arch_unprotect>
 800c1e4:	0802077a 	.word	0x0802077a
 800c1e8:	0802075a 	.word	0x0802075a
 800c1ec:	0800e36a 	.word	0x0800e36a

0800c1f0 <memp_init_pool>:
memp_init_pool():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:239
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800c1f0:	6843      	ldr	r3, [r0, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:238
  *desc->tab = NULL;
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	6881      	ldr	r1, [r0, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:239
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800c1f6:	3303      	adds	r3, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:231
{
 800c1f8:	b530      	push	{r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:239
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800c1fa:	f023 0303 	bic.w	r3, r3, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:241
  for (i = 0; i < desc->num; ++i) {
 800c1fe:	8844      	ldrh	r4, [r0, #2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:238
  *desc->tab = NULL;
 800c200:	600a      	str	r2, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:241 (discriminator 1)
  for (i = 0; i < desc->num; ++i) {
 800c202:	4294      	cmp	r4, r2
 800c204:	dc00      	bgt.n	800c208 <memp_init_pool+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:262
}
 800c206:	bd30      	pop	{r4, r5, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:242 (discriminator 3)
    memp->next = *desc->tab;
 800c208:	680d      	ldr	r5, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:241 (discriminator 3)
  for (i = 0; i < desc->num; ++i) {
 800c20a:	3201      	adds	r2, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:242 (discriminator 3)
    memp->next = *desc->tab;
 800c20c:	601d      	str	r5, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:248 (discriminator 3)
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c20e:	8805      	ldrh	r5, [r0, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:243 (discriminator 3)
    *desc->tab = memp;
 800c210:	600b      	str	r3, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:248 (discriminator 3)
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c212:	442b      	add	r3, r5
 800c214:	e7f5      	b.n	800c202 <memp_init_pool+0x12>
	...

0800c218 <memp_init>:
memp_init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:272
{
 800c218:	b538      	push	{r3, r4, r5, lr}
 800c21a:	4d05      	ldr	r5, [pc, #20]	; (800c230 <memp_init+0x18>)
 800c21c:	240d      	movs	r4, #13
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:277 (discriminator 3)
    memp_init_pool(memp_pools[i]);
 800c21e:	3c01      	subs	r4, #1
 800c220:	f855 0b04 	ldr.w	r0, [r5], #4
 800c224:	f7ff ffe4 	bl	800c1f0 <memp_init_pool>
 800c228:	b2a4      	uxth	r4, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:276 (discriminator 3)
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c22a:	2c00      	cmp	r4, #0
 800c22c:	d1f7      	bne.n	800c21e <memp_init+0x6>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:288
}
 800c22e:	bd38      	pop	{r3, r4, r5, pc}
 800c230:	080208e8 	.word	0x080208e8

0800c234 <memp_malloc_pool>:
memp_malloc_pool():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:363
{
 800c234:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:364
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c236:	4604      	mov	r4, r0
 800c238:	b120      	cbz	r0, 800c244 <memp_malloc_pool+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:370
  return do_memp_malloc_pool(desc);
 800c23a:	3008      	adds	r0, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:374
}
 800c23c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:370
  return do_memp_malloc_pool(desc);
 800c240:	f7ff bf9c 	b.w	800c17c <do_memp_malloc_pool.isra.0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:364 (discriminator 1)
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c244:	4b04      	ldr	r3, [pc, #16]	; (800c258 <memp_malloc_pool+0x24>)
 800c246:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c24a:	4904      	ldr	r1, [pc, #16]	; (800c25c <memp_malloc_pool+0x28>)
 800c24c:	4804      	ldr	r0, [pc, #16]	; (800c260 <memp_malloc_pool+0x2c>)
 800c24e:	f000 fea5 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:374 (discriminator 1)
}
 800c252:	4620      	mov	r0, r4
 800c254:	bd10      	pop	{r4, pc}
 800c256:	bf00      	nop
 800c258:	0802077a 	.word	0x0802077a
 800c25c:	080208d4 	.word	0x080208d4
 800c260:	0800e36a 	.word	0x0800e36a

0800c264 <memp_malloc>:
memp_malloc():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:391
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c264:	280c      	cmp	r0, #12
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:389
{
 800c266:	b508      	push	{r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:391
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c268:	d807      	bhi.n	800c27a <memp_malloc+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:398 (discriminator 2)
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c26a:	4b08      	ldr	r3, [pc, #32]	; (800c28c <memp_malloc+0x28>)
 800c26c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:404 (discriminator 2)
}
 800c270:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:398 (discriminator 2)
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c274:	3008      	adds	r0, #8
 800c276:	f7ff bf81 	b.w	800c17c <do_memp_malloc_pool.isra.0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:391 (discriminator 1)
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c27a:	4b05      	ldr	r3, [pc, #20]	; (800c290 <memp_malloc+0x2c>)
 800c27c:	f240 1287 	movw	r2, #391	; 0x187
 800c280:	4904      	ldr	r1, [pc, #16]	; (800c294 <memp_malloc+0x30>)
 800c282:	4805      	ldr	r0, [pc, #20]	; (800c298 <memp_malloc+0x34>)
 800c284:	f000 fe8a 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:404 (discriminator 1)
}
 800c288:	2000      	movs	r0, #0
 800c28a:	bd08      	pop	{r3, pc}
 800c28c:	080208e8 	.word	0x080208e8
 800c290:	0802077a 	.word	0x0802077a
 800c294:	080208b7 	.word	0x080208b7
 800c298:	0800e36a 	.word	0x0800e36a

0800c29c <memp_free_pool>:
memp_free_pool():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:454
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c29c:	b948      	cbnz	r0, 800c2b2 <memp_free_pool+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:454 (discriminator 1)
 800c29e:	4b06      	ldr	r3, [pc, #24]	; (800c2b8 <memp_free_pool+0x1c>)
 800c2a0:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
 800c2a4:	4905      	ldr	r1, [pc, #20]	; (800c2bc <memp_free_pool+0x20>)
 800c2a6:	4806      	ldr	r0, [pc, #24]	; (800c2c0 <memp_free_pool+0x24>)
 800c2a8:	f000 be78 	b.w	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:459
  if ((desc == NULL) || (mem == NULL)) {
    return;
  }

  do_memp_free_pool(desc, mem);
 800c2ac:	3008      	adds	r0, #8
 800c2ae:	f7ff bf83 	b.w	800c1b8 <do_memp_free_pool.isra.1>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:455
  if ((desc == NULL) || (mem == NULL)) {
 800c2b2:	2900      	cmp	r1, #0
 800c2b4:	d1fa      	bne.n	800c2ac <memp_free_pool+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:460
}
 800c2b6:	4770      	bx	lr
 800c2b8:	0802077a 	.word	0x0802077a
 800c2bc:	080208d4 	.word	0x080208d4
 800c2c0:	0800e36a 	.word	0x0800e36a

0800c2c4 <memp_free>:
memp_free():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:475
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c2c4:	280c      	cmp	r0, #12
 800c2c6:	d906      	bls.n	800c2d6 <memp_free+0x12>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:475 (discriminator 1)
 800c2c8:	4b07      	ldr	r3, [pc, #28]	; (800c2e8 <memp_free+0x24>)
 800c2ca:	f240 12db 	movw	r2, #475	; 0x1db
 800c2ce:	4907      	ldr	r1, [pc, #28]	; (800c2ec <memp_free+0x28>)
 800c2d0:	4807      	ldr	r0, [pc, #28]	; (800c2f0 <memp_free+0x2c>)
 800c2d2:	f000 be63 	b.w	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:477 (discriminator 2)

  if (mem == NULL) {
 800c2d6:	b129      	cbz	r1, 800c2e4 <memp_free+0x20>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:489

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c2d8:	4b06      	ldr	r3, [pc, #24]	; (800c2f4 <memp_free+0x30>)
 800c2da:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c2de:	3008      	adds	r0, #8
 800c2e0:	f7ff bf6a 	b.w	800c1b8 <do_memp_free_pool.isra.1>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Middlewares/LwIP/src/core/memp.c:496
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c2e4:	4770      	bx	lr
 800c2e6:	bf00      	nop
 800c2e8:	0802077a 	.word	0x0802077a
 800c2ec:	0802089c 	.word	0x0802089c
 800c2f0:	0800e36a 	.word	0x0800e36a
 800c2f4:	080208e8 	.word	0x080208e8

0800c2f8 <Reset_Handler>:
Reset_Handler():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:62

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800c2f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c330 <LoopFillZerobss+0x14>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:65

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c2fc:	2100      	movs	r1, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:66
  b  LoopCopyDataInit
 800c2fe:	e003      	b.n	800c308 <LoopCopyDataInit>

0800c300 <CopyDataInit>:
CopyDataInit():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:69

CopyDataInit:
  ldr  r3, =_sidata
 800c300:	4b0c      	ldr	r3, [pc, #48]	; (800c334 <LoopFillZerobss+0x18>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:70
  ldr  r3, [r3, r1]
 800c302:	585b      	ldr	r3, [r3, r1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:71
  str  r3, [r0, r1]
 800c304:	5043      	str	r3, [r0, r1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:72
  adds  r1, r1, #4
 800c306:	3104      	adds	r1, #4

0800c308 <LoopCopyDataInit>:
LoopCopyDataInit():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:75
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c308:	480b      	ldr	r0, [pc, #44]	; (800c338 <LoopFillZerobss+0x1c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:76
  ldr  r3, =_edata
 800c30a:	4b0c      	ldr	r3, [pc, #48]	; (800c33c <LoopFillZerobss+0x20>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:77
  adds  r2, r0, r1
 800c30c:	1842      	adds	r2, r0, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:78
  cmp  r2, r3
 800c30e:	429a      	cmp	r2, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:79
  bcc  CopyDataInit
 800c310:	d3f6      	bcc.n	800c300 <CopyDataInit>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:80
  ldr  r2, =_sbss
 800c312:	4a0b      	ldr	r2, [pc, #44]	; (800c340 <LoopFillZerobss+0x24>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:81
  b  LoopFillZerobss
 800c314:	e002      	b.n	800c31c <LoopFillZerobss>

0800c316 <FillZerobss>:
FillZerobss():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:84
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c316:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:85
  str  r3, [r2], #4
 800c318:	f842 3b04 	str.w	r3, [r2], #4

0800c31c <LoopFillZerobss>:
LoopFillZerobss():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:88
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c31c:	4b09      	ldr	r3, [pc, #36]	; (800c344 <LoopFillZerobss+0x28>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:89
  cmp  r2, r3
 800c31e:	429a      	cmp	r2, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:90
  bcc  FillZerobss
 800c320:	d3f9      	bcc.n	800c316 <FillZerobss>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:93

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c322:	f000 fa1f 	bl	800c764 <SystemInit>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:95
/* Call static constructors */
    bl __libc_init_array
 800c326:	f000 fdf1 	bl	800cf0c <__libc_init_array>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:97
/* Call the application's entry point.*/
  bl  main
 800c32a:	f000 fd07 	bl	800cd3c <main>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:98
  bx  lr    
 800c32e:	4770      	bx	lr
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:62
  ldr   sp, =_estack      /* set stack pointer */
 800c330:	24080000 	.word	0x24080000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:69
  ldr  r3, =_sidata
 800c334:	080211f8 	.word	0x080211f8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:75
  ldr  r0, =_sdata
 800c338:	20000000 	.word	0x20000000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:76
  ldr  r3, =_edata
 800c33c:	200000a0 	.word	0x200000a0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:80
  ldr  r2, =_sbss
 800c340:	20001960 	.word	0x20001960
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:88
  ldr  r3, = _ebss
 800c344:	2000c048 	.word	0x2000c048

0800c348 <ADC3_IRQHandler>:
DMA1_Stream3_IRQHandler():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/startup_stm32h743xx.s:111
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c348:	e7fe      	b.n	800c348 <ADC3_IRQHandler>
	...

0800c34c <_sbrk>:
_sbrk():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:40
{
    extern char end asm("end");
    static char *heap_end;
    char *prev_heap_end,*min_stack_ptr;
    
    if (heap_end == 0)
 800c34c:	4b0b      	ldr	r3, [pc, #44]	; (800c37c <_sbrk+0x30>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:35
{
 800c34e:	4602      	mov	r2, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:40
    if (heap_end == 0)
 800c350:	6819      	ldr	r1, [r3, #0]
 800c352:	b909      	cbnz	r1, 800c358 <_sbrk+0xc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:41
        heap_end = &end;
 800c354:	490a      	ldr	r1, [pc, #40]	; (800c380 <_sbrk+0x34>)
 800c356:	6019      	str	r1, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:47
    
    prev_heap_end = heap_end;
    
#ifdef FreeRTOS
    /* Use the NVIC offset register to locate the main stack pointer. */
    min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800c358:	490a      	ldr	r1, [pc, #40]	; (800c384 <_sbrk+0x38>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:43
    prev_heap_end = heap_end;
 800c35a:	6818      	ldr	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:47
    min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800c35c:	6809      	ldr	r1, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:51
    /* Locate the STACK bottom address */
    min_stack_ptr -= MAX_STACK_SIZE;
    
    if (heap_end + incr > min_stack_ptr)
 800c35e:	4402      	add	r2, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:47
    min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800c360:	6809      	ldr	r1, [r1, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:49
    min_stack_ptr -= MAX_STACK_SIZE;
 800c362:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:51
    if (heap_end + incr > min_stack_ptr)
 800c366:	428a      	cmp	r2, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:58
        if (heap_end + incr > stack_ptr)
#endif
        {
            //        write(1, "Heap and stack collision\n", 25);
            //        abort();
            errno = ENOMEM;
 800c368:	bf83      	ittte	hi
 800c36a:	4b07      	ldrhi	r3, [pc, #28]	; (800c388 <_sbrk+0x3c>)
 800c36c:	220c      	movhi	r2, #12
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:59
            return (caddr_t) -1;
 800c36e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:62
        }
    
    heap_end += incr;
 800c372:	601a      	strls	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:58
            errno = ENOMEM;
 800c374:	bf88      	it	hi
 800c376:	601a      	strhi	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:65
    
    return (caddr_t) prev_heap_end;
}
 800c378:	4770      	bx	lr
 800c37a:	bf00      	nop
 800c37c:	20008058 	.word	0x20008058
 800c380:	2000c048 	.word	0x2000c048
 800c384:	e000ed08 	.word	0xe000ed08
 800c388:	20008074 	.word	0x20008074

0800c38c <_write>:
_write():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:103
    _kill(status, -1);
    while (1) {}
}

int _write(int file, char *ptr, int len)
{
 800c38c:	b570      	push	{r4, r5, r6, lr}
 800c38e:	460e      	mov	r6, r1
 800c390:	4615      	mov	r5, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:106
    int DataIdx;
    
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c392:	2400      	movs	r4, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:106 (discriminator 1)
 800c394:	42ac      	cmp	r4, r5
 800c396:	db01      	blt.n	800c39c <_write+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:111
    {
        __io_putchar( *ptr++ );
    }
    return len;
}
 800c398:	4628      	mov	r0, r5
 800c39a:	bd70      	pop	{r4, r5, r6, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:108 (discriminator 3)
        __io_putchar( *ptr++ );
 800c39c:	5d30      	ldrb	r0, [r6, r4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:106 (discriminator 3)
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c39e:	3401      	adds	r4, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:108 (discriminator 3)
        __io_putchar( *ptr++ );
 800c3a0:	f3af 8000 	nop.w
 800c3a4:	e7f6      	b.n	800c394 <_write+0x8>

0800c3a6 <_close>:
_close():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:116

int _close(int file)
{
    return -1;
}
 800c3a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3aa:	4770      	bx	lr

0800c3ac <_fstat>:
_fstat():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:120

int _fstat(int file, struct stat *st)
{
    st->st_mode = S_IFCHR;
 800c3ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:122
    return 0;
}
 800c3b0:	2000      	movs	r0, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:120
    st->st_mode = S_IFCHR;
 800c3b2:	604b      	str	r3, [r1, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:122
}
 800c3b4:	4770      	bx	lr

0800c3b6 <_isatty>:
_isatty():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:127

int _isatty(int file)
{
    return 1;
}
 800c3b6:	2001      	movs	r0, #1
 800c3b8:	4770      	bx	lr

0800c3ba <_lseek>:
_lseek():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:132

int _lseek(int file, int ptr, int dir)
{
    return 0;
}
 800c3ba:	2000      	movs	r0, #0
 800c3bc:	4770      	bx	lr

0800c3be <_read>:
_read():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:135

int _read(int file, char *ptr, int len)
{
 800c3be:	b570      	push	{r4, r5, r6, lr}
 800c3c0:	460e      	mov	r6, r1
 800c3c2:	4615      	mov	r5, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:138
    int DataIdx;
    
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c3c4:	2400      	movs	r4, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:138 (discriminator 1)
 800c3c6:	42ac      	cmp	r4, r5
 800c3c8:	db01      	blt.n	800c3ce <_read+0x10>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:144
    {
        *ptr++ = __io_getchar();
    }
    
    return len;
}
 800c3ca:	4628      	mov	r0, r5
 800c3cc:	bd70      	pop	{r4, r5, r6, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:140 (discriminator 3)
        *ptr++ = __io_getchar();
 800c3ce:	f3af 8000 	nop.w
 800c3d2:	5530      	strb	r0, [r6, r4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/SW4STM32/syscalls.c:138 (discriminator 3)
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c3d4:	3401      	adds	r4, #1
 800c3d6:	e7f6      	b.n	800c3c6 <_read+0x8>

0800c3d8 <http_server_netconn_init>:
http_server_netconn_init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:273
  * @param  none
  * @retval None
  */
void http_server_netconn_init()
{
  sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 800c3d8:	2301      	movs	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:272
{
 800c3da:	b507      	push	{r0, r1, r2, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:273
  sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 800c3dc:	2200      	movs	r2, #0
 800c3de:	9300      	str	r3, [sp, #0]
 800c3e0:	4904      	ldr	r1, [pc, #16]	; (800c3f4 <http_server_netconn_init+0x1c>)
 800c3e2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c3e6:	4804      	ldr	r0, [pc, #16]	; (800c3f8 <http_server_netconn_init+0x20>)
 800c3e8:	f7f4 fd02 	bl	8000df0 <sys_thread_new>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:274
}
 800c3ec:	b003      	add	sp, #12
 800c3ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800c3f2:	bf00      	nop
 800c3f4:	0800c4ad 	.word	0x0800c4ad
 800c3f8:	08021044 	.word	0x08021044

0800c3fc <DynWebPage>:
DynWebPage():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:283
  *         running tasks and the number of page hits. 
  * @param  conn pointer on connection structure 
  * @retval None
  */
void DynWebPage(struct netconn *conn)
{
 800c3fc:	b570      	push	{r4, r5, r6, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:285
  portCHAR PAGE_BODY[512];
  portCHAR pagehits[10] = {0};
 800c3fe:	2400      	movs	r4, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:283
{
 800c400:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800c404:	4605      	mov	r5, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:287

  memset(PAGE_BODY, 0,512);
 800c406:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c40a:	4621      	mov	r1, r4
 800c40c:	a806      	add	r0, sp, #24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:285
  portCHAR pagehits[10] = {0};
 800c40e:	f8ad 4014 	strh.w	r4, [sp, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:302
  osThreadList((unsigned char *)(PAGE_BODY + strlen(PAGE_BODY)));
  strcat((char *)PAGE_BODY, "<br><br>---------------------------------------------");
  strcat((char *)PAGE_BODY, "<br>B : Blocked, R : Ready, D : Deleted, S : Suspended<br>");

  /* Send the dynamically generated page */
  netconn_write(conn, PAGE_START, strlen((char*)PAGE_START), NETCONN_COPY);
 800c412:	4e1f      	ldr	r6, [pc, #124]	; (800c490 <DynWebPage+0x94>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:285
  portCHAR pagehits[10] = {0};
 800c414:	e9cd 4403 	strd	r4, r4, [sp, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:287
  memset(PAGE_BODY, 0,512);
 800c418:	f000 fdb8 	bl	800cf8c <memset>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:290
  nPageHits++;
 800c41c:	4b1d      	ldr	r3, [pc, #116]	; (800c494 <DynWebPage+0x98>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:291
  sprintf(pagehits, "%d", (int)nPageHits);
 800c41e:	491e      	ldr	r1, [pc, #120]	; (800c498 <DynWebPage+0x9c>)
 800c420:	a803      	add	r0, sp, #12
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:290
  nPageHits++;
 800c422:	681a      	ldr	r2, [r3, #0]
 800c424:	3201      	adds	r2, #1
 800c426:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:291
  sprintf(pagehits, "%d", (int)nPageHits);
 800c428:	f000 fe04 	bl	800d034 <siprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:292
  strcat(PAGE_BODY, pagehits);
 800c42c:	a903      	add	r1, sp, #12
 800c42e:	a806      	add	r0, sp, #24
 800c430:	f000 fe20 	bl	800d074 <strcat>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:293
  strcat((char *)PAGE_BODY, "<pre><br>Name          State  Priority  Stack   Num" );
 800c434:	4919      	ldr	r1, [pc, #100]	; (800c49c <DynWebPage+0xa0>)
 800c436:	a806      	add	r0, sp, #24
 800c438:	f000 fe1c 	bl	800d074 <strcat>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:294
  strcat((char *)PAGE_BODY, "<br>---------------------------------------------<br>");
 800c43c:	4918      	ldr	r1, [pc, #96]	; (800c4a0 <DynWebPage+0xa4>)
 800c43e:	a806      	add	r0, sp, #24
 800c440:	f000 fe18 	bl	800d074 <strcat>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:297
  osThreadList((unsigned char *)(PAGE_BODY + strlen(PAGE_BODY)));
 800c444:	a806      	add	r0, sp, #24
 800c446:	f7f3 ff55 	bl	80002f4 <strlen>
 800c44a:	ab06      	add	r3, sp, #24
 800c44c:	4418      	add	r0, r3
 800c44e:	f7f4 f9cd 	bl	80007ec <osThreadList>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:298
  strcat((char *)PAGE_BODY, "<br><br>---------------------------------------------");
 800c452:	4914      	ldr	r1, [pc, #80]	; (800c4a4 <DynWebPage+0xa8>)
 800c454:	a806      	add	r0, sp, #24
 800c456:	f000 fe0d 	bl	800d074 <strcat>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:299
  strcat((char *)PAGE_BODY, "<br>B : Blocked, R : Ready, D : Deleted, S : Suspended<br>");
 800c45a:	4913      	ldr	r1, [pc, #76]	; (800c4a8 <DynWebPage+0xac>)
 800c45c:	a806      	add	r0, sp, #24
 800c45e:	f000 fe09 	bl	800d074 <strcat>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:302
  netconn_write(conn, PAGE_START, strlen((char*)PAGE_START), NETCONN_COPY);
 800c462:	4630      	mov	r0, r6
 800c464:	f7f3 ff46 	bl	80002f4 <strlen>
 800c468:	4631      	mov	r1, r6
 800c46a:	4602      	mov	r2, r0
 800c46c:	2301      	movs	r3, #1
 800c46e:	9400      	str	r4, [sp, #0]
 800c470:	4628      	mov	r0, r5
 800c472:	f7f9 fae1 	bl	8005a38 <netconn_write_partly>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:303
  netconn_write(conn, PAGE_BODY, strlen(PAGE_BODY), NETCONN_COPY);
 800c476:	a806      	add	r0, sp, #24
 800c478:	f7f3 ff3c 	bl	80002f4 <strlen>
 800c47c:	2301      	movs	r3, #1
 800c47e:	4602      	mov	r2, r0
 800c480:	a906      	add	r1, sp, #24
 800c482:	9400      	str	r4, [sp, #0]
 800c484:	4628      	mov	r0, r5
 800c486:	f7f9 fad7 	bl	8005a38 <netconn_write_partly>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:304
}
 800c48a:	f50d 7d06 	add.w	sp, sp, #536	; 0x218
 800c48e:	bd70      	pop	{r4, r5, r6, pc}
 800c490:	080209fa 	.word	0x080209fa
 800c494:	2000805c 	.word	0x2000805c
 800c498:	0802091c 	.word	0x0802091c
 800c49c:	0802091f 	.word	0x0802091f
 800c4a0:	08020953 	.word	0x08020953
 800c4a4:	08020989 	.word	0x08020989
 800c4a8:	080209bf 	.word	0x080209bf

0800c4ac <http_server_netconn_thread>:
http_server_netconn_thread():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:237
  conn = netconn_new(NETCONN_TCP);
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	2010      	movs	r0, #16
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:232
{ 
 800c4b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:237
  conn = netconn_new(NETCONN_TCP);
 800c4b4:	4611      	mov	r1, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:232
{ 
 800c4b6:	b08c      	sub	sp, #48	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:237
  conn = netconn_new(NETCONN_TCP);
 800c4b8:	f7f9 f96c 	bl	8005794 <netconn_new_with_proto_and_callback>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:239
  if (conn!= NULL)
 800c4bc:	4607      	mov	r7, r0
 800c4be:	2800      	cmp	r0, #0
 800c4c0:	f000 8082 	beq.w	800c5c8 <http_server_netconn_thread+0x11c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:242
    err = netconn_bind(conn, NULL, 80);
 800c4c4:	2250      	movs	r2, #80	; 0x50
 800c4c6:	2100      	movs	r1, #0
 800c4c8:	f7f9 f9d6 	bl	8005878 <netconn_bind>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:244
    if (err == ERR_OK)
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	d17b      	bne.n	800c5c8 <http_server_netconn_thread+0x11c>
http_server_serve():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:172
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 800c4d0:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800c5f4 <http_server_netconn_thread+0x148>
http_server_netconn_thread():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:247
      netconn_listen(conn);
 800c4d4:	21ff      	movs	r1, #255	; 0xff
http_server_serve():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:175
        if (strncmp((char const *)buf,"GET /STM32H7xx_files/ST.gif",27)==0)
 800c4d6:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800c5f8 <http_server_netconn_thread+0x14c>
http_server_netconn_thread():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:247
      netconn_listen(conn);
 800c4da:	4638      	mov	r0, r7
http_server_serve():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:182
        else if (strncmp((char const *)buf,"GET /STM32H7xx_files/stm32.jpg",30)==0)
 800c4dc:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800c5fc <http_server_netconn_thread+0x150>
http_server_netconn_thread():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:247
      netconn_listen(conn);
 800c4e0:	f7f9 f9ee 	bl	80058c0 <netconn_listen_with_backlog>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:252
        accept_err = netconn_accept(conn, &newconn);
 800c4e4:	a904      	add	r1, sp, #16
 800c4e6:	4638      	mov	r0, r7
 800c4e8:	f7f9 fa06 	bl	80058f8 <netconn_accept>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:253
        if(accept_err == ERR_OK)
 800c4ec:	2800      	cmp	r0, #0
 800c4ee:	d1f9      	bne.n	800c4e4 <http_server_netconn_thread+0x38>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:256
          http_server_serve(newconn);
 800c4f0:	9c04      	ldr	r4, [sp, #16]
http_server_serve():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:162
  recv_err = netconn_recv(conn, &inbuf);
 800c4f2:	a905      	add	r1, sp, #20
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	f7f9 fa4f 	bl	8005998 <netconn_recv>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:164
  if (recv_err == ERR_OK)
 800c4fa:	2800      	cmp	r0, #0
 800c4fc:	d145      	bne.n	800c58a <http_server_netconn_thread+0xde>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:166
    if (netconn_err(conn) == ERR_OK) 
 800c4fe:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d141      	bne.n	800c58a <http_server_netconn_thread+0xde>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:168
      netbuf_data(inbuf, (void**)&buf, &buflen);
 800c506:	f10d 020e 	add.w	r2, sp, #14
 800c50a:	a906      	add	r1, sp, #24
 800c50c:	9805      	ldr	r0, [sp, #20]
 800c50e:	f7f9 f857 	bl	80055c0 <netbuf_data>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:172
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 800c512:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800c516:	2b04      	cmp	r3, #4
 800c518:	d937      	bls.n	800c58a <http_server_netconn_thread+0xde>
 800c51a:	9d06      	ldr	r5, [sp, #24]
 800c51c:	2205      	movs	r2, #5
 800c51e:	4641      	mov	r1, r8
 800c520:	4628      	mov	r0, r5
 800c522:	f000 fdbf 	bl	800d0a4 <strncmp>
 800c526:	bb80      	cbnz	r0, 800c58a <http_server_netconn_thread+0xde>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:175
        if (strncmp((char const *)buf,"GET /STM32H7xx_files/ST.gif",27)==0)
 800c528:	221b      	movs	r2, #27
 800c52a:	4649      	mov	r1, r9
 800c52c:	4628      	mov	r0, r5
 800c52e:	f000 fdb9 	bl	800d0a4 <strncmp>
 800c532:	4606      	mov	r6, r0
 800c534:	b970      	cbnz	r0, 800c554 <http_server_netconn_thread+0xa8>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:177
          fs_open(&file, "/STM32H7xx_files/ST.gif"); 
 800c536:	4926      	ldr	r1, [pc, #152]	; (800c5d0 <http_server_netconn_thread+0x124>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:191
          fs_open(&file, "/STM32H7xx_files/logo.jpg"); 
 800c538:	a807      	add	r0, sp, #28
 800c53a:	f7f6 fcb9 	bl	8002eb0 <fs_open>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:192
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 800c53e:	4633      	mov	r3, r6
 800c540:	9600      	str	r6, [sp, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:211
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 800c542:	4620      	mov	r0, r4
 800c544:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800c548:	f7f9 fa76 	bl	8005a38 <netconn_write_partly>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:212
          fs_close(&file);
 800c54c:	a807      	add	r0, sp, #28
 800c54e:	f7f6 fccf 	bl	8002ef0 <fs_close>
 800c552:	e01a      	b.n	800c58a <http_server_netconn_thread+0xde>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:182
        else if (strncmp((char const *)buf,"GET /STM32H7xx_files/stm32.jpg",30)==0)
 800c554:	221e      	movs	r2, #30
 800c556:	4651      	mov	r1, sl
 800c558:	4628      	mov	r0, r5
 800c55a:	f000 fda3 	bl	800d0a4 <strncmp>
 800c55e:	4606      	mov	r6, r0
 800c560:	b908      	cbnz	r0, 800c566 <http_server_netconn_thread+0xba>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:184
          fs_open(&file, "/STM32H7xx_files/stm32.jpg"); 
 800c562:	491c      	ldr	r1, [pc, #112]	; (800c5d4 <http_server_netconn_thread+0x128>)
 800c564:	e7e8      	b.n	800c538 <http_server_netconn_thread+0x8c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:188
        else if (strncmp((char const *)buf,"GET /STM32H7xx_files/logo.jpg", 29) == 0)                                           
 800c566:	221d      	movs	r2, #29
 800c568:	491b      	ldr	r1, [pc, #108]	; (800c5d8 <http_server_netconn_thread+0x12c>)
 800c56a:	4628      	mov	r0, r5
 800c56c:	f000 fd9a 	bl	800d0a4 <strncmp>
 800c570:	4606      	mov	r6, r0
 800c572:	b908      	cbnz	r0, 800c578 <http_server_netconn_thread+0xcc>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:191
          fs_open(&file, "/STM32H7xx_files/logo.jpg"); 
 800c574:	4919      	ldr	r1, [pc, #100]	; (800c5dc <http_server_netconn_thread+0x130>)
 800c576:	e7df      	b.n	800c538 <http_server_netconn_thread+0x8c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:195
        else if(strncmp(buf, "GET /STM32H7xxTASKS.html", 24) == 0)
 800c578:	2218      	movs	r2, #24
 800c57a:	4919      	ldr	r1, [pc, #100]	; (800c5e0 <http_server_netconn_thread+0x134>)
 800c57c:	4628      	mov	r0, r5
 800c57e:	f000 fd91 	bl	800d0a4 <strncmp>
 800c582:	b960      	cbnz	r0, 800c59e <http_server_netconn_thread+0xf2>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:198
           DynWebPage(conn);
 800c584:	4620      	mov	r0, r4
 800c586:	f7ff ff39 	bl	800c3fc <DynWebPage>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:218
  netconn_close(conn);
 800c58a:	4620      	mov	r0, r4
 800c58c:	f7f9 fa9e 	bl	8005acc <netconn_close>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:222
  netbuf_delete(inbuf);
 800c590:	9805      	ldr	r0, [sp, #20]
 800c592:	f7f9 f803 	bl	800559c <netbuf_delete>
http_server_netconn_thread():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:259
          netconn_delete(newconn);
 800c596:	9804      	ldr	r0, [sp, #16]
 800c598:	f7f9 f956 	bl	8005848 <netconn_delete>
 800c59c:	e7a2      	b.n	800c4e4 <http_server_netconn_thread+0x38>
http_server_serve():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:200
        else if((strncmp(buf, "GET /STM32H7xx.html", 19) == 0)||(strncmp(buf, "GET / ", 6) == 0)) 
 800c59e:	2213      	movs	r2, #19
 800c5a0:	4910      	ldr	r1, [pc, #64]	; (800c5e4 <http_server_netconn_thread+0x138>)
 800c5a2:	4628      	mov	r0, r5
 800c5a4:	f000 fd7e 	bl	800d0a4 <strncmp>
 800c5a8:	b128      	cbz	r0, 800c5b6 <http_server_netconn_thread+0x10a>
 800c5aa:	2206      	movs	r2, #6
 800c5ac:	490e      	ldr	r1, [pc, #56]	; (800c5e8 <http_server_netconn_thread+0x13c>)
 800c5ae:	4628      	mov	r0, r5
 800c5b0:	f000 fd78 	bl	800d0a4 <strncmp>
 800c5b4:	b930      	cbnz	r0, 800c5c4 <http_server_netconn_thread+0x118>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:203
          fs_open(&file, "/STM32H7xx.html"); 
 800c5b6:	490d      	ldr	r1, [pc, #52]	; (800c5ec <http_server_netconn_thread+0x140>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:210
          fs_open(&file, "/404.html"); 
 800c5b8:	a807      	add	r0, sp, #28
 800c5ba:	f7f6 fc79 	bl	8002eb0 <fs_open>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:211
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 800c5be:	2300      	movs	r3, #0
 800c5c0:	9300      	str	r3, [sp, #0]
 800c5c2:	e7be      	b.n	800c542 <http_server_netconn_thread+0x96>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:210
          fs_open(&file, "/404.html"); 
 800c5c4:	490a      	ldr	r1, [pc, #40]	; (800c5f0 <http_server_netconn_thread+0x144>)
 800c5c6:	e7f7      	b.n	800c5b8 <http_server_netconn_thread+0x10c>
http_server_netconn_thread():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/httpserver_netconn.c:264
}
 800c5c8:	b00c      	add	sp, #48	; 0x30
 800c5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5ce:	bf00      	nop
 800c5d0:	08021053 	.word	0x08021053
 800c5d4:	0802106f 	.word	0x0802106f
 800c5d8:	0802108a 	.word	0x0802108a
 800c5dc:	0802108e 	.word	0x0802108e
 800c5e0:	080210a8 	.word	0x080210a8
 800c5e4:	080210c1 	.word	0x080210c1
 800c5e8:	080210d5 	.word	0x080210d5
 800c5ec:	080210c5 	.word	0x080210c5
 800c5f0:	080210dc 	.word	0x080210dc
 800c5f4:	08021049 	.word	0x08021049
 800c5f8:	0802104f 	.word	0x0802104f
 800c5fc:	0802106b 	.word	0x0802106b

0800c600 <HAL_InitTick>:
HAL_InitTick():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_hal_timebase_tim.c:48
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 800c600:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_hal_timebase_tim.c:55
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800c602:	4601      	mov	r1, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_hal_timebase_tim.c:48
{
 800c604:	b08a      	sub	sp, #40	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_hal_timebase_tim.c:55
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800c606:	2200      	movs	r2, #0
 800c608:	2036      	movs	r0, #54	; 0x36
 800c60a:	f7f5 fa41 	bl	8001a90 <HAL_NVIC_SetPriority>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_hal_timebase_tim.c:58
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800c60e:	2036      	movs	r0, #54	; 0x36
 800c610:	f7f5 fa70 	bl	8001af4 <HAL_NVIC_EnableIRQ>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_hal_timebase_tim.c:61
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800c614:	4b18      	ldr	r3, [pc, #96]	; (800c678 <HAL_InitTick+0x78>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_hal_timebase_tim.c:64
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c616:	4669      	mov	r1, sp
 800c618:	a802      	add	r0, sp, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_hal_timebase_tim.c:61
  __HAL_RCC_TIM6_CLK_ENABLE();
 800c61a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800c61e:	f042 0210 	orr.w	r2, r2, #16
 800c622:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800c626:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c62a:	f003 0310 	and.w	r3, r3, #16
 800c62e:	9301      	str	r3, [sp, #4]
 800c630:	9b01      	ldr	r3, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_hal_timebase_tim.c:64
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c632:	f7f5 f8fd 	bl	8001830 <HAL_RCC_GetClockConfig>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_hal_timebase_tim.c:70
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 800c636:	9b07      	ldr	r3, [sp, #28]
 800c638:	b9c3      	cbnz	r3, 800c66c <HAL_InitTick+0x6c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_hal_timebase_tim.c:72
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800c63a:	f7f5 f8e7 	bl	800180c <HAL_RCC_GetPCLK1Freq>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_hal_timebase_tim.c:83
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 800c63e:	4c0f      	ldr	r4, [pc, #60]	; (800c67c <HAL_InitTick+0x7c>)
 800c640:	4b0f      	ldr	r3, [pc, #60]	; (800c680 <HAL_InitTick+0x80>)
 800c642:	6023      	str	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_hal_timebase_tim.c:91
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 800c644:	f240 33e7 	movw	r3, #999	; 0x3e7
 800c648:	60e3      	str	r3, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_hal_timebase_tim.c:80
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800c64a:	4b0e      	ldr	r3, [pc, #56]	; (800c684 <HAL_InitTick+0x84>)
 800c64c:	fbb0 f0f3 	udiv	r0, r0, r3
 800c650:	3801      	subs	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_hal_timebase_tim.c:93
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0;
 800c652:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_hal_timebase_tim.c:92
  TimHandle.Init.Prescaler = uwPrescalerValue;
 800c654:	6060      	str	r0, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_hal_timebase_tim.c:95
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 800c656:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_hal_timebase_tim.c:93
  TimHandle.Init.ClockDivision = 0;
 800c658:	6123      	str	r3, [r4, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_hal_timebase_tim.c:94
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c65a:	60a3      	str	r3, [r4, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_hal_timebase_tim.c:95
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 800c65c:	f7f5 fbd4 	bl	8001e08 <HAL_TIM_Base_Init>
 800c660:	b940      	cbnz	r0, 800c674 <HAL_InitTick+0x74>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_hal_timebase_tim.c:98
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 800c662:	4620      	mov	r0, r4
 800c664:	f7f5 faa0 	bl	8001ba8 <HAL_TIM_Base_Start_IT>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_hal_timebase_tim.c:103
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800c668:	b00a      	add	sp, #40	; 0x28
 800c66a:	bd10      	pop	{r4, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_hal_timebase_tim.c:76
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800c66c:	f7f5 f8ce 	bl	800180c <HAL_RCC_GetPCLK1Freq>
 800c670:	0040      	lsls	r0, r0, #1
 800c672:	e7e4      	b.n	800c63e <HAL_InitTick+0x3e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_hal_timebase_tim.c:102
  return HAL_ERROR;
 800c674:	2001      	movs	r0, #1
 800c676:	e7f7      	b.n	800c668 <HAL_InitTick+0x68>
 800c678:	58024400 	.word	0x58024400
 800c67c:	2000be34 	.word	0x2000be34
 800c680:	40001000 	.word	0x40001000
 800c684:	000f4240 	.word	0x000f4240

0800c688 <HAL_TIM_PeriodElapsedCallback>:
HAL_TIM_PeriodElapsedCallback():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_hal_timebase_tim.c:139
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  HAL_IncTick();
 800c688:	f7f6 bbca 	b.w	8002e20 <HAL_IncTick>

0800c68c <TIM6_DAC_IRQHandler>:
TIM6_DAC_IRQHandler():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_hal_timebase_tim.c:149
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 800c68c:	4801      	ldr	r0, [pc, #4]	; (800c694 <TIM6_DAC_IRQHandler+0x8>)
 800c68e:	f7f5 baa5 	b.w	8001bdc <HAL_TIM_IRQHandler>
 800c692:	bf00      	nop
 800c694:	2000be34 	.word	0x2000be34

0800c698 <ethernet_link_status_updated>:
ethernet_link_status_updated():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:46
  * @param  netif: the network interface
  * @retval None
  */
void ethernet_link_status_updated(struct netif *netif) 
{
  if (netif_is_up(netif))
 800c698:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 800c69c:	f013 0f01 	tst.w	r3, #1
 800c6a0:	4b02      	ldr	r3, [pc, #8]	; (800c6ac <ethernet_link_status_updated+0x14>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:50
 {
#if LWIP_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
 800c6a2:	bf14      	ite	ne
 800c6a4:	2201      	movne	r2, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:60
  }
  else
  {  
#if LWIP_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_LINK_DOWN;
 800c6a6:	2205      	moveq	r2, #5
 800c6a8:	701a      	strb	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:66
#else    
    BSP_LED_Off(LED2);
    BSP_LED_On(LED3); 
#endif /* LWIP_DHCP */
  } 
}
 800c6aa:	4770      	bx	lr
 800c6ac:	20008060 	.word	0x20008060

0800c6b0 <DHCP_Thread>:
DHCP_Thread():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:75
  * @brief  DHCP Process
  * @param  argument: network interface
  * @retval None
  */
void DHCP_Thread(void const * argument)
{
 800c6b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c6b4:	4604      	mov	r4, r0
 800c6b6:	b085      	sub	sp, #20
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:84
  ip_addr_t gw;
  struct dhcp *dhcp;
  
  for (;;)
  {
    switch (DHCP_state)
 800c6b8:	4e27      	ldr	r6, [pc, #156]	; (800c758 <DHCP_Thread+0xa8>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:121
            
            /* Stop DHCP */
            dhcp_stop(netif);
            
            /* Static address used */
            IP_ADDR4(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
 800c6ba:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800c75c <DHCP_Thread+0xac>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:123
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
            IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 800c6be:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800c760 <DHCP_Thread+0xb0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:84
    switch (DHCP_state)
 800c6c2:	7835      	ldrb	r5, [r6, #0]
 800c6c4:	b2ed      	uxtb	r5, r5
 800c6c6:	2d02      	cmp	r5, #2
 800c6c8:	d017      	beq.n	800c6fa <DHCP_Thread+0x4a>
 800c6ca:	2d05      	cmp	r5, #5
 800c6cc:	d038      	beq.n	800c740 <DHCP_Thread+0x90>
 800c6ce:	2d01      	cmp	r5, #1
 800c6d0:	d10e      	bne.n	800c6f0 <DHCP_Thread+0x40>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:88
        ip_addr_set_zero_ip4(&netif->ip_addr);
 800c6d2:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:91
        DHCP_state = DHCP_WAIT_ADDRESS;
 800c6d4:	2702      	movs	r7, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:93
        BSP_LED_Off(LED2);
 800c6d6:	4628      	mov	r0, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:90
        ip_addr_set_zero_ip4(&netif->gw);    
 800c6d8:	60e3      	str	r3, [r4, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:91
        DHCP_state = DHCP_WAIT_ADDRESS;
 800c6da:	7037      	strb	r7, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:89
        ip_addr_set_zero_ip4(&netif->netmask);
 800c6dc:	e9c4 3301 	strd	r3, r3, [r4, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:93
        BSP_LED_Off(LED2);
 800c6e0:	f7fa f9d2 	bl	8006a88 <BSP_LED_Off>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:94
        BSP_LED_Off(LED3);
 800c6e4:	4638      	mov	r0, r7
 800c6e6:	f7fa f9cf 	bl	8006a88 <BSP_LED_Off>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:96
        dhcp_start(netif);
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	f7f8 fcda 	bl	80050a4 <dhcp_start>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:146
    break;
    default: break;
    }
    
    /* wait 500 ms */
    osDelay(500);
 800c6f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c6f4:	f7f3 ff6b 	bl	80005ce <osDelay>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:84
    switch (DHCP_state)
 800c6f8:	e7e3      	b.n	800c6c2 <DHCP_Thread+0x12>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:101
        if (dhcp_supplied_address(netif)) 
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	f7f8 fd30 	bl	8005160 <dhcp_supplied_address>
 800c700:	b140      	cbz	r0, 800c714 <DHCP_Thread+0x64>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:103
          DHCP_state = DHCP_ADDRESS_ASSIGNED;	
 800c702:	2303      	movs	r3, #3
 800c704:	7033      	strb	r3, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:126
            BSP_LED_On(LED2);
 800c706:	2001      	movs	r0, #1
 800c708:	f7fa f9b0 	bl	8006a6c <BSP_LED_On>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:127
            BSP_LED_Off(LED3);
 800c70c:	4628      	mov	r0, r5
 800c70e:	f7fa f9bb 	bl	8006a88 <BSP_LED_Off>
 800c712:	e7ed      	b.n	800c6f0 <DHCP_Thread+0x40>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:113
          if (dhcp->tries > MAX_DHCP_TRIES)
 800c714:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c716:	7a9b      	ldrb	r3, [r3, #10]
 800c718:	2b04      	cmp	r3, #4
 800c71a:	d9e9      	bls.n	800c6f0 <DHCP_Thread+0x40>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:115
            DHCP_state = DHCP_TIMEOUT;
 800c71c:	2304      	movs	r3, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:118
            dhcp_stop(netif);
 800c71e:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:115
            DHCP_state = DHCP_TIMEOUT;
 800c720:	7033      	strb	r3, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:118
            dhcp_stop(netif);
 800c722:	f7f8 fc95 	bl	8005050 <dhcp_stop>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:122
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
 800c726:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:124
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 800c72a:	aa02      	add	r2, sp, #8
 800c72c:	a901      	add	r1, sp, #4
 800c72e:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:121
            IP_ADDR4(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
 800c730:	f8cd 8004 	str.w	r8, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:123
            IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 800c734:	e9cd 3902 	strd	r3, r9, [sp, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:124
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 800c738:	ab03      	add	r3, sp, #12
 800c73a:	f7fd fd59 	bl	800a1f0 <netif_set_addr>
 800c73e:	e7e2      	b.n	800c706 <DHCP_Thread+0x56>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:135
      dhcp_stop(netif);
 800c740:	4620      	mov	r0, r4
 800c742:	f7f8 fc85 	bl	8005050 <dhcp_stop>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:136
      DHCP_state = DHCP_OFF;
 800c746:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:138
      BSP_LED_Off(LED2);
 800c748:	2001      	movs	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:136
      DHCP_state = DHCP_OFF;
 800c74a:	7033      	strb	r3, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:138
      BSP_LED_Off(LED2);
 800c74c:	f7fa f99c 	bl	8006a88 <BSP_LED_Off>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:139
      BSP_LED_On(LED3);
 800c750:	2002      	movs	r0, #2
 800c752:	f7fa f98b 	bl	8006a6c <BSP_LED_On>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/app_ethernet.c:141
    break;
 800c756:	e7cb      	b.n	800c6f0 <DHCP_Thread+0x40>
 800c758:	20008060 	.word	0x20008060
 800c75c:	0a00a8c0 	.word	0x0a00a8c0
 800c760:	0100a8c0 	.word	0x0100a8c0

0800c764 <SystemInit>:
SystemInit():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/system_stm32h7xx.c:139
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800c764:	4918      	ldr	r1, [pc, #96]	; (800c7c8 <SystemInit+0x64>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/system_stm32h7xx.c:149
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800c766:	4819      	ldr	r0, [pc, #100]	; (800c7cc <SystemInit+0x68>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/system_stm32h7xx.c:139
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800c768:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800c76c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/system_stm32h7xx.c:132
{
 800c770:	b510      	push	{r4, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/system_stm32h7xx.c:139
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800c772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/system_stm32h7xx.c:143
  RCC->CR |= RCC_CR_HSION;
 800c776:	4b16      	ldr	r3, [pc, #88]	; (800c7d0 <SystemInit+0x6c>)
 800c778:	681a      	ldr	r2, [r3, #0]
 800c77a:	f042 0201 	orr.w	r2, r2, #1
 800c77e:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/system_stm32h7xx.c:146
  RCC->CFGR = 0x00000000;
 800c780:	2200      	movs	r2, #0
 800c782:	611a      	str	r2, [r3, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/system_stm32h7xx.c:149
  RCC->CR &= 0xEAF6ED7FU;
 800c784:	681c      	ldr	r4, [r3, #0]
 800c786:	4020      	ands	r0, r4
 800c788:	6018      	str	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/system_stm32h7xx.c:152

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800c78a:	619a      	str	r2, [r3, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/system_stm32h7xx.c:155

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800c78c:	61da      	str	r2, [r3, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/system_stm32h7xx.c:158
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800c78e:	621a      	str	r2, [r3, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/system_stm32h7xx.c:161

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800c790:	629a      	str	r2, [r3, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/system_stm32h7xx.c:164

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800c792:	62da      	str	r2, [r3, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/system_stm32h7xx.c:166
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800c794:	631a      	str	r2, [r3, #48]	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/system_stm32h7xx.c:168
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800c796:	635a      	str	r2, [r3, #52]	; 0x34
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/system_stm32h7xx.c:171

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800c798:	639a      	str	r2, [r3, #56]	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/system_stm32h7xx.c:175

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 800c79a:	63da      	str	r2, [r3, #60]	; 0x3c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/system_stm32h7xx.c:177
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800c79c:	641a      	str	r2, [r3, #64]	; 0x40
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/system_stm32h7xx.c:180

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800c79e:	645a      	str	r2, [r3, #68]	; 0x44
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/system_stm32h7xx.c:183
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800c7a0:	6818      	ldr	r0, [r3, #0]
 800c7a2:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800c7a6:	6018      	str	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/system_stm32h7xx.c:186

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800c7a8:	661a      	str	r2, [r3, #96]	; 0x60
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/system_stm32h7xx.c:189

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800c7aa:	4b0a      	ldr	r3, [pc, #40]	; (800c7d4 <SystemInit+0x70>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	0c1b      	lsrs	r3, r3, #16
 800c7b0:	041b      	lsls	r3, r3, #16
 800c7b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7b6:	d202      	bcs.n	800c7be <SystemInit+0x5a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/system_stm32h7xx.c:193
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800c7b8:	4b07      	ldr	r3, [pc, #28]	; (800c7d8 <SystemInit+0x74>)
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	601a      	str	r2, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/system_stm32h7xx.c:208

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800c7be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c7c2:	608b      	str	r3, [r1, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/system_stm32h7xx.c:212
#endif  


}
 800c7c4:	bd10      	pop	{r4, pc}
 800c7c6:	bf00      	nop
 800c7c8:	e000ed00 	.word	0xe000ed00
 800c7cc:	eaf6ed7f 	.word	0xeaf6ed7f
 800c7d0:	58024400 	.word	0x58024400
 800c7d4:	5c001000 	.word	0x5c001000
 800c7d8:	51008108 	.word	0x51008108

0800c7dc <ETH_PHY_IO_DeInit>:
ETH_PHY_IO_DeInit():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:531
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 800c7dc:	2000      	movs	r0, #0
 800c7de:	4770      	bx	lr

0800c7e0 <low_level_output>:
low_level_output():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:250
{
 800c7e0:	b510      	push	{r4, lr}
 800c7e2:	b08c      	sub	sp, #48	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:256
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800c7e4:	2230      	movs	r2, #48	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:250
{
 800c7e6:	460c      	mov	r4, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:256
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800c7e8:	2100      	movs	r1, #0
 800c7ea:	4668      	mov	r0, sp
 800c7ec:	f000 fbce 	bl	800cf8c <memset>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:251
  uint32_t i=0, framelen = 0;
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	466b      	mov	r3, sp
 800c7f4:	4611      	mov	r1, r2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:258 (discriminator 1)
  for(q = p; q != NULL; q = q->next)
 800c7f6:	b954      	cbnz	r4, 800c80e <low_level_output+0x2e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:280
  TxConfig.Length = framelen;
 800c7f8:	490e      	ldr	r1, [pc, #56]	; (800c834 <low_level_output+0x54>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:283
  HAL_ETH_Transmit(&EthHandle, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800c7fa:	480f      	ldr	r0, [pc, #60]	; (800c838 <low_level_output+0x58>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:280
  TxConfig.Length = framelen;
 800c7fc:	604a      	str	r2, [r1, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:283
  HAL_ETH_Transmit(&EthHandle, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800c7fe:	2214      	movs	r2, #20
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:281
  TxConfig.TxBuffer = Txbuffer;
 800c800:	f8c1 d008 	str.w	sp, [r1, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:283
  HAL_ETH_Transmit(&EthHandle, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800c804:	f7f5 fe6a 	bl	80024dc <HAL_ETH_Transmit>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:285
  return errval;
 800c808:	4620      	mov	r0, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:286
}
 800c80a:	b00c      	add	sp, #48	; 0x30
 800c80c:	bd10      	pop	{r4, pc}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:260
    if(i >= ETH_TX_DESC_CNT)	
 800c80e:	2904      	cmp	r1, #4
 800c810:	d00d      	beq.n	800c82e <low_level_output+0x4e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:263
    Txbuffer[i].buffer = q->payload;
 800c812:	6860      	ldr	r0, [r4, #4]
 800c814:	6018      	str	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:264
    Txbuffer[i].len = q->len;
 800c816:	8960      	ldrh	r0, [r4, #10]
 800c818:	6058      	str	r0, [r3, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:265
    framelen += q->len;
 800c81a:	4402      	add	r2, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:267
    if(i>0)
 800c81c:	b109      	cbz	r1, 800c822 <low_level_output+0x42>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:269
      Txbuffer[i-1].next = &Txbuffer[i];
 800c81e:	f843 3c04 	str.w	r3, [r3, #-4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:272
    if(q->next == NULL)
 800c822:	6824      	ldr	r4, [r4, #0]
 800c824:	b904      	cbnz	r4, 800c828 <low_level_output+0x48>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:274
      Txbuffer[i].next = NULL;
 800c826:	609c      	str	r4, [r3, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:277 (discriminator 2)
    i++;
 800c828:	3101      	adds	r1, #1
 800c82a:	330c      	adds	r3, #12
 800c82c:	e7e3      	b.n	800c7f6 <low_level_output+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:261
      return ERR_IF;
 800c82e:	f06f 000b 	mvn.w	r0, #11
 800c832:	e7ea      	b.n	800c80a <low_level_output+0x2a>
 800c834:	2000bfd0 	.word	0x2000bfd0
 800c838:	2000be74 	.word	0x2000be74

0800c83c <pbuf_free_custom>:
pbuf_free_custom():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:411
{
 800c83c:	4601      	mov	r1, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:414
  SCB_InvalidateDCache_by_Addr((uint32_t *)p->payload, p->tot_len);
 800c83e:	8903      	ldrh	r3, [r0, #8]
SCB_InvalidateDCache_by_Addr():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2468
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
    uint32_t op_addr = (uint32_t)addr;
 800c840:	6842      	ldr	r2, [r0, #4]
__DSB():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:879
  __ASM volatile ("dsb 0xF":::"memory");
 800c842:	f3bf 8f4f 	dsb	sy
SCB_InvalidateDCache_by_Addr():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2474
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCIMVAC = op_addr;
 800c846:	4807      	ldr	r0, [pc, #28]	; (800c864 <pbuf_free_custom+0x28>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2473
    while (op_size > 0) {
 800c848:	2b00      	cmp	r3, #0
 800c84a:	dc06      	bgt.n	800c85a <pbuf_free_custom+0x1e>
__DSB():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:879
 800c84c:	f3bf 8f4f 	dsb	sy
__ISB():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:868
  __ASM volatile ("isb 0xF":::"memory");
 800c850:	f3bf 8f6f 	isb	sy
pbuf_free_custom():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:415
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800c854:	4804      	ldr	r0, [pc, #16]	; (800c868 <pbuf_free_custom+0x2c>)
 800c856:	f7ff bd21 	b.w	800c29c <memp_free_pool>
SCB_InvalidateDCache_by_Addr():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2474
      SCB->DCIMVAC = op_addr;
 800c85a:	f8c0 225c 	str.w	r2, [r0, #604]	; 0x25c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2476
      op_addr += (uint32_t)linesize;
      op_size -=           linesize;
 800c85e:	3b20      	subs	r3, #32
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2475
      op_addr += (uint32_t)linesize;
 800c860:	3220      	adds	r2, #32
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2476
      op_size -=           linesize;
 800c862:	e7f1      	b.n	800c848 <pbuf_free_custom+0xc>
 800c864:	e000ed00 	.word	0xe000ed00
 800c868:	08021130 	.word	0x08021130

0800c86c <ETH_PHY_IO_GetTick>:
ETH_PHY_IO_GetTick():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:573
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
  return HAL_GetTick();
 800c86c:	f7f6 bae4 	b.w	8002e38 <HAL_GetTick>

0800c870 <ETH_PHY_IO_Init>:
ETH_PHY_IO_Init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:512
{  
 800c870:	b508      	push	{r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:518
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 800c872:	4802      	ldr	r0, [pc, #8]	; (800c87c <ETH_PHY_IO_Init+0xc>)
 800c874:	f7f6 f95e 	bl	8002b34 <HAL_ETH_SetMDIOClockRange>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:521
}
 800c878:	2000      	movs	r0, #0
 800c87a:	bd08      	pop	{r3, pc}
 800c87c:	2000be74 	.word	0x2000be74

0800c880 <ETH_PHY_IO_ReadReg>:
ETH_PHY_IO_ReadReg():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:541
{
 800c880:	b508      	push	{r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:542
  if(HAL_ETH_ReadPHYRegister(&EthHandle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c882:	4613      	mov	r3, r2
 800c884:	460a      	mov	r2, r1
 800c886:	4601      	mov	r1, r0
 800c888:	4803      	ldr	r0, [pc, #12]	; (800c898 <ETH_PHY_IO_ReadReg+0x18>)
 800c88a:	f7f6 f823 	bl	80028d4 <HAL_ETH_ReadPHYRegister>
 800c88e:	3000      	adds	r0, #0
 800c890:	bf18      	it	ne
 800c892:	2001      	movne	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:548
}
 800c894:	4240      	negs	r0, r0
 800c896:	bd08      	pop	{r3, pc}
 800c898:	2000be74 	.word	0x2000be74

0800c89c <ETH_PHY_IO_WriteReg>:
ETH_PHY_IO_WriteReg():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:558
{
 800c89c:	b508      	push	{r3, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:559
  if(HAL_ETH_WritePHYRegister(&EthHandle, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c89e:	4613      	mov	r3, r2
 800c8a0:	460a      	mov	r2, r1
 800c8a2:	4601      	mov	r1, r0
 800c8a4:	4803      	ldr	r0, [pc, #12]	; (800c8b4 <ETH_PHY_IO_WriteReg+0x18>)
 800c8a6:	f7f6 f843 	bl	8002930 <HAL_ETH_WritePHYRegister>
 800c8aa:	3000      	adds	r0, #0
 800c8ac:	bf18      	it	ne
 800c8ae:	2001      	movne	r0, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:565
}
 800c8b0:	4240      	negs	r0, r0
 800c8b2:	bd08      	pop	{r3, pc}
 800c8b4:	2000be74 	.word	0x2000be74

0800c8b8 <ethernetif_input>:
ethernetif_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:333
{
 800c8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8bc:	4605      	mov	r5, r0
 800c8be:	b086      	sub	sp, #24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:339
    if (osSemaphoreWait( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 800c8c0:	4f26      	ldr	r7, [pc, #152]	; (800c95c <ethernetif_input+0xa4>)
SCB_InvalidateDCache_by_Addr():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2474
      SCB->DCIMVAC = op_addr;
 800c8c2:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800c970 <ethernetif_input+0xb8>
ethernetif_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:339
 800c8c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c8ca:	6838      	ldr	r0, [r7, #0]
 800c8cc:	f7f3 fef4 	bl	80006b8 <osSemaphoreWait>
 800c8d0:	2800      	cmp	r0, #0
 800c8d2:	d1f8      	bne.n	800c8c6 <ethernetif_input+0xe>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:343
        LOCK_TCPIP_CORE();
 800c8d4:	4e22      	ldr	r6, [pc, #136]	; (800c960 <ethernetif_input+0xa8>)
 800c8d6:	4630      	mov	r0, r6
low_level_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:300
  uint32_t framelength = 0;
 800c8d8:	2400      	movs	r4, #0
ethernetif_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:343
        LOCK_TCPIP_CORE();
 800c8da:	f7f4 fa81 	bl	8000de0 <sys_mutex_lock>
low_level_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:303
  if(HAL_ETH_GetRxDataBuffer(&EthHandle, &RxBuff) == HAL_OK) 
 800c8de:	a903      	add	r1, sp, #12
 800c8e0:	4820      	ldr	r0, [pc, #128]	; (800c964 <ethernetif_input+0xac>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:300
  uint32_t framelength = 0;
 800c8e2:	9402      	str	r4, [sp, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:303
  if(HAL_ETH_GetRxDataBuffer(&EthHandle, &RxBuff) == HAL_OK) 
 800c8e4:	f7f5 febd 	bl	8002662 <HAL_ETH_GetRxDataBuffer>
 800c8e8:	bb68      	cbnz	r0, 800c946 <ethernetif_input+0x8e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:305
    HAL_ETH_GetRxDataLength(&EthHandle, &framelength);
 800c8ea:	a902      	add	r1, sp, #8
 800c8ec:	481d      	ldr	r0, [pc, #116]	; (800c964 <ethernetif_input+0xac>)
 800c8ee:	f7f5 feff 	bl	80026f0 <HAL_ETH_GetRxDataLength>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:308
    HAL_ETH_BuildRxDescriptors(&EthHandle);
 800c8f2:	481c      	ldr	r0, [pc, #112]	; (800c964 <ethernetif_input+0xac>)
 800c8f4:	f7f5 ff18 	bl	8002728 <HAL_ETH_BuildRxDescriptors>
SCB_InvalidateDCache_by_Addr():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2468
    uint32_t op_addr = (uint32_t)addr;
 800c8f8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
__DSB():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:879
  __ASM volatile ("dsb 0xF":::"memory");
 800c8fc:	f3bf 8f4f 	dsb	sy
 800c900:	441a      	add	r2, r3
SCB_InvalidateDCache_by_Addr():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2473
    while (op_size > 0) {
 800c902:	2b00      	cmp	r3, #0
 800c904:	eba2 0103 	sub.w	r1, r2, r3
 800c908:	dc23      	bgt.n	800c952 <ethernetif_input+0x9a>
__DSB():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:879
 800c90a:	f3bf 8f4f 	dsb	sy
__ISB():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:868
  __ASM volatile ("isb 0xF":::"memory");
 800c90e:	f3bf 8f6f 	isb	sy
low_level_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:313
    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c912:	4815      	ldr	r0, [pc, #84]	; (800c968 <ethernetif_input+0xb0>)
 800c914:	f7ff fc8e 	bl	800c234 <memp_malloc_pool>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:314
    custom_pbuf->custom_free_function = pbuf_free_custom;
 800c918:	4a14      	ldr	r2, [pc, #80]	; (800c96c <ethernetif_input+0xb4>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:313
    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c91a:	4603      	mov	r3, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:316
    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff.buffer, ETH_RX_BUFFER_SIZE);
 800c91c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:314
    custom_pbuf->custom_free_function = pbuf_free_custom;
 800c920:	6102      	str	r2, [r0, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:316
    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff.buffer, ETH_RX_BUFFER_SIZE);
 800c922:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800c926:	2004      	movs	r0, #4
 800c928:	9201      	str	r2, [sp, #4]
 800c92a:	9a03      	ldr	r2, [sp, #12]
 800c92c:	9200      	str	r2, [sp, #0]
 800c92e:	2202      	movs	r2, #2
 800c930:	f7fd ff72 	bl	800a818 <pbuf_alloced_custom>
ethernetif_input():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:346
        if (p != NULL)
 800c934:	4604      	mov	r4, r0
 800c936:	b130      	cbz	r0, 800c946 <ethernetif_input+0x8e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:348
          if (netif->input( p, netif) != ERR_OK )
 800c938:	692b      	ldr	r3, [r5, #16]
 800c93a:	4629      	mov	r1, r5
 800c93c:	4798      	blx	r3
 800c93e:	b110      	cbz	r0, 800c946 <ethernetif_input+0x8e>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:350
            pbuf_free(p);
 800c940:	4620      	mov	r0, r4
 800c942:	f7fd ff9f 	bl	800a884 <pbuf_free>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:354
        UNLOCK_TCPIP_CORE();
 800c946:	4630      	mov	r0, r6
 800c948:	f7f4 fa4f 	bl	8000dea <sys_mutex_unlock>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:356
      }while(p!=NULL);
 800c94c:	2c00      	cmp	r4, #0
 800c94e:	d1c2      	bne.n	800c8d6 <ethernetif_input+0x1e>
 800c950:	e7b9      	b.n	800c8c6 <ethernetif_input+0xe>
SCB_InvalidateDCache_by_Addr():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2474
      SCB->DCIMVAC = op_addr;
 800c952:	f8c8 125c 	str.w	r1, [r8, #604]	; 0x25c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2476
      op_size -=           linesize;
 800c956:	3b20      	subs	r3, #32
 800c958:	e7d3      	b.n	800c902 <ethernetif_input+0x4a>
 800c95a:	bf00      	nop
 800c95c:	20008064 	.word	0x20008064
 800c960:	200080a8 	.word	0x200080a8
 800c964:	2000be74 	.word	0x2000be74
 800c968:	08021130 	.word	0x08021130
 800c96c:	0800c83d 	.word	0x0800c83d
 800c970:	e000ed00 	.word	0xe000ed00

0800c974 <ethernetif_init>:
ethernetif_init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:374
{
 800c974:	b5f0      	push	{r4, r5, r6, r7, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:375
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c976:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:374
{
 800c978:	b0a1      	sub	sp, #132	; 0x84
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:375
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c97a:	b930      	cbnz	r0, 800c98a <ethernetif_init+0x16>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:375 (discriminator 1)
 800c97c:	4b4a      	ldr	r3, [pc, #296]	; (800caa8 <ethernetif_init+0x134>)
 800c97e:	f240 1277 	movw	r2, #375	; 0x177
 800c982:	494a      	ldr	r1, [pc, #296]	; (800caac <ethernetif_init+0x138>)
 800c984:	484a      	ldr	r0, [pc, #296]	; (800cab0 <ethernetif_init+0x13c>)
 800c986:	f000 fb09 	bl	800cf9c <iprintf>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:389
  netif->name[0] = IFNAME0;
 800c98a:	f247 4373 	movw	r3, #29811	; 0x7473
low_level_init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:135
  EthHandle.Instance = ETH;  
 800c98e:	4d49      	ldr	r5, [pc, #292]	; (800cab4 <ethernetif_init+0x140>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:133
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 800c990:	2600      	movs	r6, #0
 800c992:	4f49      	ldr	r7, [pc, #292]	; (800cab8 <ethernetif_init+0x144>)
ethernetif_init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:389
  netif->name[0] = IFNAME0;
 800c994:	86a3      	strh	r3, [r4, #52]	; 0x34
low_level_init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:143
  HAL_ETH_Init(&EthHandle);
 800c996:	4628      	mov	r0, r5
ethernetif_init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:396
  netif->output = etharp_output;
 800c998:	4b48      	ldr	r3, [pc, #288]	; (800cabc <ethernetif_init+0x148>)
low_level_init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:133
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 800c99a:	f8ad 6004 	strh.w	r6, [sp, #4]
ethernetif_init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:396
  netif->output = etharp_output;
 800c99e:	6163      	str	r3, [r4, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:397
  netif->linkoutput = low_level_output;
 800c9a0:	4b47      	ldr	r3, [pc, #284]	; (800cac0 <ethernetif_init+0x14c>)
low_level_init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:136
  EthHandle.Init.MACAddr = macaddress;
 800c9a2:	f8c5 d004 	str.w	sp, [r5, #4]
ethernetif_init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:397
  netif->linkoutput = low_level_output;
 800c9a6:	61a3      	str	r3, [r4, #24]
low_level_init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:133
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 800c9a8:	2302      	movs	r3, #2
 800c9aa:	9300      	str	r3, [sp, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:135
  EthHandle.Instance = ETH;  
 800c9ac:	4b45      	ldr	r3, [pc, #276]	; (800cac4 <ethernetif_init+0x150>)
 800c9ae:	602b      	str	r3, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:137
  EthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	722b      	strb	r3, [r5, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:138
  EthHandle.Init.RxDesc = DMARxDscrTab;
 800c9b4:	4b44      	ldr	r3, [pc, #272]	; (800cac8 <ethernetif_init+0x154>)
 800c9b6:	612b      	str	r3, [r5, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:139
  EthHandle.Init.TxDesc = DMATxDscrTab;
 800c9b8:	4b44      	ldr	r3, [pc, #272]	; (800cacc <ethernetif_init+0x158>)
 800c9ba:	60eb      	str	r3, [r5, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:140
  EthHandle.Init.RxBuffLen = ETH_RX_BUFFER_SIZE;
 800c9bc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800c9c0:	616b      	str	r3, [r5, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:143
  HAL_ETH_Init(&EthHandle);
 800c9c2:	f7f6 f8f3 	bl	8002bac <HAL_ETH_Init>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:157
  netif->mtu = 1500;
 800c9c6:	f240 53dc 	movw	r3, #1500	; 0x5dc
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:152
  netif->hwaddr[3] =  ETH_MAC_ADDR3;
 800c9ca:	8626      	strh	r6, [r4, #48]	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:154
  netif->hwaddr[5] =  ETH_MAC_ADDR5;
 800c9cc:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:157
  netif->mtu = 1500;
 800c9d0:	8563      	strh	r3, [r4, #42]	; 0x2a
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:146
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800c9d2:	f240 2306 	movw	r3, #518	; 0x206
 800c9d6:	62e3      	str	r3, [r4, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:161
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800c9d8:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800c9dc:	f043 030a 	orr.w	r3, r3, #10
 800c9e0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:165
    HAL_ETH_DescAssignMemory(&EthHandle, idx, Rx_Buff[idx], NULL);
 800c9e4:	4631      	mov	r1, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:163
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800c9e6:	3601      	adds	r6, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:165
    HAL_ETH_DescAssignMemory(&EthHandle, idx, Rx_Buff[idx], NULL);
 800c9e8:	463a      	mov	r2, r7
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	4628      	mov	r0, r5
 800c9ee:	f507 67c0 	add.w	r7, r7, #1536	; 0x600
 800c9f2:	f7f5 fcd3 	bl	800239c <HAL_ETH_DescAssignMemory>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:163
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800c9f6:	2e04      	cmp	r6, #4
 800c9f8:	d1f4      	bne.n	800c9e4 <ethernetif_init+0x70>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:169
  LWIP_MEMPOOL_INIT(RX_POOL);
 800c9fa:	4835      	ldr	r0, [pc, #212]	; (800cad0 <ethernetif_init+0x15c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:180
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800c9fc:	ad02      	add	r5, sp, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:169
  LWIP_MEMPOOL_INIT(RX_POOL);
 800c9fe:	f7ff fbf7 	bl	800c1f0 <memp_init_pool>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:171
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));  
 800ca02:	4b34      	ldr	r3, [pc, #208]	; (800cad4 <ethernetif_init+0x160>)
 800ca04:	2230      	movs	r2, #48	; 0x30
 800ca06:	2100      	movs	r1, #0
 800ca08:	4618      	mov	r0, r3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:180
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800ca0a:	4e33      	ldr	r6, [pc, #204]	; (800cad8 <ethernetif_init+0x164>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:171
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));  
 800ca0c:	f000 fabe 	bl	800cf8c <memset>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:172
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800ca10:	2221      	movs	r2, #33	; 0x21
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:177
  RxPktSemaphore = xSemaphoreCreateBinary();
 800ca12:	2100      	movs	r1, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:172
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800ca14:	f840 2c04 	str.w	r2, [r0, #-4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:173
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800ca18:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800ca1c:	6102      	str	r2, [r0, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:177
  RxPktSemaphore = xSemaphoreCreateBinary();
 800ca1e:	2203      	movs	r2, #3
 800ca20:	2001      	movs	r0, #1
 800ca22:	f7fa f90d 	bl	8006c40 <xQueueGenericCreate>
 800ca26:	4b2d      	ldr	r3, [pc, #180]	; (800cadc <ethernetif_init+0x168>)
 800ca28:	6018      	str	r0, [r3, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:180
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800ca2a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ca2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ca2e:	6833      	ldr	r3, [r6, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:181
  osThreadCreate (osThread(EthIf), netif);
 800ca30:	4621      	mov	r1, r4
 800ca32:	a802      	add	r0, sp, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:180
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800ca34:	602b      	str	r3, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:181
  osThreadCreate (osThread(EthIf), netif);
 800ca36:	f7f3 fdad 	bl	8000594 <osThreadCreate>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:184
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800ca3a:	4929      	ldr	r1, [pc, #164]	; (800cae0 <ethernetif_init+0x16c>)
 800ca3c:	4829      	ldr	r0, [pc, #164]	; (800cae4 <ethernetif_init+0x170>)
 800ca3e:	f7f4 f9f9 	bl	8000e34 <LAN8742_RegisterBusIO>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:187
  LAN8742_Init(&LAN8742);
 800ca42:	4828      	ldr	r0, [pc, #160]	; (800cae4 <ethernetif_init+0x170>)
 800ca44:	f7f4 fa0a 	bl	8000e5c <LAN8742_Init>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:189
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ca48:	4826      	ldr	r0, [pc, #152]	; (800cae4 <ethernetif_init+0x170>)
 800ca4a:	f7f4 fa6b 	bl	8000f24 <LAN8742_GetLinkState>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:192
  if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800ca4e:	2801      	cmp	r0, #1
 800ca50:	dc08      	bgt.n	800ca64 <ethernetif_init+0xf0>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:194
    netif_set_link_down(netif);
 800ca52:	4620      	mov	r0, r4
 800ca54:	f7fd fc66 	bl	800a324 <netif_set_link_down>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:195
    netif_set_down(netif);
 800ca58:	4620      	mov	r0, r4
 800ca5a:	f7fd fc3a 	bl	800a2d2 <netif_set_down>
ethernetif_init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:403
}
 800ca5e:	2000      	movs	r0, #0
 800ca60:	b021      	add	sp, #132	; 0x84
 800ca62:	bdf0      	pop	{r4, r5, r6, r7, pc}
low_level_init():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:199
    switch (PHYLinkState)
 800ca64:	3803      	subs	r0, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:224
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf); 
 800ca66:	a907      	add	r1, sp, #28
 800ca68:	2802      	cmp	r0, #2
 800ca6a:	bf93      	iteet	ls
 800ca6c:	4b1e      	ldrls	r3, [pc, #120]	; (800cae8 <ethernetif_init+0x174>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:199
    switch (PHYLinkState)
 800ca6e:	f44f 4580 	movhi.w	r5, #16384	; 0x4000
 800ca72:	f44f 5600 	movhi.w	r6, #8192	; 0x2000
 800ca76:	f833 6010 	ldrhls.w	r6, [r3, r0, lsl #1]
 800ca7a:	bf9c      	itt	ls
 800ca7c:	4b1b      	ldrls	r3, [pc, #108]	; (800caec <ethernetif_init+0x178>)
 800ca7e:	f833 5010 	ldrhls.w	r5, [r3, r0, lsl #1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:224
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf); 
 800ca82:	480c      	ldr	r0, [pc, #48]	; (800cab4 <ethernetif_init+0x140>)
 800ca84:	f7f5 ff84 	bl	8002990 <HAL_ETH_GetMACConfig>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:227
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 800ca88:	a907      	add	r1, sp, #28
 800ca8a:	480a      	ldr	r0, [pc, #40]	; (800cab4 <ethernetif_init+0x140>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:226
    MACConf.Speed = speed;
 800ca8c:	e9cd 560c 	strd	r5, r6, [sp, #48]	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:227
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 800ca90:	f7f6 f844 	bl	8002b1c <HAL_ETH_SetMACConfig>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:228
    HAL_ETH_Start_IT(&EthHandle);
 800ca94:	4807      	ldr	r0, [pc, #28]	; (800cab4 <ethernetif_init+0x140>)
 800ca96:	f7f5 fc9e 	bl	80023d6 <HAL_ETH_Start_IT>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:229
    netif_set_up(netif);
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	f7fd fc0a 	bl	800a2b4 <netif_set_up>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:230
    netif_set_link_up(netif);
 800caa0:	4620      	mov	r0, r4
 800caa2:	f7fd fc23 	bl	800a2ec <netif_set_link_up>
 800caa6:	e7da      	b.n	800ca5e <ethernetif_init+0xea>
 800caa8:	08021112 	.word	0x08021112
 800caac:	0801e8ef 	.word	0x0801e8ef
 800cab0:	0800e36a 	.word	0x0800e36a
 800cab4:	2000be74 	.word	0x2000be74
 800cab8:	200000a0 	.word	0x200000a0
 800cabc:	08003f15 	.word	0x08003f15
 800cac0:	0800c7e1 	.word	0x0800c7e1
 800cac4:	40028000 	.word	0x40028000
 800cac8:	200018a0 	.word	0x200018a0
 800cacc:	20001900 	.word	0x20001900
 800cad0:	08021130 	.word	0x08021130
 800cad4:	2000bfd4 	.word	0x2000bfd4
 800cad8:	0800e27c 	.word	0x0800e27c
 800cadc:	20008064 	.word	0x20008064
 800cae0:	20000028 	.word	0x20000028
 800cae4:	2000bfb0 	.word	0x2000bfb0
 800cae8:	080210f6 	.word	0x080210f6
 800caec:	080210fc 	.word	0x080210fc

0800caf0 <sys_now>:
sys_now():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:426
  return HAL_GetTick();
 800caf0:	f7f6 b9a2 	b.w	8002e38 <HAL_GetTick>

0800caf4 <HAL_ETH_MspInit>:
HAL_ETH_MspInit():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:438
{
 800caf4:	b530      	push	{r4, r5, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:444
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800caf6:	4c40      	ldr	r4, [pc, #256]	; (800cbf8 <HAL_ETH_MspInit+0x104>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:438
{
 800caf8:	b08d      	sub	sp, #52	; 0x34
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:466
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 800cafa:	2500      	movs	r5, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:469
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800cafc:	483f      	ldr	r0, [pc, #252]	; (800cbfc <HAL_ETH_MspInit+0x108>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:444
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cafe:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:469
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800cb02:	a907      	add	r1, sp, #28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:444
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cb04:	f043 0301 	orr.w	r3, r3, #1
 800cb08:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800cb0c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800cb10:	f003 0301 	and.w	r3, r3, #1
 800cb14:	9300      	str	r3, [sp, #0]
 800cb16:	9b00      	ldr	r3, [sp, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:445
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cb18:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800cb1c:	f043 0302 	orr.w	r3, r3, #2
 800cb20:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800cb24:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800cb28:	f003 0302 	and.w	r3, r3, #2
 800cb2c:	9301      	str	r3, [sp, #4]
 800cb2e:	9b01      	ldr	r3, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:446
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800cb30:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800cb34:	f043 0304 	orr.w	r3, r3, #4
 800cb38:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800cb3c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800cb40:	f003 0304 	and.w	r3, r3, #4
 800cb44:	9302      	str	r3, [sp, #8]
 800cb46:	9b02      	ldr	r3, [sp, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:447
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800cb48:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800cb4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb50:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800cb54:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:466
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 800cb58:	9509      	str	r5, [sp, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:447
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800cb5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb5e:	9303      	str	r3, [sp, #12]
 800cb60:	9b03      	ldr	r3, [sp, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:464
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800cb62:	2302      	movs	r3, #2
 800cb64:	930a      	str	r3, [sp, #40]	; 0x28
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:465
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800cb66:	9308      	str	r3, [sp, #32]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:467
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 800cb68:	230b      	movs	r3, #11
 800cb6a:	930b      	str	r3, [sp, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:468
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 800cb6c:	2386      	movs	r3, #134	; 0x86
 800cb6e:	9307      	str	r3, [sp, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:469
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800cb70:	f7f4 fe8c 	bl	800188c <HAL_GPIO_Init>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:472
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 800cb74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:473
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800cb78:	a907      	add	r1, sp, #28
 800cb7a:	4821      	ldr	r0, [pc, #132]	; (800cc00 <HAL_ETH_MspInit+0x10c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:472
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 800cb7c:	9307      	str	r3, [sp, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:473
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800cb7e:	f7f4 fe85 	bl	800188c <HAL_GPIO_Init>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:476
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 800cb82:	2332      	movs	r3, #50	; 0x32
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:477
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800cb84:	a907      	add	r1, sp, #28
 800cb86:	481f      	ldr	r0, [pc, #124]	; (800cc04 <HAL_ETH_MspInit+0x110>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:476
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 800cb88:	9307      	str	r3, [sp, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:477
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800cb8a:	f7f4 fe7f 	bl	800188c <HAL_GPIO_Init>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:480
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13;
 800cb8e:	f642 0304 	movw	r3, #10244	; 0x2804
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:481
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);	
 800cb92:	a907      	add	r1, sp, #28
 800cb94:	481c      	ldr	r0, [pc, #112]	; (800cc08 <HAL_ETH_MspInit+0x114>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:480
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13;
 800cb96:	9307      	str	r3, [sp, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:481
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);	
 800cb98:	f7f4 fe78 	bl	800188c <HAL_GPIO_Init>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:484
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 800cb9c:	462a      	mov	r2, r5
 800cb9e:	2107      	movs	r1, #7
 800cba0:	203d      	movs	r0, #61	; 0x3d
 800cba2:	f7f4 ff75 	bl	8001a90 <HAL_NVIC_SetPriority>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:485
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 800cba6:	203d      	movs	r0, #61	; 0x3d
 800cba8:	f7f4 ffa4 	bl	8001af4 <HAL_NVIC_EnableIRQ>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:488
  __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800cbac:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800cbb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbb4:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800cbb8:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800cbbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cbc0:	9304      	str	r3, [sp, #16]
 800cbc2:	9b04      	ldr	r3, [sp, #16]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:489
  __HAL_RCC_ETH1TX_CLK_ENABLE();
 800cbc4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800cbc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cbcc:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800cbd0:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800cbd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cbd8:	9305      	str	r3, [sp, #20]
 800cbda:	9b05      	ldr	r3, [sp, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:490
  __HAL_RCC_ETH1RX_CLK_ENABLE();
 800cbdc:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800cbe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cbe4:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800cbe8:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800cbec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbf0:	9306      	str	r3, [sp, #24]
 800cbf2:	9b06      	ldr	r3, [sp, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:491
}
 800cbf4:	b00d      	add	sp, #52	; 0x34
 800cbf6:	bd30      	pop	{r4, r5, pc}
 800cbf8:	58024400 	.word	0x58024400
 800cbfc:	58020000 	.word	0x58020000
 800cc00:	58020400 	.word	0x58020400
 800cc04:	58020800 	.word	0x58020800
 800cc08:	58021800 	.word	0x58021800

0800cc0c <HAL_ETH_RxCpltCallback>:
HAL_ETH_RxCpltCallback():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:500
  osSemaphoreRelease(RxPktSemaphore);
 800cc0c:	4b01      	ldr	r3, [pc, #4]	; (800cc14 <HAL_ETH_RxCpltCallback+0x8>)
 800cc0e:	6818      	ldr	r0, [r3, #0]
 800cc10:	f7f3 bd78 	b.w	8000704 <osSemaphoreRelease>
 800cc14:	20008064 	.word	0x20008064

0800cc18 <ethernet_link_thread>:
ethernet_link_thread():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:582
  * @brief  Check the ETH link state and update netif accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread( void const * argument )
{
 800cc18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:585
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800cc1c:	2500      	movs	r5, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:582
{
 800cc1e:	b09a      	sub	sp, #104	; 0x68
 800cc20:	4604      	mov	r4, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:591
  struct netif *netif = (struct netif *) argument;
  
  for(;;)
  {
    
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800cc22:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800ccac <ethernet_link_thread+0x94>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:585
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800cc26:	46a8      	mov	r8, r5
 800cc28:	462f      	mov	r7, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:630
      }
      
      if(linkchanged)
      {
        /* Get MAC Config MAC */
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf); 
 800cc2a:	4e1e      	ldr	r6, [pc, #120]	; (800cca4 <ethernet_link_thread+0x8c>)
 800cc2c:	f8df a080 	ldr.w	sl, [pc, #128]	; 800ccb0 <ethernet_link_thread+0x98>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:591
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800cc30:	4648      	mov	r0, r9
 800cc32:	f7f4 f977 	bl	8000f24 <LAN8742_GetLinkState>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:593
    if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800cc36:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800cc3a:	075a      	lsls	r2, r3, #29
 800cc3c:	d50e      	bpl.n	800cc5c <ethernet_link_thread+0x44>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:593 (discriminator 1)
 800cc3e:	2801      	cmp	r0, #1
 800cc40:	dc0c      	bgt.n	800cc5c <ethernet_link_thread+0x44>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:595
      HAL_ETH_Stop_IT(&EthHandle);
 800cc42:	4630      	mov	r0, r6
 800cc44:	f7f5 fc11 	bl	800246a <HAL_ETH_Stop_IT>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:596
      netif_set_down(netif);
 800cc48:	4620      	mov	r0, r4
 800cc4a:	f7fd fb42 	bl	800a2d2 <netif_set_down>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:597
      netif_set_link_down(netif);
 800cc4e:	4620      	mov	r0, r4
 800cc50:	f7fd fb68 	bl	800a324 <netif_set_link_down>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:640
        netif_set_up(netif);
        netif_set_link_up(netif);
      }
    }
    
    osDelay(100);
 800cc54:	2064      	movs	r0, #100	; 0x64
 800cc56:	f7f3 fcba 	bl	80005ce <osDelay>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:591
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800cc5a:	e7e9      	b.n	800cc30 <ethernet_link_thread+0x18>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:599
    else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800cc5c:	075b      	lsls	r3, r3, #29
 800cc5e:	d4f9      	bmi.n	800cc54 <ethernet_link_thread+0x3c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:599 (discriminator 1)
 800cc60:	2801      	cmp	r0, #1
 800cc62:	ddf7      	ble.n	800cc54 <ethernet_link_thread+0x3c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:601
      switch (PHYLinkState)
 800cc64:	3802      	subs	r0, #2
 800cc66:	2803      	cmp	r0, #3
 800cc68:	d819      	bhi.n	800cc9e <ethernet_link_thread+0x86>
 800cc6a:	4b0f      	ldr	r3, [pc, #60]	; (800cca8 <ethernet_link_thread+0x90>)
 800cc6c:	f83a 8010 	ldrh.w	r8, [sl, r0, lsl #1]
 800cc70:	f833 5010 	ldrh.w	r5, [r3, r0, lsl #1]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:630
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf); 
 800cc74:	a901      	add	r1, sp, #4
 800cc76:	4630      	mov	r0, r6
 800cc78:	f7f5 fe8a 	bl	8002990 <HAL_ETH_GetMACConfig>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:633
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 800cc7c:	a901      	add	r1, sp, #4
 800cc7e:	4630      	mov	r0, r6
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:636
        netif_set_link_up(netif);
 800cc80:	2701      	movs	r7, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:632
        MACConf.Speed = speed;
 800cc82:	e9cd 8506 	strd	r8, r5, [sp, #24]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:633
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 800cc86:	f7f5 ff49 	bl	8002b1c <HAL_ETH_SetMACConfig>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:634
        HAL_ETH_Start_IT(&EthHandle);
 800cc8a:	4630      	mov	r0, r6
 800cc8c:	f7f5 fba3 	bl	80023d6 <HAL_ETH_Start_IT>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:635
        netif_set_up(netif);
 800cc90:	4620      	mov	r0, r4
 800cc92:	f7fd fb0f 	bl	800a2b4 <netif_set_up>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:636
        netif_set_link_up(netif);
 800cc96:	4620      	mov	r0, r4
 800cc98:	f7fd fb28 	bl	800a2ec <netif_set_link_up>
 800cc9c:	e7da      	b.n	800cc54 <ethernet_link_thread+0x3c>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/ethernetif.c:627
      if(linkchanged)
 800cc9e:	2f00      	cmp	r7, #0
 800cca0:	d0d8      	beq.n	800cc54 <ethernet_link_thread+0x3c>
 800cca2:	e7e7      	b.n	800cc74 <ethernet_link_thread+0x5c>
 800cca4:	2000be74 	.word	0x2000be74
 800cca8:	0802110a 	.word	0x0802110a
 800ccac:	2000bfb0 	.word	0x2000bfb0
 800ccb0:	08021102 	.word	0x08021102

0800ccb4 <StartThread>:
StartThread():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:93
  * @retval None
  */
static void StartThread(void const * argument)
{   
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 800ccb4:	2100      	movs	r1, #0
Netif_Config():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:151
  ethernet_link_status_updated(&gnetif); 
  
#if LWIP_NETIF_LINK_CALLBACK 
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
  
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 800ccb6:	4c1c      	ldr	r4, [pc, #112]	; (800cd28 <StartThread+0x74>)
StartThread():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:91
{   
 800ccb8:	b500      	push	{lr}
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:93
  tcpip_init(NULL, NULL);
 800ccba:	4608      	mov	r0, r1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:91
{   
 800ccbc:	b093      	sub	sp, #76	; 0x4c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:93
  tcpip_init(NULL, NULL);
 800ccbe:	f7f8 fc2d 	bl	800551c <tcpip_init>
Netif_Config():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:141
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800ccc2:	4a1a      	ldr	r2, [pc, #104]	; (800cd2c <StartThread+0x78>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:131
  ip_addr_set_zero_ip4(&ipaddr);
 800ccc4:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:141
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800ccc6:	a905      	add	r1, sp, #20
 800ccc8:	9202      	str	r2, [sp, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:151
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 800ccca:	ad08      	add	r5, sp, #32
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:141
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800cccc:	4a18      	ldr	r2, [pc, #96]	; (800cd30 <StartThread+0x7c>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:133
  ip_addr_set_zero_ip4(&gw);
 800ccce:	9307      	str	r3, [sp, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:141
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800ccd0:	4818      	ldr	r0, [pc, #96]	; (800cd34 <StartThread+0x80>)
 800ccd2:	e9cd 3200 	strd	r3, r2, [sp]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:132
  ip_addr_set_zero_ip4(&netmask);
 800ccd6:	e9cd 3305 	strd	r3, r3, [sp, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:141
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800ccda:	aa06      	add	r2, sp, #24
 800ccdc:	ab07      	add	r3, sp, #28
 800ccde:	f7fd faa3 	bl	800a228 <netif_add>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:144
  netif_set_default(&gnetif);
 800cce2:	4814      	ldr	r0, [pc, #80]	; (800cd34 <StartThread+0x80>)
 800cce4:	f7fd fae0 	bl	800a2a8 <netif_set_default>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:146
  ethernet_link_status_updated(&gnetif); 
 800cce8:	4812      	ldr	r0, [pc, #72]	; (800cd34 <StartThread+0x80>)
 800ccea:	f7ff fcd5 	bl	800c698 <ethernet_link_status_updated>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:149
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800ccee:	4912      	ldr	r1, [pc, #72]	; (800cd38 <StartThread+0x84>)
 800ccf0:	4810      	ldr	r0, [pc, #64]	; (800cd34 <StartThread+0x80>)
 800ccf2:	f7fd fb23 	bl	800a33c <netif_set_link_callback>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:151
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 800ccf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ccf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ccfa:	f854 3b04 	ldr.w	r3, [r4], #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:152
  osThreadCreate (osThread(EthLink), &gnetif);
 800ccfe:	a808      	add	r0, sp, #32
 800cd00:	490c      	ldr	r1, [pc, #48]	; (800cd34 <StartThread+0x80>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:151
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 800cd02:	602b      	str	r3, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:152
  osThreadCreate (osThread(EthLink), &gnetif);
 800cd04:	f7f3 fc46 	bl	8000594 <osThreadCreate>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:157
#endif   
 
#if LWIP_DHCP
  /* Start DHCPClient */
  osThreadDef(DHCP, DHCP_Thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800cd08:	ad0d      	add	r5, sp, #52	; 0x34
 800cd0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cd0e:	6823      	ldr	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:158
  osThreadCreate (osThread(DHCP), &gnetif);
 800cd10:	a80d      	add	r0, sp, #52	; 0x34
 800cd12:	4908      	ldr	r1, [pc, #32]	; (800cd34 <StartThread+0x80>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:157
  osThreadDef(DHCP, DHCP_Thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800cd14:	602b      	str	r3, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:158
  osThreadCreate (osThread(DHCP), &gnetif);
 800cd16:	f7f3 fc3d 	bl	8000594 <osThreadCreate>
StartThread():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:99
  http_server_netconn_init();
 800cd1a:	f7ff fb5d 	bl	800c3d8 <http_server_netconn_init>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:104 (discriminator 1)
    osThreadTerminate(NULL);
 800cd1e:	2000      	movs	r0, #0
 800cd20:	f7f3 fc50 	bl	80005c4 <osThreadTerminate>
 800cd24:	e7fb      	b.n	800cd1e <StartThread+0x6a>
 800cd26:	bf00      	nop
 800cd28:	0800e290 	.word	0x0800e290
 800cd2c:	080054e1 	.word	0x080054e1
 800cd30:	0800c975 	.word	0x0800c975
 800cd34:	2000c004 	.word	0x2000c004
 800cd38:	0800c699 	.word	0x0800c699

0800cd3c <main>:
main():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:54
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b09e      	sub	sp, #120	; 0x78
MPU_Config():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:276
  
  /* Configure the MPU attributes as Normal Non Cacheable
     for LwIP RAM heap which contains the Tx buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x30044000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 800cd40:	4c62      	ldr	r4, [pc, #392]	; (800cecc <main+0x190>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:254
  HAL_MPU_Disable();
 800cd42:	f7f4 fee5 	bl	8001b10 <HAL_MPU_Disable>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:258
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800cd46:	2301      	movs	r3, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:260
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 800cd48:	4861      	ldr	r0, [pc, #388]	; (800ced0 <main+0x194>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:258
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800cd4a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:260
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 800cd4e:	4b61      	ldr	r3, [pc, #388]	; (800ced4 <main+0x198>)
 800cd50:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:268
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800cd54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:270
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800cd58:	a80b      	add	r0, sp, #44	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:268
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800cd5a:	930e      	str	r3, [sp, #56]	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:270
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800cd5c:	f7f4 fefa 	bl	8001b54 <HAL_MPU_ConfigRegion>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:274
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800cd60:	f240 1301 	movw	r3, #257	; 0x101
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:286
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800cd64:	a80b      	add	r0, sp, #44	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:274
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800cd66:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:276
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 800cd6a:	4b5b      	ldr	r3, [pc, #364]	; (800ced8 <main+0x19c>)
 800cd6c:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:284
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800cd70:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd74:	930e      	str	r3, [sp, #56]	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:286
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800cd76:	f7f4 feed 	bl	8001b54 <HAL_MPU_ConfigRegion>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:289

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800cd7a:	2004      	movs	r0, #4
 800cd7c:	f7f4 fed8 	bl	8001b30 <HAL_MPU_Enable>
__DSB():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:879
  __ASM volatile ("dsb 0xF":::"memory");
 800cd80:	f3bf 8f4f 	dsb	sy
__ISB():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:868
  __ASM volatile ("isb 0xF":::"memory");
 800cd84:	f3bf 8f6f 	isb	sy
SCB_EnableICache():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2234
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800cd88:	4b54      	ldr	r3, [pc, #336]	; (800cedc <main+0x1a0>)
 800cd8a:	2100      	movs	r1, #0
 800cd8c:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
__DSB():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:879
  __ASM volatile ("dsb 0xF":::"memory");
 800cd90:	f3bf 8f4f 	dsb	sy
__ISB():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:868
  __ASM volatile ("isb 0xF":::"memory");
 800cd94:	f3bf 8f6f 	isb	sy
SCB_EnableICache():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2237
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800cd98:	695a      	ldr	r2, [r3, #20]
 800cd9a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800cd9e:	615a      	str	r2, [r3, #20]
__DSB():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:879
  __ASM volatile ("dsb 0xF":::"memory");
 800cda0:	f3bf 8f4f 	dsb	sy
__ISB():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:868
  __ASM volatile ("isb 0xF":::"memory");
 800cda4:	f3bf 8f6f 	isb	sy
SCB_EnableDCache():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2288
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800cda8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
__DSB():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:879
  __ASM volatile ("dsb 0xF":::"memory");
 800cdac:	f3bf 8f4f 	dsb	sy
SCB_EnableDCache():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2291
    ccsidr = SCB->CCSIDR;
 800cdb0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2298
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800cdb4:	f643 74e0 	movw	r4, #16352	; 0x3fe0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2296
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800cdb8:	f3c2 00c9 	ubfx	r0, r2, #3, #10
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2294
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800cdbc:	f3c2 324e 	ubfx	r2, r2, #13, #15
 800cdc0:	0152      	lsls	r2, r2, #5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2298
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800cdc2:	ea02 0604 	and.w	r6, r2, r4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2296
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800cdc6:	4601      	mov	r1, r0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2298
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800cdc8:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2303
      } while (ways-- != 0U);
 800cdcc:	f111 31ff 	adds.w	r1, r1, #4294967295	; 0xffffffff
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2298
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800cdd0:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2303
      } while (ways-- != 0U);
 800cdd4:	d2f8      	bcs.n	800cdc8 <main+0x8c>
 800cdd6:	3a20      	subs	r2, #32
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2304
    } while(sets-- != 0U);
 800cdd8:	f112 0f20 	cmn.w	r2, #32
 800cddc:	d1f1      	bne.n	800cdc2 <main+0x86>
__DSB():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:879
 800cdde:	f3bf 8f4f 	dsb	sy
SCB_EnableDCache():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/core_cm7.h:2307
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800cde2:	695a      	ldr	r2, [r3, #20]
 800cde4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cde8:	615a      	str	r2, [r3, #20]
__DSB():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:879
 800cdea:	f3bf 8f4f 	dsb	sy
__ISB():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/lib/Drivers/CMSIS/Include/cmsis_gcc.h:868
  __ASM volatile ("isb 0xF":::"memory");
 800cdee:	f3bf 8f6f 	isb	sy
main():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:66
  HAL_Init();  
 800cdf2:	f7f5 ffe7 	bl	8002dc4 <HAL_Init>
SystemClock_Config():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:191
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800cdf6:	2002      	movs	r0, #2
 800cdf8:	f7f6 f834 	bl	8002e64 <HAL_PWREx_ConfigSupply>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:196
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	9301      	str	r3, [sp, #4]
 800ce00:	4b37      	ldr	r3, [pc, #220]	; (800cee0 <main+0x1a4>)
 800ce02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce04:	f022 0201 	bic.w	r2, r2, #1
 800ce08:	62da      	str	r2, [r3, #44]	; 0x2c
 800ce0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce0c:	f003 0301 	and.w	r3, r3, #1
 800ce10:	9301      	str	r3, [sp, #4]
 800ce12:	4b34      	ldr	r3, [pc, #208]	; (800cee4 <main+0x1a8>)
 800ce14:	699a      	ldr	r2, [r3, #24]
 800ce16:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800ce1a:	619a      	str	r2, [r3, #24]
 800ce1c:	699a      	ldr	r2, [r3, #24]
 800ce1e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800ce22:	9201      	str	r2, [sp, #4]
 800ce24:	9a01      	ldr	r2, [sp, #4]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:198
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800ce26:	699a      	ldr	r2, [r3, #24]
 800ce28:	0491      	lsls	r1, r2, #18
 800ce2a:	d5fc      	bpl.n	800ce26 <main+0xea>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:201
  __HAL_RCC_D2SRAM3_CLK_ENABLE();
 800ce2c:	4b2e      	ldr	r3, [pc, #184]	; (800cee8 <main+0x1ac>)
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:205
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800ce2e:	2701      	movs	r7, #1
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:208
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ce30:	2402      	movs	r4, #2
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:212
  RCC_OscInitStruct.PLL.PLLN = 400;
 800ce32:	2504      	movs	r5, #4
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:201
  __HAL_RCC_D2SRAM3_CLK_ENABLE();
 800ce34:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:219
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800ce38:	2608      	movs	r6, #8
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:220
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800ce3a:	a80b      	add	r0, sp, #44	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:201
  __HAL_RCC_D2SRAM3_CLK_ENABLE();
 800ce3c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800ce40:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:212
  RCC_OscInitStruct.PLL.PLLN = 400;
 800ce44:	f44f 72c8 	mov.w	r2, #400	; 0x190
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:201
  __HAL_RCC_D2SRAM3_CLK_ENABLE();
 800ce48:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:214
  RCC_OscInitStruct.PLL.PLLP = 2;
 800ce4c:	9418      	str	r4, [sp, #96]	; 0x60
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:201
  __HAL_RCC_D2SRAM3_CLK_ENABLE();
 800ce4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:219
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800ce52:	961b      	str	r6, [sp, #108]	; 0x6c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:201
  __HAL_RCC_D2SRAM3_CLK_ENABLE();
 800ce54:	9302      	str	r3, [sp, #8]
 800ce56:	9b02      	ldr	r3, [sp, #8]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:205
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800ce58:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800ce5c:	e9cd 730b 	strd	r7, r3, [sp, #44]	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:206
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800ce60:	2300      	movs	r3, #0
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:209
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ce62:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:206
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800ce66:	930e      	str	r3, [sp, #56]	; 0x38
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:207
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800ce68:	9312      	str	r3, [sp, #72]	; 0x48
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:213
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800ce6a:	931d      	str	r3, [sp, #116]	; 0x74
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:218
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800ce6c:	931c      	str	r3, [sp, #112]	; 0x70
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:212
  RCC_OscInitStruct.PLL.PLLN = 400;
 800ce6e:	e9cd 5216 	strd	r5, r2, [sp, #88]	; 0x58
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:216
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800ce72:	e9cd 5419 	strd	r5, r4, [sp, #100]	; 0x64
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:220
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800ce76:	f7f4 f89f 	bl	8000fb8 <HAL_RCC_OscConfig>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:221
  if(ret != HAL_OK)
 800ce7a:	b100      	cbz	r0, 800ce7e <main+0x142>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:223
    while(1);
 800ce7c:	e7fe      	b.n	800ce7c <main+0x140>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:230
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ce7e:	223f      	movs	r2, #63	; 0x3f
 800ce80:	2303      	movs	r3, #3
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:237
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800ce82:	4629      	mov	r1, r5
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:230
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ce84:	e9cd 2303 	strd	r2, r3, [sp, #12]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:233
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 800ce88:	2340      	movs	r3, #64	; 0x40
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:235
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2; 
 800ce8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:232
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800ce8e:	e9cd 0605 	strd	r0, r6, [sp, #20]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:237
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800ce92:	a803      	add	r0, sp, #12
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:234
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2; 
 800ce94:	e9cd 3307 	strd	r3, r3, [sp, #28]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:236
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2; 
 800ce98:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:237
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800ce9c:	f7f4 fb86 	bl	80015ac <HAL_RCC_ClockConfig>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:238
  if(ret != HAL_OK)
 800cea0:	4606      	mov	r6, r0
 800cea2:	b100      	cbz	r0, 800cea6 <main+0x16a>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:240
    while(1);
 800cea4:	e7fe      	b.n	800cea4 <main+0x168>
BSP_Config():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:115
  BSP_LED_Init(LED2);
 800cea6:	4638      	mov	r0, r7
main():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:75
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 4);
 800cea8:	4d10      	ldr	r5, [pc, #64]	; (800ceec <main+0x1b0>)
BSP_Config():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:115
  BSP_LED_Init(LED2);
 800ceaa:	f7f9 fda3 	bl	80069f4 <BSP_LED_Init>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:116
  BSP_LED_Init(LED3);
 800ceae:	4620      	mov	r0, r4
 800ceb0:	f7f9 fda0 	bl	80069f4 <BSP_LED_Init>
main():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:75
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 4);
 800ceb4:	ac0b      	add	r4, sp, #44	; 0x2c
 800ceb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ceb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ceba:	682b      	ldr	r3, [r5, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:76
  osThreadCreate (osThread(Start), NULL);
 800cebc:	4631      	mov	r1, r6
 800cebe:	a80b      	add	r0, sp, #44	; 0x2c
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:75
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 4);
 800cec0:	6023      	str	r3, [r4, #0]
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:76
  osThreadCreate (osThread(Start), NULL);
 800cec2:	f7f3 fb67 	bl	8000594 <osThreadCreate>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:79
  osKernelStart();
 800cec6:	f7f3 fb59 	bl	800057c <osKernelStart>
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/main.c:82 (discriminator 1)
  for( ;; );
 800ceca:	e7fe      	b.n	800ceca <main+0x18e>
 800cecc:	30044000 	.word	0x30044000
 800ced0:	30040000 	.word	0x30040000
 800ced4:	03000007 	.word	0x03000007
 800ced8:	0301000d 	.word	0x0301000d
 800cedc:	e000ed00 	.word	0xe000ed00
 800cee0:	58000400 	.word	0x58000400
 800cee4:	58024800 	.word	0x58024800
 800cee8:	58024400 	.word	0x58024400
 800ceec:	0800e2b8 	.word	0x0800e2b8

0800cef0 <NMI_Handler>:
NMI_Handler():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_it.c:45
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800cef0:	4770      	bx	lr

0800cef2 <HardFault_Handler>:
HardFault_Handler():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_it.c:57 (discriminator 1)
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 800cef2:	e7fe      	b.n	800cef2 <HardFault_Handler>

0800cef4 <MemManage_Handler>:
MemManage_Handler():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_it.c:70 (discriminator 1)
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 800cef4:	e7fe      	b.n	800cef4 <MemManage_Handler>

0800cef6 <BusFault_Handler>:
BusFault_Handler():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_it.c:83 (discriminator 1)
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 800cef6:	e7fe      	b.n	800cef6 <BusFault_Handler>

0800cef8 <UsageFault_Handler>:
UsageFault_Handler():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_it.c:96 (discriminator 1)
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 800cef8:	e7fe      	b.n	800cef8 <UsageFault_Handler>

0800cefa <DebugMon_Handler>:
DebugMon_Handler():
 800cefa:	4770      	bx	lr

0800cefc <SysTick_Handler>:
SysTick_Handler():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_it.c:116
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  osSystickHandler();
 800cefc:	f7f3 bc6c 	b.w	80007d8 <osSystickHandler>

0800cf00 <ETH_IRQHandler>:
ETH_IRQHandler():
/Users/jared3701/Documents/git_repo/STM32/firmware/stm32H743/examples/LwIP_HTTP_Server_Netconn_RTOS/application/src/stm32h7xx_it.c:133
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
  HAL_ETH_IRQHandler(&EthHandle);
 800cf00:	4801      	ldr	r0, [pc, #4]	; (800cf08 <ETH_IRQHandler+0x8>)
 800cf02:	f7f5 bc55 	b.w	80027b0 <HAL_ETH_IRQHandler>
 800cf06:	bf00      	nop
 800cf08:	2000be74 	.word	0x2000be74

0800cf0c <__libc_init_array>:
__libc_init_array():
 800cf0c:	b570      	push	{r4, r5, r6, lr}
 800cf0e:	4d0d      	ldr	r5, [pc, #52]	; (800cf44 <__libc_init_array+0x38>)
 800cf10:	4c0d      	ldr	r4, [pc, #52]	; (800cf48 <__libc_init_array+0x3c>)
 800cf12:	1b64      	subs	r4, r4, r5
 800cf14:	10a4      	asrs	r4, r4, #2
 800cf16:	2600      	movs	r6, #0
 800cf18:	42a6      	cmp	r6, r4
 800cf1a:	d109      	bne.n	800cf30 <__libc_init_array+0x24>
 800cf1c:	4d0b      	ldr	r5, [pc, #44]	; (800cf4c <__libc_init_array+0x40>)
 800cf1e:	4c0c      	ldr	r4, [pc, #48]	; (800cf50 <__libc_init_array+0x44>)
 800cf20:	f001 f9a0 	bl	800e264 <_init>
 800cf24:	1b64      	subs	r4, r4, r5
 800cf26:	10a4      	asrs	r4, r4, #2
 800cf28:	2600      	movs	r6, #0
 800cf2a:	42a6      	cmp	r6, r4
 800cf2c:	d105      	bne.n	800cf3a <__libc_init_array+0x2e>
 800cf2e:	bd70      	pop	{r4, r5, r6, pc}
 800cf30:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf34:	4798      	blx	r3
 800cf36:	3601      	adds	r6, #1
 800cf38:	e7ee      	b.n	800cf18 <__libc_init_array+0xc>
 800cf3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf3e:	4798      	blx	r3
 800cf40:	3601      	adds	r6, #1
 800cf42:	e7f2      	b.n	800cf2a <__libc_init_array+0x1e>
 800cf44:	080211f0 	.word	0x080211f0
 800cf48:	080211f0 	.word	0x080211f0
 800cf4c:	080211f0 	.word	0x080211f0
 800cf50:	080211f4 	.word	0x080211f4

0800cf54 <memcmp>:
memcmp():
 800cf54:	b530      	push	{r4, r5, lr}
 800cf56:	3901      	subs	r1, #1
 800cf58:	2400      	movs	r4, #0
 800cf5a:	42a2      	cmp	r2, r4
 800cf5c:	d101      	bne.n	800cf62 <memcmp+0xe>
 800cf5e:	2000      	movs	r0, #0
 800cf60:	e005      	b.n	800cf6e <memcmp+0x1a>
 800cf62:	5d03      	ldrb	r3, [r0, r4]
 800cf64:	3401      	adds	r4, #1
 800cf66:	5d0d      	ldrb	r5, [r1, r4]
 800cf68:	42ab      	cmp	r3, r5
 800cf6a:	d0f6      	beq.n	800cf5a <memcmp+0x6>
 800cf6c:	1b58      	subs	r0, r3, r5
 800cf6e:	bd30      	pop	{r4, r5, pc}

0800cf70 <memcpy>:
memcpy():
 800cf70:	440a      	add	r2, r1
 800cf72:	4291      	cmp	r1, r2
 800cf74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cf78:	d100      	bne.n	800cf7c <memcpy+0xc>
 800cf7a:	4770      	bx	lr
 800cf7c:	b510      	push	{r4, lr}
 800cf7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf86:	4291      	cmp	r1, r2
 800cf88:	d1f9      	bne.n	800cf7e <memcpy+0xe>
 800cf8a:	bd10      	pop	{r4, pc}

0800cf8c <memset>:
memset():
 800cf8c:	4402      	add	r2, r0
 800cf8e:	4603      	mov	r3, r0
 800cf90:	4293      	cmp	r3, r2
 800cf92:	d100      	bne.n	800cf96 <memset+0xa>
 800cf94:	4770      	bx	lr
 800cf96:	f803 1b01 	strb.w	r1, [r3], #1
 800cf9a:	e7f9      	b.n	800cf90 <memset+0x4>

0800cf9c <iprintf>:
iprintf():
 800cf9c:	b40f      	push	{r0, r1, r2, r3}
 800cf9e:	4b0a      	ldr	r3, [pc, #40]	; (800cfc8 <iprintf+0x2c>)
 800cfa0:	b513      	push	{r0, r1, r4, lr}
 800cfa2:	681c      	ldr	r4, [r3, #0]
 800cfa4:	b124      	cbz	r4, 800cfb0 <iprintf+0x14>
 800cfa6:	69a3      	ldr	r3, [r4, #24]
 800cfa8:	b913      	cbnz	r3, 800cfb0 <iprintf+0x14>
 800cfaa:	4620      	mov	r0, r4
 800cfac:	f000 f8e4 	bl	800d178 <__sinit>
 800cfb0:	ab05      	add	r3, sp, #20
 800cfb2:	9a04      	ldr	r2, [sp, #16]
 800cfb4:	68a1      	ldr	r1, [r4, #8]
 800cfb6:	9301      	str	r3, [sp, #4]
 800cfb8:	4620      	mov	r0, r4
 800cfba:	f000 fbab 	bl	800d714 <_vfiprintf_r>
 800cfbe:	b002      	add	sp, #8
 800cfc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfc4:	b004      	add	sp, #16
 800cfc6:	4770      	bx	lr
 800cfc8:	2000003c 	.word	0x2000003c

0800cfcc <rand>:
rand():
 800cfcc:	4b13      	ldr	r3, [pc, #76]	; (800d01c <rand+0x50>)
 800cfce:	b510      	push	{r4, lr}
 800cfd0:	681c      	ldr	r4, [r3, #0]
 800cfd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cfd4:	b97b      	cbnz	r3, 800cff6 <rand+0x2a>
 800cfd6:	2018      	movs	r0, #24
 800cfd8:	f000 f96e 	bl	800d2b8 <malloc>
 800cfdc:	4a10      	ldr	r2, [pc, #64]	; (800d020 <rand+0x54>)
 800cfde:	4b11      	ldr	r3, [pc, #68]	; (800d024 <rand+0x58>)
 800cfe0:	63a0      	str	r0, [r4, #56]	; 0x38
 800cfe2:	e9c0 2300 	strd	r2, r3, [r0]
 800cfe6:	4b10      	ldr	r3, [pc, #64]	; (800d028 <rand+0x5c>)
 800cfe8:	6083      	str	r3, [r0, #8]
 800cfea:	230b      	movs	r3, #11
 800cfec:	8183      	strh	r3, [r0, #12]
 800cfee:	2201      	movs	r2, #1
 800cff0:	2300      	movs	r3, #0
 800cff2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800cff6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cff8:	480c      	ldr	r0, [pc, #48]	; (800d02c <rand+0x60>)
 800cffa:	690a      	ldr	r2, [r1, #16]
 800cffc:	694b      	ldr	r3, [r1, #20]
 800cffe:	4c0c      	ldr	r4, [pc, #48]	; (800d030 <rand+0x64>)
 800d000:	4350      	muls	r0, r2
 800d002:	fb04 0003 	mla	r0, r4, r3, r0
 800d006:	fba2 3404 	umull	r3, r4, r2, r4
 800d00a:	1c5a      	adds	r2, r3, #1
 800d00c:	4404      	add	r4, r0
 800d00e:	f144 0000 	adc.w	r0, r4, #0
 800d012:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800d016:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d01a:	bd10      	pop	{r4, pc}
 800d01c:	2000003c 	.word	0x2000003c
 800d020:	abcd330e 	.word	0xabcd330e
 800d024:	e66d1234 	.word	0xe66d1234
 800d028:	0005deec 	.word	0x0005deec
 800d02c:	5851f42d 	.word	0x5851f42d
 800d030:	4c957f2d 	.word	0x4c957f2d

0800d034 <siprintf>:
siprintf():
 800d034:	b40e      	push	{r1, r2, r3}
 800d036:	b500      	push	{lr}
 800d038:	b09c      	sub	sp, #112	; 0x70
 800d03a:	ab1d      	add	r3, sp, #116	; 0x74
 800d03c:	9002      	str	r0, [sp, #8]
 800d03e:	9006      	str	r0, [sp, #24]
 800d040:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d044:	4809      	ldr	r0, [pc, #36]	; (800d06c <siprintf+0x38>)
 800d046:	9107      	str	r1, [sp, #28]
 800d048:	9104      	str	r1, [sp, #16]
 800d04a:	4909      	ldr	r1, [pc, #36]	; (800d070 <siprintf+0x3c>)
 800d04c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d050:	9105      	str	r1, [sp, #20]
 800d052:	6800      	ldr	r0, [r0, #0]
 800d054:	9301      	str	r3, [sp, #4]
 800d056:	a902      	add	r1, sp, #8
 800d058:	f000 fa3a 	bl	800d4d0 <_svfiprintf_r>
 800d05c:	9b02      	ldr	r3, [sp, #8]
 800d05e:	2200      	movs	r2, #0
 800d060:	701a      	strb	r2, [r3, #0]
 800d062:	b01c      	add	sp, #112	; 0x70
 800d064:	f85d eb04 	ldr.w	lr, [sp], #4
 800d068:	b003      	add	sp, #12
 800d06a:	4770      	bx	lr
 800d06c:	2000003c 	.word	0x2000003c
 800d070:	ffff0208 	.word	0xffff0208

0800d074 <strcat>:
strcat():
 800d074:	b510      	push	{r4, lr}
 800d076:	4603      	mov	r3, r0
 800d078:	461a      	mov	r2, r3
 800d07a:	f812 4b01 	ldrb.w	r4, [r2], #1
 800d07e:	b93c      	cbnz	r4, 800d090 <strcat+0x1c>
 800d080:	3b01      	subs	r3, #1
 800d082:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d086:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d08a:	2a00      	cmp	r2, #0
 800d08c:	d1f9      	bne.n	800d082 <strcat+0xe>
 800d08e:	bd10      	pop	{r4, pc}
 800d090:	4613      	mov	r3, r2
 800d092:	e7f1      	b.n	800d078 <strcat+0x4>

0800d094 <strcpy>:
strcpy():
 800d094:	4603      	mov	r3, r0
 800d096:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d09a:	f803 2b01 	strb.w	r2, [r3], #1
 800d09e:	2a00      	cmp	r2, #0
 800d0a0:	d1f9      	bne.n	800d096 <strcpy+0x2>
 800d0a2:	4770      	bx	lr

0800d0a4 <strncmp>:
strncmp():
 800d0a4:	b510      	push	{r4, lr}
 800d0a6:	b16a      	cbz	r2, 800d0c4 <strncmp+0x20>
 800d0a8:	3901      	subs	r1, #1
 800d0aa:	1884      	adds	r4, r0, r2
 800d0ac:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d0b0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d103      	bne.n	800d0c0 <strncmp+0x1c>
 800d0b8:	42a0      	cmp	r0, r4
 800d0ba:	d001      	beq.n	800d0c0 <strncmp+0x1c>
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d1f5      	bne.n	800d0ac <strncmp+0x8>
 800d0c0:	1a98      	subs	r0, r3, r2
 800d0c2:	bd10      	pop	{r4, pc}
 800d0c4:	4610      	mov	r0, r2
 800d0c6:	e7fc      	b.n	800d0c2 <strncmp+0x1e>

0800d0c8 <std>:
std():
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	b510      	push	{r4, lr}
 800d0cc:	4604      	mov	r4, r0
 800d0ce:	e9c0 3300 	strd	r3, r3, [r0]
 800d0d2:	6083      	str	r3, [r0, #8]
 800d0d4:	8181      	strh	r1, [r0, #12]
 800d0d6:	6643      	str	r3, [r0, #100]	; 0x64
 800d0d8:	81c2      	strh	r2, [r0, #14]
 800d0da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d0de:	6183      	str	r3, [r0, #24]
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	2208      	movs	r2, #8
 800d0e4:	305c      	adds	r0, #92	; 0x5c
 800d0e6:	f7ff ff51 	bl	800cf8c <memset>
 800d0ea:	4b05      	ldr	r3, [pc, #20]	; (800d100 <std+0x38>)
 800d0ec:	6263      	str	r3, [r4, #36]	; 0x24
 800d0ee:	4b05      	ldr	r3, [pc, #20]	; (800d104 <std+0x3c>)
 800d0f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d0f2:	4b05      	ldr	r3, [pc, #20]	; (800d108 <std+0x40>)
 800d0f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d0f6:	4b05      	ldr	r3, [pc, #20]	; (800d10c <std+0x44>)
 800d0f8:	6224      	str	r4, [r4, #32]
 800d0fa:	6323      	str	r3, [r4, #48]	; 0x30
 800d0fc:	bd10      	pop	{r4, pc}
 800d0fe:	bf00      	nop
 800d100:	0800dc99 	.word	0x0800dc99
 800d104:	0800dcbb 	.word	0x0800dcbb
 800d108:	0800dcf3 	.word	0x0800dcf3
 800d10c:	0800dd17 	.word	0x0800dd17

0800d110 <_cleanup_r>:
_cleanup_r():
 800d110:	4901      	ldr	r1, [pc, #4]	; (800d118 <_cleanup_r+0x8>)
 800d112:	f000 b8af 	b.w	800d274 <_fwalk_reent>
 800d116:	bf00      	nop
 800d118:	0800dff1 	.word	0x0800dff1

0800d11c <__sfmoreglue>:
__sfmoreglue():
 800d11c:	b570      	push	{r4, r5, r6, lr}
 800d11e:	1e4a      	subs	r2, r1, #1
 800d120:	2568      	movs	r5, #104	; 0x68
 800d122:	4355      	muls	r5, r2
 800d124:	460e      	mov	r6, r1
 800d126:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d12a:	f000 f91b 	bl	800d364 <_malloc_r>
 800d12e:	4604      	mov	r4, r0
 800d130:	b140      	cbz	r0, 800d144 <__sfmoreglue+0x28>
 800d132:	2100      	movs	r1, #0
 800d134:	e9c0 1600 	strd	r1, r6, [r0]
 800d138:	300c      	adds	r0, #12
 800d13a:	60a0      	str	r0, [r4, #8]
 800d13c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d140:	f7ff ff24 	bl	800cf8c <memset>
 800d144:	4620      	mov	r0, r4
 800d146:	bd70      	pop	{r4, r5, r6, pc}

0800d148 <__sfp_lock_acquire>:
__sfp_lock_acquire():
 800d148:	4801      	ldr	r0, [pc, #4]	; (800d150 <__sfp_lock_acquire+0x8>)
 800d14a:	f000 b8b2 	b.w	800d2b2 <__retarget_lock_acquire_recursive>
 800d14e:	bf00      	nop
 800d150:	2000c044 	.word	0x2000c044

0800d154 <__sfp_lock_release>:
__sfp_lock_release():
 800d154:	4801      	ldr	r0, [pc, #4]	; (800d15c <__sfp_lock_release+0x8>)
 800d156:	f000 b8ad 	b.w	800d2b4 <__retarget_lock_release_recursive>
 800d15a:	bf00      	nop
 800d15c:	2000c044 	.word	0x2000c044

0800d160 <__sinit_lock_acquire>:
__sinit_lock_acquire():
 800d160:	4801      	ldr	r0, [pc, #4]	; (800d168 <__sinit_lock_acquire+0x8>)
 800d162:	f000 b8a6 	b.w	800d2b2 <__retarget_lock_acquire_recursive>
 800d166:	bf00      	nop
 800d168:	2000c03f 	.word	0x2000c03f

0800d16c <__sinit_lock_release>:
__sinit_lock_release():
 800d16c:	4801      	ldr	r0, [pc, #4]	; (800d174 <__sinit_lock_release+0x8>)
 800d16e:	f000 b8a1 	b.w	800d2b4 <__retarget_lock_release_recursive>
 800d172:	bf00      	nop
 800d174:	2000c03f 	.word	0x2000c03f

0800d178 <__sinit>:
__sinit():
 800d178:	b510      	push	{r4, lr}
 800d17a:	4604      	mov	r4, r0
 800d17c:	f7ff fff0 	bl	800d160 <__sinit_lock_acquire>
 800d180:	69a3      	ldr	r3, [r4, #24]
 800d182:	b11b      	cbz	r3, 800d18c <__sinit+0x14>
 800d184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d188:	f7ff bff0 	b.w	800d16c <__sinit_lock_release>
 800d18c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d190:	6523      	str	r3, [r4, #80]	; 0x50
 800d192:	4b13      	ldr	r3, [pc, #76]	; (800d1e0 <__sinit+0x68>)
 800d194:	4a13      	ldr	r2, [pc, #76]	; (800d1e4 <__sinit+0x6c>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	62a2      	str	r2, [r4, #40]	; 0x28
 800d19a:	42a3      	cmp	r3, r4
 800d19c:	bf04      	itt	eq
 800d19e:	2301      	moveq	r3, #1
 800d1a0:	61a3      	streq	r3, [r4, #24]
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	f000 f820 	bl	800d1e8 <__sfp>
 800d1a8:	6060      	str	r0, [r4, #4]
 800d1aa:	4620      	mov	r0, r4
 800d1ac:	f000 f81c 	bl	800d1e8 <__sfp>
 800d1b0:	60a0      	str	r0, [r4, #8]
 800d1b2:	4620      	mov	r0, r4
 800d1b4:	f000 f818 	bl	800d1e8 <__sfp>
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	60e0      	str	r0, [r4, #12]
 800d1bc:	2104      	movs	r1, #4
 800d1be:	6860      	ldr	r0, [r4, #4]
 800d1c0:	f7ff ff82 	bl	800d0c8 <std>
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	2109      	movs	r1, #9
 800d1c8:	68a0      	ldr	r0, [r4, #8]
 800d1ca:	f7ff ff7d 	bl	800d0c8 <std>
 800d1ce:	2202      	movs	r2, #2
 800d1d0:	2112      	movs	r1, #18
 800d1d2:	68e0      	ldr	r0, [r4, #12]
 800d1d4:	f7ff ff78 	bl	800d0c8 <std>
 800d1d8:	2301      	movs	r3, #1
 800d1da:	61a3      	str	r3, [r4, #24]
 800d1dc:	e7d2      	b.n	800d184 <__sinit+0xc>
 800d1de:	bf00      	nop
 800d1e0:	08021158 	.word	0x08021158
 800d1e4:	0800d111 	.word	0x0800d111

0800d1e8 <__sfp>:
__sfp():
 800d1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ea:	4607      	mov	r7, r0
 800d1ec:	f7ff ffac 	bl	800d148 <__sfp_lock_acquire>
 800d1f0:	4b1e      	ldr	r3, [pc, #120]	; (800d26c <__sfp+0x84>)
 800d1f2:	681e      	ldr	r6, [r3, #0]
 800d1f4:	69b3      	ldr	r3, [r6, #24]
 800d1f6:	b913      	cbnz	r3, 800d1fe <__sfp+0x16>
 800d1f8:	4630      	mov	r0, r6
 800d1fa:	f7ff ffbd 	bl	800d178 <__sinit>
 800d1fe:	3648      	adds	r6, #72	; 0x48
 800d200:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d204:	3b01      	subs	r3, #1
 800d206:	d503      	bpl.n	800d210 <__sfp+0x28>
 800d208:	6833      	ldr	r3, [r6, #0]
 800d20a:	b30b      	cbz	r3, 800d250 <__sfp+0x68>
 800d20c:	6836      	ldr	r6, [r6, #0]
 800d20e:	e7f7      	b.n	800d200 <__sfp+0x18>
 800d210:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d214:	b9d5      	cbnz	r5, 800d24c <__sfp+0x64>
 800d216:	4b16      	ldr	r3, [pc, #88]	; (800d270 <__sfp+0x88>)
 800d218:	60e3      	str	r3, [r4, #12]
 800d21a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d21e:	6665      	str	r5, [r4, #100]	; 0x64
 800d220:	f000 f846 	bl	800d2b0 <__retarget_lock_init_recursive>
 800d224:	f7ff ff96 	bl	800d154 <__sfp_lock_release>
 800d228:	6025      	str	r5, [r4, #0]
 800d22a:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d22e:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d232:	61a5      	str	r5, [r4, #24]
 800d234:	2208      	movs	r2, #8
 800d236:	4629      	mov	r1, r5
 800d238:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d23c:	f7ff fea6 	bl	800cf8c <memset>
 800d240:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d244:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d248:	4620      	mov	r0, r4
 800d24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d24c:	3468      	adds	r4, #104	; 0x68
 800d24e:	e7d9      	b.n	800d204 <__sfp+0x1c>
 800d250:	2104      	movs	r1, #4
 800d252:	4638      	mov	r0, r7
 800d254:	f7ff ff62 	bl	800d11c <__sfmoreglue>
 800d258:	4604      	mov	r4, r0
 800d25a:	6030      	str	r0, [r6, #0]
 800d25c:	2800      	cmp	r0, #0
 800d25e:	d1d5      	bne.n	800d20c <__sfp+0x24>
 800d260:	f7ff ff78 	bl	800d154 <__sfp_lock_release>
 800d264:	230c      	movs	r3, #12
 800d266:	603b      	str	r3, [r7, #0]
 800d268:	e7ee      	b.n	800d248 <__sfp+0x60>
 800d26a:	bf00      	nop
 800d26c:	08021158 	.word	0x08021158
 800d270:	ffff0001 	.word	0xffff0001

0800d274 <_fwalk_reent>:
_fwalk_reent():
 800d274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d278:	4680      	mov	r8, r0
 800d27a:	4689      	mov	r9, r1
 800d27c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d280:	2600      	movs	r6, #0
 800d282:	b914      	cbnz	r4, 800d28a <_fwalk_reent+0x16>
 800d284:	4630      	mov	r0, r6
 800d286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d28a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d28e:	3f01      	subs	r7, #1
 800d290:	d501      	bpl.n	800d296 <_fwalk_reent+0x22>
 800d292:	6824      	ldr	r4, [r4, #0]
 800d294:	e7f5      	b.n	800d282 <_fwalk_reent+0xe>
 800d296:	89ab      	ldrh	r3, [r5, #12]
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d907      	bls.n	800d2ac <_fwalk_reent+0x38>
 800d29c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	d003      	beq.n	800d2ac <_fwalk_reent+0x38>
 800d2a4:	4629      	mov	r1, r5
 800d2a6:	4640      	mov	r0, r8
 800d2a8:	47c8      	blx	r9
 800d2aa:	4306      	orrs	r6, r0
 800d2ac:	3568      	adds	r5, #104	; 0x68
 800d2ae:	e7ee      	b.n	800d28e <_fwalk_reent+0x1a>

0800d2b0 <__retarget_lock_init_recursive>:
__retarget_lock_init_recursive():
 800d2b0:	4770      	bx	lr

0800d2b2 <__retarget_lock_acquire_recursive>:
__retarget_lock_acquire_recursive():
 800d2b2:	4770      	bx	lr

0800d2b4 <__retarget_lock_release_recursive>:
__retarget_lock_release_recursive():
 800d2b4:	4770      	bx	lr
	...

0800d2b8 <malloc>:
malloc():
 800d2b8:	4b02      	ldr	r3, [pc, #8]	; (800d2c4 <malloc+0xc>)
 800d2ba:	4601      	mov	r1, r0
 800d2bc:	6818      	ldr	r0, [r3, #0]
 800d2be:	f000 b851 	b.w	800d364 <_malloc_r>
 800d2c2:	bf00      	nop
 800d2c4:	2000003c 	.word	0x2000003c

0800d2c8 <_free_r>:
_free_r():
 800d2c8:	b538      	push	{r3, r4, r5, lr}
 800d2ca:	4605      	mov	r5, r0
 800d2cc:	2900      	cmp	r1, #0
 800d2ce:	d045      	beq.n	800d35c <_free_r+0x94>
 800d2d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2d4:	1f0c      	subs	r4, r1, #4
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	bfb8      	it	lt
 800d2da:	18e4      	addlt	r4, r4, r3
 800d2dc:	f000 ff54 	bl	800e188 <__malloc_lock>
 800d2e0:	4a1f      	ldr	r2, [pc, #124]	; (800d360 <_free_r+0x98>)
 800d2e2:	6813      	ldr	r3, [r2, #0]
 800d2e4:	4610      	mov	r0, r2
 800d2e6:	b933      	cbnz	r3, 800d2f6 <_free_r+0x2e>
 800d2e8:	6063      	str	r3, [r4, #4]
 800d2ea:	6014      	str	r4, [r2, #0]
 800d2ec:	4628      	mov	r0, r5
 800d2ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2f2:	f000 bf4f 	b.w	800e194 <__malloc_unlock>
 800d2f6:	42a3      	cmp	r3, r4
 800d2f8:	d90c      	bls.n	800d314 <_free_r+0x4c>
 800d2fa:	6821      	ldr	r1, [r4, #0]
 800d2fc:	1862      	adds	r2, r4, r1
 800d2fe:	4293      	cmp	r3, r2
 800d300:	bf04      	itt	eq
 800d302:	681a      	ldreq	r2, [r3, #0]
 800d304:	685b      	ldreq	r3, [r3, #4]
 800d306:	6063      	str	r3, [r4, #4]
 800d308:	bf04      	itt	eq
 800d30a:	1852      	addeq	r2, r2, r1
 800d30c:	6022      	streq	r2, [r4, #0]
 800d30e:	6004      	str	r4, [r0, #0]
 800d310:	e7ec      	b.n	800d2ec <_free_r+0x24>
 800d312:	4613      	mov	r3, r2
 800d314:	685a      	ldr	r2, [r3, #4]
 800d316:	b10a      	cbz	r2, 800d31c <_free_r+0x54>
 800d318:	42a2      	cmp	r2, r4
 800d31a:	d9fa      	bls.n	800d312 <_free_r+0x4a>
 800d31c:	6819      	ldr	r1, [r3, #0]
 800d31e:	1858      	adds	r0, r3, r1
 800d320:	42a0      	cmp	r0, r4
 800d322:	d10b      	bne.n	800d33c <_free_r+0x74>
 800d324:	6820      	ldr	r0, [r4, #0]
 800d326:	4401      	add	r1, r0
 800d328:	1858      	adds	r0, r3, r1
 800d32a:	4282      	cmp	r2, r0
 800d32c:	6019      	str	r1, [r3, #0]
 800d32e:	d1dd      	bne.n	800d2ec <_free_r+0x24>
 800d330:	6810      	ldr	r0, [r2, #0]
 800d332:	6852      	ldr	r2, [r2, #4]
 800d334:	605a      	str	r2, [r3, #4]
 800d336:	4401      	add	r1, r0
 800d338:	6019      	str	r1, [r3, #0]
 800d33a:	e7d7      	b.n	800d2ec <_free_r+0x24>
 800d33c:	d902      	bls.n	800d344 <_free_r+0x7c>
 800d33e:	230c      	movs	r3, #12
 800d340:	602b      	str	r3, [r5, #0]
 800d342:	e7d3      	b.n	800d2ec <_free_r+0x24>
 800d344:	6820      	ldr	r0, [r4, #0]
 800d346:	1821      	adds	r1, r4, r0
 800d348:	428a      	cmp	r2, r1
 800d34a:	bf04      	itt	eq
 800d34c:	6811      	ldreq	r1, [r2, #0]
 800d34e:	6852      	ldreq	r2, [r2, #4]
 800d350:	6062      	str	r2, [r4, #4]
 800d352:	bf04      	itt	eq
 800d354:	1809      	addeq	r1, r1, r0
 800d356:	6021      	streq	r1, [r4, #0]
 800d358:	605c      	str	r4, [r3, #4]
 800d35a:	e7c7      	b.n	800d2ec <_free_r+0x24>
 800d35c:	bd38      	pop	{r3, r4, r5, pc}
 800d35e:	bf00      	nop
 800d360:	2000806c 	.word	0x2000806c

0800d364 <_malloc_r>:
_malloc_r():
 800d364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d366:	1ccd      	adds	r5, r1, #3
 800d368:	f025 0503 	bic.w	r5, r5, #3
 800d36c:	3508      	adds	r5, #8
 800d36e:	2d0c      	cmp	r5, #12
 800d370:	bf38      	it	cc
 800d372:	250c      	movcc	r5, #12
 800d374:	2d00      	cmp	r5, #0
 800d376:	4606      	mov	r6, r0
 800d378:	db01      	blt.n	800d37e <_malloc_r+0x1a>
 800d37a:	42a9      	cmp	r1, r5
 800d37c:	d903      	bls.n	800d386 <_malloc_r+0x22>
 800d37e:	230c      	movs	r3, #12
 800d380:	6033      	str	r3, [r6, #0]
 800d382:	2000      	movs	r0, #0
 800d384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d386:	f000 feff 	bl	800e188 <__malloc_lock>
 800d38a:	4921      	ldr	r1, [pc, #132]	; (800d410 <_malloc_r+0xac>)
 800d38c:	680a      	ldr	r2, [r1, #0]
 800d38e:	4614      	mov	r4, r2
 800d390:	b99c      	cbnz	r4, 800d3ba <_malloc_r+0x56>
 800d392:	4f20      	ldr	r7, [pc, #128]	; (800d414 <_malloc_r+0xb0>)
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	b923      	cbnz	r3, 800d3a2 <_malloc_r+0x3e>
 800d398:	4621      	mov	r1, r4
 800d39a:	4630      	mov	r0, r6
 800d39c:	f000 fc6c 	bl	800dc78 <_sbrk_r>
 800d3a0:	6038      	str	r0, [r7, #0]
 800d3a2:	4629      	mov	r1, r5
 800d3a4:	4630      	mov	r0, r6
 800d3a6:	f000 fc67 	bl	800dc78 <_sbrk_r>
 800d3aa:	1c43      	adds	r3, r0, #1
 800d3ac:	d123      	bne.n	800d3f6 <_malloc_r+0x92>
 800d3ae:	230c      	movs	r3, #12
 800d3b0:	6033      	str	r3, [r6, #0]
 800d3b2:	4630      	mov	r0, r6
 800d3b4:	f000 feee 	bl	800e194 <__malloc_unlock>
 800d3b8:	e7e3      	b.n	800d382 <_malloc_r+0x1e>
 800d3ba:	6823      	ldr	r3, [r4, #0]
 800d3bc:	1b5b      	subs	r3, r3, r5
 800d3be:	d417      	bmi.n	800d3f0 <_malloc_r+0x8c>
 800d3c0:	2b0b      	cmp	r3, #11
 800d3c2:	d903      	bls.n	800d3cc <_malloc_r+0x68>
 800d3c4:	6023      	str	r3, [r4, #0]
 800d3c6:	441c      	add	r4, r3
 800d3c8:	6025      	str	r5, [r4, #0]
 800d3ca:	e004      	b.n	800d3d6 <_malloc_r+0x72>
 800d3cc:	6863      	ldr	r3, [r4, #4]
 800d3ce:	42a2      	cmp	r2, r4
 800d3d0:	bf0c      	ite	eq
 800d3d2:	600b      	streq	r3, [r1, #0]
 800d3d4:	6053      	strne	r3, [r2, #4]
 800d3d6:	4630      	mov	r0, r6
 800d3d8:	f000 fedc 	bl	800e194 <__malloc_unlock>
 800d3dc:	f104 000b 	add.w	r0, r4, #11
 800d3e0:	1d23      	adds	r3, r4, #4
 800d3e2:	f020 0007 	bic.w	r0, r0, #7
 800d3e6:	1ac2      	subs	r2, r0, r3
 800d3e8:	d0cc      	beq.n	800d384 <_malloc_r+0x20>
 800d3ea:	1a1b      	subs	r3, r3, r0
 800d3ec:	50a3      	str	r3, [r4, r2]
 800d3ee:	e7c9      	b.n	800d384 <_malloc_r+0x20>
 800d3f0:	4622      	mov	r2, r4
 800d3f2:	6864      	ldr	r4, [r4, #4]
 800d3f4:	e7cc      	b.n	800d390 <_malloc_r+0x2c>
 800d3f6:	1cc4      	adds	r4, r0, #3
 800d3f8:	f024 0403 	bic.w	r4, r4, #3
 800d3fc:	42a0      	cmp	r0, r4
 800d3fe:	d0e3      	beq.n	800d3c8 <_malloc_r+0x64>
 800d400:	1a21      	subs	r1, r4, r0
 800d402:	4630      	mov	r0, r6
 800d404:	f000 fc38 	bl	800dc78 <_sbrk_r>
 800d408:	3001      	adds	r0, #1
 800d40a:	d1dd      	bne.n	800d3c8 <_malloc_r+0x64>
 800d40c:	e7cf      	b.n	800d3ae <_malloc_r+0x4a>
 800d40e:	bf00      	nop
 800d410:	2000806c 	.word	0x2000806c
 800d414:	20008070 	.word	0x20008070

0800d418 <__ssputs_r>:
__ssputs_r():
 800d418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d41c:	688e      	ldr	r6, [r1, #8]
 800d41e:	429e      	cmp	r6, r3
 800d420:	4682      	mov	sl, r0
 800d422:	460c      	mov	r4, r1
 800d424:	4691      	mov	r9, r2
 800d426:	4698      	mov	r8, r3
 800d428:	d838      	bhi.n	800d49c <__ssputs_r+0x84>
 800d42a:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
 800d42e:	f41c 6f90 	tst.w	ip, #1152	; 0x480
 800d432:	d031      	beq.n	800d498 <__ssputs_r+0x80>
 800d434:	6962      	ldr	r2, [r4, #20]
 800d436:	6825      	ldr	r5, [r4, #0]
 800d438:	6909      	ldr	r1, [r1, #16]
 800d43a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d43e:	1a6f      	subs	r7, r5, r1
 800d440:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800d444:	3301      	adds	r3, #1
 800d446:	1055      	asrs	r5, r2, #1
 800d448:	443b      	add	r3, r7
 800d44a:	429d      	cmp	r5, r3
 800d44c:	bf38      	it	cc
 800d44e:	461d      	movcc	r5, r3
 800d450:	f41c 6f80 	tst.w	ip, #1024	; 0x400
 800d454:	d030      	beq.n	800d4b8 <__ssputs_r+0xa0>
 800d456:	4629      	mov	r1, r5
 800d458:	f7ff ff84 	bl	800d364 <_malloc_r>
 800d45c:	4606      	mov	r6, r0
 800d45e:	b950      	cbnz	r0, 800d476 <__ssputs_r+0x5e>
 800d460:	230c      	movs	r3, #12
 800d462:	f8ca 3000 	str.w	r3, [sl]
 800d466:	89a3      	ldrh	r3, [r4, #12]
 800d468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d46c:	81a3      	strh	r3, [r4, #12]
 800d46e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d476:	463a      	mov	r2, r7
 800d478:	6921      	ldr	r1, [r4, #16]
 800d47a:	f7ff fd79 	bl	800cf70 <memcpy>
 800d47e:	89a3      	ldrh	r3, [r4, #12]
 800d480:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d488:	81a3      	strh	r3, [r4, #12]
 800d48a:	6126      	str	r6, [r4, #16]
 800d48c:	6165      	str	r5, [r4, #20]
 800d48e:	443e      	add	r6, r7
 800d490:	1bed      	subs	r5, r5, r7
 800d492:	6026      	str	r6, [r4, #0]
 800d494:	60a5      	str	r5, [r4, #8]
 800d496:	4646      	mov	r6, r8
 800d498:	4546      	cmp	r6, r8
 800d49a:	d900      	bls.n	800d49e <__ssputs_r+0x86>
 800d49c:	4646      	mov	r6, r8
 800d49e:	4632      	mov	r2, r6
 800d4a0:	4649      	mov	r1, r9
 800d4a2:	6820      	ldr	r0, [r4, #0]
 800d4a4:	f000 fe56 	bl	800e154 <memmove>
 800d4a8:	68a3      	ldr	r3, [r4, #8]
 800d4aa:	1b9b      	subs	r3, r3, r6
 800d4ac:	60a3      	str	r3, [r4, #8]
 800d4ae:	6823      	ldr	r3, [r4, #0]
 800d4b0:	441e      	add	r6, r3
 800d4b2:	6026      	str	r6, [r4, #0]
 800d4b4:	2000      	movs	r0, #0
 800d4b6:	e7dc      	b.n	800d472 <__ssputs_r+0x5a>
 800d4b8:	462a      	mov	r2, r5
 800d4ba:	f000 fe71 	bl	800e1a0 <_realloc_r>
 800d4be:	4606      	mov	r6, r0
 800d4c0:	2800      	cmp	r0, #0
 800d4c2:	d1e2      	bne.n	800d48a <__ssputs_r+0x72>
 800d4c4:	6921      	ldr	r1, [r4, #16]
 800d4c6:	4650      	mov	r0, sl
 800d4c8:	f7ff fefe 	bl	800d2c8 <_free_r>
 800d4cc:	e7c8      	b.n	800d460 <__ssputs_r+0x48>
	...

0800d4d0 <_svfiprintf_r>:
_svfiprintf_r():
 800d4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d4:	461e      	mov	r6, r3
 800d4d6:	898b      	ldrh	r3, [r1, #12]
 800d4d8:	061b      	lsls	r3, r3, #24
 800d4da:	b09d      	sub	sp, #116	; 0x74
 800d4dc:	4607      	mov	r7, r0
 800d4de:	460d      	mov	r5, r1
 800d4e0:	4614      	mov	r4, r2
 800d4e2:	d50e      	bpl.n	800d502 <_svfiprintf_r+0x32>
 800d4e4:	690b      	ldr	r3, [r1, #16]
 800d4e6:	b963      	cbnz	r3, 800d502 <_svfiprintf_r+0x32>
 800d4e8:	2140      	movs	r1, #64	; 0x40
 800d4ea:	f7ff ff3b 	bl	800d364 <_malloc_r>
 800d4ee:	6028      	str	r0, [r5, #0]
 800d4f0:	6128      	str	r0, [r5, #16]
 800d4f2:	b920      	cbnz	r0, 800d4fe <_svfiprintf_r+0x2e>
 800d4f4:	230c      	movs	r3, #12
 800d4f6:	603b      	str	r3, [r7, #0]
 800d4f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4fc:	e0c9      	b.n	800d692 <_svfiprintf_r+0x1c2>
 800d4fe:	2340      	movs	r3, #64	; 0x40
 800d500:	616b      	str	r3, [r5, #20]
 800d502:	2300      	movs	r3, #0
 800d504:	9309      	str	r3, [sp, #36]	; 0x24
 800d506:	2320      	movs	r3, #32
 800d508:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d50c:	f8df 919c 	ldr.w	r9, [pc, #412]	; 800d6ac <_svfiprintf_r+0x1dc>
 800d510:	9603      	str	r6, [sp, #12]
 800d512:	2330      	movs	r3, #48	; 0x30
 800d514:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d518:	f04f 0a01 	mov.w	sl, #1
 800d51c:	4623      	mov	r3, r4
 800d51e:	461e      	mov	r6, r3
 800d520:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d524:	b10a      	cbz	r2, 800d52a <_svfiprintf_r+0x5a>
 800d526:	2a25      	cmp	r2, #37	; 0x25
 800d528:	d1f9      	bne.n	800d51e <_svfiprintf_r+0x4e>
 800d52a:	ebb6 0b04 	subs.w	fp, r6, r4
 800d52e:	d00b      	beq.n	800d548 <_svfiprintf_r+0x78>
 800d530:	465b      	mov	r3, fp
 800d532:	4622      	mov	r2, r4
 800d534:	4629      	mov	r1, r5
 800d536:	4638      	mov	r0, r7
 800d538:	f7ff ff6e 	bl	800d418 <__ssputs_r>
 800d53c:	3001      	adds	r0, #1
 800d53e:	f000 80a3 	beq.w	800d688 <_svfiprintf_r+0x1b8>
 800d542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d544:	445b      	add	r3, fp
 800d546:	9309      	str	r3, [sp, #36]	; 0x24
 800d548:	7833      	ldrb	r3, [r6, #0]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	f000 809c 	beq.w	800d688 <_svfiprintf_r+0x1b8>
 800d550:	2300      	movs	r3, #0
 800d552:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d556:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d55a:	3601      	adds	r6, #1
 800d55c:	9304      	str	r3, [sp, #16]
 800d55e:	9307      	str	r3, [sp, #28]
 800d560:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d564:	931a      	str	r3, [sp, #104]	; 0x68
 800d566:	4634      	mov	r4, r6
 800d568:	2205      	movs	r2, #5
 800d56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d56e:	484f      	ldr	r0, [pc, #316]	; (800d6ac <_svfiprintf_r+0x1dc>)
 800d570:	f7f2 fece 	bl	8000310 <memchr>
 800d574:	9b04      	ldr	r3, [sp, #16]
 800d576:	b9c0      	cbnz	r0, 800d5aa <_svfiprintf_r+0xda>
 800d578:	06d9      	lsls	r1, r3, #27
 800d57a:	bf44      	itt	mi
 800d57c:	2220      	movmi	r2, #32
 800d57e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d582:	071a      	lsls	r2, r3, #28
 800d584:	bf44      	itt	mi
 800d586:	222b      	movmi	r2, #43	; 0x2b
 800d588:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d58c:	7832      	ldrb	r2, [r6, #0]
 800d58e:	2a2a      	cmp	r2, #42	; 0x2a
 800d590:	d013      	beq.n	800d5ba <_svfiprintf_r+0xea>
 800d592:	9a07      	ldr	r2, [sp, #28]
 800d594:	4634      	mov	r4, r6
 800d596:	2000      	movs	r0, #0
 800d598:	260a      	movs	r6, #10
 800d59a:	4621      	mov	r1, r4
 800d59c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5a0:	3b30      	subs	r3, #48	; 0x30
 800d5a2:	2b09      	cmp	r3, #9
 800d5a4:	d94b      	bls.n	800d63e <_svfiprintf_r+0x16e>
 800d5a6:	b970      	cbnz	r0, 800d5c6 <_svfiprintf_r+0xf6>
 800d5a8:	e014      	b.n	800d5d4 <_svfiprintf_r+0x104>
 800d5aa:	eba0 0009 	sub.w	r0, r0, r9
 800d5ae:	fa0a f000 	lsl.w	r0, sl, r0
 800d5b2:	4318      	orrs	r0, r3
 800d5b4:	9004      	str	r0, [sp, #16]
 800d5b6:	4626      	mov	r6, r4
 800d5b8:	e7d5      	b.n	800d566 <_svfiprintf_r+0x96>
 800d5ba:	9a03      	ldr	r2, [sp, #12]
 800d5bc:	1d11      	adds	r1, r2, #4
 800d5be:	6812      	ldr	r2, [r2, #0]
 800d5c0:	9103      	str	r1, [sp, #12]
 800d5c2:	2a00      	cmp	r2, #0
 800d5c4:	db01      	blt.n	800d5ca <_svfiprintf_r+0xfa>
 800d5c6:	9207      	str	r2, [sp, #28]
 800d5c8:	e004      	b.n	800d5d4 <_svfiprintf_r+0x104>
 800d5ca:	4252      	negs	r2, r2
 800d5cc:	f043 0302 	orr.w	r3, r3, #2
 800d5d0:	9207      	str	r2, [sp, #28]
 800d5d2:	9304      	str	r3, [sp, #16]
 800d5d4:	7823      	ldrb	r3, [r4, #0]
 800d5d6:	2b2e      	cmp	r3, #46	; 0x2e
 800d5d8:	d10c      	bne.n	800d5f4 <_svfiprintf_r+0x124>
 800d5da:	7863      	ldrb	r3, [r4, #1]
 800d5dc:	2b2a      	cmp	r3, #42	; 0x2a
 800d5de:	d133      	bne.n	800d648 <_svfiprintf_r+0x178>
 800d5e0:	9b03      	ldr	r3, [sp, #12]
 800d5e2:	1d1a      	adds	r2, r3, #4
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	9203      	str	r2, [sp, #12]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	bfb8      	it	lt
 800d5ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d5f0:	3402      	adds	r4, #2
 800d5f2:	9305      	str	r3, [sp, #20]
 800d5f4:	4e2e      	ldr	r6, [pc, #184]	; (800d6b0 <_svfiprintf_r+0x1e0>)
 800d5f6:	7821      	ldrb	r1, [r4, #0]
 800d5f8:	2203      	movs	r2, #3
 800d5fa:	4630      	mov	r0, r6
 800d5fc:	f7f2 fe88 	bl	8000310 <memchr>
 800d600:	b138      	cbz	r0, 800d612 <_svfiprintf_r+0x142>
 800d602:	2340      	movs	r3, #64	; 0x40
 800d604:	1b80      	subs	r0, r0, r6
 800d606:	fa03 f000 	lsl.w	r0, r3, r0
 800d60a:	9b04      	ldr	r3, [sp, #16]
 800d60c:	4303      	orrs	r3, r0
 800d60e:	3401      	adds	r4, #1
 800d610:	9304      	str	r3, [sp, #16]
 800d612:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d616:	4827      	ldr	r0, [pc, #156]	; (800d6b4 <_svfiprintf_r+0x1e4>)
 800d618:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d61c:	2206      	movs	r2, #6
 800d61e:	f7f2 fe77 	bl	8000310 <memchr>
 800d622:	2800      	cmp	r0, #0
 800d624:	d038      	beq.n	800d698 <_svfiprintf_r+0x1c8>
 800d626:	4b24      	ldr	r3, [pc, #144]	; (800d6b8 <_svfiprintf_r+0x1e8>)
 800d628:	bb13      	cbnz	r3, 800d670 <_svfiprintf_r+0x1a0>
 800d62a:	9b03      	ldr	r3, [sp, #12]
 800d62c:	3307      	adds	r3, #7
 800d62e:	f023 0307 	bic.w	r3, r3, #7
 800d632:	3308      	adds	r3, #8
 800d634:	9303      	str	r3, [sp, #12]
 800d636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d638:	4443      	add	r3, r8
 800d63a:	9309      	str	r3, [sp, #36]	; 0x24
 800d63c:	e76e      	b.n	800d51c <_svfiprintf_r+0x4c>
 800d63e:	fb06 3202 	mla	r2, r6, r2, r3
 800d642:	2001      	movs	r0, #1
 800d644:	460c      	mov	r4, r1
 800d646:	e7a8      	b.n	800d59a <_svfiprintf_r+0xca>
 800d648:	2300      	movs	r3, #0
 800d64a:	3401      	adds	r4, #1
 800d64c:	9305      	str	r3, [sp, #20]
 800d64e:	4619      	mov	r1, r3
 800d650:	260a      	movs	r6, #10
 800d652:	4620      	mov	r0, r4
 800d654:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d658:	3a30      	subs	r2, #48	; 0x30
 800d65a:	2a09      	cmp	r2, #9
 800d65c:	d903      	bls.n	800d666 <_svfiprintf_r+0x196>
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d0c8      	beq.n	800d5f4 <_svfiprintf_r+0x124>
 800d662:	9105      	str	r1, [sp, #20]
 800d664:	e7c6      	b.n	800d5f4 <_svfiprintf_r+0x124>
 800d666:	fb06 2101 	mla	r1, r6, r1, r2
 800d66a:	2301      	movs	r3, #1
 800d66c:	4604      	mov	r4, r0
 800d66e:	e7f0      	b.n	800d652 <_svfiprintf_r+0x182>
 800d670:	ab03      	add	r3, sp, #12
 800d672:	9300      	str	r3, [sp, #0]
 800d674:	462a      	mov	r2, r5
 800d676:	4b11      	ldr	r3, [pc, #68]	; (800d6bc <_svfiprintf_r+0x1ec>)
 800d678:	a904      	add	r1, sp, #16
 800d67a:	4638      	mov	r0, r7
 800d67c:	f3af 8000 	nop.w
 800d680:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d684:	4680      	mov	r8, r0
 800d686:	d1d6      	bne.n	800d636 <_svfiprintf_r+0x166>
 800d688:	89ab      	ldrh	r3, [r5, #12]
 800d68a:	065b      	lsls	r3, r3, #25
 800d68c:	f53f af34 	bmi.w	800d4f8 <_svfiprintf_r+0x28>
 800d690:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d692:	b01d      	add	sp, #116	; 0x74
 800d694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d698:	ab03      	add	r3, sp, #12
 800d69a:	9300      	str	r3, [sp, #0]
 800d69c:	462a      	mov	r2, r5
 800d69e:	4b07      	ldr	r3, [pc, #28]	; (800d6bc <_svfiprintf_r+0x1ec>)
 800d6a0:	a904      	add	r1, sp, #16
 800d6a2:	4638      	mov	r0, r7
 800d6a4:	f000 f9d4 	bl	800da50 <_printf_i>
 800d6a8:	e7ea      	b.n	800d680 <_svfiprintf_r+0x1b0>
 800d6aa:	bf00      	nop
 800d6ac:	080211bc 	.word	0x080211bc
 800d6b0:	080211c2 	.word	0x080211c2
 800d6b4:	080211c6 	.word	0x080211c6
 800d6b8:	00000000 	.word	0x00000000
 800d6bc:	0800d419 	.word	0x0800d419

0800d6c0 <__sfputc_r>:
__sfputc_r():
 800d6c0:	6893      	ldr	r3, [r2, #8]
 800d6c2:	3b01      	subs	r3, #1
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	b410      	push	{r4}
 800d6c8:	6093      	str	r3, [r2, #8]
 800d6ca:	da08      	bge.n	800d6de <__sfputc_r+0x1e>
 800d6cc:	6994      	ldr	r4, [r2, #24]
 800d6ce:	42a3      	cmp	r3, r4
 800d6d0:	db01      	blt.n	800d6d6 <__sfputc_r+0x16>
 800d6d2:	290a      	cmp	r1, #10
 800d6d4:	d103      	bne.n	800d6de <__sfputc_r+0x1e>
 800d6d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6da:	f000 bb21 	b.w	800dd20 <__swbuf_r>
 800d6de:	6813      	ldr	r3, [r2, #0]
 800d6e0:	1c58      	adds	r0, r3, #1
 800d6e2:	6010      	str	r0, [r2, #0]
 800d6e4:	7019      	strb	r1, [r3, #0]
 800d6e6:	4608      	mov	r0, r1
 800d6e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6ec:	4770      	bx	lr

0800d6ee <__sfputs_r>:
__sfputs_r():
 800d6ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6f0:	4606      	mov	r6, r0
 800d6f2:	460f      	mov	r7, r1
 800d6f4:	4614      	mov	r4, r2
 800d6f6:	18d5      	adds	r5, r2, r3
 800d6f8:	42ac      	cmp	r4, r5
 800d6fa:	d101      	bne.n	800d700 <__sfputs_r+0x12>
 800d6fc:	2000      	movs	r0, #0
 800d6fe:	e007      	b.n	800d710 <__sfputs_r+0x22>
 800d700:	463a      	mov	r2, r7
 800d702:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d706:	4630      	mov	r0, r6
 800d708:	f7ff ffda 	bl	800d6c0 <__sfputc_r>
 800d70c:	1c43      	adds	r3, r0, #1
 800d70e:	d1f3      	bne.n	800d6f8 <__sfputs_r+0xa>
 800d710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d714 <_vfiprintf_r>:
_vfprintf_r():
 800d714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d718:	460d      	mov	r5, r1
 800d71a:	b09d      	sub	sp, #116	; 0x74
 800d71c:	4614      	mov	r4, r2
 800d71e:	461e      	mov	r6, r3
 800d720:	4607      	mov	r7, r0
 800d722:	b118      	cbz	r0, 800d72c <_vfiprintf_r+0x18>
 800d724:	6983      	ldr	r3, [r0, #24]
 800d726:	b90b      	cbnz	r3, 800d72c <_vfiprintf_r+0x18>
 800d728:	f7ff fd26 	bl	800d178 <__sinit>
 800d72c:	4b85      	ldr	r3, [pc, #532]	; (800d944 <_vfiprintf_r+0x230>)
 800d72e:	429d      	cmp	r5, r3
 800d730:	d11b      	bne.n	800d76a <_vfiprintf_r+0x56>
 800d732:	687d      	ldr	r5, [r7, #4]
 800d734:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d736:	07d9      	lsls	r1, r3, #31
 800d738:	d405      	bmi.n	800d746 <_vfiprintf_r+0x32>
 800d73a:	89ab      	ldrh	r3, [r5, #12]
 800d73c:	059a      	lsls	r2, r3, #22
 800d73e:	d402      	bmi.n	800d746 <_vfiprintf_r+0x32>
 800d740:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d742:	f7ff fdb6 	bl	800d2b2 <__retarget_lock_acquire_recursive>
 800d746:	89ab      	ldrh	r3, [r5, #12]
 800d748:	071b      	lsls	r3, r3, #28
 800d74a:	d501      	bpl.n	800d750 <_vfiprintf_r+0x3c>
 800d74c:	692b      	ldr	r3, [r5, #16]
 800d74e:	b9eb      	cbnz	r3, 800d78c <_vfiprintf_r+0x78>
 800d750:	4629      	mov	r1, r5
 800d752:	4638      	mov	r0, r7
 800d754:	f000 fb48 	bl	800dde8 <__swsetup_r>
 800d758:	b1c0      	cbz	r0, 800d78c <_vfiprintf_r+0x78>
 800d75a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d75c:	07d8      	lsls	r0, r3, #31
 800d75e:	d50e      	bpl.n	800d77e <_vfiprintf_r+0x6a>
 800d760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d764:	b01d      	add	sp, #116	; 0x74
 800d766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d76a:	4b77      	ldr	r3, [pc, #476]	; (800d948 <_vfiprintf_r+0x234>)
 800d76c:	429d      	cmp	r5, r3
 800d76e:	d101      	bne.n	800d774 <_vfiprintf_r+0x60>
 800d770:	68bd      	ldr	r5, [r7, #8]
 800d772:	e7df      	b.n	800d734 <_vfiprintf_r+0x20>
 800d774:	4b75      	ldr	r3, [pc, #468]	; (800d94c <_vfiprintf_r+0x238>)
 800d776:	429d      	cmp	r5, r3
 800d778:	bf08      	it	eq
 800d77a:	68fd      	ldreq	r5, [r7, #12]
 800d77c:	e7da      	b.n	800d734 <_vfiprintf_r+0x20>
 800d77e:	89ab      	ldrh	r3, [r5, #12]
 800d780:	0599      	lsls	r1, r3, #22
 800d782:	d4ed      	bmi.n	800d760 <_vfiprintf_r+0x4c>
 800d784:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d786:	f7ff fd95 	bl	800d2b4 <__retarget_lock_release_recursive>
 800d78a:	e7e9      	b.n	800d760 <_vfiprintf_r+0x4c>
 800d78c:	2300      	movs	r3, #0
 800d78e:	9309      	str	r3, [sp, #36]	; 0x24
 800d790:	2320      	movs	r3, #32
 800d792:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d796:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 800d950 <_vfiprintf_r+0x23c>
 800d79a:	9603      	str	r6, [sp, #12]
 800d79c:	2330      	movs	r3, #48	; 0x30
 800d79e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7a2:	f04f 0a01 	mov.w	sl, #1
 800d7a6:	4623      	mov	r3, r4
 800d7a8:	461e      	mov	r6, r3
 800d7aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7ae:	b10a      	cbz	r2, 800d7b4 <_vfiprintf_r+0xa0>
 800d7b0:	2a25      	cmp	r2, #37	; 0x25
 800d7b2:	d1f9      	bne.n	800d7a8 <_vfiprintf_r+0x94>
 800d7b4:	ebb6 0b04 	subs.w	fp, r6, r4
 800d7b8:	d00b      	beq.n	800d7d2 <_vfiprintf_r+0xbe>
 800d7ba:	465b      	mov	r3, fp
 800d7bc:	4622      	mov	r2, r4
 800d7be:	4629      	mov	r1, r5
 800d7c0:	4638      	mov	r0, r7
 800d7c2:	f7ff ff94 	bl	800d6ee <__sfputs_r>
 800d7c6:	3001      	adds	r0, #1
 800d7c8:	f000 80a3 	beq.w	800d912 <_vfiprintf_r+0x1fe>
 800d7cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7ce:	445b      	add	r3, fp
 800d7d0:	9309      	str	r3, [sp, #36]	; 0x24
 800d7d2:	7833      	ldrb	r3, [r6, #0]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	f000 809c 	beq.w	800d912 <_vfiprintf_r+0x1fe>
 800d7da:	2300      	movs	r3, #0
 800d7dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d7e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7e4:	3601      	adds	r6, #1
 800d7e6:	9304      	str	r3, [sp, #16]
 800d7e8:	9307      	str	r3, [sp, #28]
 800d7ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d7ee:	931a      	str	r3, [sp, #104]	; 0x68
 800d7f0:	4634      	mov	r4, r6
 800d7f2:	2205      	movs	r2, #5
 800d7f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7f8:	4855      	ldr	r0, [pc, #340]	; (800d950 <_vfiprintf_r+0x23c>)
 800d7fa:	f7f2 fd89 	bl	8000310 <memchr>
 800d7fe:	9b04      	ldr	r3, [sp, #16]
 800d800:	b9c0      	cbnz	r0, 800d834 <_vfiprintf_r+0x120>
 800d802:	06da      	lsls	r2, r3, #27
 800d804:	bf44      	itt	mi
 800d806:	2220      	movmi	r2, #32
 800d808:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d80c:	0718      	lsls	r0, r3, #28
 800d80e:	bf44      	itt	mi
 800d810:	222b      	movmi	r2, #43	; 0x2b
 800d812:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d816:	7832      	ldrb	r2, [r6, #0]
 800d818:	2a2a      	cmp	r2, #42	; 0x2a
 800d81a:	d013      	beq.n	800d844 <_vfiprintf_r+0x130>
 800d81c:	9a07      	ldr	r2, [sp, #28]
 800d81e:	4634      	mov	r4, r6
 800d820:	2000      	movs	r0, #0
 800d822:	260a      	movs	r6, #10
 800d824:	4621      	mov	r1, r4
 800d826:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d82a:	3b30      	subs	r3, #48	; 0x30
 800d82c:	2b09      	cmp	r3, #9
 800d82e:	d94b      	bls.n	800d8c8 <_vfiprintf_r+0x1b4>
 800d830:	b970      	cbnz	r0, 800d850 <_vfiprintf_r+0x13c>
 800d832:	e014      	b.n	800d85e <_vfiprintf_r+0x14a>
 800d834:	eba0 0009 	sub.w	r0, r0, r9
 800d838:	fa0a f000 	lsl.w	r0, sl, r0
 800d83c:	4318      	orrs	r0, r3
 800d83e:	9004      	str	r0, [sp, #16]
 800d840:	4626      	mov	r6, r4
 800d842:	e7d5      	b.n	800d7f0 <_vfiprintf_r+0xdc>
 800d844:	9a03      	ldr	r2, [sp, #12]
 800d846:	1d11      	adds	r1, r2, #4
 800d848:	6812      	ldr	r2, [r2, #0]
 800d84a:	9103      	str	r1, [sp, #12]
 800d84c:	2a00      	cmp	r2, #0
 800d84e:	db01      	blt.n	800d854 <_vfiprintf_r+0x140>
 800d850:	9207      	str	r2, [sp, #28]
 800d852:	e004      	b.n	800d85e <_vfiprintf_r+0x14a>
 800d854:	4252      	negs	r2, r2
 800d856:	f043 0302 	orr.w	r3, r3, #2
 800d85a:	9207      	str	r2, [sp, #28]
 800d85c:	9304      	str	r3, [sp, #16]
 800d85e:	7823      	ldrb	r3, [r4, #0]
 800d860:	2b2e      	cmp	r3, #46	; 0x2e
 800d862:	d10c      	bne.n	800d87e <_vfiprintf_r+0x16a>
 800d864:	7863      	ldrb	r3, [r4, #1]
 800d866:	2b2a      	cmp	r3, #42	; 0x2a
 800d868:	d133      	bne.n	800d8d2 <_vfiprintf_r+0x1be>
 800d86a:	9b03      	ldr	r3, [sp, #12]
 800d86c:	1d1a      	adds	r2, r3, #4
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	9203      	str	r2, [sp, #12]
 800d872:	2b00      	cmp	r3, #0
 800d874:	bfb8      	it	lt
 800d876:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d87a:	3402      	adds	r4, #2
 800d87c:	9305      	str	r3, [sp, #20]
 800d87e:	4e35      	ldr	r6, [pc, #212]	; (800d954 <_vfiprintf_r+0x240>)
 800d880:	7821      	ldrb	r1, [r4, #0]
 800d882:	2203      	movs	r2, #3
 800d884:	4630      	mov	r0, r6
 800d886:	f7f2 fd43 	bl	8000310 <memchr>
 800d88a:	b138      	cbz	r0, 800d89c <_vfiprintf_r+0x188>
 800d88c:	2340      	movs	r3, #64	; 0x40
 800d88e:	1b80      	subs	r0, r0, r6
 800d890:	fa03 f000 	lsl.w	r0, r3, r0
 800d894:	9b04      	ldr	r3, [sp, #16]
 800d896:	4303      	orrs	r3, r0
 800d898:	3401      	adds	r4, #1
 800d89a:	9304      	str	r3, [sp, #16]
 800d89c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8a0:	482d      	ldr	r0, [pc, #180]	; (800d958 <_vfiprintf_r+0x244>)
 800d8a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8a6:	2206      	movs	r2, #6
 800d8a8:	f7f2 fd32 	bl	8000310 <memchr>
 800d8ac:	2800      	cmp	r0, #0
 800d8ae:	d03f      	beq.n	800d930 <_vfiprintf_r+0x21c>
 800d8b0:	4b2a      	ldr	r3, [pc, #168]	; (800d95c <_vfiprintf_r+0x248>)
 800d8b2:	bb13      	cbnz	r3, 800d8fa <_vfiprintf_r+0x1e6>
 800d8b4:	9b03      	ldr	r3, [sp, #12]
 800d8b6:	3307      	adds	r3, #7
 800d8b8:	f023 0307 	bic.w	r3, r3, #7
 800d8bc:	3308      	adds	r3, #8
 800d8be:	9303      	str	r3, [sp, #12]
 800d8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8c2:	4443      	add	r3, r8
 800d8c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d8c6:	e76e      	b.n	800d7a6 <_vfiprintf_r+0x92>
 800d8c8:	fb06 3202 	mla	r2, r6, r2, r3
 800d8cc:	2001      	movs	r0, #1
 800d8ce:	460c      	mov	r4, r1
 800d8d0:	e7a8      	b.n	800d824 <_vfiprintf_r+0x110>
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	3401      	adds	r4, #1
 800d8d6:	9305      	str	r3, [sp, #20]
 800d8d8:	4619      	mov	r1, r3
 800d8da:	260a      	movs	r6, #10
 800d8dc:	4620      	mov	r0, r4
 800d8de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8e2:	3a30      	subs	r2, #48	; 0x30
 800d8e4:	2a09      	cmp	r2, #9
 800d8e6:	d903      	bls.n	800d8f0 <_vfiprintf_r+0x1dc>
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d0c8      	beq.n	800d87e <_vfiprintf_r+0x16a>
 800d8ec:	9105      	str	r1, [sp, #20]
 800d8ee:	e7c6      	b.n	800d87e <_vfiprintf_r+0x16a>
 800d8f0:	fb06 2101 	mla	r1, r6, r1, r2
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	4604      	mov	r4, r0
 800d8f8:	e7f0      	b.n	800d8dc <_vfiprintf_r+0x1c8>
 800d8fa:	ab03      	add	r3, sp, #12
 800d8fc:	9300      	str	r3, [sp, #0]
 800d8fe:	462a      	mov	r2, r5
 800d900:	4b17      	ldr	r3, [pc, #92]	; (800d960 <_vfiprintf_r+0x24c>)
 800d902:	a904      	add	r1, sp, #16
 800d904:	4638      	mov	r0, r7
 800d906:	f3af 8000 	nop.w
 800d90a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d90e:	4680      	mov	r8, r0
 800d910:	d1d6      	bne.n	800d8c0 <_vfiprintf_r+0x1ac>
 800d912:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d914:	07d9      	lsls	r1, r3, #31
 800d916:	d405      	bmi.n	800d924 <_vfiprintf_r+0x210>
 800d918:	89ab      	ldrh	r3, [r5, #12]
 800d91a:	059a      	lsls	r2, r3, #22
 800d91c:	d402      	bmi.n	800d924 <_vfiprintf_r+0x210>
 800d91e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d920:	f7ff fcc8 	bl	800d2b4 <__retarget_lock_release_recursive>
 800d924:	89ab      	ldrh	r3, [r5, #12]
 800d926:	065b      	lsls	r3, r3, #25
 800d928:	f53f af1a 	bmi.w	800d760 <_vfiprintf_r+0x4c>
 800d92c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d92e:	e719      	b.n	800d764 <_vfiprintf_r+0x50>
 800d930:	ab03      	add	r3, sp, #12
 800d932:	9300      	str	r3, [sp, #0]
 800d934:	462a      	mov	r2, r5
 800d936:	4b0a      	ldr	r3, [pc, #40]	; (800d960 <_vfiprintf_r+0x24c>)
 800d938:	a904      	add	r1, sp, #16
 800d93a:	4638      	mov	r0, r7
 800d93c:	f000 f888 	bl	800da50 <_printf_i>
 800d940:	e7e3      	b.n	800d90a <_vfiprintf_r+0x1f6>
 800d942:	bf00      	nop
 800d944:	0802117c 	.word	0x0802117c
 800d948:	0802119c 	.word	0x0802119c
 800d94c:	0802115c 	.word	0x0802115c
 800d950:	080211bc 	.word	0x080211bc
 800d954:	080211c2 	.word	0x080211c2
 800d958:	080211c6 	.word	0x080211c6
 800d95c:	00000000 	.word	0x00000000
 800d960:	0800d6ef 	.word	0x0800d6ef

0800d964 <_printf_common>:
_printf_common():
 800d964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d968:	4691      	mov	r9, r2
 800d96a:	461f      	mov	r7, r3
 800d96c:	688a      	ldr	r2, [r1, #8]
 800d96e:	690b      	ldr	r3, [r1, #16]
 800d970:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d974:	4293      	cmp	r3, r2
 800d976:	bfb8      	it	lt
 800d978:	4613      	movlt	r3, r2
 800d97a:	f8c9 3000 	str.w	r3, [r9]
 800d97e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d982:	4606      	mov	r6, r0
 800d984:	460c      	mov	r4, r1
 800d986:	b112      	cbz	r2, 800d98e <_printf_common+0x2a>
 800d988:	3301      	adds	r3, #1
 800d98a:	f8c9 3000 	str.w	r3, [r9]
 800d98e:	6823      	ldr	r3, [r4, #0]
 800d990:	0699      	lsls	r1, r3, #26
 800d992:	bf42      	ittt	mi
 800d994:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d998:	3302      	addmi	r3, #2
 800d99a:	f8c9 3000 	strmi.w	r3, [r9]
 800d99e:	6825      	ldr	r5, [r4, #0]
 800d9a0:	f015 0506 	ands.w	r5, r5, #6
 800d9a4:	d107      	bne.n	800d9b6 <_printf_common+0x52>
 800d9a6:	f104 0a19 	add.w	sl, r4, #25
 800d9aa:	68e3      	ldr	r3, [r4, #12]
 800d9ac:	f8d9 2000 	ldr.w	r2, [r9]
 800d9b0:	1a9b      	subs	r3, r3, r2
 800d9b2:	42ab      	cmp	r3, r5
 800d9b4:	dc28      	bgt.n	800da08 <_printf_common+0xa4>
 800d9b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d9ba:	6822      	ldr	r2, [r4, #0]
 800d9bc:	3300      	adds	r3, #0
 800d9be:	bf18      	it	ne
 800d9c0:	2301      	movne	r3, #1
 800d9c2:	0692      	lsls	r2, r2, #26
 800d9c4:	d42d      	bmi.n	800da22 <_printf_common+0xbe>
 800d9c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d9ca:	4639      	mov	r1, r7
 800d9cc:	4630      	mov	r0, r6
 800d9ce:	47c0      	blx	r8
 800d9d0:	3001      	adds	r0, #1
 800d9d2:	d020      	beq.n	800da16 <_printf_common+0xb2>
 800d9d4:	6823      	ldr	r3, [r4, #0]
 800d9d6:	68e5      	ldr	r5, [r4, #12]
 800d9d8:	f8d9 2000 	ldr.w	r2, [r9]
 800d9dc:	f003 0306 	and.w	r3, r3, #6
 800d9e0:	2b04      	cmp	r3, #4
 800d9e2:	bf08      	it	eq
 800d9e4:	1aad      	subeq	r5, r5, r2
 800d9e6:	68a3      	ldr	r3, [r4, #8]
 800d9e8:	6922      	ldr	r2, [r4, #16]
 800d9ea:	bf0c      	ite	eq
 800d9ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d9f0:	2500      	movne	r5, #0
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	bfc4      	itt	gt
 800d9f6:	1a9b      	subgt	r3, r3, r2
 800d9f8:	18ed      	addgt	r5, r5, r3
 800d9fa:	f04f 0900 	mov.w	r9, #0
 800d9fe:	341a      	adds	r4, #26
 800da00:	454d      	cmp	r5, r9
 800da02:	d11a      	bne.n	800da3a <_printf_common+0xd6>
 800da04:	2000      	movs	r0, #0
 800da06:	e008      	b.n	800da1a <_printf_common+0xb6>
 800da08:	2301      	movs	r3, #1
 800da0a:	4652      	mov	r2, sl
 800da0c:	4639      	mov	r1, r7
 800da0e:	4630      	mov	r0, r6
 800da10:	47c0      	blx	r8
 800da12:	3001      	adds	r0, #1
 800da14:	d103      	bne.n	800da1e <_printf_common+0xba>
 800da16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da1e:	3501      	adds	r5, #1
 800da20:	e7c3      	b.n	800d9aa <_printf_common+0x46>
 800da22:	18e1      	adds	r1, r4, r3
 800da24:	1c5a      	adds	r2, r3, #1
 800da26:	2030      	movs	r0, #48	; 0x30
 800da28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800da2c:	4422      	add	r2, r4
 800da2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800da32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800da36:	3302      	adds	r3, #2
 800da38:	e7c5      	b.n	800d9c6 <_printf_common+0x62>
 800da3a:	2301      	movs	r3, #1
 800da3c:	4622      	mov	r2, r4
 800da3e:	4639      	mov	r1, r7
 800da40:	4630      	mov	r0, r6
 800da42:	47c0      	blx	r8
 800da44:	3001      	adds	r0, #1
 800da46:	d0e6      	beq.n	800da16 <_printf_common+0xb2>
 800da48:	f109 0901 	add.w	r9, r9, #1
 800da4c:	e7d8      	b.n	800da00 <_printf_common+0x9c>
	...

0800da50 <_printf_i>:
_printf_i():
 800da50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da54:	4606      	mov	r6, r0
 800da56:	460c      	mov	r4, r1
 800da58:	f101 0043 	add.w	r0, r1, #67	; 0x43
 800da5c:	7e09      	ldrb	r1, [r1, #24]
 800da5e:	b085      	sub	sp, #20
 800da60:	296e      	cmp	r1, #110	; 0x6e
 800da62:	4698      	mov	r8, r3
 800da64:	4617      	mov	r7, r2
 800da66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da68:	f000 80ba 	beq.w	800dbe0 <_printf_i+0x190>
 800da6c:	d824      	bhi.n	800dab8 <_printf_i+0x68>
 800da6e:	2963      	cmp	r1, #99	; 0x63
 800da70:	d039      	beq.n	800dae6 <_printf_i+0x96>
 800da72:	d80a      	bhi.n	800da8a <_printf_i+0x3a>
 800da74:	2900      	cmp	r1, #0
 800da76:	f000 80c3 	beq.w	800dc00 <_printf_i+0x1b0>
 800da7a:	2958      	cmp	r1, #88	; 0x58
 800da7c:	f000 8091 	beq.w	800dba2 <_printf_i+0x152>
 800da80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da84:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800da88:	e035      	b.n	800daf6 <_printf_i+0xa6>
 800da8a:	2964      	cmp	r1, #100	; 0x64
 800da8c:	d001      	beq.n	800da92 <_printf_i+0x42>
 800da8e:	2969      	cmp	r1, #105	; 0x69
 800da90:	d1f6      	bne.n	800da80 <_printf_i+0x30>
 800da92:	6825      	ldr	r5, [r4, #0]
 800da94:	681a      	ldr	r2, [r3, #0]
 800da96:	f015 0f80 	tst.w	r5, #128	; 0x80
 800da9a:	f102 0104 	add.w	r1, r2, #4
 800da9e:	d02c      	beq.n	800dafa <_printf_i+0xaa>
 800daa0:	6812      	ldr	r2, [r2, #0]
 800daa2:	6019      	str	r1, [r3, #0]
 800daa4:	2a00      	cmp	r2, #0
 800daa6:	da03      	bge.n	800dab0 <_printf_i+0x60>
 800daa8:	232d      	movs	r3, #45	; 0x2d
 800daaa:	4252      	negs	r2, r2
 800daac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dab0:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 800dc70 <_printf_i+0x220>
 800dab4:	230a      	movs	r3, #10
 800dab6:	e03f      	b.n	800db38 <_printf_i+0xe8>
 800dab8:	2973      	cmp	r1, #115	; 0x73
 800daba:	f000 80a5 	beq.w	800dc08 <_printf_i+0x1b8>
 800dabe:	d808      	bhi.n	800dad2 <_printf_i+0x82>
 800dac0:	296f      	cmp	r1, #111	; 0x6f
 800dac2:	d021      	beq.n	800db08 <_printf_i+0xb8>
 800dac4:	2970      	cmp	r1, #112	; 0x70
 800dac6:	d1db      	bne.n	800da80 <_printf_i+0x30>
 800dac8:	6822      	ldr	r2, [r4, #0]
 800daca:	f042 0220 	orr.w	r2, r2, #32
 800dace:	6022      	str	r2, [r4, #0]
 800dad0:	e003      	b.n	800dada <_printf_i+0x8a>
 800dad2:	2975      	cmp	r1, #117	; 0x75
 800dad4:	d018      	beq.n	800db08 <_printf_i+0xb8>
 800dad6:	2978      	cmp	r1, #120	; 0x78
 800dad8:	d1d2      	bne.n	800da80 <_printf_i+0x30>
 800dada:	2278      	movs	r2, #120	; 0x78
 800dadc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800dae0:	f8df c190 	ldr.w	ip, [pc, #400]	; 800dc74 <_printf_i+0x224>
 800dae4:	e061      	b.n	800dbaa <_printf_i+0x15a>
 800dae6:	681a      	ldr	r2, [r3, #0]
 800dae8:	1d11      	adds	r1, r2, #4
 800daea:	6019      	str	r1, [r3, #0]
 800daec:	6813      	ldr	r3, [r2, #0]
 800daee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800daf2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800daf6:	2301      	movs	r3, #1
 800daf8:	e093      	b.n	800dc22 <_printf_i+0x1d2>
 800dafa:	6812      	ldr	r2, [r2, #0]
 800dafc:	6019      	str	r1, [r3, #0]
 800dafe:	f015 0f40 	tst.w	r5, #64	; 0x40
 800db02:	bf18      	it	ne
 800db04:	b212      	sxthne	r2, r2
 800db06:	e7cd      	b.n	800daa4 <_printf_i+0x54>
 800db08:	f8d4 c000 	ldr.w	ip, [r4]
 800db0c:	681a      	ldr	r2, [r3, #0]
 800db0e:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800db12:	f102 0504 	add.w	r5, r2, #4
 800db16:	601d      	str	r5, [r3, #0]
 800db18:	d001      	beq.n	800db1e <_printf_i+0xce>
 800db1a:	6812      	ldr	r2, [r2, #0]
 800db1c:	e003      	b.n	800db26 <_printf_i+0xd6>
 800db1e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800db22:	d0fa      	beq.n	800db1a <_printf_i+0xca>
 800db24:	8812      	ldrh	r2, [r2, #0]
 800db26:	f8df c148 	ldr.w	ip, [pc, #328]	; 800dc70 <_printf_i+0x220>
 800db2a:	296f      	cmp	r1, #111	; 0x6f
 800db2c:	bf0c      	ite	eq
 800db2e:	2308      	moveq	r3, #8
 800db30:	230a      	movne	r3, #10
 800db32:	2100      	movs	r1, #0
 800db34:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800db38:	6865      	ldr	r5, [r4, #4]
 800db3a:	60a5      	str	r5, [r4, #8]
 800db3c:	2d00      	cmp	r5, #0
 800db3e:	bfa2      	ittt	ge
 800db40:	6821      	ldrge	r1, [r4, #0]
 800db42:	f021 0104 	bicge.w	r1, r1, #4
 800db46:	6021      	strge	r1, [r4, #0]
 800db48:	b90a      	cbnz	r2, 800db4e <_printf_i+0xfe>
 800db4a:	2d00      	cmp	r5, #0
 800db4c:	d046      	beq.n	800dbdc <_printf_i+0x18c>
 800db4e:	4605      	mov	r5, r0
 800db50:	fbb2 f1f3 	udiv	r1, r2, r3
 800db54:	fb03 2e11 	mls	lr, r3, r1, r2
 800db58:	4293      	cmp	r3, r2
 800db5a:	f81c e00e 	ldrb.w	lr, [ip, lr]
 800db5e:	f805 ed01 	strb.w	lr, [r5, #-1]!
 800db62:	d939      	bls.n	800dbd8 <_printf_i+0x188>
 800db64:	2b08      	cmp	r3, #8
 800db66:	d10b      	bne.n	800db80 <_printf_i+0x130>
 800db68:	6823      	ldr	r3, [r4, #0]
 800db6a:	07da      	lsls	r2, r3, #31
 800db6c:	d508      	bpl.n	800db80 <_printf_i+0x130>
 800db6e:	6923      	ldr	r3, [r4, #16]
 800db70:	6862      	ldr	r2, [r4, #4]
 800db72:	429a      	cmp	r2, r3
 800db74:	bfde      	ittt	le
 800db76:	2330      	movle	r3, #48	; 0x30
 800db78:	f805 3c01 	strble.w	r3, [r5, #-1]
 800db7c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800db80:	1b40      	subs	r0, r0, r5
 800db82:	6120      	str	r0, [r4, #16]
 800db84:	f8cd 8000 	str.w	r8, [sp]
 800db88:	463b      	mov	r3, r7
 800db8a:	aa03      	add	r2, sp, #12
 800db8c:	4621      	mov	r1, r4
 800db8e:	4630      	mov	r0, r6
 800db90:	f7ff fee8 	bl	800d964 <_printf_common>
 800db94:	3001      	adds	r0, #1
 800db96:	d149      	bne.n	800dc2c <_printf_i+0x1dc>
 800db98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db9c:	b005      	add	sp, #20
 800db9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dba2:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 800dc70 <_printf_i+0x220>
 800dba6:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800dbaa:	681d      	ldr	r5, [r3, #0]
 800dbac:	6821      	ldr	r1, [r4, #0]
 800dbae:	f855 2b04 	ldr.w	r2, [r5], #4
 800dbb2:	601d      	str	r5, [r3, #0]
 800dbb4:	060d      	lsls	r5, r1, #24
 800dbb6:	d50b      	bpl.n	800dbd0 <_printf_i+0x180>
 800dbb8:	07cd      	lsls	r5, r1, #31
 800dbba:	bf44      	itt	mi
 800dbbc:	f041 0120 	orrmi.w	r1, r1, #32
 800dbc0:	6021      	strmi	r1, [r4, #0]
 800dbc2:	b91a      	cbnz	r2, 800dbcc <_printf_i+0x17c>
 800dbc4:	6823      	ldr	r3, [r4, #0]
 800dbc6:	f023 0320 	bic.w	r3, r3, #32
 800dbca:	6023      	str	r3, [r4, #0]
 800dbcc:	2310      	movs	r3, #16
 800dbce:	e7b0      	b.n	800db32 <_printf_i+0xe2>
 800dbd0:	064b      	lsls	r3, r1, #25
 800dbd2:	bf48      	it	mi
 800dbd4:	b292      	uxthmi	r2, r2
 800dbd6:	e7ef      	b.n	800dbb8 <_printf_i+0x168>
 800dbd8:	460a      	mov	r2, r1
 800dbda:	e7b9      	b.n	800db50 <_printf_i+0x100>
 800dbdc:	4605      	mov	r5, r0
 800dbde:	e7c1      	b.n	800db64 <_printf_i+0x114>
 800dbe0:	681a      	ldr	r2, [r3, #0]
 800dbe2:	f8d4 c000 	ldr.w	ip, [r4]
 800dbe6:	6961      	ldr	r1, [r4, #20]
 800dbe8:	1d15      	adds	r5, r2, #4
 800dbea:	601d      	str	r5, [r3, #0]
 800dbec:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800dbf0:	6813      	ldr	r3, [r2, #0]
 800dbf2:	d001      	beq.n	800dbf8 <_printf_i+0x1a8>
 800dbf4:	6019      	str	r1, [r3, #0]
 800dbf6:	e003      	b.n	800dc00 <_printf_i+0x1b0>
 800dbf8:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800dbfc:	d0fa      	beq.n	800dbf4 <_printf_i+0x1a4>
 800dbfe:	8019      	strh	r1, [r3, #0]
 800dc00:	2300      	movs	r3, #0
 800dc02:	6123      	str	r3, [r4, #16]
 800dc04:	4605      	mov	r5, r0
 800dc06:	e7bd      	b.n	800db84 <_printf_i+0x134>
 800dc08:	681a      	ldr	r2, [r3, #0]
 800dc0a:	1d11      	adds	r1, r2, #4
 800dc0c:	6019      	str	r1, [r3, #0]
 800dc0e:	6815      	ldr	r5, [r2, #0]
 800dc10:	6862      	ldr	r2, [r4, #4]
 800dc12:	2100      	movs	r1, #0
 800dc14:	4628      	mov	r0, r5
 800dc16:	f7f2 fb7b 	bl	8000310 <memchr>
 800dc1a:	b108      	cbz	r0, 800dc20 <_printf_i+0x1d0>
 800dc1c:	1b40      	subs	r0, r0, r5
 800dc1e:	6060      	str	r0, [r4, #4]
 800dc20:	6863      	ldr	r3, [r4, #4]
 800dc22:	6123      	str	r3, [r4, #16]
 800dc24:	2300      	movs	r3, #0
 800dc26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc2a:	e7ab      	b.n	800db84 <_printf_i+0x134>
 800dc2c:	6923      	ldr	r3, [r4, #16]
 800dc2e:	462a      	mov	r2, r5
 800dc30:	4639      	mov	r1, r7
 800dc32:	4630      	mov	r0, r6
 800dc34:	47c0      	blx	r8
 800dc36:	3001      	adds	r0, #1
 800dc38:	d0ae      	beq.n	800db98 <_printf_i+0x148>
 800dc3a:	6823      	ldr	r3, [r4, #0]
 800dc3c:	079b      	lsls	r3, r3, #30
 800dc3e:	d413      	bmi.n	800dc68 <_printf_i+0x218>
 800dc40:	68e0      	ldr	r0, [r4, #12]
 800dc42:	9b03      	ldr	r3, [sp, #12]
 800dc44:	4298      	cmp	r0, r3
 800dc46:	bfb8      	it	lt
 800dc48:	4618      	movlt	r0, r3
 800dc4a:	e7a7      	b.n	800db9c <_printf_i+0x14c>
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	464a      	mov	r2, r9
 800dc50:	4639      	mov	r1, r7
 800dc52:	4630      	mov	r0, r6
 800dc54:	47c0      	blx	r8
 800dc56:	3001      	adds	r0, #1
 800dc58:	d09e      	beq.n	800db98 <_printf_i+0x148>
 800dc5a:	3501      	adds	r5, #1
 800dc5c:	68e3      	ldr	r3, [r4, #12]
 800dc5e:	9a03      	ldr	r2, [sp, #12]
 800dc60:	1a9b      	subs	r3, r3, r2
 800dc62:	42ab      	cmp	r3, r5
 800dc64:	dcf2      	bgt.n	800dc4c <_printf_i+0x1fc>
 800dc66:	e7eb      	b.n	800dc40 <_printf_i+0x1f0>
 800dc68:	2500      	movs	r5, #0
 800dc6a:	f104 0919 	add.w	r9, r4, #25
 800dc6e:	e7f5      	b.n	800dc5c <_printf_i+0x20c>
 800dc70:	080211cd 	.word	0x080211cd
 800dc74:	080211de 	.word	0x080211de

0800dc78 <_sbrk_r>:
_sbrk_r():
 800dc78:	b538      	push	{r3, r4, r5, lr}
 800dc7a:	4c06      	ldr	r4, [pc, #24]	; (800dc94 <_sbrk_r+0x1c>)
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	4605      	mov	r5, r0
 800dc80:	4608      	mov	r0, r1
 800dc82:	6023      	str	r3, [r4, #0]
 800dc84:	f7fe fb62 	bl	800c34c <_sbrk>
 800dc88:	1c43      	adds	r3, r0, #1
 800dc8a:	d102      	bne.n	800dc92 <_sbrk_r+0x1a>
 800dc8c:	6823      	ldr	r3, [r4, #0]
 800dc8e:	b103      	cbz	r3, 800dc92 <_sbrk_r+0x1a>
 800dc90:	602b      	str	r3, [r5, #0]
 800dc92:	bd38      	pop	{r3, r4, r5, pc}
 800dc94:	20008074 	.word	0x20008074

0800dc98 <__sread>:
__sread():
 800dc98:	b510      	push	{r4, lr}
 800dc9a:	460c      	mov	r4, r1
 800dc9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dca0:	f000 faa4 	bl	800e1ec <_read_r>
 800dca4:	2800      	cmp	r0, #0
 800dca6:	bfab      	itete	ge
 800dca8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dcaa:	89a3      	ldrhlt	r3, [r4, #12]
 800dcac:	181b      	addge	r3, r3, r0
 800dcae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dcb2:	bfac      	ite	ge
 800dcb4:	6563      	strge	r3, [r4, #84]	; 0x54
 800dcb6:	81a3      	strhlt	r3, [r4, #12]
 800dcb8:	bd10      	pop	{r4, pc}

0800dcba <__swrite>:
__swrite():
 800dcba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcbe:	461f      	mov	r7, r3
 800dcc0:	898b      	ldrh	r3, [r1, #12]
 800dcc2:	05db      	lsls	r3, r3, #23
 800dcc4:	4605      	mov	r5, r0
 800dcc6:	460c      	mov	r4, r1
 800dcc8:	4616      	mov	r6, r2
 800dcca:	d505      	bpl.n	800dcd8 <__swrite+0x1e>
 800dccc:	2302      	movs	r3, #2
 800dcce:	2200      	movs	r2, #0
 800dcd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcd4:	f000 f9c8 	bl	800e068 <_lseek_r>
 800dcd8:	89a3      	ldrh	r3, [r4, #12]
 800dcda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dce2:	81a3      	strh	r3, [r4, #12]
 800dce4:	4632      	mov	r2, r6
 800dce6:	463b      	mov	r3, r7
 800dce8:	4628      	mov	r0, r5
 800dcea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcee:	f000 b869 	b.w	800ddc4 <_write_r>

0800dcf2 <__sseek>:
__sseek():
 800dcf2:	b510      	push	{r4, lr}
 800dcf4:	460c      	mov	r4, r1
 800dcf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcfa:	f000 f9b5 	bl	800e068 <_lseek_r>
 800dcfe:	1c43      	adds	r3, r0, #1
 800dd00:	89a3      	ldrh	r3, [r4, #12]
 800dd02:	bf15      	itete	ne
 800dd04:	6560      	strne	r0, [r4, #84]	; 0x54
 800dd06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dd0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dd0e:	81a3      	strheq	r3, [r4, #12]
 800dd10:	bf18      	it	ne
 800dd12:	81a3      	strhne	r3, [r4, #12]
 800dd14:	bd10      	pop	{r4, pc}

0800dd16 <__sclose>:
__sclose():
 800dd16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd1a:	f000 b8d3 	b.w	800dec4 <_close_r>
	...

0800dd20 <__swbuf_r>:
__swbuf_r():
 800dd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd22:	460e      	mov	r6, r1
 800dd24:	4614      	mov	r4, r2
 800dd26:	4605      	mov	r5, r0
 800dd28:	b118      	cbz	r0, 800dd32 <__swbuf_r+0x12>
 800dd2a:	6983      	ldr	r3, [r0, #24]
 800dd2c:	b90b      	cbnz	r3, 800dd32 <__swbuf_r+0x12>
 800dd2e:	f7ff fa23 	bl	800d178 <__sinit>
 800dd32:	4b21      	ldr	r3, [pc, #132]	; (800ddb8 <__swbuf_r+0x98>)
 800dd34:	429c      	cmp	r4, r3
 800dd36:	d12b      	bne.n	800dd90 <__swbuf_r+0x70>
 800dd38:	686c      	ldr	r4, [r5, #4]
 800dd3a:	69a3      	ldr	r3, [r4, #24]
 800dd3c:	60a3      	str	r3, [r4, #8]
 800dd3e:	89a3      	ldrh	r3, [r4, #12]
 800dd40:	071a      	lsls	r2, r3, #28
 800dd42:	d52f      	bpl.n	800dda4 <__swbuf_r+0x84>
 800dd44:	6923      	ldr	r3, [r4, #16]
 800dd46:	b36b      	cbz	r3, 800dda4 <__swbuf_r+0x84>
 800dd48:	6923      	ldr	r3, [r4, #16]
 800dd4a:	6820      	ldr	r0, [r4, #0]
 800dd4c:	1ac0      	subs	r0, r0, r3
 800dd4e:	6963      	ldr	r3, [r4, #20]
 800dd50:	b2f6      	uxtb	r6, r6
 800dd52:	4283      	cmp	r3, r0
 800dd54:	4637      	mov	r7, r6
 800dd56:	dc04      	bgt.n	800dd62 <__swbuf_r+0x42>
 800dd58:	4621      	mov	r1, r4
 800dd5a:	4628      	mov	r0, r5
 800dd5c:	f000 f948 	bl	800dff0 <_fflush_r>
 800dd60:	bb30      	cbnz	r0, 800ddb0 <__swbuf_r+0x90>
 800dd62:	68a3      	ldr	r3, [r4, #8]
 800dd64:	3b01      	subs	r3, #1
 800dd66:	60a3      	str	r3, [r4, #8]
 800dd68:	6823      	ldr	r3, [r4, #0]
 800dd6a:	1c5a      	adds	r2, r3, #1
 800dd6c:	6022      	str	r2, [r4, #0]
 800dd6e:	701e      	strb	r6, [r3, #0]
 800dd70:	6963      	ldr	r3, [r4, #20]
 800dd72:	3001      	adds	r0, #1
 800dd74:	4283      	cmp	r3, r0
 800dd76:	d004      	beq.n	800dd82 <__swbuf_r+0x62>
 800dd78:	89a3      	ldrh	r3, [r4, #12]
 800dd7a:	07db      	lsls	r3, r3, #31
 800dd7c:	d506      	bpl.n	800dd8c <__swbuf_r+0x6c>
 800dd7e:	2e0a      	cmp	r6, #10
 800dd80:	d104      	bne.n	800dd8c <__swbuf_r+0x6c>
 800dd82:	4621      	mov	r1, r4
 800dd84:	4628      	mov	r0, r5
 800dd86:	f000 f933 	bl	800dff0 <_fflush_r>
 800dd8a:	b988      	cbnz	r0, 800ddb0 <__swbuf_r+0x90>
 800dd8c:	4638      	mov	r0, r7
 800dd8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd90:	4b0a      	ldr	r3, [pc, #40]	; (800ddbc <__swbuf_r+0x9c>)
 800dd92:	429c      	cmp	r4, r3
 800dd94:	d101      	bne.n	800dd9a <__swbuf_r+0x7a>
 800dd96:	68ac      	ldr	r4, [r5, #8]
 800dd98:	e7cf      	b.n	800dd3a <__swbuf_r+0x1a>
 800dd9a:	4b09      	ldr	r3, [pc, #36]	; (800ddc0 <__swbuf_r+0xa0>)
 800dd9c:	429c      	cmp	r4, r3
 800dd9e:	bf08      	it	eq
 800dda0:	68ec      	ldreq	r4, [r5, #12]
 800dda2:	e7ca      	b.n	800dd3a <__swbuf_r+0x1a>
 800dda4:	4621      	mov	r1, r4
 800dda6:	4628      	mov	r0, r5
 800dda8:	f000 f81e 	bl	800dde8 <__swsetup_r>
 800ddac:	2800      	cmp	r0, #0
 800ddae:	d0cb      	beq.n	800dd48 <__swbuf_r+0x28>
 800ddb0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ddb4:	e7ea      	b.n	800dd8c <__swbuf_r+0x6c>
 800ddb6:	bf00      	nop
 800ddb8:	0802117c 	.word	0x0802117c
 800ddbc:	0802119c 	.word	0x0802119c
 800ddc0:	0802115c 	.word	0x0802115c

0800ddc4 <_write_r>:
_write_r():
 800ddc4:	b538      	push	{r3, r4, r5, lr}
 800ddc6:	4c07      	ldr	r4, [pc, #28]	; (800dde4 <_write_r+0x20>)
 800ddc8:	4605      	mov	r5, r0
 800ddca:	4608      	mov	r0, r1
 800ddcc:	4611      	mov	r1, r2
 800ddce:	2200      	movs	r2, #0
 800ddd0:	6022      	str	r2, [r4, #0]
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	f7fe fada 	bl	800c38c <_write>
 800ddd8:	1c43      	adds	r3, r0, #1
 800ddda:	d102      	bne.n	800dde2 <_write_r+0x1e>
 800dddc:	6823      	ldr	r3, [r4, #0]
 800ddde:	b103      	cbz	r3, 800dde2 <_write_r+0x1e>
 800dde0:	602b      	str	r3, [r5, #0]
 800dde2:	bd38      	pop	{r3, r4, r5, pc}
 800dde4:	20008074 	.word	0x20008074

0800dde8 <__swsetup_r>:
__swsetup_r():
 800dde8:	4b32      	ldr	r3, [pc, #200]	; (800deb4 <__swsetup_r+0xcc>)
 800ddea:	b570      	push	{r4, r5, r6, lr}
 800ddec:	681d      	ldr	r5, [r3, #0]
 800ddee:	4606      	mov	r6, r0
 800ddf0:	460c      	mov	r4, r1
 800ddf2:	b125      	cbz	r5, 800ddfe <__swsetup_r+0x16>
 800ddf4:	69ab      	ldr	r3, [r5, #24]
 800ddf6:	b913      	cbnz	r3, 800ddfe <__swsetup_r+0x16>
 800ddf8:	4628      	mov	r0, r5
 800ddfa:	f7ff f9bd 	bl	800d178 <__sinit>
 800ddfe:	4b2e      	ldr	r3, [pc, #184]	; (800deb8 <__swsetup_r+0xd0>)
 800de00:	429c      	cmp	r4, r3
 800de02:	d10f      	bne.n	800de24 <__swsetup_r+0x3c>
 800de04:	686c      	ldr	r4, [r5, #4]
 800de06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de0a:	b29a      	uxth	r2, r3
 800de0c:	0715      	lsls	r5, r2, #28
 800de0e:	d42c      	bmi.n	800de6a <__swsetup_r+0x82>
 800de10:	06d0      	lsls	r0, r2, #27
 800de12:	d411      	bmi.n	800de38 <__swsetup_r+0x50>
 800de14:	2209      	movs	r2, #9
 800de16:	6032      	str	r2, [r6, #0]
 800de18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de1c:	81a3      	strh	r3, [r4, #12]
 800de1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de22:	e03e      	b.n	800dea2 <__swsetup_r+0xba>
 800de24:	4b25      	ldr	r3, [pc, #148]	; (800debc <__swsetup_r+0xd4>)
 800de26:	429c      	cmp	r4, r3
 800de28:	d101      	bne.n	800de2e <__swsetup_r+0x46>
 800de2a:	68ac      	ldr	r4, [r5, #8]
 800de2c:	e7eb      	b.n	800de06 <__swsetup_r+0x1e>
 800de2e:	4b24      	ldr	r3, [pc, #144]	; (800dec0 <__swsetup_r+0xd8>)
 800de30:	429c      	cmp	r4, r3
 800de32:	bf08      	it	eq
 800de34:	68ec      	ldreq	r4, [r5, #12]
 800de36:	e7e6      	b.n	800de06 <__swsetup_r+0x1e>
 800de38:	0751      	lsls	r1, r2, #29
 800de3a:	d512      	bpl.n	800de62 <__swsetup_r+0x7a>
 800de3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de3e:	b141      	cbz	r1, 800de52 <__swsetup_r+0x6a>
 800de40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de44:	4299      	cmp	r1, r3
 800de46:	d002      	beq.n	800de4e <__swsetup_r+0x66>
 800de48:	4630      	mov	r0, r6
 800de4a:	f7ff fa3d 	bl	800d2c8 <_free_r>
 800de4e:	2300      	movs	r3, #0
 800de50:	6363      	str	r3, [r4, #52]	; 0x34
 800de52:	89a3      	ldrh	r3, [r4, #12]
 800de54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800de58:	81a3      	strh	r3, [r4, #12]
 800de5a:	2300      	movs	r3, #0
 800de5c:	6063      	str	r3, [r4, #4]
 800de5e:	6923      	ldr	r3, [r4, #16]
 800de60:	6023      	str	r3, [r4, #0]
 800de62:	89a3      	ldrh	r3, [r4, #12]
 800de64:	f043 0308 	orr.w	r3, r3, #8
 800de68:	81a3      	strh	r3, [r4, #12]
 800de6a:	6923      	ldr	r3, [r4, #16]
 800de6c:	b94b      	cbnz	r3, 800de82 <__swsetup_r+0x9a>
 800de6e:	89a3      	ldrh	r3, [r4, #12]
 800de70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800de74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de78:	d003      	beq.n	800de82 <__swsetup_r+0x9a>
 800de7a:	4621      	mov	r1, r4
 800de7c:	4630      	mov	r0, r6
 800de7e:	f000 f929 	bl	800e0d4 <__smakebuf_r>
 800de82:	89a2      	ldrh	r2, [r4, #12]
 800de84:	f012 0301 	ands.w	r3, r2, #1
 800de88:	d00c      	beq.n	800dea4 <__swsetup_r+0xbc>
 800de8a:	2300      	movs	r3, #0
 800de8c:	60a3      	str	r3, [r4, #8]
 800de8e:	6963      	ldr	r3, [r4, #20]
 800de90:	425b      	negs	r3, r3
 800de92:	61a3      	str	r3, [r4, #24]
 800de94:	6923      	ldr	r3, [r4, #16]
 800de96:	b953      	cbnz	r3, 800deae <__swsetup_r+0xc6>
 800de98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de9c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800dea0:	d1ba      	bne.n	800de18 <__swsetup_r+0x30>
 800dea2:	bd70      	pop	{r4, r5, r6, pc}
 800dea4:	0792      	lsls	r2, r2, #30
 800dea6:	bf58      	it	pl
 800dea8:	6963      	ldrpl	r3, [r4, #20]
 800deaa:	60a3      	str	r3, [r4, #8]
 800deac:	e7f2      	b.n	800de94 <__swsetup_r+0xac>
 800deae:	2000      	movs	r0, #0
 800deb0:	e7f7      	b.n	800dea2 <__swsetup_r+0xba>
 800deb2:	bf00      	nop
 800deb4:	2000003c 	.word	0x2000003c
 800deb8:	0802117c 	.word	0x0802117c
 800debc:	0802119c 	.word	0x0802119c
 800dec0:	0802115c 	.word	0x0802115c

0800dec4 <_close_r>:
_close_r():
 800dec4:	b538      	push	{r3, r4, r5, lr}
 800dec6:	4c06      	ldr	r4, [pc, #24]	; (800dee0 <_close_r+0x1c>)
 800dec8:	2300      	movs	r3, #0
 800deca:	4605      	mov	r5, r0
 800decc:	4608      	mov	r0, r1
 800dece:	6023      	str	r3, [r4, #0]
 800ded0:	f7fe fa69 	bl	800c3a6 <_close>
 800ded4:	1c43      	adds	r3, r0, #1
 800ded6:	d102      	bne.n	800dede <_close_r+0x1a>
 800ded8:	6823      	ldr	r3, [r4, #0]
 800deda:	b103      	cbz	r3, 800dede <_close_r+0x1a>
 800dedc:	602b      	str	r3, [r5, #0]
 800dede:	bd38      	pop	{r3, r4, r5, pc}
 800dee0:	20008074 	.word	0x20008074

0800dee4 <__sflush_r>:
__sflush_r():
 800dee4:	898a      	ldrh	r2, [r1, #12]
 800dee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deea:	4605      	mov	r5, r0
 800deec:	0710      	lsls	r0, r2, #28
 800deee:	460c      	mov	r4, r1
 800def0:	d458      	bmi.n	800dfa4 <__sflush_r+0xc0>
 800def2:	684b      	ldr	r3, [r1, #4]
 800def4:	2b00      	cmp	r3, #0
 800def6:	dc05      	bgt.n	800df04 <__sflush_r+0x20>
 800def8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800defa:	2b00      	cmp	r3, #0
 800defc:	dc02      	bgt.n	800df04 <__sflush_r+0x20>
 800defe:	2000      	movs	r0, #0
 800df00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df06:	2e00      	cmp	r6, #0
 800df08:	d0f9      	beq.n	800defe <__sflush_r+0x1a>
 800df0a:	2300      	movs	r3, #0
 800df0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800df10:	682f      	ldr	r7, [r5, #0]
 800df12:	602b      	str	r3, [r5, #0]
 800df14:	d032      	beq.n	800df7c <__sflush_r+0x98>
 800df16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800df18:	89a3      	ldrh	r3, [r4, #12]
 800df1a:	075a      	lsls	r2, r3, #29
 800df1c:	d505      	bpl.n	800df2a <__sflush_r+0x46>
 800df1e:	6863      	ldr	r3, [r4, #4]
 800df20:	1ac0      	subs	r0, r0, r3
 800df22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df24:	b10b      	cbz	r3, 800df2a <__sflush_r+0x46>
 800df26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800df28:	1ac0      	subs	r0, r0, r3
 800df2a:	2300      	movs	r3, #0
 800df2c:	4602      	mov	r2, r0
 800df2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df30:	6a21      	ldr	r1, [r4, #32]
 800df32:	4628      	mov	r0, r5
 800df34:	47b0      	blx	r6
 800df36:	1c43      	adds	r3, r0, #1
 800df38:	89a3      	ldrh	r3, [r4, #12]
 800df3a:	d106      	bne.n	800df4a <__sflush_r+0x66>
 800df3c:	6829      	ldr	r1, [r5, #0]
 800df3e:	291d      	cmp	r1, #29
 800df40:	d82c      	bhi.n	800df9c <__sflush_r+0xb8>
 800df42:	4a2a      	ldr	r2, [pc, #168]	; (800dfec <__sflush_r+0x108>)
 800df44:	40ca      	lsrs	r2, r1
 800df46:	07d6      	lsls	r6, r2, #31
 800df48:	d528      	bpl.n	800df9c <__sflush_r+0xb8>
 800df4a:	2200      	movs	r2, #0
 800df4c:	6062      	str	r2, [r4, #4]
 800df4e:	04d9      	lsls	r1, r3, #19
 800df50:	6922      	ldr	r2, [r4, #16]
 800df52:	6022      	str	r2, [r4, #0]
 800df54:	d504      	bpl.n	800df60 <__sflush_r+0x7c>
 800df56:	1c42      	adds	r2, r0, #1
 800df58:	d101      	bne.n	800df5e <__sflush_r+0x7a>
 800df5a:	682b      	ldr	r3, [r5, #0]
 800df5c:	b903      	cbnz	r3, 800df60 <__sflush_r+0x7c>
 800df5e:	6560      	str	r0, [r4, #84]	; 0x54
 800df60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df62:	602f      	str	r7, [r5, #0]
 800df64:	2900      	cmp	r1, #0
 800df66:	d0ca      	beq.n	800defe <__sflush_r+0x1a>
 800df68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df6c:	4299      	cmp	r1, r3
 800df6e:	d002      	beq.n	800df76 <__sflush_r+0x92>
 800df70:	4628      	mov	r0, r5
 800df72:	f7ff f9a9 	bl	800d2c8 <_free_r>
 800df76:	2000      	movs	r0, #0
 800df78:	6360      	str	r0, [r4, #52]	; 0x34
 800df7a:	e7c1      	b.n	800df00 <__sflush_r+0x1c>
 800df7c:	6a21      	ldr	r1, [r4, #32]
 800df7e:	2301      	movs	r3, #1
 800df80:	4628      	mov	r0, r5
 800df82:	47b0      	blx	r6
 800df84:	1c41      	adds	r1, r0, #1
 800df86:	d1c7      	bne.n	800df18 <__sflush_r+0x34>
 800df88:	682b      	ldr	r3, [r5, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d0c4      	beq.n	800df18 <__sflush_r+0x34>
 800df8e:	2b1d      	cmp	r3, #29
 800df90:	d001      	beq.n	800df96 <__sflush_r+0xb2>
 800df92:	2b16      	cmp	r3, #22
 800df94:	d101      	bne.n	800df9a <__sflush_r+0xb6>
 800df96:	602f      	str	r7, [r5, #0]
 800df98:	e7b1      	b.n	800defe <__sflush_r+0x1a>
 800df9a:	89a3      	ldrh	r3, [r4, #12]
 800df9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfa0:	81a3      	strh	r3, [r4, #12]
 800dfa2:	e7ad      	b.n	800df00 <__sflush_r+0x1c>
 800dfa4:	690f      	ldr	r7, [r1, #16]
 800dfa6:	2f00      	cmp	r7, #0
 800dfa8:	d0a9      	beq.n	800defe <__sflush_r+0x1a>
 800dfaa:	0793      	lsls	r3, r2, #30
 800dfac:	680e      	ldr	r6, [r1, #0]
 800dfae:	bf08      	it	eq
 800dfb0:	694b      	ldreq	r3, [r1, #20]
 800dfb2:	600f      	str	r7, [r1, #0]
 800dfb4:	bf18      	it	ne
 800dfb6:	2300      	movne	r3, #0
 800dfb8:	eba6 0807 	sub.w	r8, r6, r7
 800dfbc:	608b      	str	r3, [r1, #8]
 800dfbe:	f1b8 0f00 	cmp.w	r8, #0
 800dfc2:	dd9c      	ble.n	800defe <__sflush_r+0x1a>
 800dfc4:	4643      	mov	r3, r8
 800dfc6:	463a      	mov	r2, r7
 800dfc8:	6a21      	ldr	r1, [r4, #32]
 800dfca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dfcc:	4628      	mov	r0, r5
 800dfce:	47b0      	blx	r6
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	dc06      	bgt.n	800dfe2 <__sflush_r+0xfe>
 800dfd4:	89a3      	ldrh	r3, [r4, #12]
 800dfd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfda:	81a3      	strh	r3, [r4, #12]
 800dfdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dfe0:	e78e      	b.n	800df00 <__sflush_r+0x1c>
 800dfe2:	4407      	add	r7, r0
 800dfe4:	eba8 0800 	sub.w	r8, r8, r0
 800dfe8:	e7e9      	b.n	800dfbe <__sflush_r+0xda>
 800dfea:	bf00      	nop
 800dfec:	20400001 	.word	0x20400001

0800dff0 <_fflush_r>:
_fflush_r():
 800dff0:	b538      	push	{r3, r4, r5, lr}
 800dff2:	690b      	ldr	r3, [r1, #16]
 800dff4:	4605      	mov	r5, r0
 800dff6:	460c      	mov	r4, r1
 800dff8:	b913      	cbnz	r3, 800e000 <_fflush_r+0x10>
 800dffa:	2500      	movs	r5, #0
 800dffc:	4628      	mov	r0, r5
 800dffe:	bd38      	pop	{r3, r4, r5, pc}
 800e000:	b118      	cbz	r0, 800e00a <_fflush_r+0x1a>
 800e002:	6983      	ldr	r3, [r0, #24]
 800e004:	b90b      	cbnz	r3, 800e00a <_fflush_r+0x1a>
 800e006:	f7ff f8b7 	bl	800d178 <__sinit>
 800e00a:	4b14      	ldr	r3, [pc, #80]	; (800e05c <_fflush_r+0x6c>)
 800e00c:	429c      	cmp	r4, r3
 800e00e:	d11b      	bne.n	800e048 <_fflush_r+0x58>
 800e010:	686c      	ldr	r4, [r5, #4]
 800e012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d0ef      	beq.n	800dffa <_fflush_r+0xa>
 800e01a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e01c:	07d0      	lsls	r0, r2, #31
 800e01e:	d404      	bmi.n	800e02a <_fflush_r+0x3a>
 800e020:	0599      	lsls	r1, r3, #22
 800e022:	d402      	bmi.n	800e02a <_fflush_r+0x3a>
 800e024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e026:	f7ff f944 	bl	800d2b2 <__retarget_lock_acquire_recursive>
 800e02a:	4628      	mov	r0, r5
 800e02c:	4621      	mov	r1, r4
 800e02e:	f7ff ff59 	bl	800dee4 <__sflush_r>
 800e032:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e034:	07da      	lsls	r2, r3, #31
 800e036:	4605      	mov	r5, r0
 800e038:	d4e0      	bmi.n	800dffc <_fflush_r+0xc>
 800e03a:	89a3      	ldrh	r3, [r4, #12]
 800e03c:	059b      	lsls	r3, r3, #22
 800e03e:	d4dd      	bmi.n	800dffc <_fflush_r+0xc>
 800e040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e042:	f7ff f937 	bl	800d2b4 <__retarget_lock_release_recursive>
 800e046:	e7d9      	b.n	800dffc <_fflush_r+0xc>
 800e048:	4b05      	ldr	r3, [pc, #20]	; (800e060 <_fflush_r+0x70>)
 800e04a:	429c      	cmp	r4, r3
 800e04c:	d101      	bne.n	800e052 <_fflush_r+0x62>
 800e04e:	68ac      	ldr	r4, [r5, #8]
 800e050:	e7df      	b.n	800e012 <_fflush_r+0x22>
 800e052:	4b04      	ldr	r3, [pc, #16]	; (800e064 <_fflush_r+0x74>)
 800e054:	429c      	cmp	r4, r3
 800e056:	bf08      	it	eq
 800e058:	68ec      	ldreq	r4, [r5, #12]
 800e05a:	e7da      	b.n	800e012 <_fflush_r+0x22>
 800e05c:	0802117c 	.word	0x0802117c
 800e060:	0802119c 	.word	0x0802119c
 800e064:	0802115c 	.word	0x0802115c

0800e068 <_lseek_r>:
_lseek_r():
 800e068:	b538      	push	{r3, r4, r5, lr}
 800e06a:	4c07      	ldr	r4, [pc, #28]	; (800e088 <_lseek_r+0x20>)
 800e06c:	4605      	mov	r5, r0
 800e06e:	4608      	mov	r0, r1
 800e070:	4611      	mov	r1, r2
 800e072:	2200      	movs	r2, #0
 800e074:	6022      	str	r2, [r4, #0]
 800e076:	461a      	mov	r2, r3
 800e078:	f7fe f99f 	bl	800c3ba <_lseek>
 800e07c:	1c43      	adds	r3, r0, #1
 800e07e:	d102      	bne.n	800e086 <_lseek_r+0x1e>
 800e080:	6823      	ldr	r3, [r4, #0]
 800e082:	b103      	cbz	r3, 800e086 <_lseek_r+0x1e>
 800e084:	602b      	str	r3, [r5, #0]
 800e086:	bd38      	pop	{r3, r4, r5, pc}
 800e088:	20008074 	.word	0x20008074

0800e08c <__swhatbuf_r>:
__swhatbuf_r():
 800e08c:	b570      	push	{r4, r5, r6, lr}
 800e08e:	460e      	mov	r6, r1
 800e090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e094:	2900      	cmp	r1, #0
 800e096:	b096      	sub	sp, #88	; 0x58
 800e098:	4614      	mov	r4, r2
 800e09a:	461d      	mov	r5, r3
 800e09c:	da07      	bge.n	800e0ae <__swhatbuf_r+0x22>
 800e09e:	2300      	movs	r3, #0
 800e0a0:	602b      	str	r3, [r5, #0]
 800e0a2:	89b3      	ldrh	r3, [r6, #12]
 800e0a4:	061a      	lsls	r2, r3, #24
 800e0a6:	d410      	bmi.n	800e0ca <__swhatbuf_r+0x3e>
 800e0a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0ac:	e00e      	b.n	800e0cc <__swhatbuf_r+0x40>
 800e0ae:	466a      	mov	r2, sp
 800e0b0:	f000 f8ae 	bl	800e210 <_fstat_r>
 800e0b4:	2800      	cmp	r0, #0
 800e0b6:	dbf2      	blt.n	800e09e <__swhatbuf_r+0x12>
 800e0b8:	9a01      	ldr	r2, [sp, #4]
 800e0ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e0be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e0c2:	425a      	negs	r2, r3
 800e0c4:	415a      	adcs	r2, r3
 800e0c6:	602a      	str	r2, [r5, #0]
 800e0c8:	e7ee      	b.n	800e0a8 <__swhatbuf_r+0x1c>
 800e0ca:	2340      	movs	r3, #64	; 0x40
 800e0cc:	2000      	movs	r0, #0
 800e0ce:	6023      	str	r3, [r4, #0]
 800e0d0:	b016      	add	sp, #88	; 0x58
 800e0d2:	bd70      	pop	{r4, r5, r6, pc}

0800e0d4 <__smakebuf_r>:
__smakebuf_r():
 800e0d4:	898b      	ldrh	r3, [r1, #12]
 800e0d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e0d8:	079d      	lsls	r5, r3, #30
 800e0da:	4606      	mov	r6, r0
 800e0dc:	460c      	mov	r4, r1
 800e0de:	d507      	bpl.n	800e0f0 <__smakebuf_r+0x1c>
 800e0e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e0e4:	6023      	str	r3, [r4, #0]
 800e0e6:	6123      	str	r3, [r4, #16]
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	6163      	str	r3, [r4, #20]
 800e0ec:	b002      	add	sp, #8
 800e0ee:	bd70      	pop	{r4, r5, r6, pc}
 800e0f0:	ab01      	add	r3, sp, #4
 800e0f2:	466a      	mov	r2, sp
 800e0f4:	f7ff ffca 	bl	800e08c <__swhatbuf_r>
 800e0f8:	9900      	ldr	r1, [sp, #0]
 800e0fa:	4605      	mov	r5, r0
 800e0fc:	4630      	mov	r0, r6
 800e0fe:	f7ff f931 	bl	800d364 <_malloc_r>
 800e102:	b948      	cbnz	r0, 800e118 <__smakebuf_r+0x44>
 800e104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e108:	059a      	lsls	r2, r3, #22
 800e10a:	d4ef      	bmi.n	800e0ec <__smakebuf_r+0x18>
 800e10c:	f023 0303 	bic.w	r3, r3, #3
 800e110:	f043 0302 	orr.w	r3, r3, #2
 800e114:	81a3      	strh	r3, [r4, #12]
 800e116:	e7e3      	b.n	800e0e0 <__smakebuf_r+0xc>
 800e118:	4b0d      	ldr	r3, [pc, #52]	; (800e150 <__smakebuf_r+0x7c>)
 800e11a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e11c:	89a3      	ldrh	r3, [r4, #12]
 800e11e:	6020      	str	r0, [r4, #0]
 800e120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e124:	81a3      	strh	r3, [r4, #12]
 800e126:	9b00      	ldr	r3, [sp, #0]
 800e128:	6163      	str	r3, [r4, #20]
 800e12a:	9b01      	ldr	r3, [sp, #4]
 800e12c:	6120      	str	r0, [r4, #16]
 800e12e:	b15b      	cbz	r3, 800e148 <__smakebuf_r+0x74>
 800e130:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e134:	4630      	mov	r0, r6
 800e136:	f000 f87d 	bl	800e234 <_isatty_r>
 800e13a:	b128      	cbz	r0, 800e148 <__smakebuf_r+0x74>
 800e13c:	89a3      	ldrh	r3, [r4, #12]
 800e13e:	f023 0303 	bic.w	r3, r3, #3
 800e142:	f043 0301 	orr.w	r3, r3, #1
 800e146:	81a3      	strh	r3, [r4, #12]
 800e148:	89a3      	ldrh	r3, [r4, #12]
 800e14a:	431d      	orrs	r5, r3
 800e14c:	81a5      	strh	r5, [r4, #12]
 800e14e:	e7cd      	b.n	800e0ec <__smakebuf_r+0x18>
 800e150:	0800d111 	.word	0x0800d111

0800e154 <memmove>:
memmove():
 800e154:	4288      	cmp	r0, r1
 800e156:	b510      	push	{r4, lr}
 800e158:	eb01 0302 	add.w	r3, r1, r2
 800e15c:	d902      	bls.n	800e164 <memmove+0x10>
 800e15e:	4283      	cmp	r3, r0
 800e160:	461c      	mov	r4, r3
 800e162:	d807      	bhi.n	800e174 <memmove+0x20>
 800e164:	1e42      	subs	r2, r0, #1
 800e166:	4299      	cmp	r1, r3
 800e168:	d008      	beq.n	800e17c <memmove+0x28>
 800e16a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e16e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e172:	e7f8      	b.n	800e166 <memmove+0x12>
 800e174:	1883      	adds	r3, r0, r2
 800e176:	1a9a      	subs	r2, r3, r2
 800e178:	429a      	cmp	r2, r3
 800e17a:	d100      	bne.n	800e17e <memmove+0x2a>
 800e17c:	bd10      	pop	{r4, pc}
 800e17e:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
 800e182:	f803 1d01 	strb.w	r1, [r3, #-1]!
 800e186:	e7f7      	b.n	800e178 <memmove+0x24>

0800e188 <__malloc_lock>:
__malloc_lock():
 800e188:	4801      	ldr	r0, [pc, #4]	; (800e190 <__malloc_lock+0x8>)
 800e18a:	f7ff b892 	b.w	800d2b2 <__retarget_lock_acquire_recursive>
 800e18e:	bf00      	nop
 800e190:	2000c040 	.word	0x2000c040

0800e194 <__malloc_unlock>:
__malloc_unlock():
 800e194:	4801      	ldr	r0, [pc, #4]	; (800e19c <__malloc_unlock+0x8>)
 800e196:	f7ff b88d 	b.w	800d2b4 <__retarget_lock_release_recursive>
 800e19a:	bf00      	nop
 800e19c:	2000c040 	.word	0x2000c040

0800e1a0 <_realloc_r>:
_realloc_r():
 800e1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1a2:	4607      	mov	r7, r0
 800e1a4:	4614      	mov	r4, r2
 800e1a6:	460e      	mov	r6, r1
 800e1a8:	b921      	cbnz	r1, 800e1b4 <_realloc_r+0x14>
 800e1aa:	4611      	mov	r1, r2
 800e1ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e1b0:	f7ff b8d8 	b.w	800d364 <_malloc_r>
 800e1b4:	b922      	cbnz	r2, 800e1c0 <_realloc_r+0x20>
 800e1b6:	f7ff f887 	bl	800d2c8 <_free_r>
 800e1ba:	4625      	mov	r5, r4
 800e1bc:	4628      	mov	r0, r5
 800e1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1c0:	f000 f848 	bl	800e254 <_malloc_usable_size_r>
 800e1c4:	42a0      	cmp	r0, r4
 800e1c6:	d20f      	bcs.n	800e1e8 <_realloc_r+0x48>
 800e1c8:	4621      	mov	r1, r4
 800e1ca:	4638      	mov	r0, r7
 800e1cc:	f7ff f8ca 	bl	800d364 <_malloc_r>
 800e1d0:	4605      	mov	r5, r0
 800e1d2:	2800      	cmp	r0, #0
 800e1d4:	d0f2      	beq.n	800e1bc <_realloc_r+0x1c>
 800e1d6:	4631      	mov	r1, r6
 800e1d8:	4622      	mov	r2, r4
 800e1da:	f7fe fec9 	bl	800cf70 <memcpy>
 800e1de:	4631      	mov	r1, r6
 800e1e0:	4638      	mov	r0, r7
 800e1e2:	f7ff f871 	bl	800d2c8 <_free_r>
 800e1e6:	e7e9      	b.n	800e1bc <_realloc_r+0x1c>
 800e1e8:	4635      	mov	r5, r6
 800e1ea:	e7e7      	b.n	800e1bc <_realloc_r+0x1c>

0800e1ec <_read_r>:
_read_r():
 800e1ec:	b538      	push	{r3, r4, r5, lr}
 800e1ee:	4c07      	ldr	r4, [pc, #28]	; (800e20c <_read_r+0x20>)
 800e1f0:	4605      	mov	r5, r0
 800e1f2:	4608      	mov	r0, r1
 800e1f4:	4611      	mov	r1, r2
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	6022      	str	r2, [r4, #0]
 800e1fa:	461a      	mov	r2, r3
 800e1fc:	f7fe f8df 	bl	800c3be <_read>
 800e200:	1c43      	adds	r3, r0, #1
 800e202:	d102      	bne.n	800e20a <_read_r+0x1e>
 800e204:	6823      	ldr	r3, [r4, #0]
 800e206:	b103      	cbz	r3, 800e20a <_read_r+0x1e>
 800e208:	602b      	str	r3, [r5, #0]
 800e20a:	bd38      	pop	{r3, r4, r5, pc}
 800e20c:	20008074 	.word	0x20008074

0800e210 <_fstat_r>:
_fstat_r():
 800e210:	b538      	push	{r3, r4, r5, lr}
 800e212:	4c07      	ldr	r4, [pc, #28]	; (800e230 <_fstat_r+0x20>)
 800e214:	2300      	movs	r3, #0
 800e216:	4605      	mov	r5, r0
 800e218:	4608      	mov	r0, r1
 800e21a:	4611      	mov	r1, r2
 800e21c:	6023      	str	r3, [r4, #0]
 800e21e:	f7fe f8c5 	bl	800c3ac <_fstat>
 800e222:	1c43      	adds	r3, r0, #1
 800e224:	d102      	bne.n	800e22c <_fstat_r+0x1c>
 800e226:	6823      	ldr	r3, [r4, #0]
 800e228:	b103      	cbz	r3, 800e22c <_fstat_r+0x1c>
 800e22a:	602b      	str	r3, [r5, #0]
 800e22c:	bd38      	pop	{r3, r4, r5, pc}
 800e22e:	bf00      	nop
 800e230:	20008074 	.word	0x20008074

0800e234 <_isatty_r>:
_isatty_r():
 800e234:	b538      	push	{r3, r4, r5, lr}
 800e236:	4c06      	ldr	r4, [pc, #24]	; (800e250 <_isatty_r+0x1c>)
 800e238:	2300      	movs	r3, #0
 800e23a:	4605      	mov	r5, r0
 800e23c:	4608      	mov	r0, r1
 800e23e:	6023      	str	r3, [r4, #0]
 800e240:	f7fe f8b9 	bl	800c3b6 <_isatty>
 800e244:	1c43      	adds	r3, r0, #1
 800e246:	d102      	bne.n	800e24e <_isatty_r+0x1a>
 800e248:	6823      	ldr	r3, [r4, #0]
 800e24a:	b103      	cbz	r3, 800e24e <_isatty_r+0x1a>
 800e24c:	602b      	str	r3, [r5, #0]
 800e24e:	bd38      	pop	{r3, r4, r5, pc}
 800e250:	20008074 	.word	0x20008074

0800e254 <_malloc_usable_size_r>:
_malloc_usable_size_r():
 800e254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e258:	1f18      	subs	r0, r3, #4
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	bfbc      	itt	lt
 800e25e:	580b      	ldrlt	r3, [r1, r0]
 800e260:	18c0      	addlt	r0, r0, r3
 800e262:	4770      	bx	lr

0800e264 <_init>:
_init():
 800e264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e266:	bf00      	nop
 800e268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e26a:	bc08      	pop	{r3}
 800e26c:	469e      	mov	lr, r3
 800e26e:	4770      	bx	lr

0800e270 <_fini>:
_fini():
 800e270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e272:	bf00      	nop
 800e274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e276:	bc08      	pop	{r3}
 800e278:	469e      	mov	lr, r3
 800e27a:	4770      	bx	lr
